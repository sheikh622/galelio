{"version":3,"sources":["views/pages/superAdmin/nftManagement/component/mainCard.js","views/pages/superAdmin/nftManagement/component/mintNftDialog.js","views/pages/superAdmin/nftManagement/component/rejectNftDialog.js","views/pages/superAdmin/nftManagement/component/nftCard.js","views/pages/superAdmin/nftManagement/index.js"],"names":["headerSX","mr","MainCard","forwardRef","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","Card","borderColor","palette","mode","background","default","primary","CardHeader","action","Typography","variant","Divider","CardContent","className","auth","Buffer","from","projectId","toString","client","create","host","port","protocol","headers","authorization","Transition","props","Slide","direction","MintNftDialog","open","setOpen","page","limit","search","loader","setLoader","nftData","type","dispatch","useDispatch","walletAddress","useSelector","state","handleClose","directMintThenList","result","a","nftTokens","NFTTokens","contractAddress","Category","BrandCategories","nftId","id","categoryId","CategoryId","brandId","BrandId","tokenIdArray","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","getAddress","address","nft","Contract","NFTAbi","abi","tokenUri","path","map","uriArray","length","mint","catch","error","toast","message","wait","mintedNFT","transactionHash","parseInt","events","args","push","tokenId","nftDataArray","mintNft","signerAddress","bulkMint","counter","myNftTokenIdArray","i","data","index","handleDirectMint","image","asset","price","name","description","projectName","mintedDate","Date","valueOf","categoryName","brandName","Brand","metaData","NFTMetaData","add","JSON","stringify","handleLazyMint","uri","token","domain","version","verifyingContract","chainId","types","LazyNFTVoucher","prices","utils","parseEther","voucher","_signTypedData","signature","tokenPrice","erc20Address","lazyMintNft","Dialog","TransitionComponent","keepMounted","DialogTitle","DialogContent","component","DialogActions","pr","Button","size","Oval","ariaLabel","height","width","strokeWidth","strokeWidthSecondary","color","secondaryColor","dark","onClick","undefined","mintType","RejectNftDialog","onClose","DialogContentText","rejectNft","NftCard","useState","openMint","setOpenMint","rejectMintOpen","setRejectMintOpen","position","transform","transition","CardMedia","p","Grid","container","spacing","item","xs","textDecoration","mt","overflow","currencyType","Stack","justifyContent","alignItems","status","marginRight","console","log","style","typeArray","value","label","NftManagement","navigate","useNavigate","location","useLocation","nftList","nftReducer","nftListSuperAdmin","setType","setSearch","setPage","setLimit","anchorEl","setAnchorEl","useEffect","getAllNftSuperAdmin","brandData","marginBottom","gridSpacing","fontWeight","TextField","select","fullWidth","onChange","event","target","option","MenuItem","textAlign","nfts","rows","mb","pl","sm","md","lg","Pagination","showFirstButton","showLastButton","count","pages","newPage","grey","endIcon","currentTarget","Menu","Boolean","anchorOrigin","vertical","horizontal","transformOrigin","e","padding"],"mappings":"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","file":"static/js/10.5696b0eb.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.mode === 'dark' ? theme.palette.background.default : theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow\r\n                            ? shadow ||\r\n                              (theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' : '0 2px 14px 0 rgb(32 40 45 / 8%)')\r\n                            : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { ethers, providers } from 'ethers';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, Typography } from '@mui/material';\r\n// import { Oval } from 'react-loader-spinner';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { mintNft, lazyMintNft } from 'redux/nftManagement/actions';\r\nimport NFTAbi from '../../../../../contractAbi/NFT.json';\r\nimport { create } from 'ipfs-http-client';\r\nimport { Buffer } from 'buffer';\r\n\r\nconst projectId = '2GGvNmnqRYjnz7iJU9Kn6Nnw97C';\r\nconst projectSecret = 'a09de1e8b20292cd87460290de554003';\r\nconst auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');\r\n\r\nconst client = create({\r\n    host: 'ipfs.infura.io',\r\n    port: 5001,\r\n    protocol: 'https',\r\n    headers: {\r\n        authorization: auth\r\n    }\r\n});\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nexport default function MintNftDialog({ open, setOpen, page, limit, search, loader, setLoader, nftData, type }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const walletAddress = useSelector((state) => state.auth.walletAddress);\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setLoader(false);\r\n    };\r\n\r\n    const directMintThenList = async (result) => {\r\n        let nftTokens = nftData.NFTTokens;\r\n        let contractAddress = nftData.Category.BrandCategories[0].contractAddress;\r\n        let nftId = nftData.id;\r\n        let categoryId = nftData.CategoryId;\r\n        let brandId = nftData.BrandId;\r\n\r\n        let tokenIdArray = [];\r\n        let transactionHash;\r\n        try {\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const address = await signer.getAddress();\r\n            const nft = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n            const tokenUri = `https://galileoprotocol.infura-ipfs.io/ipfs/${result.path}`;\r\n            const uriArray = await nftTokens.map(() => {\r\n                return tokenUri;\r\n            });\r\n\r\n            if (uriArray.length == 1) {\r\n                let mintedNFT = await (\r\n                    await nft.mint(tokenUri).catch((error) => {\r\n                        toast.error(`${error.message}`);\r\n                    })\r\n                ).wait();\r\n\r\n                transactionHash = `https://goerli.etherscan.io/tx/${mintedNFT.transactionHash}`;\r\n\r\n                const id = parseInt(mintedNFT.events[0].args[2]);\r\n\r\n                tokenIdArray.push({\r\n                    id: nftTokens[0].id,\r\n                    tokenId: id\r\n                });\r\n                let nftDataArray = [];\r\n                nftDataArray.push({\r\n                    nftId: nftId,\r\n                    tokenUri: tokenUri\r\n                });\r\n\r\n                dispatch(\r\n                    mintNft({\r\n                        nftDataArray: nftDataArray,\r\n                        tokenIdArray: tokenIdArray,\r\n                        transactionHash: transactionHash,\r\n                        signerAddress: address,\r\n                        brandId: brandId,\r\n                        categoryId: categoryId,\r\n                        type: type,\r\n                        search: search,\r\n                        page: page,\r\n                        limit: limit,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            } else if (uriArray.length > 1) {\r\n                let mintedNFT = await (\r\n                    await nft.bulkMint(uriArray).catch((error) => {\r\n                        toast.error('NFT minting  unsuccessfull');\r\n                    })\r\n                ).wait();\r\n\r\n                transactionHash = `https://goerli.etherscan.io/tx/${mintedNFT.transactionHash}`;\r\n\r\n                let counter = 0;\r\n                let myNftTokenIdArray = [];\r\n                for (let i = 0; i < uriArray.length; i++) {\r\n                    myNftTokenIdArray.push(mintedNFT.events[counter].args[2].toString());\r\n\r\n                    counter = counter + 1;\r\n                }\r\n\r\n                nftTokens.map((data, index) => {\r\n                    tokenIdArray.push({\r\n                        id: data.id,\r\n                        tokenId: myNftTokenIdArray[index]\r\n                    });\r\n                });\r\n\r\n                let nftDataArray = [];\r\n                nftDataArray.push({\r\n                    nftId: nftId,\r\n                    tokenUri: tokenUri\r\n                });\r\n\r\n                dispatch(\r\n                    mintNft({\r\n                        nftDataArray: nftDataArray,\r\n                        tokenIdArray: tokenIdArray,\r\n                        transactionHash: transactionHash,\r\n                        signerAddress: address,\r\n                        brandId: brandId,\r\n                        categoryId: categoryId,\r\n                        type: type,\r\n                        search: search,\r\n                        page: page,\r\n                        limit: limit,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            }\r\n        } catch (error) {\r\n            setLoader(false);\r\n        }\r\n    };\r\n\r\n    const handleDirectMint = async () => {\r\n        let image = nftData.asset;\r\n        let price = nftData.price;\r\n        let name = nftData.name;\r\n        let description = nftData.description;\r\n        let projectName = 'Galelio';\r\n        let mintedDate = new Date().valueOf();\r\n        let categoryName = nftData.Category.name;\r\n        let brandName = nftData.Brand.name;\r\n        let metaData = nftData.NFTMetaData;\r\n        // setLoader(true);\r\n        if (!image || !price || !name || !description) return;\r\n        try {\r\n            const result = await client.add(\r\n                JSON.stringify({ projectName, brandName, categoryName, image, name, description, price, mintedDate, metaData })\r\n            );\r\n            directMintThenList(result);\r\n        } catch (error) {\r\n            setLoader(false);\r\n        }\r\n    };\r\n\r\n    const handleLazyMint = async () => {\r\n        // setLoader(true);\r\n        let brandId = nftData.BrandId;\r\n        let categoryId = nftData.CategoryId;\r\n        let nftId = nftData.id;\r\n        let image = nftData.asset;\r\n        let price = nftData.price;\r\n        let name = nftData.name;\r\n        let description = nftData.description;\r\n        let projectName = 'Galelio';\r\n        let mintedDate = new Date().valueOf();\r\n        let categoryName = nftData.Category.name;\r\n        let brandName = nftData.Brand.name;\r\n        let metaData = nftData.NFTMetaData;\r\n        let contractAddress = nftData.Category.BrandCategories[0].contractAddress;\r\n        let nftTokens = nftData.NFTTokens;\r\n\r\n        const result = await client.add(\r\n            JSON.stringify({ projectName, brandName, categoryName, image, name, description, price, mintedDate, metaData })\r\n        );\r\n        const uri = `https://galileoprotocol.infura-ipfs.io/ipfs/${result.path}`;\r\n\r\n        let token = '0x9C7F2b187d24147F1f993E932A16e59111675867';\r\n        const SIGNING_DOMAIN = 'Voucher';\r\n        const SIGNATURE_VERSION = '4';\r\n        const chainId = 5;\r\n\r\n        const domain = {\r\n            name: SIGNING_DOMAIN,\r\n            version: SIGNATURE_VERSION,\r\n            verifyingContract: contractAddress,\r\n            chainId\r\n        };\r\n        const types = {\r\n            LazyNFTVoucher: [\r\n                { name: 'uri', type: 'string' },\r\n                { name: 'price', type: 'uint256' },\r\n                { name: 'token', type: 'address' }\r\n            ]\r\n        };\r\n        const prices = ethers.utils.parseEther(price.toString());\r\n        const voucher = { uri, price: prices, token };\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const signature = await signer._signTypedData(domain, types, voucher);\r\n        const signerAddr = '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651';\r\n\r\n        let nftDataArray = [\r\n            {\r\n                nftId: nftId,\r\n                tokenUri: uri,\r\n                tokenPrice: prices.toString(),\r\n                signerAddress: signerAddr // save wallet address\r\n            }\r\n        ];\r\n\r\n        let tokenIdArray = nftTokens.map((data) => {\r\n            return {\r\n                id: data.id,\r\n                signature: signature,\r\n                erc20Address: token\r\n            };\r\n        });\r\n\r\n        dispatch(\r\n            lazyMintNft({\r\n                nftDataArray: nftDataArray,\r\n                tokenIdArray: tokenIdArray,\r\n                brandId: brandId,\r\n                categoryId: categoryId,\r\n                type: type,\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                handleClose: handleClose\r\n            })\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                className=\"responsiveDialog\"\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\"> Mint NFT</DialogTitle>\r\n                <DialogContent>\r\n                    <Typography variant=\"body2\" component=\"span\">\r\n                        Are you sure you want to mint this NFT?\r\n                    </Typography>\r\n                </DialogContent>\r\n\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    {loader ? (\r\n                        <Button variant=\"contained\" size=\"small\">\r\n                            <Oval\r\n                                ariaLabel=\"loading-indicator\"\r\n                                height={20}\r\n                                width={20}\r\n                                strokeWidth={5}\r\n                                strokeWidthSecondary={1}\r\n                                color=\"blue\"\r\n                                secondaryColor=\"white\"\r\n                            />\r\n                        </Button>\r\n                    ) : (\r\n                        <>\r\n                            <Button\r\n                                sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                                onClick={handleClose}\r\n                                color=\"secondary\"\r\n                            >\r\n                                No\r\n                            </Button>\r\n\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"small\"\r\n                                onClick={() => {\r\n                                    if (!loader) {\r\n                                        if (walletAddress == undefined) {\r\n                                            setOpen(false);\r\n                                            toast.error('Connect Metamask');\r\n                                        } else {\r\n                                            if (nftData.mintType == 'directMint') {\r\n                                                handleDirectMint();\r\n                                            } else if (nftData.mintType == 'lazyMint') {\r\n                                                handleLazyMint();\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }}\r\n                            >\r\n                                {' '}\r\n                                Yes\r\n                            </Button>\r\n                        </>\r\n                    )}\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { rejectNft } from 'redux/nftManagement/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function RejectNftDialog({ open, setOpen, page, limit, search, loader, setLoader, nftData, type }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Reject NFT</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to reject this NFT?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                rejectNft({\r\n                                    id: nftData.id,\r\n                                    categoryId: nftData.CategoryId,\r\n                                    brandId: nftData.BrandId,\r\n                                    type: type,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { Button, CardContent, CardMedia, Grid, Stack, Typography, Tooltip } from '@mui/material';\r\nimport MainCard from './mainCard';\r\nimport MintNftDialog from './mintNftDialog';\r\nimport RejectNftDialog from './rejectNftDialog';\r\n\r\nconst NftCard = ({ nftData, search, page, limit, type }) => {\r\n    const [loader, setLoader] = useState(false);\r\n    const [openMint, setOpenMint] = useState(false);\r\n    const [rejectMintOpen, setRejectMintOpen] = useState(false);\r\n    return (\r\n        <>\r\n            <RejectNftDialog\r\n                nftData={nftData}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={rejectMintOpen}\r\n                setOpen={setRejectMintOpen}\r\n            />\r\n            <MintNftDialog\r\n                nftData={nftData}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={openMint}\r\n                setOpen={setOpenMint}\r\n            />\r\n            <MainCard\r\n                content={false}\r\n                boxShadow\r\n                sx={{\r\n                    position: 'relative',\r\n                    '&:hover': {\r\n                        transform: 'scale3d(1.02, 1.02, 1)',\r\n                        transition: 'all .4s ease-in-out'\r\n                    }\r\n                }}\r\n            >\r\n                <CardMedia sx={{ height: 220 }} image={nftData.asset} />\r\n                <CardContent sx={{ p: 2 }}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={8}>\r\n                            <Typography variant=\"subtitle1\" sx={{ textDecoration: 'none' }}>\r\n                                {nftData.name}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <Typography variant=\"body1\" sx={{ textDecoration: 'none' }}>\r\n                                {nftData.mintType == 'lazyMint' ? 'Lazy Mint' : 'Mint'}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12} mt={-1.5}>\r\n                            <Typography\r\n                                variant=\"body1\"\r\n                                sx={{\r\n                                    overflow: 'hidden',\r\n                                    height: 30\r\n                                }}\r\n                            >\r\n                                {nftData.description}\r\n                            </Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6}>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\">\r\n                                    {nftData.price} {nftData.currencyType}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\">{nftData.NFTTokens.length} Items</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\">\r\n                                {nftData.status == 'REQUESTED' && (\r\n                                    <Button\r\n                                        variant=\"text\"\r\n                                        color=\"primary\"\r\n                                        sx={{ marginRight: '5px' }}\r\n                                        onClick={() => {\r\n                                            console.log({ nftData });\r\n                                            setRejectMintOpen(true);\r\n                                        }}\r\n                                    >\r\n                                        <Typography style={{ textDecoration: 'underline' }}> Reject</Typography>\r\n                                    </Button>\r\n                                )}\r\n\r\n                                {nftData.status == 'REQUESTED' && (\r\n                                    <Button\r\n                                        variant=\"text\"\r\n                                        color=\"primary\"\r\n                                        sx={{ marginRight: '5px' }}\r\n                                        onClick={() => {\r\n                                            console.log({ nftData });\r\n                                            setOpenMint(true);\r\n                                        }}\r\n                                    >\r\n                                        <Typography style={{ textDecoration: 'underline' }}> Mint</Typography>\r\n                                    </Button>\r\n                                )}\r\n                            </Stack>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NftCard;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Grid, Typography, Pagination, Menu, MenuItem, TextField } from '@mui/material';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { getAllNftSuperAdmin } from '../../../../redux/nftManagement/actions';\r\nimport NftCard from './component/nftCard';\r\nconst typeArray = [\r\n    {\r\n        value: 'all',\r\n        label: \"All NFT'S\"\r\n    },\r\n    {\r\n        value: 'directMint',\r\n        label: 'Minted NFTS'\r\n    },\r\n    {\r\n        value: 'lazyMint',\r\n        label: \"Lazy Minted NFT'S\"\r\n    },\r\n    {\r\n        value: 'waiting',\r\n        label: 'Waiting For approval'\r\n    },\r\n    {\r\n        value: 'rejected',\r\n        label: 'Rejected NFTS'\r\n    }\r\n];\r\n\r\nconst NftManagement = () => {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n    const nftList = useSelector((state) => state.nftReducer.nftListSuperAdmin);\r\n    const [type, setType] = useState('all');\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(12);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const handleType = (event) => {\r\n        setType(event.target.value);\r\n        setLimit(12);\r\n        setSearch('');\r\n        setPage(1);\r\n    };\r\n\r\n    console.log(\"location.state\",location.state)\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllNftSuperAdmin({\r\n                brandId: location.state.brandData.BrandId,\r\n                categoryId: location.state.brandData.CategoryId,\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                type: type\r\n            })\r\n        );\r\n    }, [, search, page, limit, type]);\r\n\r\n    return (\r\n        <>\r\n         \r\n            <MainCard\r\n                className=\"yellow\"\r\n                style={{ marginBottom: '15px' }}\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={3}>\r\n                            <Typography variant=\"h3\" sx={{ fontWeight: 500, color: 'cadetblue' }}>\r\n                                NFT Management\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <TextField\r\n                                className=\"selectField\"\r\n                                id=\"outlined-select-budget\"\r\n                                select\r\n                                fullWidth\r\n                                label=\"Select Type\"\r\n                                value={type}\r\n                                onChange={handleType}\r\n                            >\r\n                                {typeArray.map((option, index) => (\r\n                                    <MenuItem key={index} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={6} style={{ textAlign: 'end' }}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"small\"\r\n                                onClick={() => {\r\n                                    navigate('/brands');\r\n                                }}\r\n                            >\r\n                                back\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            ></MainCard>\r\n            <Grid container>\r\n                {nftList && nftList.nfts && nftList.nfts.rows && nftList.nfts.rows.length > 0 ? (\r\n                    <>\r\n                        {' '}\r\n                        <Grid container spacing={gridSpacing} mb={4} pl={2}>\r\n                            {nftList.nfts.rows &&\r\n                                nftList.nfts.rows.map((nft, index) => {\r\n                                    return (\r\n                                        <Grid key={index} item xs={12} sm={6} md={4} lg={3}>\r\n                                            <NftCard\r\n                                                nftData={nft}\r\n                                                search={search}\r\n                                                page={page}\r\n                                                limit={limit}\r\n                                                type={type}\r\n                                            />\r\n                                        </Grid>\r\n                                    );\r\n                                })}\r\n                        </Grid>\r\n                        <Grid item xs={12} sx={{ p: 3 }}>\r\n                            <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                                <Grid item>\r\n                                    <Pagination\r\n                                        page={page}\r\n                                        color=\"primary\"\r\n                                        showFirstButton\r\n                                        showLastButton\r\n                                        count={nftList && nftList.pages}\r\n                                        onChange={(event, newPage) => {\r\n                                            setPage(newPage);\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        size=\"large\"\r\n                                        sx={{ color: theme.palette.grey[900] }}\r\n                                        color=\"secondary\"\r\n                                        endIcon={<ExpandMoreRoundedIcon />}\r\n                                        onClick={handleClick}\r\n                                    >\r\n                                        {limit} Rows\r\n                                    </Button>\r\n                                    <Menu\r\n                                        id=\"menu-user-list-style1\"\r\n                                        anchorEl={anchorEl}\r\n                                        keepMounted\r\n                                        open={Boolean(anchorEl)}\r\n                                        onClose={handleClose}\r\n                                        variant=\"selectedMenu\"\r\n                                        anchorOrigin={{\r\n                                            vertical: 'top',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                        transformOrigin={{\r\n                                            vertical: 'bottom',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                    >\r\n                                        <MenuItem\r\n                                            value={12}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleClose();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            12 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={24}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleClose();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            24 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={36}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleClose();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            36 Rows{' '}\r\n                                        </MenuItem>\r\n                                    </Menu>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Grid item>\r\n                            <Typography style={{ padding: '20px' }}> No Data Available</Typography>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NftManagement;\r\n"],"sourceRoot":""}