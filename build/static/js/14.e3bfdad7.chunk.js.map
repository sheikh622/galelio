{"version":3,"sources":["views/pages/superAdmin/brands/brandAdmin/component/deleteBrandAdminDialog.js","views/pages/superAdmin/brands/brandAdmin/component/addUpdateBrandAdmin.js","views/pages/superAdmin/brands/brandAdmin/component/changeBrandAdminStatus.js","views/pages/superAdmin/brands/brandAdmin/component/brandAdminTable.js","views/pages/superAdmin/brands/brandAdmin/index.js","ui-component/extended/Chip.js"],"names":["Transition","forwardRef","props","ref","Slide","direction","DeleteBrandAdminDialog","open","setOpen","page","limit","search","brandAdminData","theme","useTheme","dispatch","useDispatch","handleClose","Dialog","TransitionComponent","keepMounted","onClose","DialogTitle","id","className","DialogContent","DialogContentText","Typography","variant","component","DialogActions","sx","pr","Button","color","palette","error","dark","borderColor","onClick","size","deleteBrandAdmin","brandId","AddUpdateBrandAdminDialog","useState","isUpdate","setIsUpdate","showPassword","setShowPassword","useEffect","validationSchema","Yup","default","firstName","required","max","matches","lastName","adminEmail","email","adminPassword","when","is","then","otherwise","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","addBrandAdmin","password","updateBrandAdmin","resetForm","maxWidth","Divider","noValidate","handleSubmit","Grid","container","item","xs","pt","md","lg","InputLabel","htmlFor","TextField","name","value","onChange","handleChange","touched","Boolean","errors","helperText","fullWidth","autoComplete","Input","type","endAdornment","InputAdornment","position","IconButton","onMouseDown","event","preventDefault","display","AnimateButton","my","ml","padding","disableElevation","ChangeBrandAdminStatusDialog","isActive","changeBrandAdminStatus","BrandAdminTable","addUpdateOpen","setAddUpdateOpen","brandAdminList","setBrandAdminData","deleteOpen","setDeleteOpen","changeStatusOpen","setChangeStatusOpen","detailId","TableContainer","undefined","admins","justifyContent","width","m","CircularProgress","disableShrink","count","Table","TableHead","TableRow","TableCell","align","borderBottom","TableBody","map","row","index","textTransform","Chip","label","chipcolor","Stack","alignItems","Tooltip","placement","title","BrandId","fontSize","orange","main","background","light","style","pl","colSpan","spacing","fontWeight","BrandAdmin","location","useLocation","navigate","useNavigate","useSelector","state","brandadminReducer","brandadminsList","setSearch","setPage","brandData","getAllBrandAdmin","MainCard","marginTop","marginLeft","secondary","float","content","OutlinedInput","placeholder","startAdornment","stroke","e","target","textAlign","p","gridSpacing","Pagination","showFirstButton","showLastButton","pages","newPage","disabled","others","defaultSX","mode","primary","bgcolor","outlineSX","border","success","warning","grey","SX"],"mappings":"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","file":"static/js/14.e3bfdad7.chunk.js","sourcesContent":["import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteBrandAdmin } from '../../../../../../redux/brandAdmin/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteBrandAdminDialog({ open, setOpen, page, limit, search, brandAdminData }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\"   className=\"statusHeading\">Delete Brand Admin</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\"  className=\"statustypo\">\r\n                            Are you sure you want to delete this Admin?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\" className='buttonSize' size='large' \r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        className='buttonSize' size='large' \r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteBrandAdmin({\r\n                                    id: brandAdminData.id,\r\n                                    brandId: brandAdminData.brandId,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { updateBrandAdmin, addBrandAdmin } from 'redux/brandAdmin/actions';\r\nimport Visibility from '@mui/icons-material/Visibility';\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\r\nimport { Button, InputLabel,InputAdornment,IconButton, Dialog, DialogActions,Input, DialogContent, DialogTitle, Slide, TextField, Divider, Grid } from '@mui/material';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nexport default function AddUpdateBrandAdminDialog({ open, setOpen, brandAdminData, page, limit, search }) {\r\n    const dispatch = useDispatch();\r\n    const [isUpdate, setIsUpdate] = useState(false);\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n    useEffect(() => {\r\n        if (brandAdminData.id == null) {\r\n            setIsUpdate(false);\r\n        } else {\r\n            setIsUpdate(true);\r\n        }\r\n    }, [brandAdminData]);\r\n\r\n    const validationSchema = Yup.object({\r\n        isUpdate: Yup.boolean().default(isUpdate),\r\n        firstName: Yup.string()\r\n            .required('First Name is required!')\r\n            .max(42, 'First Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid First name'),\r\n        lastName: Yup.string()\r\n            .required('Last Name is required!')\r\n            .max(42, 'Last Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Last name'),\r\n        adminEmail: Yup.string().email('Enter valid email').max(255).required('Email is required!'),\r\n\r\n        adminPassword: Yup.mixed().when(['isUpdate'], {\r\n            is: false,\r\n            then: Yup.string()\r\n                .required('Password is required!')\r\n                .matches(\r\n                    /^(?=(?:.*[A-Z].*){1})(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\r\n                    'Must Contain 8 Characters,  One Uppercase, One Lowercase, One Number and one special case Character'\r\n                ),\r\n            otherwise: Yup.string().matches(\r\n                /^(?=(?:.*[A-Z].*){1})(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\r\n                'Must Contain 8 Characters,  One Uppercase, One Lowercase, One Number and one special case Character'\r\n            )\r\n        })\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: brandAdminData,\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            if (brandAdminData.id == null) {\r\n                dispatch(\r\n                    addBrandAdmin({\r\n                        brandId: brandAdminData.brandId,\r\n                        firstName: values.firstName,\r\n                        lastName: values.lastName,\r\n                        email: values.adminEmail,\r\n                        password: values.adminPassword,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            } else {\r\n                dispatch(\r\n                    updateBrandAdmin({\r\n                        id: brandAdminData.id,\r\n                        brandId: brandAdminData.brandId,\r\n                        firstName: values.firstName,\r\n                        lastName: values.lastName,\r\n                        email: values.adminEmail,\r\n                        password: values.adminPassword,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title \"\r\n                className=\"brandDialog dialog\"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\" className=\"adminname\" >{brandAdminData.id == null ? 'Add Brand Admin ' : ' Update Brand Admin '}</DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <form noValidate onSubmit={formik.handleSubmit} id=\"validation-forms\">\r\n                        <Grid container>\r\n                            <>\r\n                                <Grid item xs={6} pt={2} md={12} lg={12}>\r\n                                    <InputLabel htmlFor=\"outlined-adornment-password-login\" className=\"textfieldStyle\">First Name</InputLabel>\r\n                                    <TextField\r\n                                        id=\"firstName\"\r\n                                        name=\"firstName\"\r\n                                        value={formik.values.firstName}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.firstName && Boolean(formik.errors.firstName)}\r\n                                        helperText={formik.touched.firstName && formik.errors.firstName}\r\n                                        fullWidth\r\n                                        autoComplete=\"given-name\"\r\n                                        variant=\"standard\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6} pt={2} md={12} lg={12}>\r\n                                    <InputLabel htmlFor=\"outlined-adornment-password-login\" className=\"textfieldStyle\">Last Name</InputLabel>\r\n                                    <TextField\r\n                                        id=\"lastName\"\r\n                                        name=\"lastName\"\r\n                                        value={formik.values.lastName}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.lastName && Boolean(formik.errors.lastName)}\r\n                                        helperText={formik.touched.lastName && formik.errors.lastName}\r\n                                        fullWidth\r\n                                        autoComplete=\"given-name\"\r\n                                        variant=\"standard\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6} pt={2}  md={12} lg={12}>\r\n                                    <InputLabel htmlFor=\"outlined-adornment-password-login\" className=\"textfieldStyle\">Email</InputLabel>\r\n                                    <TextField\r\n                                        id=\"adminEmail\"\r\n                                        name=\"adminEmail\"\r\n                                        value={formik.values.adminEmail}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.adminEmail && Boolean(formik.errors.adminEmail)}\r\n                                        helperText={formik.touched.adminEmail && formik.errors.adminEmail}\r\n                                        fullWidth\r\n                                        autoComplete=\"given-name\"\r\n                                        variant=\"standard\"\r\n                                    />\r\n                                </Grid>\r\n                                \r\n                                <Grid item xs={6} pt={2} md={12} lg={12}>\r\n                      {/*           <InputLabel className=\"textfieldStyle\" htmlFor=\"standard-adornment-password\">Password</InputLabel>\r\n                                <Input\r\n                                  id=\"standard-adornment-password adminPassword\"\r\n                                  type={showPassword ? 'text' : 'password'}\r\n                                  name=\"adminPassword\"\r\n                                  value={formik.values.adminPassword}\r\n                                  onChange={formik.handleChange}\r\n                                  error={formik.touched.adminPassword && Boolean(formik.errors.adminPassword)}\r\n                                  helperText={formik.touched.adminPassword && formik.errors.adminPassword}\r\n                                  fullWidth\r\n                                  autoComplete=\"given-name\"\r\n                                  endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                      <IconButton\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={handleClickShowPassword}\r\n                                        onMouseDown={handleMouseDownPassword}\r\n                                      >\r\n                                        {showPassword ? <Visibility /> :  <VisibilityOff />}\r\n                                      </IconButton>\r\n                                    </InputAdornment>\r\n                                  }\r\n                                /> */}\r\n                                    <InputLabel  htmlFor=\"standard-adornment-password\"\r\n                                    className=\"textfieldStyle\">Password</InputLabel>\r\n                                    <Input\r\n                                        id=\"standard-adornment-password adminPassword\"\r\n                                        name=\"adminPassword\"\r\n                                        type={showPassword ? 'text' : 'password'}\r\n                                          value={formik.values.adminPassword}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.adminPassword && Boolean(formik.errors.adminPassword)}\r\n                                        helperText={formik.touched.adminPassword && formik.errors.adminPassword}\r\n                                        fullWidth\r\n                                        autoComplete=\"\"\r\n                                        variant=\"standard\"\r\n                                        endAdornment={\r\n                                            <InputAdornment position=\"end\">\r\n                                              <IconButton\r\n                                                aria-label=\"toggle password visibility\"\r\n                                                onClick={handleClickShowPassword}\r\n                                                onMouseDown={handleMouseDownPassword}\r\n                                              >\r\n                                                {showPassword ? <Visibility /> :  <VisibilityOff />}\r\n                                              </IconButton>\r\n                                            </InputAdornment>\r\n                                          }\r\n                                    />\r\n                                </Grid>\r\n                            </>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n\r\n                <DialogActions sx={{ display:'block'}}>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{  my: 1, ml: 1,  padding: {md:'6px 124px', lg:'6px 124px'}  }}\r\n                            type=\"submit\"\r\n                            className='buttons' size='large' \r\n                            disableElevation\r\n                            onClick={() => {\r\n                                formik.handleSubmit();\r\n                            }}\r\n                        >\r\n                            {brandAdminData.id == null ? 'Create ' : 'Update '}\r\n                        </Button>\r\n                    </AnimateButton>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 1, ml: 0,  padding: {md:'6px 124px', lg:'6px 124px'} , color: '#fff' }}\r\n                            onClick={handleClose}\r\n                            color=\"secondary\"\r\n                            className='buttons' size='large' \r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </AnimateButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { changeBrandAdminStatus } from 'redux/brandAdmin/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function ChangeBrandAdminStatusDialog({ open, setOpen, page, limit, search, brandAdminData }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\"   className=\"statusHeading\">Change Brand Admin Status </DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\"  className=\"statustypo\">\r\n                            {brandAdminData.isActive == false\r\n                                ? 'Are you sure you want to unblock this Admin?'\r\n                                : 'Are you sure you want to block  this Admin?'}\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\" className='buttonSize' size='large' \r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        className='buttonSize' size='large' \r\n                        onClick={() => {\r\n                            dispatch(\r\n                                changeBrandAdminStatus({\r\n                                    id: brandAdminData.id,\r\n                                    brandId: brandAdminData.brandId,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport {\r\n    Divider,\r\n    Typography,\r\n    IconButton,\r\n    Grid,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    Button,\r\n    TableRow,\r\n    Tooltip,\r\n    Stack,\r\n    CircularProgress \r\n} from '@mui/material';\r\nimport DeleteBrandAdminDialog from './deleteBrandAdminDialog';\r\nimport Chip from 'ui-component/extended/Chip';\r\nimport AddUpdateBrandAdminDialog from './addUpdateBrandAdmin';\r\nimport UpdateIcon from '@mui/icons-material/Update';\r\nimport ChangeBrandAdminStatusDialog from './changeBrandAdminStatus';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport BlockIcon from '@mui/icons-material/Block';\r\n\r\nconst BrandAdminTable = ({ addUpdateOpen, setAddUpdateOpen, search, page, limit, brandAdminList, setBrandAdminData, brandAdminData }) => {\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const theme = useTheme();\r\n\r\n    const [changeStatusOpen, setChangeStatusOpen] = useState(false);\r\n    const [detailId, setDetailId] = useState();\r\n    const openDetails = (id) => {\r\n        if (detailId === id) {\r\n            setDetailId(null);\r\n        } else {\r\n            setDetailId(id);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <TableContainer>\r\n            <AddUpdateBrandAdminDialog\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n                brandAdminData={brandAdminData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n\r\n            <DeleteBrandAdminDialog\r\n                open={deleteOpen}\r\n                setOpen={setDeleteOpen}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n                brandAdminData={brandAdminData}\r\n            />\r\n\r\n            <ChangeBrandAdminStatusDialog\r\n                open={changeStatusOpen}\r\n                setOpen={setChangeStatusOpen}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n                brandAdminData={brandAdminData}\r\n            />\r\n            {brandAdminList?.admins == undefined ? (\r\n                <Grid container justifyContent=\"center\" sx={{ width: '80%', m: '15px auto ' }}>\r\n                    <Grid item>\r\n                        <CircularProgress disableShrink size={'4rem'} />\r\n                    </Grid>\r\n                </Grid>\r\n            ) : (\r\n                <>\r\n                    {brandAdminList.count > 0 ? (\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell align=\"left\" className=\"Tableheading\" sx={{ borderBottom: 'none' }}></TableCell>\r\n                                    <TableCell align=\"left\" className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                                        First Name\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\" className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                                        Last Name\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\" className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                                        Email\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\" className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                                        Status\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\" className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                                        Actions\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody sx={{ padding: '10px' }}>\r\n                                {brandAdminList.admins != undefined &&\r\n                                    brandAdminList.admins.map((row, index) => (\r\n                                        <>\r\n                                            <TableRow>\r\n                                                <TableCell\r\n                                                    align=\"left\"\r\n                                                    className=\"tableName\"\r\n                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                ></TableCell>\r\n                                                <TableCell align=\"left\" className=\"tableName\" sx={{ textTransform: 'capitalize' }}>\r\n                                                    {row.firstName}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"left\" className=\"tableName\" sx={{ textTransform: 'capitalize' }}>\r\n                                                    {row.lastName}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"left\" className=\"tableName\">\r\n                                                    {row.email}\r\n                                                </TableCell>\r\n\r\n                                                <TableCell align=\"left\" sx={{ borderBottom: 'none' }}>\r\n                                                    {row.isActive == false ? (\r\n                                                        <Chip label=\"Blocked\" size=\"small\" chipcolor=\"orange\" />\r\n                                                    ) : (\r\n                                                        <Chip label=\"Unblocked\" size=\"small\" chipcolor=\"success\" />\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"center\" sx={{ borderBottom: 'none' }}>\r\n                                                    <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                                        <Tooltip placement=\"top\" title=\"Change Status\">\r\n                                                            <IconButton\r\n                                                                className=\"color\"\r\n                                                                aria-label=\"Edit\"\r\n                                                                size=\"large\"\r\n                                                                onClick={() => {\r\n                                                                    setChangeStatusOpen(true);\r\n                                                                    setBrandAdminData({\r\n                                                                        id: row.id,\r\n                                                                        brandId: row.BrandId,\r\n                                                                        isActive: row.isActive\r\n                                                                    });\r\n                                                                }}\r\n                                                            >\r\n                                                                <BlockIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                            </IconButton>\r\n                                                        </Tooltip>\r\n\r\n                                                        <Tooltip placement=\"top\" title=\"Edit\">\r\n                                                            <IconButton\r\n                                                                className=\"color\"\r\n                                                                aria-label=\"Edit\"\r\n                                                                size=\"large\"\r\n                                                                onClick={() => {\r\n                                                                    setAddUpdateOpen(true);\r\n                                                                    setBrandAdminData({\r\n                                                                        id: row.id,\r\n                                                                        brandId: row.BrandId,\r\n                                                                        firstName: row.firstName,\r\n                                                                        lastName: row.lastName,\r\n                                                                        adminEmail: row.email,\r\n                                                                        adminPassword: ''\r\n                                                                    });\r\n                                                                }}\r\n                                                            >\r\n                                                                <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                            </IconButton>\r\n                                                        </Tooltip>\r\n                                                        <Tooltip placement=\"top\" title=\"Delete\">\r\n                                                            <IconButton\r\n                                                                color=\"primary\"\r\n                                                                sx={{\r\n                                                                    color: theme.palette.orange.dark,\r\n                                                                    borderColor: theme.palette.orange.main,\r\n                                                                    '&:hover ': { background: theme.palette.orange.light }\r\n                                                                }}\r\n                                                                size=\"large\"\r\n                                                                onClick={() => {\r\n                                                                    setDeleteOpen(true);\r\n                                                                    setBrandAdminData({\r\n                                                                        id: row.id,\r\n                                                                        brandId: row.BrandId\r\n                                                                    });\r\n                                                                }}\r\n                                                            >\r\n                                                                <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                            </IconButton>\r\n                                                        </Tooltip>\r\n                                                    </Stack>\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                    align=\"left\"\r\n                                                    className=\"tableName\"\r\n                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                ></TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow style={{ display: detailId !== row.id ? 'none' : '' }}>\r\n                                                <TableCell sx={{ pl: 12 }} colSpan={12}>\r\n                                                    <div>\r\n                                                        <Grid container spacing={4}>\r\n                                                            <Grid item xs={4} md={4}>\r\n                                                                <Button\r\n                                                                    variant=\"outlined\"\r\n                                                                    size=\"large\"\r\n                                                                    onClick={() => {\r\n                                                                        setAddUpdateOpen(true);\r\n                                                                        setBrandAdminData({\r\n                                                                            id: row.id,\r\n                                                                            brandId: row.BrandId,\r\n                                                                            firstName: row.firstName,\r\n                                                                            lastName: row.lastName,\r\n                                                                            adminEmail: row.email,\r\n                                                                            adminPassword: ''\r\n                                                                        });\r\n                                                                    }}\r\n                                                                >\r\n                                                                    Edit\r\n                                                                </Button>\r\n                                                            </Grid>\r\n                                                            <Grid item xs={4} md={4}>\r\n                                                                <Button\r\n                                                                    variant=\"outlined\"\r\n                                                                    size=\"large\"\r\n                                                                    onClick={() => {\r\n                                                                        setDeleteOpen(true);\r\n                                                                        setBrandAdminData({\r\n                                                                            id: row.id,\r\n                                                                            brandId: row.BrandId\r\n                                                                        });\r\n                                                                    }}\r\n                                                                >\r\n                                                                    Delete\r\n                                                                </Button>\r\n                                                            </Grid>\r\n                                                            <Grid item xs={4} md={4}>\r\n                                                                <Button\r\n                                                                    variant=\"outlined\"\r\n                                                                    size=\"large\"\r\n                                                                    onClick={() => {\r\n                                                                        setChangeStatusOpen(true);\r\n                                                                        setBrandAdminData({\r\n                                                                            id: row.id,\r\n                                                                            brandId: row.BrandId,\r\n                                                                            isActive: row.isActive\r\n                                                                        });\r\n                                                                    }}\r\n                                                                >\r\n                                                                    Change Status\r\n                                                                </Button>\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                    </div>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        </>\r\n                                    ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    ) : (\r\n                        <>\r\n                            <Grid item>\r\n                                <Typography className=\"statustypo\" style={{ padding: '20px 20px 20px 70px', fontWeight: '500' }}>\r\n                                    No Data Available\r\n                                </Typography>\r\n                            </Grid>\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default BrandAdminTable;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport BrandAdminTable from './component/brandAdminTable';\r\nimport { Button, Typography, Grid, MenuItem, Menu, Pagination, OutlinedInput, InputAdornment, Divider } from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { getAllBrandAdmin } from '../../../../../redux/brandAdmin/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AddUpdateBrandAdminDialog from './component/addUpdateBrandAdmin';\r\n\r\nconst BrandAdmin = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const brandAdminList = useSelector((state) => state.brandadminReducer.brandadminsList);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [brandAdminData, setBrandAdminData] = useState({\r\n        id: null,\r\n        brandId: location.state.brandData.id,\r\n        firstName: '',\r\n        lastName: '',\r\n        adminEmail: '',\r\n        adminPassword: ''\r\n    });\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllBrandAdmin({\r\n                brandId: location.state.brandData.id,\r\n                search: search,\r\n                page: page,\r\n                limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n\r\n    return (\r\n        <>\r\n            <AddUpdateBrandAdminDialog\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n                brandAdminData={brandAdminData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n            <MainCard\r\n            className='Adminheading'\r\n\r\n                title={\r\n                    <Typography variant=\"h1\" component=\"h2\" className='headingcard' sx={{ marginTop:'10px' ,  \r\n                        fontWeight: 600, color: '#000' , marginLeft:{lg:'-20px', md:'-20px'} }}>\r\n                           \r\n                        Brand Management\r\n                    </Typography>\r\n                }\r\n                secondary={\r\n                    <Button className='buttonSize' sx={{float:'right'}}\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    onClick={() => {\r\n                        navigate('/brands');\r\n                    }}\r\n                >\r\n                    Back\r\n                </Button>\r\n                }\r\n                content={false}\r\n            ></MainCard>\r\n\r\n            <MainCard\r\n            className='tableShadow'\r\n                title={\r\n                    <Grid container spacing={4} >\r\n                    <Grid item xs={6} lg={8} >\r\n                    <Typography className='mainheading' variant=\"h1\" component=\"h2\"\r\n                     sx={{marginLeft:{lg:'38px', md:'38px'}}}>\r\n                     Admin Management of : {location.state.brandData.name}\r\n                  </Typography>\r\n                    </Grid>\r\n                        <Grid item xs={3} lg={2} >\r\n                       \r\n                        <OutlinedInput\r\n                        id=\"input-search-list-style1\"\r\n                        placeholder=\"Search\"\r\n                        startAdornment={\r\n                            <InputAdornment position=\"start\">\r\n                                <IconSearch stroke={1.5} size=\"1rem\" />\r\n                            </InputAdornment>\r\n                        }\r\n                        size=\"small\"\r\n                        onChange={(e) => {\r\n                            setSearch(e.target.value);\r\n                        }}\r\n                    />\r\n                        </Grid>\r\n                        <Grid item xs={3} lg={2} textAlign=\"start\">\r\n                            <Button className='buttonSize' sx={{marginLeft:{lg:'-16px', md:'-16px'}}}\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddUpdateOpen(true);\r\n                                    setBrandAdminData({\r\n                                        id: null,\r\n                                        brandId: location.state.brandData.id,\r\n                                        firstName: '',\r\n                                        lastName: '',\r\n                                        adminEmail: '',\r\n                                        adminPassword: ''\r\n                                    });\r\n                                }}\r\n                            >\r\n                            Create\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                   \r\n                }\r\n                content={false}\r\n            >\r\n                <BrandAdminTable\r\n                    brandAdminList={brandAdminList}\r\n                    search={search}\r\n                    page={page}\r\n                    limit={limit}\r\n                    addUpdateOpen={addUpdateOpen}\r\n                    setAddUpdateOpen={setAddUpdateOpen}\r\n                    brandAdminData={brandAdminData}\r\n                    setBrandAdminData={setBrandAdminData}\r\n                />\r\n\r\n                <>\r\n                    <Grid item xs={12} sx={{ p: 3 }}>\r\n                        <Grid container justifyContent=\"center\" spacing={gridSpacing}>\r\n                            <Grid item>\r\n                                <Pagination\r\n                                    color=\"primary\"\r\n                                    showFirstButton\r\n                                    showLastButton\r\n                                    page={page}\r\n                                    count={brandAdminList.pages}\r\n                                    onChange={(event, newPage) => {\r\n                                        setPage(newPage);\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                           \r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BrandAdmin;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiChip from '@mui/material/Chip';\r\n\r\n// ==============================|| CHIP ||============================== //\r\n\r\nconst Chip = ({ chipcolor, disabled, variant, sx = {}, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    let defaultSX = {\r\n        color: theme.palette.mode === 'dark' ? theme.palette.primary.light : theme.palette.primary.main,\r\n        bgcolor: theme.palette.mode === 'dark' ? theme.palette.primary.main : theme.palette.primary.light,\r\n        ':hover': {\r\n            color: theme.palette.primary.light,\r\n            bgcolor: theme.palette.mode === 'dark' ? theme.palette.primary.dark + 90 : theme.palette.primary.dark\r\n        }\r\n    };\r\n\r\n    let outlineSX = {\r\n        color: theme.palette.primary.main,\r\n        bgcolor: 'transparent',\r\n        border: '1px solid',\r\n        borderColor: theme.palette.primary.main,\r\n        ':hover': {\r\n            color: theme.palette.mode === 'dark' ? theme.palette.primary.light : theme.palette.primary.light,\r\n            bgcolor: theme.palette.mode === 'dark' ? theme.palette.primary.main : theme.palette.primary.dark\r\n        }\r\n    };\r\n\r\n    switch (chipcolor) {\r\n        case 'secondary':\r\n            if (variant === 'outlined')\r\n                outlineSX = {\r\n                    color: theme.palette.secondary.main,\r\n                    bgcolor: 'transparent',\r\n                    border: '1px solid',\r\n                    borderColor: theme.palette.secondary.main,\r\n                    ':hover': {\r\n                        color: theme.palette.mode === 'dark' ? theme.palette.secondary.light : theme.palette.secondary.main,\r\n                        bgcolor: theme.palette.mode === 'dark' ? theme.palette.secondary.dark : theme.palette.secondary.light\r\n                    }\r\n                };\r\n            else\r\n                defaultSX = {\r\n                    color: theme.palette.mode === 'dark' ? theme.palette.secondary.light : theme.palette.secondary.main,\r\n                    bgcolor: theme.palette.mode === 'dark' ? theme.palette.secondary.dark : theme.palette.secondary.light,\r\n                    ':hover': {\r\n                        color: theme.palette.secondary.light,\r\n                        bgcolor: theme.palette.mode === 'dark' ? theme.palette.secondary.dark + 90 : theme.palette.secondary.main\r\n                    }\r\n                };\r\n            break;\r\n        case 'success':\r\n            if (variant === 'outlined')\r\n                outlineSX = {\r\n                    color: theme.palette.success.dark,\r\n                    bgcolor: 'transparent',\r\n                    border: '1px solid',\r\n                    borderColor: theme.palette.success.dark,\r\n                    ':hover': {\r\n                        color: theme.palette.mode === 'dark' ? theme.palette.success.light : theme.palette.success.dark,\r\n                        bgcolor: theme.palette.mode === 'dark' ? theme.palette.success.dark : theme.palette.success.light + 60\r\n                    }\r\n                };\r\n            else\r\n                defaultSX = {\r\n                    color: theme.palette.mode === 'dark' ? theme.palette.success.light : theme.palette.success.dark,\r\n                    bgcolor: theme.palette.mode === 'dark' ? theme.palette.success.dark : theme.palette.success.light + 60,\r\n                    ':hover': {\r\n                        color: theme.palette.success.light,\r\n                        bgcolor: theme.palette.mode === 'dark' ? theme.palette.success.dark + 90 : theme.palette.success.dark\r\n                    }\r\n                };\r\n            break;\r\n        case 'error':\r\n            if (variant === 'outlined')\r\n                outlineSX = {\r\n                    color: theme.palette.error.main,\r\n                    bgcolor: 'transparent',\r\n                    border: '1px solid',\r\n                    borderColor: theme.palette.error.main,\r\n                    ':hover': {\r\n                        color: theme.palette.mode === 'dark' ? theme.palette.error.light : theme.palette.error.dark,\r\n                        bgcolor: theme.palette.mode === 'dark' ? theme.palette.error.dark : theme.palette.error.light\r\n                    }\r\n                };\r\n            else\r\n                defaultSX = {\r\n                    color: theme.palette.mode === 'dark' ? theme.palette.error.light : theme.palette.error.dark,\r\n                    bgcolor: theme.palette.mode === 'dark' ? theme.palette.error.dark : theme.palette.error.light + 60,\r\n                    ':hover': {\r\n                        color: theme.palette.error.light,\r\n                        bgcolor: theme.palette.mode === 'dark' ? theme.palette.error.dark + 90 : theme.palette.error.dark\r\n                    }\r\n                };\r\n            break;\r\n        case 'orange':\r\n            if (variant === 'outlined')\r\n                outlineSX = {\r\n                    color: theme.palette.orange?.dark,\r\n                    bgcolor: 'transparent',\r\n                    border: '1px solid',\r\n                    borderColor: theme.palette.orange?.main,\r\n                    ':hover': {\r\n                        color: theme.palette.orange?.dark,\r\n                        bgcolor: theme.palette.orange?.light\r\n                    }\r\n                };\r\n            else\r\n                defaultSX = {\r\n                    color: theme.palette.orange?.dark,\r\n                    bgcolor: theme.palette.orange?.light,\r\n                    ':hover': {\r\n                        color: theme.palette.orange?.light,\r\n                        bgcolor: theme.palette.orange?.dark\r\n                    }\r\n                };\r\n            break;\r\n        case 'warning':\r\n            if (variant === 'outlined')\r\n                outlineSX = {\r\n                    color: theme.palette.warning.dark,\r\n                    bgcolor: 'transparent',\r\n                    border: '1px solid',\r\n                    borderColor: theme.palette.warning.dark,\r\n                    ':hover': {\r\n                        color: theme.palette.warning.dark,\r\n                        bgcolor: theme.palette.warning.light\r\n                    }\r\n                };\r\n            else\r\n                defaultSX = {\r\n                    color: theme.palette.warning.dark,\r\n                    bgcolor: theme.palette.warning.light,\r\n                    ':hover': {\r\n                        color: theme.palette.warning.light,\r\n                        bgcolor: theme.palette.mode === 'dark' ? theme.palette.warning.dark + 90 : theme.palette.warning.dark\r\n                    }\r\n                };\r\n            break;\r\n        default:\r\n    }\r\n\r\n    if (disabled) {\r\n        if (variant === 'outlined')\r\n            outlineSX = {\r\n                color: theme.palette.grey[500],\r\n                bgcolor: 'transparent',\r\n                border: '1px solid',\r\n                borderColor: theme.palette.grey[500],\r\n                ':hover': {\r\n                    color: theme.palette.grey[500],\r\n                    bgcolor: 'transparent'\r\n                }\r\n            };\r\n        else\r\n            defaultSX = {\r\n                color: theme.palette.grey[500],\r\n                bgcolor: theme.palette.grey[50],\r\n                ':hover': {\r\n                    color: theme.palette.grey[500],\r\n                    bgcolor: theme.palette.grey[50]\r\n                }\r\n            };\r\n    }\r\n\r\n    let SX = defaultSX;\r\n    if (variant === 'outlined') {\r\n        SX = outlineSX;\r\n    }\r\n\r\n    SX = { ...SX, ...sx };\r\n    return <MuiChip {...others} sx={SX} />;\r\n};\r\n\r\nChip.propTypes = {\r\n    sx: PropTypes.object,\r\n    chipcolor: PropTypes.string,\r\n    variant: PropTypes.string,\r\n    disabled: PropTypes.bool\r\n};\r\n\r\nexport default Chip;\r\n"],"sourceRoot":""}