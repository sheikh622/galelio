{"version":3,"sources":["views/pages/superAdmin/brands/brandAdmin/component/deleteBrandAdminDialog.js","views/pages/superAdmin/brands/brandAdmin/component/addUpdateBrandAdmin.js","views/pages/superAdmin/brands/brandAdmin/component/changeBrandAdminStatus.js","views/pages/superAdmin/brands/brandAdmin/component/brandAdminTable.js","views/pages/superAdmin/brands/brandAdmin/index.js","ui-component/extended/Chip.js"],"names":["Transition","forwardRef","props","ref","Slide","direction","DeleteBrandAdminDialog","open","setOpen","page","limit","search","brandAdminData","theme","useTheme","dispatch","useDispatch","handleClose","Dialog","TransitionComponent","keepMounted","onClose","DialogTitle","id","DialogContent","DialogContentText","Typography","variant","component","DialogActions","sx","pr","Button","color","palette","error","dark","borderColor","onClick","size","deleteBrandAdmin","brandId","AddUpdateBrandAdminDialog","useState","isUpdate","setIsUpdate","useEffect","validationSchema","Yup","default","firstName","required","max","matches","lastName","adminEmail","email","adminPassword","when","is","then","otherwise","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","addBrandAdmin","password","updateBrandAdmin","resetForm","className","maxWidth","Divider","noValidate","handleSubmit","Grid","container","item","xs","pt","InputLabel","htmlFor","TextField","name","value","onChange","handleChange","touched","Boolean","errors","helperText","fullWidth","autoComplete","AnimateButton","my","ml","type","disableElevation","ChangeBrandAdminStatusDialog","isActive","changeBrandAdminStatus","BrandAdminTable","addUpdateOpen","setAddUpdateOpen","brandAdminList","setBrandAdminData","deleteOpen","setDeleteOpen","changeStatusOpen","setChangeStatusOpen","detailId","setDetailId","TableContainer","Table","TableHead","TableRow","TableCell","align","undefined","admins","count","TableBody","padding","map","row","index","Chip","label","chipcolor","Tooltip","placement","title","IconButton","fontSize","style","display","pl","colSpan","spacing","md","BrandId","fontWeight","BrandAdmin","location","useLocation","navigate","useNavigate","useSelector","state","brandadminReducer","brandadminsList","setSearch","setPage","setLimit","brandData","anchorEl","setAnchorEl","handleCloseMenu","getAllBrandAdmin","console","log","MainCard","secondary","content","gridSpacing","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","e","target","textAlign","p","justifyContent","Pagination","showFirstButton","showLastButton","pages","event","newPage","grey","endIcon","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","disabled","others","defaultSX","mode","primary","light","main","bgcolor","outlineSX","border","success","orange","warning","SX"],"mappings":"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","file":"static/js/11.23296a6b.chunk.js","sourcesContent":["import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteBrandAdmin } from '../../../../../../redux/brandAdmin/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteBrandAdminDialog({ open, setOpen, page, limit, search, brandAdminData }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Delete Brand Admin</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to delete this Admin?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteBrandAdmin({\r\n                                    id: brandAdminData.id,\r\n                                    brandId: brandAdminData.brandId,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { updateBrandAdmin, addBrandAdmin } from 'redux/brandAdmin/actions';\r\nimport { Button, InputLabel, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, Divider, Grid } from '@mui/material';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nexport default function AddUpdateBrandAdminDialog({ open, setOpen, brandAdminData, page, limit, search }) {\r\n    const dispatch = useDispatch();\r\n    const [isUpdate, setIsUpdate] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (brandAdminData.id == null) {\r\n            setIsUpdate(false);\r\n        } else {\r\n            setIsUpdate(true);\r\n        }\r\n    }, [brandAdminData]);\r\n\r\n    const validationSchema = Yup.object({\r\n        isUpdate: Yup.boolean().default(isUpdate),\r\n        firstName: Yup.string()\r\n            .required('First Name is required!')\r\n            .max(42, 'First Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid First name'),\r\n        lastName: Yup.string()\r\n            .required('Last Name is required!')\r\n            .max(42, 'Last Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Last name'),\r\n        adminEmail: Yup.string().email('Enter valid email').max(255).required('Email is required!'),\r\n\r\n        adminPassword: Yup.mixed().when(['isUpdate'], {\r\n            is: false,\r\n            then: Yup.string()\r\n                .required('Password is required!')\r\n                .matches(\r\n                    /^(?=(?:.*[A-Z].*){1})(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\r\n                    'Must Contain 8 Characters,  One Uppercase, One Lowercase, One Number and one special case Character'\r\n                ),\r\n            otherwise: Yup.string().matches(\r\n                /^(?=(?:.*[A-Z].*){1})(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\r\n                'Must Contain 8 Characters,  One Uppercase, One Lowercase, One Number and one special case Character'\r\n            )\r\n        })\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: brandAdminData,\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            if (brandAdminData.id == null) {\r\n                dispatch(\r\n                    addBrandAdmin({\r\n                        brandId: brandAdminData.brandId,\r\n                        firstName: values.firstName,\r\n                        lastName: values.lastName,\r\n                        email: values.adminEmail,\r\n                        password: values.adminPassword,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            } else {\r\n                dispatch(\r\n                    updateBrandAdmin({\r\n                        id: brandAdminData.id,\r\n                        brandId: brandAdminData.brandId,\r\n                        firstName: values.firstName,\r\n                        lastName: values.lastName,\r\n                        email: values.adminEmail,\r\n                        password: values.adminPassword,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog\"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">{brandAdminData.id == null ? 'Add Brand Admin ' : ' Update Brand Admin '}</DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <form noValidate onSubmit={formik.handleSubmit} id=\"validation-forms\">\r\n                        <Grid container>\r\n                            <>\r\n                                <Grid item xs={6} pt={2} pr={4}>\r\n                                    <InputLabel htmlFor=\"outlined-adornment-password-login\">First Name</InputLabel>\r\n                                    <TextField\r\n                                        id=\"firstName\"\r\n                                        name=\"firstName\"\r\n                                        value={formik.values.firstName}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.firstName && Boolean(formik.errors.firstName)}\r\n                                        helperText={formik.touched.firstName && formik.errors.firstName}\r\n                                        fullWidth\r\n                                        autoComplete=\"given-name\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6} pt={2}>\r\n                                    <InputLabel htmlFor=\"outlined-adornment-password-login\">Last Name</InputLabel>\r\n                                    <TextField\r\n                                        id=\"lastName\"\r\n                                        name=\"lastName\"\r\n                                        value={formik.values.lastName}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.lastName && Boolean(formik.errors.lastName)}\r\n                                        helperText={formik.touched.lastName && formik.errors.lastName}\r\n                                        fullWidth\r\n                                        autoComplete=\"given-name\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6} pt={2} pr={4}>\r\n                                    <InputLabel htmlFor=\"outlined-adornment-password-login\">Email</InputLabel>\r\n                                    <TextField\r\n                                        id=\"adminEmail\"\r\n                                        name=\"adminEmail\"\r\n                                        value={formik.values.adminEmail}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.adminEmail && Boolean(formik.errors.adminEmail)}\r\n                                        helperText={formik.touched.adminEmail && formik.errors.adminEmail}\r\n                                        fullWidth\r\n                                        autoComplete=\"given-name\"\r\n                                    />\r\n                                </Grid>\r\n                                \r\n                                <Grid item xs={6} pt={2}>\r\n                                    <InputLabel htmlFor=\"outlined-adornment-password-login\">Password</InputLabel>\r\n                                    <TextField\r\n                                        id=\"adminPassword\"\r\n                                        name=\"adminPassword\"\r\n                                        value={formik.values.adminPassword}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.adminPassword && Boolean(formik.errors.adminPassword)}\r\n                                        helperText={formik.touched.adminPassword && formik.errors.adminPassword}\r\n                                        fullWidth\r\n                                        autoComplete=\"given-name\"\r\n                                    />\r\n                                </Grid>\r\n                            </>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n\r\n                <DialogActions sx={{ pr: 3 }}>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1 }}\r\n                            type=\"submit\"\r\n                            size=\"large\"\r\n                            disableElevation\r\n                            onClick={() => {\r\n                                formik.handleSubmit();\r\n                            }}\r\n                        >\r\n                            {brandAdminData.id == null ? 'Add ' : 'Update '}\r\n                        </Button>\r\n                    </AnimateButton>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1, color: '#fff' }}\r\n                            onClick={handleClose}\r\n                            color=\"secondary\"\r\n                            size=\"large\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </AnimateButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { changeBrandAdminStatus } from 'redux/brandAdmin/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function ChangeBrandAdminStatusDialog({ open, setOpen, page, limit, search, brandAdminData }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Change Brand Admin Status </DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            {brandAdminData.isActive == false\r\n                                ? 'Are you sure you want to unblock this Admin?'\r\n                                : 'Are you sure you want to block  this Admin?'}\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                changeBrandAdminStatus({\r\n                                    id: brandAdminData.id,\r\n                                    brandId: brandAdminData.brandId,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport {\r\n    Divider,\r\n    Typography,\r\n    IconButton,\r\n    Grid,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    Button,\r\n    TableRow,\r\n    Tooltip\r\n} from '@mui/material';\r\nimport DeleteBrandAdminDialog from './deleteBrandAdminDialog';\r\nimport Chip from 'ui-component/extended/Chip';\r\nimport AddUpdateBrandAdminDialog from './addUpdateBrandAdmin';\r\nimport ChangeBrandAdminStatusDialog from './changeBrandAdminStatus';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\n\r\nconst BrandAdminTable = ({ addUpdateOpen, setAddUpdateOpen, search, page, limit, brandAdminList, setBrandAdminData, brandAdminData }) => {\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const [changeStatusOpen, setChangeStatusOpen] = useState(false);\r\n    const [detailId, setDetailId] = useState();\r\n    const openDetails = (id) => {\r\n        if (detailId === id) {\r\n            setDetailId(null);\r\n        } else {\r\n            setDetailId(id);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <TableContainer>\r\n            <AddUpdateBrandAdminDialog\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n                brandAdminData={brandAdminData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n\r\n            <DeleteBrandAdminDialog\r\n                open={deleteOpen}\r\n                setOpen={setDeleteOpen}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n                brandAdminData={brandAdminData}\r\n            />\r\n\r\n            <ChangeBrandAdminStatusDialog\r\n                open={changeStatusOpen}\r\n                setOpen={setChangeStatusOpen}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n                brandAdminData={brandAdminData}\r\n            />\r\n\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\">First Name</TableCell>\r\n                        <TableCell align=\"center\">Last Name</TableCell>\r\n                        <TableCell align=\"center\">Email</TableCell>\r\n                        <TableCell align=\"center\">Status</TableCell>\r\n                        <TableCell align=\"center\">Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                {brandAdminList.admins != undefined && brandAdminList.count > 0 ? (\r\n                    <TableBody sx={{ padding: '10px' }}>\r\n                        {brandAdminList.admins != undefined &&\r\n                            brandAdminList.admins.map((row, index) => (\r\n                                <>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"center\">{row.firstName}</TableCell>\r\n                                        <TableCell align=\"center\">{row.lastName}</TableCell>\r\n                                        <TableCell align=\"center\">{row.email}</TableCell>\r\n\r\n                                        <TableCell align=\"center\">\r\n                                            {row.isActive == false ? (\r\n                                                <Chip label=\"Blocked\" size=\"small\" chipcolor=\"orange\" />\r\n                                            ) : (\r\n                                                <Chip label=\"Unblocked\" size=\"small\" chipcolor=\"success\" />\r\n                                            )}\r\n                                        </TableCell>\r\n\r\n                                        <TableCell align=\"center\">\r\n                                            <Tooltip placement=\"top\" title=\"View\">\r\n                                                <IconButton\r\n                                                    color=\"primary\"\r\n                                                    aria-label=\"detail\"\r\n                                                    size=\"large\"\r\n                                                    onClick={() => {\r\n                                                        openDetails(row.id);\r\n                                                    }}\r\n                                                >\r\n                                                    <KeyboardArrowDownIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow style={{ display: detailId !== row.id ? 'none' : '' }}>\r\n                                        <TableCell sx={{ pl: 12 }} colSpan={12}>\r\n                                            <div>\r\n                                                <Grid container spacing={4}>\r\n                                                    <Grid item xs={4} md={4}>\r\n                                                        <Button\r\n                                                            variant=\"outlined\"\r\n                                                            size=\"large\"\r\n                                                            onClick={() => {\r\n                                                                setAddUpdateOpen(true);\r\n                                                                setBrandAdminData({\r\n                                                                    id: row.id,\r\n                                                                    brandId: row.BrandId,\r\n                                                                    firstName: row.firstName,\r\n                                                                    lastName: row.lastName,\r\n                                                                    adminEmail: row.email,\r\n                                                                    adminPassword: ''\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            Edit\r\n                                                        </Button>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={4} md={4}>\r\n                                                        <Button\r\n                                                            variant=\"outlined\"\r\n                                                            size=\"large\"\r\n                                                            onClick={() => {\r\n                                                                setDeleteOpen(true);\r\n                                                                setBrandAdminData({\r\n                                                                    id: row.id,\r\n                                                                    brandId: row.BrandId\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            Delete\r\n                                                        </Button>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={4} md={4}>\r\n                                                        <Button\r\n                                                            variant=\"outlined\"\r\n                                                            size=\"large\"\r\n                                                            onClick={() => {\r\n                                                                setChangeStatusOpen(true);\r\n                                                                setBrandAdminData({\r\n                                                                    id: row.id,\r\n                                                                    brandId: row.BrandId,\r\n                                                                    isActive: row.isActive\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            Change Status\r\n                                                        </Button>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </div>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </>\r\n                            ))}\r\n                    </TableBody>\r\n                ) : (\r\n                    <>\r\n                        <Grid item md={12}>\r\n                            <Divider />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography style={{ padding: '20px', fontWeight: '800' }}> No Data Available</Typography>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default BrandAdminTable;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport BrandAdminTable from './component/brandAdminTable';\r\nimport { Button, Typography, Grid, MenuItem, Menu, Pagination, OutlinedInput, InputAdornment, Divider } from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { getAllBrandAdmin } from '../../../../../redux/brandAdmin/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AddUpdateBrandAdminDialog from './component/addUpdateBrandAdmin';\r\n\r\nconst BrandAdmin = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const brandAdminList = useSelector((state) => state.brandadminReducer.brandadminsList);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [brandAdminData, setBrandAdminData] = useState({\r\n        id:null,\r\n        brandId: location.state.brandData.id,\r\n        firstName: '',\r\n        lastName: '',\r\n        adminEmail: '',\r\n        adminPassword: '',\r\n    });\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllBrandAdmin({\r\n                brandId: location.state.brandData.id,\r\n                search: search,\r\n                page: page,\r\n                limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n    console.log('location.state', location.state);\r\n    return (\r\n        <>\r\n            <AddUpdateBrandAdminDialog\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n                brandAdminData={brandAdminData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n            <MainCard\r\n                title={\r\n                    <Typography variant=\"h3\" sx={{ fontWeight: 500, color: 'cadetblue' }}>\r\n                        Admin Management of : {location.state.brandData.name}\r\n                    </Typography>\r\n                }\r\n                secondary={\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            navigate('/brands');\r\n                        }}\r\n                    >\r\n                        back\r\n                    </Button>\r\n                }\r\n                content={false}\r\n            ></MainCard>\r\n\r\n            <MainCard\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={6}>\r\n                            <OutlinedInput\r\n                                id=\"input-search-list-style1\"\r\n                                placeholder=\"Search\"\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"start\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                                size=\"small\"\r\n                                onChange={(e) => {\r\n                                    setSearch(e.target.value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6} textAlign=\"end\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddUpdateOpen(true);\r\n                                    setBrandAdminData({\r\n                                        id: null,\r\n                                        brandId: location.state.brandData.id,\r\n                                        firstName: '',\r\n                                        lastName: '',\r\n                                        adminEmail: '',\r\n                                        adminPassword: '',\r\n                                    });\r\n                                }}\r\n                            >\r\n                                Add Brand Admin\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                <BrandAdminTable\r\n                    brandAdminList={brandAdminList}\r\n                    search={search}\r\n                    page={page}\r\n                    limit={limit}\r\n                    addUpdateOpen={addUpdateOpen}\r\n                    setAddUpdateOpen={setAddUpdateOpen}\r\n                    brandAdminData={brandAdminData}\r\n                    setBrandAdminData={setBrandAdminData}\r\n                />\r\n\r\n                <>\r\n                    <Grid item xs={12} sx={{ p: 3 }}>\r\n                        <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                            <Grid item>\r\n                                <Pagination\r\n                                    color=\"primary\"\r\n                                    showFirstButton\r\n                                    showLastButton\r\n                                    page={page}\r\n                                    count={brandAdminList.pages}\r\n                                    onChange={(event, newPage) => {\r\n                                        setPage(newPage);\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    size=\"large\"\r\n                                    sx={{ color: theme.palette.grey[900] }}\r\n                                    color=\"secondary\"\r\n                                    endIcon={<ExpandMoreRoundedIcon />}\r\n                                    onClick={handleClick}\r\n                                >\r\n                                    {limit} Rows\r\n                                </Button>\r\n                                <Menu\r\n                                    id=\"menu-user-list-style1\"\r\n                                    anchorEl={anchorEl}\r\n                                    keepMounted\r\n                                    open={Boolean(anchorEl)}\r\n                                    onClose={handleCloseMenu}\r\n                                    variant=\"selectedMenu\"\r\n                                    anchorOrigin={{\r\n                                        vertical: 'top',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                    transformOrigin={{\r\n                                        vertical: 'bottom',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                >\r\n                                    <MenuItem\r\n                                        value={10}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        10 Rows\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value={25}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        25 Rows\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value={50}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        50 Rows{' '}\r\n                                    </MenuItem>\r\n                                </Menu>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BrandAdmin;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiChip from '@mui/material/Chip';\r\n\r\n// ==============================|| CHIP ||============================== //\r\n\r\nconst Chip = ({ chipcolor, disabled, variant, sx = {}, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    let defaultSX = {\r\n        color: theme.palette.mode === 'dark' ? theme.palette.primary.light : theme.palette.primary.main,\r\n        bgcolor: theme.palette.mode === 'dark' ? theme.palette.primary.main : theme.palette.primary.light,\r\n        ':hover': {\r\n            color: theme.palette.primary.light,\r\n            bgcolor: theme.palette.mode === 'dark' ? theme.palette.primary.dark + 90 : theme.palette.primary.dark\r\n        }\r\n    };\r\n\r\n    let outlineSX = {\r\n        color: theme.palette.primary.main,\r\n        bgcolor: 'transparent',\r\n        border: '1px solid',\r\n        borderColor: theme.palette.primary.main,\r\n        ':hover': {\r\n            color: theme.palette.mode === 'dark' ? theme.palette.primary.light : theme.palette.primary.light,\r\n            bgcolor: theme.palette.mode === 'dark' ? theme.palette.primary.main : theme.palette.primary.dark\r\n        }\r\n    };\r\n\r\n    switch (chipcolor) {\r\n        case 'secondary':\r\n            if (variant === 'outlined')\r\n                outlineSX = {\r\n                    color: theme.palette.secondary.main,\r\n                    bgcolor: 'transparent',\r\n                    border: '1px solid',\r\n                    borderColor: theme.palette.secondary.main,\r\n                    ':hover': {\r\n                        color: theme.palette.mode === 'dark' ? theme.palette.secondary.light : theme.palette.secondary.main,\r\n                        bgcolor: theme.palette.mode === 'dark' ? theme.palette.secondary.dark : theme.palette.secondary.light\r\n                    }\r\n                };\r\n            else\r\n                defaultSX = {\r\n                    color: theme.palette.mode === 'dark' ? theme.palette.secondary.light : theme.palette.secondary.main,\r\n                    bgcolor: theme.palette.mode === 'dark' ? theme.palette.secondary.dark : theme.palette.secondary.light,\r\n                    ':hover': {\r\n                        color: theme.palette.secondary.light,\r\n                        bgcolor: theme.palette.mode === 'dark' ? theme.palette.secondary.dark + 90 : theme.palette.secondary.main\r\n                    }\r\n                };\r\n            break;\r\n        case 'success':\r\n            if (variant === 'outlined')\r\n                outlineSX = {\r\n                    color: theme.palette.success.dark,\r\n                    bgcolor: 'transparent',\r\n                    border: '1px solid',\r\n                    borderColor: theme.palette.success.dark,\r\n                    ':hover': {\r\n                        color: theme.palette.mode === 'dark' ? theme.palette.success.light : theme.palette.success.dark,\r\n                        bgcolor: theme.palette.mode === 'dark' ? theme.palette.success.dark : theme.palette.success.light + 60\r\n                    }\r\n                };\r\n            else\r\n                defaultSX = {\r\n                    color: theme.palette.mode === 'dark' ? theme.palette.success.light : theme.palette.success.dark,\r\n                    bgcolor: theme.palette.mode === 'dark' ? theme.palette.success.dark : theme.palette.success.light + 60,\r\n                    ':hover': {\r\n                        color: theme.palette.success.light,\r\n                        bgcolor: theme.palette.mode === 'dark' ? theme.palette.success.dark + 90 : theme.palette.success.dark\r\n                    }\r\n                };\r\n            break;\r\n        case 'error':\r\n            if (variant === 'outlined')\r\n                outlineSX = {\r\n                    color: theme.palette.error.main,\r\n                    bgcolor: 'transparent',\r\n                    border: '1px solid',\r\n                    borderColor: theme.palette.error.main,\r\n                    ':hover': {\r\n                        color: theme.palette.mode === 'dark' ? theme.palette.error.light : theme.palette.error.dark,\r\n                        bgcolor: theme.palette.mode === 'dark' ? theme.palette.error.dark : theme.palette.error.light\r\n                    }\r\n                };\r\n            else\r\n                defaultSX = {\r\n                    color: theme.palette.mode === 'dark' ? theme.palette.error.light : theme.palette.error.dark,\r\n                    bgcolor: theme.palette.mode === 'dark' ? theme.palette.error.dark : theme.palette.error.light + 60,\r\n                    ':hover': {\r\n                        color: theme.palette.error.light,\r\n                        bgcolor: theme.palette.mode === 'dark' ? theme.palette.error.dark + 90 : theme.palette.error.dark\r\n                    }\r\n                };\r\n            break;\r\n        case 'orange':\r\n            if (variant === 'outlined')\r\n                outlineSX = {\r\n                    color: theme.palette.orange?.dark,\r\n                    bgcolor: 'transparent',\r\n                    border: '1px solid',\r\n                    borderColor: theme.palette.orange?.main,\r\n                    ':hover': {\r\n                        color: theme.palette.orange?.dark,\r\n                        bgcolor: theme.palette.orange?.light\r\n                    }\r\n                };\r\n            else\r\n                defaultSX = {\r\n                    color: theme.palette.orange?.dark,\r\n                    bgcolor: theme.palette.orange?.light,\r\n                    ':hover': {\r\n                        color: theme.palette.orange?.light,\r\n                        bgcolor: theme.palette.orange?.dark\r\n                    }\r\n                };\r\n            break;\r\n        case 'warning':\r\n            if (variant === 'outlined')\r\n                outlineSX = {\r\n                    color: theme.palette.warning.dark,\r\n                    bgcolor: 'transparent',\r\n                    border: '1px solid',\r\n                    borderColor: theme.palette.warning.dark,\r\n                    ':hover': {\r\n                        color: theme.palette.warning.dark,\r\n                        bgcolor: theme.palette.warning.light\r\n                    }\r\n                };\r\n            else\r\n                defaultSX = {\r\n                    color: theme.palette.warning.dark,\r\n                    bgcolor: theme.palette.warning.light,\r\n                    ':hover': {\r\n                        color: theme.palette.warning.light,\r\n                        bgcolor: theme.palette.mode === 'dark' ? theme.palette.warning.dark + 90 : theme.palette.warning.dark\r\n                    }\r\n                };\r\n            break;\r\n        default:\r\n    }\r\n\r\n    if (disabled) {\r\n        if (variant === 'outlined')\r\n            outlineSX = {\r\n                color: theme.palette.grey[500],\r\n                bgcolor: 'transparent',\r\n                border: '1px solid',\r\n                borderColor: theme.palette.grey[500],\r\n                ':hover': {\r\n                    color: theme.palette.grey[500],\r\n                    bgcolor: 'transparent'\r\n                }\r\n            };\r\n        else\r\n            defaultSX = {\r\n                color: theme.palette.grey[500],\r\n                bgcolor: theme.palette.grey[50],\r\n                ':hover': {\r\n                    color: theme.palette.grey[500],\r\n                    bgcolor: theme.palette.grey[50]\r\n                }\r\n            };\r\n    }\r\n\r\n    let SX = defaultSX;\r\n    if (variant === 'outlined') {\r\n        SX = outlineSX;\r\n    }\r\n\r\n    SX = { ...SX, ...sx };\r\n    return <MuiChip {...others} sx={SX} />;\r\n};\r\n\r\nChip.propTypes = {\r\n    sx: PropTypes.object,\r\n    chipcolor: PropTypes.string,\r\n    variant: PropTypes.string,\r\n    disabled: PropTypes.bool\r\n};\r\n\r\nexport default Chip;\r\n"],"sourceRoot":""}