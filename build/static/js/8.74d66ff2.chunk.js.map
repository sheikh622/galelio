{"version":3,"sources":["views/pages/superAdmin/categories/component/deleteCategoryDialog.js","views/pages/superAdmin/categories/component/categoryTable.js","views/pages/superAdmin/categories/component/addUpdateCategory.js","views/pages/superAdmin/categories/index.js","ui-component/extended/Avatar.js","shared/Card/HeadingCard.js","shared/component/FileInput.js"],"names":["Transition","forwardRef","props","ref","Slide","direction","DeleteCategoryDialog","open","setOpen","page","limit","search","categoryId","theme","useTheme","dispatch","useDispatch","handleClose","Dialog","TransitionComponent","keepMounted","onClose","DialogTitle","id","DialogContent","DialogContentText","Typography","variant","component","DialogActions","sx","pr","Button","color","palette","error","dark","borderColor","onClick","size","deleteCategory","CategoryTable","categoryList","setAddUpdateOpen","setCategoryData","useState","deleteOpen","setDeleteOpen","setCategoryId","TableContainer","Table","TableHead","TableRow","TableCell","align","categories","length","TableBody","undefined","map","row","index","justifyContent","alignItems","Grid","container","spacing","item","Avatar","alt","src","image","name","padding","description","moment","createdAt","format","updatedAt","Stack","Tooltip","placement","title","IconButton","fontSize","orange","main","background","light","md","Divider","style","fontWeight","AddUpdateCategory","categoryData","isUpdate","setIsUpdate","useEffect","validationSchema","Yup","default","required","max","matches","when","is","then","otherwise","errorHandler","values","split","pop","toast","formik","useFormik","enableReinitialize","initialValues","onSubmit","a","addCategory","updateCategory","resetForm","className","maxWidth","noValidate","handleSubmit","InputLabel","htmlFor","TextField","value","onChange","handleChange","touched","Boolean","errors","helperText","fullWidth","autoComplete","marginTop","xs","pt","FileInput","accept","fieldName","placeHolder","AnimateButton","my","ml","type","disableElevation","Categories","useSelector","state","category","setSearch","setPage","setLimit","addUpdateOpen","anchorEl","setAnchorEl","handleCloseMenu","getAllCategories","HeadingCard","MainCard","gridSpacing","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","e","target","textAlign","content","p","Pagination","showFirstButton","showLastButton","count","pages","event","newPage","grey","endIcon","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","outline","others","colorSX","paper","bgcolor","outlineSX","border","sizeSX","width","height","role","setValue","options","marginBottom","primary","select","option","label","fileRef1","useRef","current","click","hidden","setFieldValue","files","mt","substring","toFixed"],"mappings":"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","file":"static/js/8.74d66ff2.chunk.js","sourcesContent":["import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteCategory } from 'redux/categories/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteCategoryDialog({ open, setOpen, page, limit, search, categoryId }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Delete Category</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to delete this Category?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteCategory({\r\n                                    categoryId: categoryId,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    IconButton,\r\n    Stack,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    Grid,\r\n    Divider,\r\n    Typography,\r\n    TableHead,\r\n    TableRow,\r\n    Tooltip\r\n} from '@mui/material';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport DeleteCategoryDialog from './deleteCategoryDialog';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\nimport moment from 'moment';\r\n\r\nconst CategoryTable = ({ categoryList, page, limit, search, setAddUpdateOpen, setCategoryData }) => {\r\n    const theme = useTheme();\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const [categoryId, setCategoryId] = useState();\r\n    return (\r\n        <>\r\n            <DeleteCategoryDialog\r\n                open={deleteOpen}\r\n                setOpen={setDeleteOpen}\r\n                categoryId={categoryId}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n            <DeleteCategoryDialog />\r\n            <TableContainer>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\">Name</TableCell>\r\n                            <TableCell align=\"center\">Description</TableCell>\r\n                            <TableCell align=\"center\">Created At</TableCell>\r\n                            <TableCell align=\"center\">Updated At</TableCell>\r\n                            <TableCell align=\"center\">Actions</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    {categoryList.categories?.length > 0 ? (\r\n                        <TableBody>\r\n                            {categoryList.categories != undefined &&\r\n                                categoryList.categories.map((row, index) => (\r\n                                    <>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\" justifyContent=\"center\" alignItems=\"center\">\r\n                                                <Grid container spacing={2} justifyContent=\"center\" alignItems=\"center\">\r\n                                                    <Grid item>\r\n                                                        <Avatar alt=\"Category Image\" src={row.image} />\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <Typography variant=\"subtitle1\" component=\"div\">\r\n                                                            {row.name}\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </TableCell>\r\n\r\n                                            <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                                {row.description}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">{moment(row.createdAt).format('DD-MMM-YYYY')}</TableCell>\r\n                                            <TableCell align=\"center\">{moment(row.updatedAt).format('DD-MMM-YYYY')}</TableCell>\r\n                                            <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                                <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                                    <Tooltip placement=\"top\" title=\"Edit\">\r\n                                                        <IconButton\r\n                                                            color=\"primary\"\r\n                                                            aria-label=\"Edit\"\r\n                                                            size=\"large\"\r\n                                                            onClick={() => {\r\n                                                                setAddUpdateOpen(true);\r\n                                                                setCategoryData({\r\n                                                                    id: row.id,\r\n                                                                    name: row.name,\r\n                                                                    description: row.description,\r\n                                                                    image: null\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                    <Tooltip placement=\"top\" title=\"Delete\">\r\n                                                        <IconButton\r\n                                                            color=\"primary\"\r\n                                                            sx={{\r\n                                                                color: theme.palette.orange.dark,\r\n                                                                borderColor: theme.palette.orange.main,\r\n                                                                '&:hover ': { background: theme.palette.orange.light }\r\n                                                            }}\r\n                                                            size=\"large\"\r\n                                                            onClick={() => {\r\n                                                                setDeleteOpen(true);\r\n                                                                setCategoryId(row.id);\r\n                                                            }}\r\n                                                        >\r\n                                                            <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                </Stack>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    </>\r\n                                ))}\r\n                        </TableBody>\r\n                    ) : (\r\n                        <>\r\n                            <Grid item md={12}>\r\n                                <Divider />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography style={{ padding: '20px', fontWeight: '800' }}> No Data Available</Typography>\r\n                            </Grid>\r\n                        </>\r\n                    )}\r\n                </Table>\r\n                <Divider />\r\n            </TableContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CategoryTable;\r\n","import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Button, Dialog, DialogContent, InputLabel, TextField, Grid, DialogTitle, Divider, DialogActions, Slide } from '@mui/material';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { addCategory, updateCategory } from 'redux/categories/actions';\r\nimport FileInput from '../../../../../shared/component/FileInput';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nexport default function AddUpdateCategory({ open, setOpen, categoryData, page, limit, search }) {\r\n    const dispatch = useDispatch();\r\n    const [isUpdate, setIsUpdate] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (categoryData.id == null) {\r\n            setIsUpdate(false);\r\n        } else {\r\n            setIsUpdate(true);\r\n        }\r\n    }, [categoryData]);\r\n\r\n    const validationSchema = Yup.object({\r\n        isUpdate: Yup.boolean().default(isUpdate),\r\n        name: Yup.string()\r\n            .required('Category Name is required!')\r\n            .max(42, 'Category Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Category name'),\r\n        description: Yup.string()\r\n            .required('Description is required!')\r\n            .max(42, 'Description can not exceed 200 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Description'),\r\n        image: Yup.mixed().when(['isUpdate'], {\r\n            is: true,\r\n            then: Yup.mixed(),\r\n            otherwise: Yup.mixed().required('Image is required')\r\n        })\r\n    });\r\n\r\n    const errorHandler = (values) => {\r\n        if (values.image) {\r\n            if (\r\n                values.image.name.split('.').pop() == 'jpg' ||\r\n                values.image.name.split('.').pop() == 'png' ||\r\n                values.image.name.split('.').pop() == 'jpeg '\r\n            ) {\r\n                return true;\r\n            } else {\r\n                toast.error('Upload the files with these extensions: jpg, png, jpeg');\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: categoryData,\r\n        validationSchema,\r\n        onSubmit: async (values) => {\r\n            const isValid = errorHandler(values);\r\n            if (isValid) {\r\n                if (categoryData.id == null) {\r\n                    await dispatch(\r\n                        addCategory({\r\n                            name: values.name,\r\n                            description: values.description,\r\n                            image: values.image,\r\n                            page: page,\r\n                            limit: limit,\r\n                            search: search,\r\n                            handleClose: handleClose\r\n                        })\r\n                    );\r\n                } else {\r\n                    dispatch(\r\n                        updateCategory({\r\n                            categoryId: categoryData.id,\r\n                            name: values.name,\r\n                            description: values.description,\r\n                            image: values.image,\r\n                            page: page,\r\n                            limit: limit,\r\n                            search: search,\r\n                            handleClose: handleClose\r\n                        })\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n\r\n        formik.resetForm();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog\"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">{categoryData.id == null ? 'Add Category ' : ' Update Category '}</DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <form noValidate onSubmit={formik.handleSubmit} id=\"validation-forms\">\r\n                        <Grid container>\r\n                            <InputLabel htmlFor=\"outlined-adornment-password-login\">Name</InputLabel>\r\n                            <TextField\r\n                                id=\"name\"\r\n                                name=\"name\"\r\n                                value={formik.values.name}\r\n                                onChange={formik.handleChange}\r\n                                error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                helperText={formik.touched.name && formik.errors.name}\r\n                                fullWidth\r\n                                autoComplete=\"given-name\"\r\n                            />\r\n\r\n                            <InputLabel sx={{ marginTop: '15px' }} htmlFor=\"outlined-adornment-password-login\">\r\n                                Description\r\n                            </InputLabel>\r\n                            <TextField\r\n                                id=\"description\"\r\n                                name=\"description\"\r\n                                value={formik.values.description}\r\n                                onChange={formik.handleChange}\r\n                                error={formik.touched.description && Boolean(formik.errors.description)}\r\n                                helperText={formik.touched.description && formik.errors.description}\r\n                                fullWidth\r\n                                autoComplete=\"given-name\"\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} pt={2}>\r\n                            <FileInput formik={formik} accept=\"image/*\" fieldName=\"image\" placeHolder=\"Add Category Image\" />\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 3 }}>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1 }}\r\n                            type=\"submit\"\r\n                            size=\"large\"\r\n                            onClick={formik.handleSubmit}\r\n                            disableElevation\r\n                        >\r\n                            {categoryData.name !== '' ? 'Update ' : 'Add '}\r\n                        </Button>\r\n                    </AnimateButton>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1, color: '#fff' }}\r\n                            onClick={handleClose}\r\n                            color=\"secondary\"\r\n                            size=\"large\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </AnimateButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport CategoryTable from './component/categoryTable';\r\nimport {\r\n    Button,\r\n    Grid,\r\n    MenuItem,\r\n    Menu,\r\n    Pagination,\r\n    OutlinedInput,\r\n    InputAdornment\r\n} from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { getAllCategories } from '../../../../redux/categories/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport AddUpdateCategory from './component/addUpdateCategory';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport HeadingCard from 'shared/Card/HeadingCard';\r\n\r\nconst Categories = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const categoryList = useSelector((state) => state.category.categoryList);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [categoryData, setCategoryData] = useState({\r\n        id: null,\r\n        name: '',\r\n        description: '',\r\n        image: null\r\n    });\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllCategories({\r\n                search: search,\r\n                page: page,\r\n                limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n\r\n    return (\r\n        <>\r\n            <AddUpdateCategory\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n                categoryData={categoryData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n\r\n            <HeadingCard title=\"Category Management\" />\r\n            <MainCard\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={3}>\r\n                            <OutlinedInput\r\n                                id=\"input-search-list-style1\"\r\n                                placeholder=\"Search\"\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"start\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                                size=\"small\"\r\n                                onChange={(e) => {\r\n                                    setSearch(e.target.value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={9} textAlign=\"end\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddUpdateOpen(true);\r\n                                    setCategoryData({ id: null, name: '', description: '', image: null });\r\n                                }}\r\n                            >\r\n                                Add Category\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                <CategoryTable\r\n                    categoryList={categoryList && categoryList}\r\n                    page={page}\r\n                    limit={limit}\r\n                    search={search}\r\n                    setAddUpdateOpen={setAddUpdateOpen}\r\n                    setCategoryData={setCategoryData}\r\n                />\r\n\r\n                <>\r\n                    <Grid item xs={12} sx={{ p: 3 }}>\r\n                        <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                            <Grid item>\r\n                                <Pagination\r\n                                    color=\"primary\"\r\n                                    showFirstButton\r\n                                    showLastButton\r\n                                    page={page}\r\n                                    count={categoryList && categoryList.pages}\r\n                                    onChange={(event, newPage) => {\r\n                                        setPage(newPage);\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    size=\"large\"\r\n                                    sx={{ color: theme.palette.grey[900] }}\r\n                                    color=\"secondary\"\r\n                                    endIcon={<ExpandMoreRoundedIcon />}\r\n                                    onClick={handleClick}\r\n                                >\r\n                                    {limit} Rows\r\n                                </Button>\r\n                                <Menu\r\n                                    id=\"menu-user-list-style1\"\r\n                                    anchorEl={anchorEl}\r\n                                    keepMounted\r\n                                    open={Boolean(anchorEl)}\r\n                                    onClose={handleCloseMenu}\r\n                                    variant=\"selectedMenu\"\r\n                                    anchorOrigin={{\r\n                                        vertical: 'top',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                    transformOrigin={{\r\n                                        vertical: 'bottom',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                >\r\n                                    <MenuItem\r\n                                        value={10}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        10 Rows\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value={25}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        25 Rows\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value={50}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        50 Rows{' '}\r\n                                    </MenuItem>\r\n                                </Menu>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Categories;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { forwardRef } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// constant\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                marginBottom: theme.spacing(gridSpacing),\r\n\r\n                borderColor: theme.palette.primary[200] + 75,\r\n                background: theme.palette.background.default\r\n            }}\r\n        >\r\n            <Box sx={{ padding: '13px 20px 22px 20px' }}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                    <Grid item>\r\n                        <Typography variant=\"h3\" sx={{ fontWeight: 500, color: '#000' }}>\r\n                            {title}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {value !== undefined && (\r\n                        <Grid item>\r\n                            {/* {options && (role == 'teacher' || role == 'super_admin') && ( */}\r\n                            <TextField\r\n                                id=\"standard-select-currency\"\r\n                                select\r\n                                value={value}\r\n                                onChange={(e) => setValue(e.target.value)}\r\n                                sx={{ width: '110px', height: '40px' }}\r\n                            >\r\n                                {options.map((option) => (\r\n                                    <MenuItem key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                            {/* )} */}\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        </Card>\r\n    );\r\n});\r\n\r\nexport default HeadingCard;\r\n","import PropTypes from 'prop-types';\r\nimport { useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Fragment } from 'react';\r\nimport { Grid, Typography, IconButton, Tooltip, RadioGroup, FormControlLabel, Radio } from '@mui/material';\r\n\r\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined';\r\nimport AddCircleOutlinedIcon from '@mui/icons-material/AddCircleOutlined';\r\n\r\n// Props needed for component formik ,correctOption, setCorrectOption , optionValue , formikFieldName , PlaceHOLDER\r\nconst FileInput = ({ formik, fieldName, placeHolder, accept }) => {\r\n    const dispatch = useDispatch();\r\n    const fileRef1 = useRef();\r\n\r\n    return (\r\n        <>\r\n            <Grid item className=\"displayFlex\">\r\n                <Fragment>\r\n                    <Tooltip placement=\"top\" title={accept == 'image/*' ? 'Add Image' : 'Add Audio'}>\r\n                        <IconButton color=\"primary\" aria-label=\"delete\" size=\"large\" onClick={() => fileRef1.current.click()}>\r\n                            <AddCircleOutlinedIcon sx={{ fontSize: '3.0rem' }} />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <input\r\n                        hidden\r\n                        ref={fileRef1}\r\n                        fullWidth\r\n                        type=\"file\"\r\n                        className=\"chooseFileInput\"\r\n                        accept={accept}\r\n                        onChange={(event) => {\r\n                            formik.setFieldValue(fieldName, event.currentTarget.files[0]);\r\n                        }}\r\n                        error={formik.touched[`${fieldName}`] && Boolean(formik.errors[`${fieldName}`])}\r\n                        helperText={formik.touched[`${fieldName}`] && formik.errors[`${fieldName}`]}\r\n                    />\r\n\r\n                    <Grid className=\"displayFlex\">\r\n                        {formik?.values[`${fieldName}`]?.name?.length < 40 ? (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {formik.values[`${fieldName}`]?.name}\r\n                            </Typography>\r\n                        ) : (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {formik.values[`${fieldName}`]?.name?.substring(0, 40)}\r\n                            </Typography>\r\n                        )}\r\n                        {formik?.values[`${fieldName}`] && (\r\n                            <Typography mt={3.5} variant=\"h5\" ml={2}>\r\n                                {'(' + (formik.values[`${fieldName}`]?.size / 1000000).toFixed(2) + '  mb)'}\r\n                            </Typography>\r\n                        )}\r\n\r\n                        {formik.values[`${fieldName}`] ? (\r\n                            <Tooltip placement=\"top\" title={accept == 'image/*' ? 'Clear Image' : 'Clear Audio'}>\r\n                                <IconButton\r\n                                    style={{ marginTop: '2px' }}\r\n                                    color=\"primary\"\r\n                                    aria-label=\"delete\"\r\n                                    size=\"large\"\r\n                                    onClick={() => {\r\n                                        formik.setFieldValue(fieldName, null);\r\n                                        fileRef1.current.value = null;\r\n                                    }}\r\n                                >\r\n                                    <CloseOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        ) : (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {placeHolder}\r\n                            </Typography>\r\n                        )}\r\n                    </Grid>\r\n                </Fragment>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n                <p className={'fileError'}>\r\n                    {formik.touched[`${fieldName}`] && Boolean(formik.errors[`${fieldName}`]) ? formik.errors[`${fieldName}`] : ''}\r\n                </p>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FileInput;\r\n"],"sourceRoot":""}