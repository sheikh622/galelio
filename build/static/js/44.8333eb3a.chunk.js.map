{"version":3,"sources":["views/pages/subAdmin/brands/component/deleteBrandDialog.js","views/pages/subAdmin/brands/component/brandTable.js","views/pages/subAdmin/brands/component/addUpdateBrand.js","views/pages/subAdmin/brands/index.js","ui-component/extended/Avatar.js","shared/Card/HeadingCard.js","shared/component/FileInput.js"],"names":["Transition","forwardRef","props","ref","Slide","direction","DeleteBrandDialog","open","setOpen","brandId","page","limit","search","theme","useTheme","dispatch","useDispatch","handleClose","Dialog","TransitionComponent","keepMounted","DialogTitle","id","className","DialogContent","DialogContentText","Typography","variant","component","DialogActions","sx","pr","Button","color","palette","error","dark","borderColor","onClick","size","deleteBrand","BrandTable","brandsList","navigate","setAddUpdateOpen","setBrandData","useNavigate","useState","deleteOpen","setDeleteOpen","TableContainer","undefined","brands","count","Table","TableHead","TableRow","TableCell","align","borderBottom","TableBody","map","row","index","display","textTransform","Grid","item","lg","Avatar","alt","src","image","name","moment","createdAt","format","updatedAt","Stack","justifyContent","alignItems","Tooltip","placement","title","IconButton","state","brandData","fontSize","style","padding","fontWeight","container","width","m","CircularProgress","AddUpdateBrandDialog","isUpdate","setIsUpdate","useEffect","validationSchema","Yup","default","required","max","location","description","when","is","then","otherwise","test","value","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","isValid","split","pop","toast","errorHandler","addBrand","updateBrand","user","resetForm","maxWidth","autoComplete","handleSubmit","xs","md","InputLabel","htmlFor","TextField","onChange","handleChange","touched","Boolean","errors","helperText","fullWidth","pt","ml","FileInput","accept","fieldName","placeHolder","Divider","margin","AnimateButton","type","background","disableElevation","Brands","useSelector","auth","brand","brandsByAdminList","setSearch","setPage","addUpdateOpen","getAllBrandsByAdmin","HeadingCard","MainCard","spacing","marginLeft","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","e","target","content","p","gridSpacing","Pagination","textAlign","showFirstButton","showLastButton","pages","event","newPage","outline","others","colorSX","paper","bgcolor","outlineSX","border","sizeSX","height","role","setValue","options","marginTop","mode","select","option","label","fileRef1","useRef","current","click","hidden","setFieldValue","currentTarget","files","length","mt","substring","toFixed"],"mappings":"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","file":"static/js/44.8333eb3a.chunk.js","sourcesContent":["import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteBrand } from '../../../../../redux/brand/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteBrandDialog({ open, setOpen, brandId, page, limit, search }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\"\r\n                className=\"statusHeading\">Delete Brand</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\" className=\"statustypo\">\r\n                            Are you sure you want to delete this Brand?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"  className='buttonSize' size='large' \r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        className='buttonSize' size='large' \r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteBrand({\r\n                                    id: brandId,\r\n                                    handleClose: handleClose,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n    IconButton,\r\n    Stack,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Tooltip,\r\n    Grid,\r\n    Typography,\r\n    CircularProgress\r\n} from '@mui/material';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport AddOutlinedIcon from '@mui/icons-material/AddOutlined';\r\nimport DeleteBrandDialog from './deleteBrandDialog';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\nimport moment from 'moment';\r\nimport DashboardIcon from '@mui/icons-material/Dashboard';\r\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\r\nconst BrandTable = ({ brandsList, page, limit, search, setAddUpdateOpen, setBrandData }) => {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const [brandId, setBrandId] = useState();\r\n    return (\r\n        <TableContainer>\r\n            <DeleteBrandDialog open={deleteOpen} setOpen={setDeleteOpen} brandId={brandId} page={page} limit={limit} search={search} />\r\n\r\n            {brandsList?.brands != undefined ? (\r\n                <>\r\n                    {brandsList?.count > 0 ? (\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell align=\"center\" sx={{ borderBottom: 'none' }}></TableCell>\r\n                                    <TableCell align=\"left \" className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                                        Brand name\r\n                                    </TableCell>\r\n                                    {/*   <TableCell   className='Tableheading' sx={{borderBottom:'none'}}>Location</TableCell>\r\n                        <TableCell   className='Tableheading' sx={{borderBottom:'none'}}>Description</TableCell> */}\r\n\r\n                                    <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                                        Created At\r\n                                    </TableCell>\r\n                                    <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                                        Updated At\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\" className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                                        Actions\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                <>\r\n                                    {brandsList.brands != undefined &&\r\n                                        brandsList.brands.map((row, index) => (\r\n                                            <TableRow>\r\n                                                <TableCell align=\"right\" sx={{ borderBottom: 'none' }}></TableCell>\r\n                                                <TableCell\r\n                                                    sx={{\r\n                                                        display: 'flex',\r\n                                                        borderBottom: 'none',\r\n                                                        textTransform: 'capitalize',\r\n                                                        borderBottom: 'none'\r\n                                                    }}\r\n                                                >\r\n                                                    <Grid item lg={6}>\r\n                                                        <Avatar alt=\"Brand Image\" src={row.image} sx={{}} />\r\n                                                    </Grid>\r\n                                                    <Grid item lg={6} className=\"tableName\">\r\n                                                        {row.name}\r\n                                                    </Grid>\r\n                                                </TableCell>\r\n                                                {/*       <TableCell  className='tablecell' sx={{ textTransform: 'capitalize' ,  borderBottom: 'none'}}>\r\n                                            {row.location}\r\n                                        </TableCell>\r\n                                        <TableCell  className='tablecell' sx={{ textTransform: 'capitalize' ,  borderBottom: 'none'}}>\r\n                                            {row.description}\r\n                                        </TableCell> */}\r\n\r\n                                                <TableCell className=\"tablecell\" sx={{ borderBottom: 'none' }}>\r\n                                                    {moment(row.createdAt).format('DD-MMM-YYYY')}\r\n                                                </TableCell>\r\n                                                <TableCell className=\"tablecell\" sx={{ borderBottom: 'none' }}>\r\n                                                    {moment(row.updatedAt).format('DD-MMM-YYYY')}\r\n                                                </TableCell>\r\n                                                <TableCell className=\"tablecell\" sx={{ borderBottom: 'none', textTransform: 'capitalize' }}>\r\n                                                    <Stack\r\n                                                        direction=\"row\"\r\n                                                        className=\"tablecell\"\r\n                                                        justifyContent=\"center\"\r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Tooltip placement=\"top\" title=\"Brand Admin\">\r\n                                                            <IconButton\r\n                                                                className=\"color\"\r\n                                                                aria-label=\"detail\"\r\n                                                                size=\"medium\"\r\n                                                                onClick={() => {\r\n                                                                    navigate('/brands/admin', {\r\n                                                                        state: {\r\n                                                                            brandData: row\r\n                                                                        }\r\n                                                                    });\r\n                                                                }}\r\n                                                            >\r\n                                                                <AccountCircleIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                            </IconButton>\r\n                                                        </Tooltip>\r\n                                                        <Tooltip placement=\"top\" title=\"Add Brand Categories\">\r\n                                                            <IconButton\r\n                                                                className=\"color\"\r\n                                                                aria-label=\"detail\"\r\n                                                                size=\"medium\"\r\n                                                                onClick={() => {\r\n                                                                    navigate('/brandsByAdmin/category', {\r\n                                                                        state: {\r\n                                                                            brandData: row\r\n                                                                        }\r\n                                                                    });\r\n                                                                }}\r\n                                                            >\r\n                                                                <DashboardIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                            </IconButton>\r\n                                                        </Tooltip>\r\n                                                        {/* <Tooltip placement=\"top\" title=\"Edit\">\r\n                                                            <IconButton\r\n                                                                className=\"color\"\r\n                                                                aria-label=\"Edit\"\r\n                                                                size=\"large\"\r\n                                                                onClick={() => {\r\n                                                                    setAddUpdateOpen(true);\r\n                                                                    setBrandData({\r\n                                                                        id: row.id,\r\n                                                                        name: row.name,\r\n                                                                        description: row.description,\r\n                                                                        location: row.location,\r\n                                                                        image: null\r\n                                                                    });\r\n                                                                }}\r\n                                                            >\r\n                                                                <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                            </IconButton>\r\n                                                        </Tooltip> */}\r\n                                                        {/* <Tooltip placement=\"top\" title=\"Delete\">\r\n                                                            <IconButton\r\n                                                                color=\"primary\"\r\n                                                                sx={{\r\n                                                                    color: theme.palette.orange.dark,\r\n                                                                    borderColor: theme.palette.orange.main,\r\n                                                                    '&:hover ': { background: theme.palette.orange.light }\r\n                                                                }}\r\n                                                                size=\"large\"\r\n                                                                onClick={() => {\r\n                                                                    setDeleteOpen(true);\r\n                                                                    setBrandId(row.id);\r\n                                                                }}\r\n                                                            >\r\n                                                                <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                            </IconButton>\r\n                                                        </Tooltip> */}\r\n                                                    </Stack>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                </>\r\n                            </TableBody>\r\n                        </Table>\r\n                    ) : (\r\n                        <>\r\n                            <Grid item>\r\n                                <Typography className=\"statustypo\" style={{ padding: '20px 20px 20px 70px', fontWeight: '500' }}>\r\n                                    No Data Available\r\n                                </Typography>\r\n                            </Grid>\r\n                        </>\r\n                    )}\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <Grid container justifyContent=\"center\" sx={{ width: '80%', m: '15px auto ' }}>\r\n                        <Grid item>\r\n                            <CircularProgress size={'4rem'} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            )}\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default BrandTable;\r\n","import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Grid, Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, Divider, InputLabel } from '@mui/material';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { addBrand, updateBrand } from '../../../../../redux/brand/actions';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport FileInput from '../../../../../shared/component/FileInput';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nexport default function AddUpdateBrandDialog({ brandData, page, limit, search, open, setOpen }) {\r\n    // const user = useSelector((state) => state.auth.user);\r\n    \r\n    const dispatch = useDispatch();\r\n    const [isUpdate, setIsUpdate] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (brandData.id == null) {\r\n            setIsUpdate(false);\r\n        } else {\r\n            setIsUpdate(true);\r\n        }\r\n    }, [brandData]);\r\n\r\n    const validationSchema = Yup.object({\r\n        isUpdate: Yup.boolean().default(isUpdate),\r\n        name: Yup.string()\r\n            .required('Brand Name is required!')\r\n            .max(42, 'Brand Name can not exceed 42 characters'),\r\n            // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Brand name'),\r\n        location: Yup.string()\r\n            .required('Location is required!')\r\n            .max(42, 'Location can not exceed 42 characters'),  \r\n            // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Location'),\r\n        description: Yup.string()\r\n            .required('Brand is required!')\r\n            .max(400, 'Brand can not exceed 400 characters'),\r\n            // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Description'),\r\n        image: Yup.mixed().when(['isUpdate'], {\r\n            is: true,\r\n            then: Yup.mixed(),\r\n            otherwise: Yup.mixed().required('Image is required')\r\n        })\r\n        .test('image size',\r\n         'this image is too large', (value) => !value || (value && value.size <= 1_000_000))\r\n\r\n    });\r\n    const errorHandler = (values) => {\r\n        if (values.image) {\r\n            if (\r\n                values.image.name.split('.').pop() == 'jpg' ||\r\n                values.image.name.split('.').pop() == 'png' ||\r\n                values.image.name.split('.').pop() == 'jpeg '\r\n            ) {\r\n                return true;\r\n            } else {\r\n                toast.error('Upload the files with these extensions: jpg, png, jpeg');\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: brandData,\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            const isValid = errorHandler(values);\r\n            if (isValid) {\r\n                if (brandData.id == null) {\r\n                    dispatch(\r\n                        addBrand({\r\n                            name: values.name,\r\n                            description: values.description,\r\n                            location: values.location,\r\n                            image: values.image,\r\n                            page: page,\r\n                            limit: limit,\r\n                            search: search,\r\n                            handleClose: handleClose\r\n                        })\r\n                    );\r\n                } else {\r\n                    dispatch(\r\n                        updateBrand({\r\n                            brandId: brandData.id,\r\n                            name: values.name,\r\n                            description: values.description,\r\n                            location: values.location,\r\n                            image: values.image,\r\n                            page: page,\r\n                            limit: limit,\r\n                            search: search,\r\n                            id: user.id,\r\n                            handleClose: handleClose\r\n                        })\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    });\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"createDialog dialog\"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\" className=\"adminname\">\r\n                    {brandData.id == null ? 'Create Brand' : 'Update Brand'}\r\n                </DialogTitle>\r\n                \r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid container>\r\n                        <Grid item xs={12} md={12} lg={12} >\r\n                                <InputLabel htmlFor=\"outlined-adornment-password-login\" className=\"textfieldStyle\">\r\n                                    Name\r\n                                </InputLabel>\r\n                                <TextField\r\n                                className='field'\r\n                                    id=\"name\"\r\n                                    name=\"name\"\r\n                                    variant=\"standard\"\r\n                                    value={formik.values.name}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                    helperText={formik.touched.name && formik.errors.name}\r\n                                    fullWidth\r\n                                    autoComplete=\"given-name\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} md={12} lg={12} pt={2}>\r\n                                <InputLabel htmlFor=\"outlined-adornment-password-login\"   className='textfieldStyle'>Location</InputLabel>\r\n                                <TextField\r\n                                className='field'\r\n                                    id=\"location\"\r\n                                    name=\"location\"  variant=\"standard\"\r\n                                    value={formik.values.location}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.location && Boolean(formik.errors.location)}\r\n                                    helperText={formik.touched.location && formik.errors.location}\r\n                                    fullWidth\r\n                                  \r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} md={12} lg={12} pt={2}>\r\n                                <InputLabel htmlFor=\"outlined-adornment-password-login\"   className='textfieldStyle'>Description</InputLabel>\r\n                                <TextField\r\n                                className='field'\r\n                                    id=\"description\"\r\n                                    name=\"description\"  variant=\"standard\"\r\n                                    value={formik.values.description}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.description && Boolean(formik.errors.description)}\r\n                                    helperText={formik.touched.description && formik.errors.description}\r\n                                    fullWidth\r\n                                  \r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} md={12} lg={12} pt={2} sx={{ml:{md:'-15px', lg:'-15px'}}}>\r\n                                <FileInput   className='textfieldStyle' variant=\"standard\" formik={formik} accept=\"image/*\" fieldName=\"image\" placeHolder=\"Add Brand Image\" />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n                <Divider />\r\n                <DialogActions sx={{ display:'block',  margin:'10px 10px 0px 20px' }}>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            className='buttons' size='large' \r\n                            variant=\"contained\"\r\n                            sx={{ width: '92%',\r\n                            margin: '0px 0px 10px 8px',  \r\n                            background: 'linear-gradient(97.63deg, #2F57FF 0%, #2FA3FF 108.45%)' ,\r\n                           }}\r\n                            onClick={() => {\r\n                                formik.handleSubmit();\r\n                            }}\r\n                            \r\n                            disableElevation\r\n                        >\r\n                            {brandData.id == null ? 'Create' : 'Update'}\r\n                        </Button>\r\n                        </AnimateButton>\r\n                        <AnimateButton>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            sx={{ width: '95%',\r\n                            margin: '0px 0px 10px 0px',   color: '#4044ED'  }}\r\n                            onClick={handleClose}\r\n                            \r\n                            className='buttons' size='large' \r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </AnimateButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport BrandTable from './component/brandTable';\r\nimport {\r\n    CircularProgress,\r\n    Button,\r\n    Typography,\r\n    Grid,\r\n    MenuItem,\r\n    TextField,\r\n    Menu,\r\n    Pagination,\r\n    OutlinedInput,\r\n    InputAdornment,\r\n    Divider\r\n} from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { getAllBrands, getAllBrandsByAdmin } from '../../../../redux/brand/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport AddUpdateBrandDialog from './component/addUpdateBrand';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport HeadingCard from 'shared/Card/HeadingCard';\r\n\r\nconst Brands = () => {\r\n    const user = useSelector((state) => state.auth.user);\r\n    \r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const brandsList = useSelector((state) => state.brand.brandsByAdminList);\r\n\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [brandData, setBrandData] = useState({\r\n        id: null,\r\n        name: '',\r\n        description: '',\r\n        image: null,\r\n        location: ''\r\n    });\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n\r\n            dispatch(\r\n                getAllBrandsByAdmin({\r\n                    search: search,\r\n                    page: page,\r\n                    limit: limit,\r\n                    id: user.id\r\n                })\r\n            );\r\n        \r\n    }, [search, page, limit]);\r\n\r\n    return (\r\n        <>\r\n            <AddUpdateBrandDialog\r\n                brandData={brandData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n            />\r\n            <HeadingCard title=\"Brand Management\" />\r\n            {/*    // <Grid container spacing={4} >\r\n            //         <Grid item xs={6} lg={8} >\r\n            //         <Typography className='mainheading' variant=\"h1\" component=\"h2\" sx={{marginLeft:{lg:'44px', md:'44px'}}}>\r\n            //         Brand Management\r\n            //       </Typography>\r\n            //       </Grid></Grid> */}\r\n\r\n            <MainCard\r\n                className=\"tableShadow\"\r\n                title={\r\n                    <Grid container spacing={4}>\r\n                        <Grid item xs={6} lg={8}>\r\n                            <Typography className=\"mainheading\" variant=\"h1\" component=\"h2\" sx={{ marginLeft: { lg: '44px', md: '44px' } }}>\r\n                                Brands\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3} lg={2}>\r\n                            <OutlinedInput\r\n                                id=\"input-search-list-style1\"\r\n                                placeholder=\"Search\"\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                                size=\"small\"\r\n                                onChange={(e) => {\r\n                                    setSearch(e.target.value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                            {/* <Grid item xs={3} lg={2} textAlign=\"start\">\r\n                                <Button\r\n                                    className=\"buttonSize\"\r\n                                    sx={{ marginLeft: { lg: '-16px', md: '-16px' } }}\r\n                                    variant=\"contained\"\r\n                                    size=\"large\"\r\n                                    onClick={() => {\r\n                                        setAddUpdateOpen(true);\r\n                                        setBrandData({ id: null, name: '', description: '', location: '', image: null });\r\n                                    }}\r\n                                >\r\n                                    Create\r\n                                </Button>\r\n                            </Grid> */}\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                <BrandTable\r\n                    brandsList={brandsList && brandsList}\r\n                    page={page}\r\n                    limit={limit}\r\n                    search={search}\r\n                    setAddUpdateOpen={setAddUpdateOpen}\r\n                    setBrandData={setBrandData}\r\n                />\r\n\r\n                <Grid item xs={12} sx={{ p: 3 }}>\r\n                    <Grid container justifyContent=\"center\" spacing={gridSpacing}>\r\n                        <Grid item>\r\n                            <Pagination\r\n                                textAlign=\"center\"\r\n                                color=\"primary\"\r\n                                showFirstButton\r\n                                showLastButton\r\n                                page={page}\r\n                                count={brandsList && brandsList.pages}\r\n                                onChange={(event, newPage) => {\r\n                                    setPage(newPage);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Brands;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { forwardRef } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// constant\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n    \r\n            <Box sx={{ padding: '13px 20px 22px 20px' }}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                    <Grid item>\r\n                        <Typography variant=\"h1\" component=\"h2\" className='headingcard' \r\n                        sx={{ marginTop:'10px' ,  \r\n                        fontWeight: 600, color: '#000' , marginLeft:{lg:'-20px', md:'-20px'} , \r\n                        background: theme.palette.mode === 'dark' ? 'black' : '#f3f3f3',\r\n                        color: theme.palette.mode === 'dark' ? 'white' : '#404040', }}>\r\n                            {title}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {value !== undefined && (\r\n                        <Grid item>\r\n                            {/* {options && (role == 'teacher' || role == 'super_admin') && ( */}\r\n                            <TextField\r\n                                id=\"standard-select-currency\"\r\n                                select\r\n                                value={value}\r\n                                onChange={(e) => setValue(e.target.value)}\r\n                                sx={{ width: '110px', height: '40px' }}\r\n                            >\r\n                                {options.map((option) => (\r\n                                    <MenuItem key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                            {/* )} */}\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n       \r\n    );\r\n});\r\n\r\nexport default HeadingCard;\r\n","import PropTypes from 'prop-types';\r\nimport { useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Fragment } from 'react';\r\nimport { Grid, Typography, IconButton, Tooltip, RadioGroup, FormControlLabel, Radio } from '@mui/material';\r\n\r\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined';\r\nimport AddCircleOutlinedIcon from '@mui/icons-material/AddCircleOutlined';\r\n\r\n// Props needed for component formik ,correctOption, setCorrectOption , optionValue , formikFieldName , PlaceHOLDER\r\nconst FileInput = ({ formik, fieldName, placeHolder, accept }) => {\r\n    \r\n    const dispatch = useDispatch();\r\n    const fileRef1 = useRef();\r\n\r\n    return (\r\n        <>\r\n            <Grid item className=\"displayFlex\">\r\n                <Fragment>\r\n                    <Tooltip placement=\"top\" title={accept == 'image/*' ? 'Add Image' : 'Add File'}>\r\n                        <IconButton color=\"primary\" aria-label=\"delete\" size=\"large\" onClick={() => fileRef1.current.click()}>\r\n                            <AddCircleOutlinedIcon sx={{ fontSize: '3.0rem' }} />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <input\r\n                        hidden\r\n                        ref={fileRef1}\r\n                        fullWidth\r\n                        type=\"file\"\r\n                        className=\"chooseFileInput\"\r\n                        accept={accept}\r\n                        onChange={(event) => {\r\n                            \r\n                            formik.setFieldValue(fieldName, event.currentTarget.files[0]);\r\n                        }}\r\n                        error={formik.touched[`${fieldName}`] && Boolean(formik.errors[`${fieldName}`])}\r\n                        helperText={formik.touched[`${fieldName}`] && formik.errors[`${fieldName}`]}\r\n                    />\r\n\r\n                    <Grid className=\"displayFlex\">\r\n                        {formik?.values[`${fieldName}`]?.name?.length < 40 ? (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {formik.values[`${fieldName}`]?.name}\r\n                            </Typography>\r\n                        ) : (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {formik.values[`${fieldName}`]?.name?.substring(0, 40)}\r\n                            </Typography>\r\n                        )}\r\n                        {formik?.values[`${fieldName}`] && (\r\n                            <Typography mt={3.5} variant=\"h5\" ml={2}>\r\n                                {'(' + (formik.values[`${fieldName}`]?.size / 1000000).toFixed(2) + '  mb)'}\r\n                            </Typography>\r\n                        )}\r\n\r\n                            \r\n                        {formik.values[`${fieldName}`] ? (\r\n                            <Tooltip placement=\"top\" title={accept == 'image/*' ? 'Clear Image' : 'Clear Audio'}>\r\n                                <IconButton\r\n                                    style={{ marginTop: '2px' }}\r\n                                    color=\"primary\"\r\n                                    aria-label=\"delete\"\r\n                                    size=\"large\"\r\n                                    onClick={() => {\r\n                                        formik.setFieldValue(fieldName, null);\r\n                                        fileRef1.current.value = null;\r\n                                    }}\r\n                                >\r\n                                    \r\n\r\n                                    <CloseOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                    \r\n                                    \r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        ) : (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {placeHolder}\r\n                            </Typography>\r\n                        )}\r\n                    </Grid>\r\n                </Fragment>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n                <p className={'fileError'}>\r\n                    {formik.touched[`${fieldName}`] && Boolean(formik.errors[`${fieldName}`]) ? formik.errors[`${fieldName}`] : ''}\r\n                </p>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FileInput;\r\n"],"sourceRoot":""}