{"version":3,"sources":["views/pages/brandAdmin/deliveryDashboard/component/changeStatus.js","views/pages/brandAdmin/deliveryDashboard/component/deliveryDashboard.js","views/pages/brandAdmin/deliveryDashboard/index.js","ui-component/extended/Avatar.js","shared/Card/HeadingCard.js"],"names":["Transition","forwardRef","props","ref","Slide","direction","ChangeStatusDialog","open","setOpen","user","page","limit","search","deliveryId","theme","setDeliveryId","useTheme","React","status","setStatus","dispatch","useDispatch","handleClose","Dialog","TransitionComponent","keepMounted","onClose","DialogTitle","id","Divider","DialogContent","DialogContentText","Typography","variant","component","Box","sx","minWidth","margin","FormControl","fullWidth","InputLabel","Select","labelId","label","onChange","event","target","value","map","option","MenuItem","DialogActions","pr","Button","color","palette","error","dark","borderColor","onClick","size","changeStatus","brand","BrandId","delivery","DeliveryDashboard","deliveryList","console","log","useState","TableContainer","length","Grid","item","className","style","padding","fontWeight","justifyContent","Table","TableHead","TableRow","TableCell","align","borderBottom","TableBody","undefined","row","index","display","textTransform","lg","Avatar","alt","src","Nft","asset","name","description","price","currencyType","User","address","Stack","Tooltip","placement","title","fontFamily","fontStyle","endIcon","Delivered","useSelector","state","auth","image","useEffect","getDeliveryDashboard","HeadingCard","MainCard","content","outline","others","colorSX","background","paper","bgcolor","outlineSX","border","sizeSX","width","spacing","height","role","setValue","options","container","alignItems","gridSpacing","marginTop","marginLeft","md","mode","select","e"],"mappings":"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","file":"static/js/33.314ea100.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Divider, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { changeStatus } from 'redux/deliveryDashboard/actions';\r\nimport Box from '@mui/material/Box';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function ChangeStatusDialog({ open, setOpen, page, limit, search, user, deliveryId, setDeliveryId }) {\r\n    const theme = useTheme();\r\n    const [status, setStatus] = React.useState('Delivered');\r\n\r\n    const handleChange = (event) => {\r\n        setStatus(event.target.value);\r\n    };\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const state = [\r\n        {\r\n            value: 'Status',\r\n            label: 'Status'\r\n        },\r\n        {\r\n            value: 'Delivered',\r\n            label: 'Delivered'\r\n        },\r\n        {\r\n            value: 'Pending',\r\n            label: 'Pending'\r\n        },\r\n        {\r\n            value: 'In Process',\r\n            label: 'In Process'\r\n        },\r\n        {\r\n            value: 'In Transit',\r\n            label: 'In Transit'\r\n        }\r\n    ];\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Change Status</DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to change the status?\r\n                        </Typography>\r\n\r\n                        <Box sx={{ minWidth: 120, margin: '20px' }}>\r\n                            <FormControl fullWidth>\r\n                                <InputLabel id=\"demo-simple-select-label\">Status</InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-simple-select-label\"\r\n                                    id=\"demo-simple-select\"                                \r\n                                    label=\"Status\"\r\n                                    onChange={handleChange}\r\n                                >\r\n                                    {state.map((option) => (\r\n                                        <MenuItem key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Box>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <Divider />\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                changeStatus({\r\n                                    brand: user.BrandId,\r\n                                    delivery:deliveryId,\r\n                                    status: status,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport {\r\n    IconButton,\r\n    Stack,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    Grid,\r\n    Divider,\r\n    Typography,\r\n    TableHead,\r\n    TableRow,\r\n    Tooltip,\r\n    Button,\r\n    CircularProgress\r\n} from '@mui/material';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport ChangeStatusDialog from './changeStatus';\r\n\r\nimport Avatar from 'ui-component/extended/Avatar';\r\nimport moment from 'moment';\r\n\r\nconst DeliveryDashboard = ({ deliveryList, user }) => {\r\n    console.log('deliveryList.lenght', deliveryList);\r\n    const theme = useTheme();\r\n    const [open, setOpen] = useState(false);\r\n    const [deliveryId, setDeliveryId] = useState(0);\r\n    return (\r\n        <>\r\n            <ChangeStatusDialog setOpen={setOpen} open={open} user={user} setDeliveryId={setDeliveryId} deliveryId={deliveryId} />\r\n            <TableContainer>\r\n            <>\r\n            {( deliveryList?.length == 0) ? (\r\n                <>\r\n                    <Grid item className='tableshadow'>\r\n                        <Typography variant='h3' style={{ padding: '20px', fontWeight: '800',color:'red', justifyContent: 'center' }}>\r\n                            {' '}\r\n                            No Data Available\r\n                        </Typography>\r\n                    </Grid>\r\n                </>\r\n            ) : (\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\" sx={{ borderBottom: 'none' }}></TableCell>\r\n                            <TableCell align=\"left \" className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                                Product name{' '}\r\n                            </TableCell>\r\n                            {/*   <TableCell   className='Tableheading' sx={{borderBottom:'none'}}>Location</TableCell> */}\r\n                            <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                                Description\r\n                            </TableCell>\r\n\r\n                            <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                                Price\r\n                            </TableCell>\r\n                            <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                                Status\r\n                            </TableCell>\r\n                            <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                                Address\r\n                            </TableCell>\r\n\r\n                            <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                                Actions\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                  \r\n                            <TableBody>\r\n                                {deliveryList != undefined &&\r\n                                    deliveryList?.map((row, index) => (\r\n                                        <>\r\n                                            <TableRow>\r\n                                                <TableCell align=\"right\" sx={{ borderBottom: 'none' }}></TableCell>\r\n\r\n                                                <TableCell\r\n                                                    sx={{\r\n                                                        display: 'flex',\r\n                                                        borderBottom: 'none',\r\n                                                        textTransform: 'capitalize',\r\n                                                        borderBottom: 'none'\r\n                                                    }}\r\n                                                >\r\n                                                    <Grid item lg={6}>\r\n                                                        <Avatar alt=\"Brand Image\" src={row?.Nft.asset} sx={{}} />\r\n                                                    </Grid>\r\n                                                    <Grid item lg={6} className=\"tableName\">\r\n                                                        {row?.Nft.name}\r\n                                                    </Grid>\r\n                                                </TableCell>\r\n\r\n                                                <TableCell className=\"tablecell\" sx={{ borderBottom: 'none' }}>\r\n                                                    {row?.Nft.description} \r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                    className=\"tablecell\"\r\n                                                    sx={{\r\n                                                        borderBottom: 'none',\r\n                                                        color:\r\n                                                            row?.status == 'Delivered'\r\n                                                                ? 'Green'\r\n                                                                : row?.status == 'pending'\r\n                                                                ? 'Blue'\r\n                                                                : 'Orange'\r\n                                                    }}\r\n                                                >\r\n                                                    {row?.Nft.price} {row?.Nft.currencyType}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                    className=\"tablecell\"\r\n                                                    sx={{\r\n                                                        borderBottom: 'none',\r\n                                                        color:\r\n                                                            row?.status == 'Delivered'\r\n                                                                ? 'Green'\r\n                                                                : row?.status == 'pending'\r\n                                                                ? 'Blue'\r\n                                                                : 'Orange'\r\n                                                    }}\r\n                                                >\r\n                                                    {row?.status}\r\n                                                </TableCell>\r\n                                                <TableCell className=\"tablecell\" sx={{ borderBottom: 'none' }}>\r\n                                                {row?.User?.address}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"left\" sx={{ borderBottom: 'none' }}>\r\n                                                    <Stack direction=\"row\" justifyContent=\"left\">\r\n                                                        <Tooltip placement=\"top\" title=\"Status\">\r\n                                                            <Button\r\n                                                                variant=\"outlined\"\r\n                                                                sx={{ fontFamily: 'Poppins', fontStyle: 'normal' }}\r\n                                                                endIcon={<SendIcon />}\r\n                                                                onClick={() => {\r\n                                                                    setOpen(true);\r\n                                                                    setDeliveryId(row?.id);\r\n                                                                }}\r\n                                                            >\r\n                                                                Status\r\n                                                            </Button>\r\n                                                        </Tooltip>\r\n                                                    </Stack>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        </>\r\n                                    ))}\r\n                            </TableBody>\r\n                     \r\n                </Table>\r\n                )}\r\n                </>\r\n                <Divider />\r\n            </TableContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DeliveryDashboard;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { Button, Grid, MenuItem, Menu, Pagination, OutlinedInput, InputAdornment, Typography } from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { getDeliveryDashboard } from 'redux/deliveryDashboard/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport DeliveryDashboard from './component/deliveryDashboard';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport HeadingCard from 'shared/Card/HeadingCard';\r\n\r\nconst Delivered = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const deliveryList = useSelector((state) => state.delivery.deliveryList);\r\n    const user = useSelector((state) => state.auth.user);\r\n\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [categoryData, setCategoryData] = useState({\r\n        id: null,\r\n        name: '',\r\n        description: '',\r\n        image: null\r\n    });\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getDeliveryDashboard({\r\n                brand: user.BrandId\r\n                // search: search,\r\n                // page: page,\r\n                // limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n\r\n    return (\r\n        <>\r\n            <HeadingCard title=\" Delivery Dashboard\" />\r\n\r\n            <MainCard\r\n            className=\" tableShadow\"\r\n              \r\n                content={false}\r\n            >\r\n                <DeliveryDashboard deliveryList={deliveryList} user={user} />\r\n\r\n                <>\r\n                 {  /*  <Grid item xs={12} sx={{ p: 3 }}>\r\n                        <Grid container justifyContent=\"center\" spacing={gridSpacing}>\r\n                            <Grid item>\r\n                                <Pagination\r\n                                    color=\"primary\"\r\n                                    showFirstButton\r\n                                    showLastButton\r\n                                    page={page}\r\n                                    count={1}\r\n                                    onChange={(event, newPage) => {\r\n                                        setPage(newPage);\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                           \r\n                        </Grid>\r\n                    </Grid> */}\r\n                </>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Delivered;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { forwardRef } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// constant\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n    \r\n            <Box sx={{ padding: '13px 20px 22px 20px' }}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                    <Grid item>\r\n                        <Typography variant=\"h1\" component=\"h2\" className='headingcard' \r\n                        sx={{ marginTop:'10px' ,  \r\n                        fontWeight: 600, color: '#000' , marginLeft:{lg:'-20px', md:'-20px'} , \r\n                        background: theme.palette.mode === 'dark' ? 'black' : '#f3f3f3',\r\n                        color: theme.palette.mode === 'dark' ? 'white' : '#404040', }}>\r\n                            {title}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {value !== undefined && (\r\n                        <Grid item>\r\n                            {/* {options && (role == 'teacher' || role == 'super_admin') && ( */}\r\n                            <TextField\r\n                                id=\"standard-select-currency\"\r\n                                select\r\n                                value={value}\r\n                                onChange={(e) => setValue(e.target.value)}\r\n                                sx={{ width: '110px', height: '40px' }}\r\n                            >\r\n                                {options.map((option) => (\r\n                                    <MenuItem key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                            {/* )} */}\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n       \r\n    );\r\n});\r\n\r\nexport default HeadingCard;\r\n"],"sourceRoot":""}