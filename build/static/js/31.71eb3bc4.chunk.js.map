{"version":3,"sources":["views/pages/user/productDetails/component/properties.js","views/pages/user/productDetails/component/productView.js","assets/images/watch3.png","views/pages/user/productDetails/component/productDetails.js","views/pages/user/productDetails/index.js","ui-component/extended/Avatar.js","ui-component/cards/SubCard.js"],"names":["Properties","nft","theme","useTheme","Grid","spacing","gridSpacing","sx","margin","item","xs","lg","md","container","mb","Typography","variant","mt","component","textAlign","sm","textTransform","NFTMetaData","length","responsive","superLargeDesktop","breakpoint","max","min","items","desktop","tablet","mobile","autoPlay","autoPlaySpeed","customTransition","transitionDuration","infinite","map","justifyContent","width","SubCard","className","background","palette","mode","fieldName","fieldValue","PropertiesView","dispatch","useDispatch","useState","bought","setBought","resell","setResell","redeem","setRedeem","lazyResell","lazyResellAgain","setLazyResellAgain","navigate","useNavigate","user","useSelector","state","auth","useEffect","getNftBuyer","walletAddress","NFTTokenId","NFTTokens","id","NftId","UserNfts","console","log","buyerNft","nftReducer","nftBuyer","React","open","setOpen","rprice","ResellDialog","handleClose","style","Button","float","size","onClick","handleResellNft","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","label","fullWidth","onChange","e","target","value","DialogActions","handleBuyNft","mintType","erc20Address","BLOCKCHAIN","ERC20","tokenId","parseInt","contractAddress","Category","BrandCategories","price","ethers","utils","parseEther","toString","provider","providers","Web3Provider","window","ethereum","signer","getSigner","marketplace","Contract","MarketplaceAddress","address","MarketplaceAbi","abi","token","Erc20","approve","wait","purchaseItem","then","data","buyNft","nftId","nftToken","buyerAddress","from","catch","error","toast","message","signers","signerAddress","signature","nfts","NFTAbi","prices","tokenPrice","voucher","uri","tokenUri","validatorAddress","lazyMint","mintedNFT","events","args","changeTokenId","resellItem","resellNft","success","tid","dbprice","marketplaceAddr","makeItem","handleRedeemNft","redeemNft","addDeliveryNft","status","TokenId","WalletAddress","height","src","asset","alt","display","Box","ml","alignItems","Avatar","Brand","image","objectFit","zeroMinWidth","RouterLink","textDecoration","to","align","fontWeight","name","color","fontSize","marginTop","description","paddingLeft","currencyType","isSold","JSON","stringify","founded","Alert","severity","createData","calories","fat","carbs","protein","ProductDetails","location","useLocation","marketplaceReducer","marketplaceNfts","outline","others","colorSX","paper","bgcolor","outlineSX","border","borderColor","sizeSX","forwardRef","ref","children","content","contentClass","darkTitle","secondary","contentSX","title","dark","light","primary","boxShadow","p","action","opacity","defaultProps"],"mappings":"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","file":"static/js/31.71eb3bc4.chunk.js","sourcesContent":["// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Container, Grid, Typography } from '@mui/material';\r\n\r\n// project imports\r\n\r\nimport SubCard from 'ui-component/cards/SubCard';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\nimport Carousel from 'react-multi-carousel';\r\nimport 'react-multi-carousel/lib/styles.css';\r\n\r\n// =============================|| LANDING - FEATURE PAGE ||============================= //\r\n\r\nconst Properties = ({ nft }) => {\r\n    const theme = useTheme();\r\n    const responsive = {\r\n        superLargeDesktop: {\r\n            // the naming can be any, depends on you.\r\n            breakpoint: { max: 4000, min: 3000 },\r\n            items: 5\r\n        },\r\n        desktop: {\r\n            breakpoint: { max: 3000, min: 1024 },\r\n            items: 5\r\n        },\r\n        tablet: {\r\n            breakpoint: { max: 1024, min: 464 },\r\n            items: 2\r\n        },\r\n        mobile: {\r\n            breakpoint: { max: 464, min: 0 },\r\n            items: 1\r\n        }\r\n    };\r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12} lg={12} md={12}>\r\n                <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                    <Grid item xs={12}>\r\n                        <Typography\r\n                            variant=\"h2\"\r\n                            mt={4}\r\n                            component=\"div\"\r\n                            sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' },\r\n                             textTransform: 'capitalize' }}\r\n                        >\r\n                            Properties\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                {nft.NFTMetaData?.length > 0 ? (\r\n                    <>\r\n                        <Carousel\r\n                            responsive={responsive}\r\n                            autoPlay={true}\r\n                            autoPlaySpeed={2800}\r\n                            customTransition=\"all .5\"\r\n                            transitionDuration={500}\r\n                            infinite={true}\r\n                        >\r\n                            {nft.NFTMetaData.map((item) => (\r\n                                <>\r\n                                    <Grid container justifyContent=\"left\" spacing={gridSpacing}\r\n                                     sx={{ textAlign: 'center', width: '500%' }}>\r\n                                        <Grid item md={2} sm={6}>\r\n                                            <SubCard\r\n                                                className=\"property\"\r\n                                                sx={{ background: theme.palette.mode === 'dark' ? '#181C1F' : '#fff' }}\r\n                                            >\r\n                                                <Grid container justifyContent=\"center\" spacing={2}>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography className=\"pbackground\" variant=\"body\">\r\n                                                            {item.fieldName}\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography variant=\"h3\">{item.fieldValue} </Typography>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </SubCard>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </>\r\n                            ))}\r\n                        </Carousel>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Grid sx={{ width: '100%', margin: '3%' }}>\r\n                            <h3 sx={{ textAlign: 'center' }}>No properties found.</h3>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Properties;\r\n","// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { CardMedia, Grid, Typography, Button, Alert, AlertTitle, Stack, Box } from '@mui/material';\r\nimport React, { useEffect } from 'react';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\nimport { ethers } from 'ethers';\r\nimport NFTAbi from '../../../../../contractAbi/NFT.json';\r\nimport MarketplaceAbi from '../../../../../contractAbi/Marketplace.json';\r\nimport MarketplaceAddress from '../../../../../contractAbi/Marketplace-address.json';\r\nimport Erc20 from '../../../../../contractAbi/Erc20.json';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { buyNft, resellNft, redeemNft, getNftBuyer, addDeliveryNft, changeTokenId } from 'redux/nftManagement/actions';\r\n// import ResellDialog from \"./resellDialog\"\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Grid2 from '@mui/material/Unstable_Grid2/Grid2';\r\nimport BLOCKCHAIN from '../../../../../constants';\r\nimport SubCard from 'ui-component/cards/SubCard';\r\n\r\n// =============================|| LANDING - FEATURE PAGE ||============================= //\r\n\r\nconst PropertiesView = ({ nft }) => {\r\n    const dispatch = useDispatch();\r\n    const [bought, setBought] = useState(false);\r\n    const [resell, setResell] = useState(false);\r\n    const [redeem, setRedeem] = useState(false);\r\n    const [lazyResell, setLazyResell] = useState(false);\r\n    const [lazyResellAgain, setLazyResellAgain] = useState(false);\r\n    const navigate = useNavigate();\r\n    const user = useSelector((state) => state.auth.user);\r\n\r\n    const theme = useTheme();\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            dispatch(\r\n                getNftBuyer({\r\n                    walletAddress: user?.walletAddress,\r\n                    NFTTokenId: nft.NFTTokens[0].id,\r\n                    NftId: nft.id\r\n                })\r\n            );\r\n        }\r\n        let length = nft?.UserNfts?.length;\r\n        // if ((nft.UserNfts[length-1].status)==\"Resell\") {\r\n        //     setLazyResell(true);\r\n        // }\r\n\r\n        if (nft?.UserNfts?.length > 1) {\r\n            setLazyResellAgain(true);\r\n        }\r\n    }, [bought, resell, redeem]);\r\n\r\n    console.log('lazyResell', lazyResell);\r\n    console.log('lazyResellAgain', lazyResellAgain);\r\n\r\n    const buyerNft = useSelector((state) => state.nftReducer.nftBuyer);\r\n\r\n    console.log('buyerNft from product view', buyerNft);\r\n\r\n    console.log('nft from product view', nft);\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    let rprice = 0;\r\n    const ResellDialog = () => {\r\n        const handleClickOpen = () => {\r\n            setOpen(true);\r\n        };\r\n\r\n        const handleClose = () => {\r\n            setOpen(false);\r\n        };\r\n\r\n        return (\r\n            <Grid style={{ width: '100%' }}>\r\n                <Button\r\n                    sx={{ float: { md: 'right' } }}\r\n                    className=\"buy\"\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    onClick={() => {\r\n                        if (lazyResell) {\r\n                            setOpen(true);\r\n                        } else if (lazyResell == false) {\r\n                            handleResellNft();\r\n                        }\r\n                    }}\r\n                >\r\n                    Resell\r\n                </Button>\r\n                <Dialog open={open} onClose={handleClose}>\r\n                    <DialogTitle>NFT Resell Price</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>Please enter the price for the NFT</DialogContentText>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Price \"\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                            // value={rprice}\r\n                            onChange={(e) => {\r\n                                rprice = e.target.value;\r\n                            }}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose}>Cancel</Button>\r\n                        <Button\r\n                            onClick={() => {\r\n                                handleResellNft();\r\n                            }}\r\n                        >\r\n                            Resell\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                <Grid></Grid>\r\n            </Grid>\r\n        );\r\n    };\r\n\r\n    const handleBuyNft = async () => {\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else if (nft.mintType == 'directMint') {\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n            let price = ethers.utils.parseEther(nft.price.toString());\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n            const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n            await (await token.approve(MarketplaceAddress.address, price)).wait();\r\n            await await marketplace\r\n                .purchaseItem(tokenId, contractAddress, price)\r\n                .then((data) => {\r\n                    setBought(true);\r\n                    dispatch(\r\n                        buyNft({\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress\r\n                        })\r\n                    );\r\n\r\n                    console.log('NFT mint success', data);\r\n                })\r\n                .catch((error) => {\r\n                    // console.log('error', error.message);\r\n                    toast.error(error.message);\r\n                });\r\n        } else if (nft.mintType == 'lazyMint') {\r\n            if (lazyResellAgain) {\r\n                try {\r\n                    let erc20Address = BLOCKCHAIN.ERC20;\r\n                    let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n                    let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n                    let price = ethers.utils.parseEther(nft.price.toString());\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                    const signer = provider.getSigner();\r\n\r\n                    const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n                    const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n                    await (await token.approve(MarketplaceAddress.address, price)).wait();\r\n                    await await marketplace\r\n                        .purchaseItem(tokenId, contractAddress, price)\r\n                        .then((data) => {\r\n                            setBought(true);\r\n                            dispatch(\r\n                                buyNft({\r\n                                    nftId: nft.id,\r\n                                    nftToken: nft.NFTTokens[0].id,\r\n                                    buyerAddress: data.from,\r\n                                    contractAddress: contractAddress\r\n                                })\r\n                            );\r\n\r\n                            console.log('NFT mint success', data);\r\n                        })\r\n                        .catch((error) => {\r\n                            // console.log('error', error.message);\r\n                            toast.error(error.message);\r\n                        });\r\n                } catch (error) {\r\n                    toast.error(error.message);\r\n                }\r\n            } else {\r\n                console.log('im in lazy mint else if');\r\n                let signers = nft.signerAddress;\r\n                let erc20Address = BLOCKCHAIN.ERC20;\r\n                let signature = nft.NFTTokens[0].signature;\r\n                let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n                // let contractAddress = \"0x6e9550E5fee2bE7BdB208214e9cE2B47131a5Ca0\";\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                const signer = provider.getSigner();\r\n                const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n                console.log(nfts);\r\n                console.log(signers);\r\n                console.log(contractAddress);\r\n                console.log(signature);\r\n                let prices = ethers.utils.parseEther(nft.tokenPrice);\r\n\r\n                let voucher = {\r\n                    uri: nft.tokenUri,\r\n                    price: prices,\r\n                    token: erc20Address\r\n                };\r\n\r\n                console.log('Marketplace: ', MarketplaceAddress.address);\r\n                let validatorAddress = '0x6f3b51bd5b67f3e5bca2fb32796215a796b79651';\r\n                const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n                await (await token.approve(contractAddress, prices)).wait();\r\n\r\n                //\r\n                try {\r\n                    let mintedNFT = await (await nfts.lazyMint(validatorAddress, voucher, signature, MarketplaceAddress.address)).wait();\r\n                    const id = parseInt(mintedNFT.events[0].args[2]);\r\n                    console.log('Data: ', mintedNFT, id);\r\n\r\n                    setBought(true);\r\n                    dispatch(\r\n                        changeTokenId({\r\n                            id: nft.NFTTokens[0].id,\r\n                            tokenId: id.toString()\r\n                        })\r\n                    );\r\n\r\n                    dispatch(\r\n                        buyNft({\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: mintedNFT.from,\r\n                            contractAddress: contractAddress\r\n                        })\r\n                    );\r\n                } catch (error) {\r\n                    toast.error(error.message);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleResellNft = async () => {\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else if (nft.mintType == 'directMint') {\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n\r\n            rprice = ethers.utils.parseEther(rprice.toString());\r\n            console.log('erc20Address', erc20Address);\r\n            console.log('tokenId', tokenId);\r\n            console.log('contractAddress', contractAddress);\r\n\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            console.log('signer', signer);\r\n            console.log('MarketplaceAbi.abi', MarketplaceAbi.abi);\r\n            const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n            console.log(marketplace);\r\n            console.log(tokenId);\r\n            console.log(contractAddress);\r\n            await (await nfts.approve(MarketplaceAddress.address, tokenId)).wait();\r\n            await await marketplace\r\n                .resellItem(tokenId, contractAddress, rprice)\r\n                .then((data) => {\r\n                    dispatch(\r\n                        resellNft({\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress\r\n                        })\r\n                    );\r\n                    setResell(true);\r\n                    setOpen(false);\r\n                    toast.success('NFT is Resold');\r\n                })\r\n                .catch((error) => {\r\n                    toast.error(error.message);\r\n                });\r\n        } else if (nft.mintType == 'lazyMint') {\r\n            if (lazyResellAgain) {\r\n                let erc20Address = BLOCKCHAIN.ERC20;\r\n                let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n                let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n\r\n                rprice = ethers.utils.parseEther(rprice.toString());\r\n                console.log('erc20Address', erc20Address);\r\n                console.log('tokenId', tokenId);\r\n                console.log('contractAddress', contractAddress);\r\n\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                const signer = provider.getSigner();\r\n\r\n                console.log('signer', signer);\r\n                console.log('MarketplaceAbi.abi', MarketplaceAbi.abi);\r\n                const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n                const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n                console.log(marketplace);\r\n                console.log(tokenId);\r\n                console.log(contractAddress);\r\n                await await nfts.approve(MarketplaceAddress.address, tokenId);\r\n                await await marketplace\r\n                    .resellItem(tokenId, contractAddress, rprice)\r\n                    .then((data) => {\r\n                        dispatch(\r\n                            resellNft({\r\n                                nftId: nft.id,\r\n                                nftToken: nft.NFTTokens[0].id,\r\n                                buyerAddress: data.from,\r\n                                contractAddress: contractAddress\r\n                            })\r\n                        );\r\n                        setResell(true);\r\n                        setOpen(false);\r\n                        toast.success('NFT is Resold');\r\n                    })\r\n                    .catch((error) => {\r\n                        toast.error(error.message);\r\n                    });\r\n            } else if (lazyResellAgain == false) {\r\n                setOpen(false);\r\n                console.log('im in lazmint resell buy');\r\n                let tid = parseInt(nft.NFTTokens[0].tokenId);\r\n\r\n                console.log('tid', tid);\r\n                let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n                let dbprice = nft.price;\r\n                let erc20Address = BLOCKCHAIN.ERC20;\r\n                let price = ethers.utils.parseEther(dbprice.toString());\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                const signer = provider.getSigner();\r\n\r\n                const marketplaceAddr = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n                await (\r\n                    await marketplaceAddr.makeItem(erc20Address, tid, contractAddress, price).catch((error) => {\r\n                        toast.error(error.message);\r\n                    })\r\n                )\r\n                    .wait()\r\n                    .then((data) => {\r\n                        dispatch(\r\n                            resellNft({\r\n                                nftId: nft.id,\r\n                                nftToken: nft.NFTTokens[0].id,\r\n                                buyerAddress: data.from,\r\n                                contractAddress: contractAddress\r\n                            })\r\n                        );\r\n                        setResell(true);\r\n                        setOpen(false);\r\n                        toast.success('NFT is Resold');\r\n                    })\r\n                    .catch((error) => {\r\n                        toast.error(error.message);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleRedeemNft = async () => {\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else {\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n\r\n            await await marketplace\r\n                .redeemNft(tokenId, contractAddress)\r\n                .then((data) => {\r\n                    dispatch(\r\n                        redeemNft({\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress\r\n                        })\r\n                    );\r\n                    dispatch(\r\n                        addDeliveryNft({\r\n                            status: 'Pending',\r\n                            TokenId: nft.NFTTokens[0].id,\r\n                            WalletAddress: data.from,\r\n                            NftId: nft.id\r\n                        })\r\n                    );\r\n                    setRedeem(true);\r\n                    toast.success('NFT Redeem successfully');\r\n                })\r\n                .catch((error) => {\r\n                    toast.error(error.message);\r\n                });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12}>\r\n                <Grid container justifyContent=\"center\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n                    <Grid item md={4} lg={4} className=\"Productdetails\" sx={{ height: 'auto' }}>\r\n                        <SubCard>\r\n                            <img src={nft?.asset} alt=\"Statement Image\" className=\"ProductimageSize\" />\r\n                        </SubCard>{' '}\r\n                    </Grid>\r\n                    <Grid item md={1} lg={1} sm={12} sx={{ display: { xs: 'none', sm: 'none', md: 'block', lg: 'block' } }}>\r\n                        {' '}\r\n                        <Box className=\"line\">h</Box>{' '}\r\n                    </Grid>\r\n                    <Grid item md={6} sm={12}>\r\n                        <Grid item xs={12}>\r\n                            <Grid container>\r\n                                <Grid item md={12} sm={12}>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid mt={2} ml={1} item md={12} xs={12}>\r\n                                            <Grid container spacing={2} alignItems=\"center\">\r\n                                                <Grid item md={2}>\r\n                                                    <Avatar\r\n                                                        alt=\"User 1\"\r\n                                                        src={nft?.Brand?.image}\r\n                                                        sx={{ width: 80, height: 80, objectFit: 'fill' }}\r\n                                                    />\r\n                                                </Grid>\r\n\r\n                                                <Grid\r\n                                                    item\r\n                                                    md={9}\r\n                                                    xs\r\n                                                    zeroMinWidth\r\n                                                    component={RouterLink}\r\n                                                    sx={{ textDecoration: 'none' }}\r\n                                                    to=\"/companyPage\"\r\n                                                >\r\n                                                    <Typography align=\"left\" fontWeight={900} variant=\"h2\" className=\"brand\">\r\n                                                        {nft?.Brand?.name}\r\n                                                    </Typography>\r\n                                                    <Typography align=\"left\" variant=\"h3\" className=\"creator\">\r\n                                                        Creator\r\n                                                    </Typography>\r\n                                               \r\n\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n\r\n                                        <Grid item mt={1} xs={12}>\r\n                                            <Typography\r\n                                                className=\"Lux\"\r\n                                                color={theme.palette.mode === 'dark' ? 'white' : 'black'}\r\n                                                variant=\"h3\"\r\n                                            >\r\n                                                <span>{nft?.name}</span>\r\n                                                <div style={{fontSize:\"60%\", marginTop:\"3%\", color:\"green\"}}>{nft?.NFTTokens?.length} items left</div>\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <Typography className=\"productdescription\" variant=\"h3\">\r\n                                                {nft?.description}\r\n                                            </Typography>\r\n                                        </Grid>\r\n\r\n                                        <Grid item mt={1} mb={2} xs={12}>\r\n                                            <Grid container>\r\n                                                <Grid item md={4} xs={12} sm={12}>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography\r\n                                                            color={theme.palette.mode === 'dark' ? 'white' : '#404040'}\r\n                                                            sx={{ paddingLeft: { md: '16px' }, textAlign: 'left' }}\r\n                                                            className=\"price\"\r\n                                                            variant=\"h3\"\r\n                                                        >\r\n                                                            Price\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography\r\n                                                            color={theme.palette.mode === 'dark' ? 'white' : '#262626'}\r\n                                                            sx={{ paddingLeft: { md: '15px' }, textAlign: 'left' }}\r\n                                                            className=\"ETH\"\r\n                                                            variant=\"h3\"\r\n                                                        >\r\n                                                            {nft.price} {nft.currencyType}\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <>\r\n                                                    {(bought == true || nft.isSold == true) && JSON.stringify(buyerNft) === '{}' ? (\r\n                                                        <>\r\n                                                            {}\r\n                                                            <Grid item md={8} xs={12} sm={12} textAlign=\"center\">\r\n                                                                <Alert severity=\"error\">\r\n                                                                    <b>This item is sold already!</b>\r\n                                                                </Alert>\r\n                                                            </Grid>\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <>\r\n                                                            {buyerNft?.founded ? (\r\n                                                                <>\r\n                                                                    <>\r\n                                                                        <Grid sx={{ mt: 4 }} item md={12} xs={12} sm={12} textAlign=\"right\">\r\n                                                                            {buyerNft?.status == 'Redeem' ? (\r\n                                                                                <>\r\n                                                                                    <Alert severity=\"success\">\r\n                                                                                        <b>This item is Redeemed</b>\r\n                                                                                    </Alert>\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    {(buyerNft?.status !== 'Resell' || redeem !== true) && (\r\n                                                                                        <>\r\n                                                                                            {nft.mintType == 'directMint' && (\r\n                                                                                                <Button\r\n                                                                                                    sx={{ float: { md: 'right' } }}\r\n                                                                                                    className=\"buy\"\r\n                                                                                                    variant=\"contained\"\r\n                                                                                                    size=\"large\"\r\n                                                                                                    onClick={() => {\r\n                                                                                                        handleRedeemNft();\r\n                                                                                                    }}\r\n                                                                                                >\r\n                                                                                                    Redeem\r\n                                                                                                </Button>\r\n                                                                                            )}\r\n\r\n                                                                                            {lazyResellAgain && (\r\n                                                                                                <Button\r\n                                                                                                    sx={{ float: { md: 'right' } }}\r\n                                                                                                    className=\"buy\"\r\n                                                                                                    variant=\"contained\"\r\n                                                                                                    size=\"large\"\r\n                                                                                                    onClick={() => {\r\n                                                                                                        handleRedeemNft();\r\n                                                                                                    }}\r\n                                                                                                >\r\n                                                                                                    Redeem\r\n                                                                                                </Button>\r\n                                                                                            )}\r\n                                                                                        </>\r\n                                                                                    )}\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                        </Grid>\r\n                                                                        <Grid sx={{ mt: 3 }} item md={12} xs={12} sm={12} textAlign=\"right\">\r\n                                                                            {buyerNft?.status == 'Resell' || resell == true ? (\r\n                                                                                <>\r\n                                                                                    <Alert severity=\"info\">\r\n                                                                                        <b>This item is resold.</b>\r\n                                                                                    </Alert>\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>{buyerNft?.status !== 'Redeem' && <ResellDialog />}</>\r\n                                                                            )}\r\n                                                                        </Grid>\r\n                                                                    </>\r\n                                                                </>\r\n                                                            ) : (\r\n                                                                <>\r\n                                                                    {/* {(bought || redeem || resell) !== true && ( */}\r\n                                                                        <Grid item md={8} xs={12} sm={12} textAlign=\"center\">\r\n                                                                            <Button\r\n                                                                                sx={{ float: { md: 'right' } }}\r\n                                                                                className=\"buy\"\r\n                                                                                variant=\"contained\"\r\n                                                                                size=\"large\"\r\n                                                                                onClick={() => {\r\n                                                                                    handleBuyNft();\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                Buy Now\r\n                                                                            </Button>\r\n                                                                        </Grid>\r\n                                                                    {/* )} */}\r\n                                                                </>\r\n                                                            )}\r\n                                                        </>\r\n                                                    )}\r\n                                                </>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item md={1} sm={12}></Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default PropertiesView;\r\n","export default __webpack_public_path__ + \"static/media/watch3.3ddebc6b.png\";","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Button,\r\n    CardContent,\r\n    Chip,\r\n    Stack,\r\n    Divider,\r\n    Grid,\r\n    LinearProgress,\r\n    List,\r\n    ListItemButton,\r\n    ListItemIcon,\r\n    ListItemSecondaryAction,\r\n    ListItemText,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableRow,\r\n    Typography\r\n} from '@mui/material';\r\n\r\n// project imports\r\nimport MonetizationOnIcon from '@mui/icons-material/MonetizationOn';\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport { gridSpacing } from 'store/constant';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport TourIcon from '@mui/icons-material/Tour';\r\nimport ModeIcon from '@mui/icons-material/Mode';\r\n// assets\r\nimport { IconEdit } from '@tabler/icons';\r\nimport TipsAndUpdatesIcon from '@mui/icons-material/TipsAndUpdates';\r\nimport PinDropTwoToneIcon from '@mui/icons-material/PinDropTwoTone';\r\nimport DescriptionIcon from '@mui/icons-material/Description';\r\nimport moment from 'moment';\r\nimport { Watch } from 'react-loader-spinner';\r\nimport watch1 from 'assets/images/watch3.png';\r\n\r\n// progress\r\nfunction LinearProgressWithLabel({ value, ...other }) {\r\n    return (\r\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n            <Box sx={{ width: '100%', mr: 1 }}>\r\n                <LinearProgress {...other} />\r\n            </Box>\r\n            <Box sx={{ minWidth: 35 }}>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(value)}%`}</Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n    value: PropTypes.number\r\n};\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n    return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n    createData('Product Name', ':', 'Watch'),\r\n    createData('Status', ':', 'status'),\r\n    createData('Description', ':', ' Delivery Dashboard '),\r\n    createData('Price', ':', '12345'),\r\n    createData('Mint Type', ':', '+0 123456789 '),\r\n    createData('Brand', ':', 'Joker'),\r\n    createData('Token URL', ':', 'http://example.com')\r\n];\r\n\r\n// ==============================|| DeliveryDashboard ||============================== //\r\n\r\nconst DeliveryDashboard = ({ productList }) => {\r\n    return (\r\n        <Grid mt={2} ml={2} item lg={12} md={12} xs={12}>\r\n            <Grid container direction=\"column\" spacing={gridSpacing}>\r\n                <Grid item xs={12}>\r\n                    <SubCard title=\"Product Details\">\r\n                        <Grid container direction=\"column\" spacing={2}>\r\n                            <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n                                <Grid item xs={12}>\r\n                                    <>\r\n                                        <Grid\r\n                                            container\r\n                                            justifyContent=\"center\"\r\n                                            spacing={gridSpacing}\r\n                                            sx={{ textAlign: 'center', marginBottom: '20px' }}\r\n                                        >\r\n                                            <Grid item md={1} sm={12}></Grid>\r\n\r\n                                            <Grid item md={4} lg={4} className=\"Productdetails\" sx={{ height: 'auto' }}>\r\n                                                <SubCard>\r\n                                                    <img src={watch1} alt=\"Statement Image\" className=\"ProductimageSize\" />\r\n                                                </SubCard>{' '}\r\n                                            </Grid>\r\n\r\n                                            <Grid item md={6} sm={12} sx={{ height: 'auto' }}>\r\n                                                <SubCard>\r\n                                                    <TableContainer sx={{}}>\r\n                                                        <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                                                            <ListItemButton>\r\n                                                                <ListItemIcon>\r\n                                                                    <PersonIcon sx={{ fontSize: '1.3rem' }} />\r\n                                                                </ListItemIcon>\r\n                                                                <ListItemText primary={<Typography variant=\"subtitle1\">Name</Typography>} />\r\n                                                                <ListItemSecondaryAction>\r\n                                                                    <Typography sx={{ color: '#000' }} variant=\"subtitle1\" align=\"right\">\r\n                                                                        aiman\r\n                                                                    </Typography>\r\n                                                                </ListItemSecondaryAction>\r\n                                                            </ListItemButton>\r\n                                                            <Divider />\r\n                                                            {/*   <ListItemButton>\r\n                                                                    <ListItemIcon>\r\n                                                                        <ModeIcon sx={{ fontSize: '1.3rem' }} />\r\n                                                                    </ListItemIcon>\r\n                                                                    <ListItemText\r\n                                                                        primary={<Typography variant=\"subtitle1\">Created At </Typography>}\r\n                                                                    />\r\n                                                                    <ListItemSecondaryAction>\r\n                                                                        <Typography sx={{color:'#000'}} variant=\"subtitle1\" align=\"right\">\r\n                                                                        {moment(row?.createdAt).format('DD-MMM-YYYY')} \r\n                                                                        </Typography>\r\n                                                                    </ListItemSecondaryAction>\r\n                                                                </ListItemButton>\r\n                                                                <Divider /> */}\r\n                                                            <ListItemButton>\r\n                                                                <ListItemIcon>\r\n                                                                    <DescriptionIcon sx={{ fontSize: '1.3rem' }} />\r\n                                                                </ListItemIcon>\r\n                                                                <ListItemText\r\n                                                                    primary={<Typography variant=\"subtitle1\">Description</Typography>}\r\n                                                                />\r\n                                                                <ListItemSecondaryAction>\r\n                                                                    <Typography\r\n                                                                        sx={{ color: '#9e9e9e', textTransform: 'capitalize' }}\r\n                                                                        variant=\"subtitle1\"\r\n                                                                        align=\"right\"\r\n                                                                    >\r\n                                                                        aiman\r\n                                                                    </Typography>\r\n                                                                </ListItemSecondaryAction>\r\n                                                            </ListItemButton>\r\n                                                            <Divider />\r\n                                                            <ListItemButton>\r\n                                                                <ListItemIcon>\r\n                                                                    <TourIcon sx={{ fontSize: '1.3rem' }} />\r\n                                                                </ListItemIcon>\r\n                                                                <ListItemText\r\n                                                                    primary={<Typography variant=\"subtitle1\">Status</Typography>}\r\n                                                                />\r\n                                                                <ListItemSecondaryAction>\r\n                                                                    <Typography color=\"Orange\" variant=\"subtitle1\" align=\"right\">\r\n                                                                        aiman\r\n                                                                    </Typography>\r\n                                                                </ListItemSecondaryAction>\r\n                                                            </ListItemButton>\r\n                                                            <Divider />\r\n                                                            <ListItemButton>\r\n                                                                <ListItemIcon>\r\n                                                                    <MonetizationOnIcon sx={{ fontSize: '1.3rem' }} />\r\n                                                                </ListItemIcon>\r\n                                                                <ListItemText\r\n                                                                    primary={<Typography variant=\"subtitle1\">Price</Typography>}\r\n                                                                />\r\n                                                                <ListItemSecondaryAction>\r\n                                                                    <Typography sx={{ color: 'Orange' }} variant=\"subtitle1\" align=\"right\">\r\n                                                                        aiman\r\n                                                                    </Typography>\r\n                                                                </ListItemSecondaryAction>\r\n                                                            </ListItemButton>\r\n                                                        </List>\r\n                                                    </TableContainer>\r\n                                                </SubCard>\r\n                                            </Grid>\r\n                                            <Grid item md={1} sm={12}></Grid>\r\n                                        </Grid>\r\n                                    </>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </SubCard>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\nexport default DeliveryDashboard;\r\n","import { useLocation } from 'react-router-dom';\r\nimport { useTheme } from '@emotion/react';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Grid } from '@mui/material';\r\nimport Properties from './component/properties';\r\nimport PropertiesView from './component/productView';\r\nimport { getAllMarketplaceNftsByCategory } from 'redux/marketplace/actions';\r\nimport DeliveryDashboard from './component/productDetails';\r\n\r\nconst ProductDetails = () => {\r\n    const theme = useTheme();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n    const marketplaceNfts = useSelector((state) => state.marketplaceReducer.marketplaceNfts);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    // useEffect(() => {\r\n    //     dispatch(\r\n    //         getAllMarketplaceNftsByCategory({\r\n    //             search: search,\r\n    //             page: page,\r\n    //             limit: limit,\r\n    //             categoryId: location?.state.nft?.Category?.id\r\n    //         })\r\n    //     );\r\n    // }, [search, page, limit]);\r\n    return (\r\n        <>\r\n            <Grid\r\n                container-fluid\r\n                md={12}\r\n                lg={11}\r\n                sx={{\r\n                    display: { xs: 'block', sm: 'block', md: 'flex', lg: 'flex' },\r\n                    background: 'tranparent',\r\n                    color: theme.palette.mode === 'dark' ? 'white' : '#404040'\r\n                }}\r\n            >\r\n                <Grid item md={12} xs={12} lg={11}>\r\n                    <Grid container-fluid>\r\n                        {/*  <Grid item md={12} xs={12}>\r\n                            <DeliveryDashboard  />\r\n                        </Grid> */}\r\n                        <Grid item md={12} xs={12}>\r\n                            <PropertiesView nft={location.state.nft} />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <Properties nft={location.state.nft} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProductDetails;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// ==============================|| CUSTOM SUB CARD ||============================== //\r\n\r\nconst SubCard = forwardRef(({ children, content, contentClass, darkTitle, secondary, sx = {}, contentSX = {}, title, ...others }, ref) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            ref={ref}\r\n            sx={{\r\n                border: '1px solid',\r\n                borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light,\r\n                ':hover': {\r\n                    boxShadow: theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' : '0 2px 14px 0 rgb(32 40 45 / 8%)'\r\n                },\r\n                ...sx\r\n            }}\r\n            {...others}\r\n        >\r\n            {/* card header and action */}\r\n            {!darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h5\">{title}</Typography>} action={secondary} />}\r\n            {darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h4\">{title}</Typography>} action={secondary} />}\r\n\r\n            {/* content & header divider */}\r\n            {title && (\r\n                <Divider\r\n                    sx={{\r\n                        opacity: 1,\r\n                        borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light\r\n                    }}\r\n                />\r\n            )}\r\n\r\n            {/* card content */}\r\n            {content && (\r\n                <CardContent sx={{ p: 2.5, ...contentSX }} className={contentClass || ''}>\r\n                    {children}\r\n                </CardContent>\r\n            )}\r\n            {!content && children}\r\n        </Card>\r\n    );\r\n});\r\n\r\nSubCard.propTypes = {\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    sx: PropTypes.object,\r\n    contentSX: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nSubCard.defaultProps = {\r\n    content: true\r\n};\r\n\r\nexport default SubCard;\r\n"],"sourceRoot":""}