{"version":3,"sources":["assets/vedio.mp4","views/pages/TrackNFT/TrackNFT.js"],"names":["axios","require","TrackNFT","useState","serialNo","setSerialNo","searchSerial","useNavigate","console","log","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","factoryAddr","Contract","FactoryAddress","address","FactoryAbi","abi","serials","res","toLowerCase","tokenId","parseInt","_hex","toString","main","post","headers","query","result","data","main2","Stack","position","sx","height","overflow","src","music","loop","autoPlay","Grid","item","md","xs","width","textAlign","marginTop","className","galileoLogo","alt","marginLeft","marginRight","Typography","variant","fontFamily","fontStyle","fontWeight","fontSize","sm","lg","lineHeight","color","Box","placeholder","onChange","e","target","value","Button","alignSelf","size","onClick","href","style"],"mappings":"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","file":"static/js/50.3a9f8210.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/vedio.c15bc5c5.mp4\";","import { Box, Grid, Stack } from '@mui/material';\r\n\r\nimport '@fontsource/public-sans';\r\nimport React, { useState } from 'react';\r\nimport { Button } from '@mui/material';\r\nimport { Typography } from '@mui/material';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport galileoLogo from '../../../assets/images/galileo-white.png';\r\nimport { padding } from '@mui/system';\r\nimport music from '../../../assets/vedio.mp4';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport FactoryAbi from 'contractAbi/Factory.json';\r\nimport FactoryAddress from 'contractAbi/Factory-address.json';\r\nimport { ethers, utils } from 'ethers';\r\nconst axios = require('axios');\r\n\r\nlet graphQLURL =  \"https://api.studio.thegraph.com/query/44351/factory-graph2/17\";\r\n\r\nlet graphQLURL2 = \"https://api.studio.thegraph.com/query/44351/galelio-marketplace/6\"\r\n\r\nconst TrackNFT = () => {\r\n    const [serialNo, setSerialNo] = useState(\"\")\r\n    const navigate = useNavigate();\r\n\r\n    const searchSerial = async () => {\r\n\r\n        console.log('serialNo',serialNo);\r\n        \r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const factoryAddr = new ethers.Contract(FactoryAddress.address, FactoryAbi.abi, signer);\r\n        console.log('factoryAddr', factoryAddr);\r\n        \r\n\r\n        // let res = await (\r\n        //     await factoryAddr.serials(\"GALGNS1\")\r\n        // )?.wait();\r\n\r\n        let res = await factoryAddr.serials(serialNo);\r\n\r\n        console.log('res',res);\r\n\r\n        let address = res[0].toLowerCase()\r\n        address = `\"${address}\"`\r\n        let tokenId = parseInt(res[1]._hex)\r\n\r\n        // console.log('res?._tokenId?',res);\r\n        tokenId=  tokenId.toString()\r\n\r\n        tokenId= `\"${tokenId}\"`\r\n\r\n        // let address = `\"0x4600b6a0f068ae1283ed68792ff3f0a085b3f0ef\"`;\r\n        // let tokenId = `\"1\"`;\r\n\r\n        console.log('address', address);\r\n        console.log('tokenId', tokenId);\r\n       \r\n        // console.log('resTokenId', resTokenId);\r\n\r\n        const main = async () => {\r\n            try {\r\n               const result= await axios.post(graphQLURL, {\r\n                    headers: {\r\n                        'Access-Control-Allow-Origin': '*',\r\n                        'Content-Type': 'application/json',     \r\n                        'X-Requested-With': 'XMLHttpRequest'\r\n                    },\r\n                    query: `{\r\n                        galileoProtocolDeployeds(first: 5) {\r\n                            id\r\n                            _mintingContract\r\n                            blockNumber\r\n                            blockTimestamp\r\n                        }\r\n                        handleUpdateUris(where:{collections:${address}, tokenId:${tokenId}}){\r\n                            newTokenURI\r\n                            oldTokenURI\r\n                            blockTimestamp\r\n                        }\r\n                        handleUpdatedBulkUris(where:{collections:${address}}){\r\n                            newTokenURI\r\n                            oldTokenURI\r\n                            blockTimestamp\r\n                        }\r\n                        handleMints(where:{collections:${address}, tokenId:${tokenId}}){\r\n                            minter\r\n                            tokenId\r\n                            blockTimestamp\r\n                        }\r\n                        handleMintBulks(where:{collections:${address}}){\r\n                            minter\r\n                            blockTimestamp\r\n                        }\r\n                        transfers(where:{collections:${address}, from_not:\"0x0000000000000000000000000000000000000000\" },, orderBy: blockTimestamp){\r\n                            to\r\n                            from\r\n                            tokenId\r\n                            blockTimestamp\r\n                        }\r\n                        transferMultipleNfts(where:{collections:${address}, from_not:\"0x0000000000000000000000000000000000000000\", tokenIDs:[\"1\"] }){\r\n                            to\r\n                            from\r\n                            tokenIDs\r\n                            blockTimestamp\r\n                        }\r\n                    }`,\r\n                });\r\n                console.log('Query result: \\n', result.data);\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        };\r\n\r\n        main();\r\n\r\n\r\n        const main2 = async () => {\r\n            try {\r\n              const result = await axios.post(graphQLURL2, {\r\n                query: `{\r\n                  offeredSingles(where:{tokenAddress:${address}, tokenId:${tokenId}}) {\r\n                    to\r\n                    from\r\n                    price\r\n                    blockTimestamp\r\n                  }\r\n                  offeredMultiples(where:{tokenAddress:${address}, tokenId:[\"2\"]}) {\r\n                    to\r\n                    from\r\n                    price\r\n                    blockTimestamp\r\n                  }\r\n                  deLists(where:{tokenAddress:${address}, _tokenId:${tokenId}}){\r\n                    _to\r\n                    _tokenId\r\n                    tokenAddress\r\n                    blockTimestamp\r\n                  }\r\n                  boughts(where:{tokenAddress:${address}, tokenId:${tokenId}}) {\r\n                    to\r\n                    from\r\n                    price\r\n                    blockTimestamp\r\n                  }\r\n                  resells(where:{tokenAddress:${address}, tokenId:${tokenId}}){\r\n                    to\r\n                    from\r\n                    price\r\n                    blockTimestamp\r\n                  }\r\n                  \r\n                }`,\r\n              });\r\n              console.log(\"Query result from marketplace: \\n\", result.data);\r\n            } catch (err) {\r\n              console.log(err);\r\n            }\r\n          };\r\n\r\n\r\n          main2()\r\n\r\n    };\r\n\r\n    return (\r\n        <Stack position={'relative'} sx={{ height: '100vh', overflow: 'hidden' }}>\r\n            {/* <Stack className=\"mainTracking main\"></Stack> */}\r\n\r\n            <video src={music} loop autoPlay=\"true\" />\r\n            <Grid item md={12} xs={12} position={'absolute'} sx={{ width: '100%' }}>\r\n                <Grid container-fluid>\r\n                    <Grid sx={{ textAlign: 'center', marginTop: '30px' }}>\r\n                        <img className=\"mainLogo\" src={galileoLogo} alt=\"logo\" />\r\n                    </Grid>\r\n                    <Grid\r\n                        sx={{\r\n                            marginTop: { xs: '100px', md: '200px' },\r\n                            marginLeft: { xs: '20px', md: '0px' },\r\n                            marginRight: { xs: '20px', md: 'none' }\r\n                        }}\r\n                    >\r\n                        <Typography\r\n                            variant=\"h1\"\r\n                            sx={{\r\n                                fontFamily: 'Public Sans !important',\r\n                                fontStyle: 'normal !important',\r\n                                fontWeight: '700',\r\n                                textAlign: 'center',\r\n                                fontSize: { xs: '12px', sm: '30px', md: '30px', lg: '30px' },\r\n                                lineHeight: { xs: '1', sm: '1', md: '33px', lg: '33px' },\r\n\r\n                                color: 'white'\r\n                            }}\r\n                        >\r\n                            Track your NFT history{' '}\r\n                        </Typography>\r\n                        <Box className=\"trackBox\">\r\n                            <input className=\"trackInput\" placeholder=\"GAL-BMW-1234\" \r\n\r\n                            onChange={(e)=>{\r\n                                setSerialNo(e.target.value)\r\n                            }}\r\n                            \r\n                            />\r\n                            <Button\r\n                                sx={{ alignSelf: 'center !important' }}\r\n                                className=\"createTrack\"\r\n                                size=\"small\"\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                onClick={() => {\r\n                                    // navigate('/tracking');\r\n\r\n                                    searchSerial();\r\n                                }}\r\n                            >\r\n                                Track\r\n                            </Button>\r\n                        </Box>\r\n                        <Box>\r\n                            <Typography\r\n                                variant=\"h4\"\r\n                                sx={{\r\n                                    fontFamily: 'Public Sans !important',\r\n                                    fontStyle: 'normal !important',\r\n                                    fontWeight: '400',\r\n                                    textAlign: 'center',\r\n                                    fontSize: { xs: '12px', sm: '15px', md: '15px', lg: '15px' },\r\n                                    // lineHeight: { xs: '1', sm: '1', md: '33px', lg: '33px' },\r\n\r\n                                    color: 'white'\r\n                                }}\r\n                            >\r\n                                By initiating authentication, you declare that you accept our{' '}\r\n                                <a href=\"\" style={{ color: '#ffff' }}>\r\n                                    Legal Notice\r\n                                </a>{' '}\r\n                                and{' '}\r\n                                <a href=\"\" style={{ color: '#ffff' }}>\r\n                                    Privacy Policy.\r\n                                </a>\r\n                            </Typography>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default TrackNFT;\r\n"],"sourceRoot":""}