{"version":3,"sources":["views/pages/superAdmin/brands/brandCategory/component/addUpdateBrandCategory.js","views/pages/superAdmin/brands/brandCategory/component/deleteBrandCategoryDialog.js","views/pages/superAdmin/brands/brandCategory/component/brandCategoryTable.js","views/pages/superAdmin/brands/brandCategory/index.js","../../src.ts/index.ts","ui-component/extended/Avatar.js","../node_modules/@mui/icons-material/RemoveRedEye.js"],"names":["Transition","forwardRef","props","ref","Slide","direction","AddUpdateBrandCategoryDialog","open","setOpen","brandCategoryData","page","limit","search","dispatch","useDispatch","categoryArray","useSelector","state","brandCategoryReducer","categoriesDropdownList","useState","category","setCategory","isUpdate","setIsUpdate","useEffect","categoryId","handleContractDeployment","brandName","brand","name","categories","map","data","value","categoryName","label","contractName","symbol","substring","admin","validator","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","getAddress","minterAddress","factoryAddr","Contract","FactoryAddress","address","FactoryAbi","abi","deployMintingContract","catch","error","toast","message","wait","res","addr","events","args","addBrandCategory","brandId","profitPercentage","formik","values","contractAddress","handleClose","validationSchema","Yup","default","min","max","required","typeError","useFormik","enableReinitialize","initialValues","onSubmit","updateBrandCategory","resetForm","getAllCategoriesDropdown","Dialog","onClose","className","maxWidth","TransitionComponent","keepMounted","DialogTitle","id","Divider","DialogContent","noValidate","handleSubmit","Grid","container","item","xs","pt","pr","TextField","select","fullWidth","onChange","event","target","MenuItem","option","index","handleChange","touched","Boolean","errors","helperText","autoComplete","DialogActions","sx","AnimateButton","Button","variant","my","ml","type","size","disableElevation","onClick","color","DeleteBrandCategoryDialog","theme","useTheme","DialogContentText","Typography","component","palette","dark","borderColor","deleteBrandCategory","BrandCategoryTable","brandCategoriesList","addUpdateOpen","setAddUpdateOpen","setBrandCategoryData","navigate","useNavigate","deleteOpen","setDeleteOpen","TableContainer","Table","TableHead","TableRow","TableCell","align","undefined","brandCategories","count","TableBody","padding","row","justifyContent","alignItems","spacing","Avatar","alt","src","Category","image","description","Stack","Tooltip","placement","title","IconButton","brandData","fontSize","CategoryId","BrandId","orange","main","background","light","md","style","fontWeight","BrandCategory","location","useLocation","setSearch","setPage","setLimit","anchorEl","setAnchorEl","handleCloseMenu","getAllBrandCategories","MainCard","secondary","content","gridSpacing","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","e","textAlign","p","Pagination","showFirstButton","showLastButton","pages","newPage","grey","endIcon","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","anyGlobal","_ethers","outline","others","colorSX","paper","bgcolor","outlineSX","border","sizeSX","width","height","_interopRequireDefault","require","Object","defineProperty","exports","_createSvgIcon","_jsxRuntime","_default","jsx","d"],"mappings":"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","file":"static/js/9.f2ca561e.chunk.js","sourcesContent":["import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ethers } from 'ethers';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { updateBrandCategory, addBrandCategory, getAllCategoriesDropdown } from 'redux/brandCategory/actions';\r\nimport { MenuItem, Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, Divider, Grid } from '@mui/material';\r\nimport FactoryAbi from '../../../../../../contractAbi/Factory.json';\r\nimport FactoryAddress from '../../../../../../contractAbi/Factory-address.json';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nexport default function AddUpdateBrandCategoryDialog({ open, setOpen, brandCategoryData, page, limit, search }) {\r\n    const dispatch = useDispatch();\r\n    const categoryArray = useSelector((state) => state.brandCategoryReducer.categoriesDropdownList);\r\n    const [category, setCategory] = useState(0);\r\n    const [isUpdate, setIsUpdate] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (brandCategoryData.categoryId == 0) {\r\n            setIsUpdate(false);\r\n        } else {\r\n            setIsUpdate(true);\r\n        }\r\n        setCategory(brandCategoryData.categoryId);\r\n    }, [brandCategoryData]);\r\n\r\n    const handleCategoryChange = (event) => {\r\n        setCategory(event.target.value);\r\n    };\r\n\r\n    const handleContractDeployment = async () => {\r\n        let brandName = brandCategoryData.brand.name;\r\n        let categoryName;\r\n        categoryArray.categories.map((data) => {\r\n            if (data.value == category) {\r\n                categoryName = data.label;\r\n            }\r\n        });\r\n        const contractName = 'Galileo' + ' ' + brandName + ' ' + categoryName;\r\n        const symbol = 'G' + brandName.substring(0, 1) + categoryName.substring(0, 1);\r\n        const admin = '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651';\r\n        const validator = '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651';\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const minterAddress = await signer.getAddress();\r\n        const factoryAddr = new ethers.Contract(FactoryAddress.address, FactoryAbi.abi, signer);\r\n        let res = await (\r\n            await factoryAddr.deployMintingContract(contractName, symbol, admin, minterAddress, validator).catch((error) => {\r\n                toast.error(error.message);\r\n            })\r\n        ).wait();\r\n        let addr = res.events[3].args[0];\r\n        dispatch(\r\n            addBrandCategory({\r\n                brandId: brandCategoryData.brandId,\r\n                categoryId: category,\r\n                profitPercentage: formik.values.profitPercentage,\r\n                contractAddress: addr,\r\n                page: page,\r\n                limit: limit,\r\n                search: search,\r\n                handleClose: handleClose\r\n            })\r\n        );\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        isUpdate: Yup.boolean().default(isUpdate),\r\n        profitPercentage: Yup.number()\r\n            .min(1, 'Profit Percentage should not be less than one')\r\n            .max(99, 'Profit Percentage should not exceed 99')\r\n            .required('Profit Percentage is required')\r\n            .typeError('Invalid Profit Percentage')\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: brandCategoryData,\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            if (!isUpdate) {\r\n                handleContractDeployment();\r\n            } else {\r\n                dispatch(\r\n                    updateBrandCategory({\r\n                        brandId: brandCategoryData.brandId,\r\n                        categoryId: brandCategoryData.categoryId,\r\n                        profitPercentage: values.profitPercentage,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllCategoriesDropdown({ brandId: brandCategoryData.brandId }));\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog\"\r\n                maxWidth=\"sm\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">\r\n                    {!isUpdate ? 'Assign Category to brand ' : ' Update Profit percentage of category'}\r\n                </DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <form noValidate onSubmit={formik.handleSubmit} id=\"validation-forms\">\r\n                        <Grid container>\r\n                            <>\r\n                                {!isUpdate && (\r\n                                    <Grid item xs={12} pt={2} pr={4}>\r\n                                        <TextField\r\n                                            className=\"responsiveSelectfield\"\r\n                                            id=\"outlined-select-budget\"\r\n                                            select\r\n                                            fullWidth\r\n                                            label=\"Select Category\"\r\n                                            value={category}\r\n                                            onChange={handleCategoryChange}\r\n                                        >\r\n                                            <MenuItem value={0}>\r\n                                            Choose Category\r\n                                            </MenuItem>\r\n                                            {categoryArray &&\r\n                                                categoryArray.categories &&\r\n                                                categoryArray.categories.map((option, index) => (\r\n                                                    <MenuItem key={index} value={option.value}>\r\n                                                        {option.label}\r\n                                                    </MenuItem>\r\n                                                ))}\r\n                                        </TextField>\r\n                                    </Grid>\r\n                                )}\r\n\r\n                                <Grid item xs={12} pt={4} pr={4}>\r\n                                    <TextField\r\n                                        id=\"profitPercentage\"\r\n                                        name=\"profitPercentage\"\r\n                                        label=\"Enter Profit Percentage\"\r\n                                        value={formik.values.profitPercentage}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.profitPercentage && Boolean(formik.errors.profitPercentage)}\r\n                                        helperText={formik.touched.profitPercentage && formik.errors.profitPercentage}\r\n                                        fullWidth\r\n                                        autoComplete=\"given-name\"\r\n                                    />\r\n                                </Grid>\r\n                            </>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n\r\n                <DialogActions sx={{ pr: 3 }}>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1 }}\r\n                            type=\"submit\"\r\n                            size=\"large\"\r\n                            disableElevation\r\n                            onClick={() => {\r\n                                formik.handleSubmit();\r\n                            }}\r\n                        >\r\n                            {!isUpdate ? 'Add ' : 'Update '}\r\n                        </Button>\r\n                    </AnimateButton>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1, color: '#fff' }}\r\n                            onClick={handleClose}\r\n                            color=\"secondary\"\r\n                            size=\"large\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </AnimateButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}","import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteBrandCategory } from '../../../../../../redux/brandCategory/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteBrandCategoryDialog({ open, setOpen, page, limit, search, brandCategoryData }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Delete Brand Category</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to delete this Category?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteBrandCategory({\r\n                                    categoryId: brandCategoryData.categoryId,\r\n                                    brandId: brandCategoryData.brandId,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n    Divider,\r\n    Typography,\r\n    IconButton,\r\n    Grid,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    Button,\r\n    TableRow,\r\n    Tooltip,\r\n    Stack\r\n} from '@mui/material';\r\n\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport AddUpdateBrandCategoryDialog from './addUpdateBrandCategory';\r\nimport DeleteBrandCategoryDialog from './deleteBrandCategoryDialog';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport RemoveRedEyeIcon from '@mui/icons-material/RemoveRedEye';\r\nconst BrandCategoryTable = ({\r\n    brandCategoriesList,\r\n    search,\r\n    page,\r\n    limit,\r\n    addUpdateOpen,\r\n    setAddUpdateOpen,\r\n    brandCategoryData,\r\n    setBrandCategoryData\r\n}) => {\r\n    const navigate = useNavigate();\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const [detailId, setDetailId] = useState();\r\n    const theme = useTheme();\r\n\r\n    const openDetails = (id) => {\r\n        if (detailId === id) {\r\n            setDetailId(null);\r\n        } else {\r\n            setDetailId(id);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <TableContainer>\r\n            <AddUpdateBrandCategoryDialog\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n                brandCategoryData={brandCategoryData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n\r\n            <DeleteBrandCategoryDialog\r\n                open={deleteOpen}\r\n                setOpen={setDeleteOpen}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n                brandCategoryData={brandCategoryData}\r\n            />\r\n\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\">Category</TableCell>\r\n                        <TableCell align=\"center\">Description</TableCell>\r\n                        <TableCell align=\"center\">Profit percentage</TableCell>\r\n                        <TableCell align=\"center\">Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                {brandCategoriesList.brandCategories != undefined && brandCategoriesList.count > 0 ? (\r\n                    <TableBody sx={{ padding: '10px' }}>\r\n                        {brandCategoriesList.brandCategories != undefined &&\r\n                            brandCategoriesList.brandCategories.map((row, index) => (\r\n                                <>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"center\" justifyContent=\"center\" alignItems=\"center\">\r\n                                            <Grid container spacing={2} justifyContent=\"center\" alignItems=\"center\">\r\n                                                <Grid item>\r\n                                                    <Avatar alt=\"Category Image\" src={row.Category.image} />\r\n                                                </Grid>\r\n                                                <Grid item>\r\n                                                    <Typography variant=\"subtitle1\" component=\"div\">\r\n                                                        {row.Category.name}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </TableCell>\r\n\r\n                                        <TableCell align=\"center\">{row.Category.description}</TableCell>\r\n                                        <TableCell align=\"center\">{row.profitPercentage}</TableCell>\r\n\r\n                                        <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                            <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                                <Tooltip placement=\"top\" title=\" View NFT'S\">\r\n                                                    <IconButton\r\n                                                        color=\"primary\"\r\n                                                        aria-label=\"detail\"\r\n                                                        size=\"medium\"\r\n                                                        onClick={() => {\r\n                                                            navigate('/nftManagement', {\r\n                                                                state: {\r\n                                                                    brandData: row\r\n                                                                }\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        <RemoveRedEyeIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n\r\n                                                <Tooltip placement=\"top\" title=\"Edit\">\r\n                                                    <IconButton\r\n                                                        color=\"primary\"\r\n                                                        aria-label=\"Edit\"\r\n                                                        size=\"large\"\r\n                                                        onClick={() => {\r\n                                                            setAddUpdateOpen(true);\r\n                                                            setBrandCategoryData({\r\n                                                                categoryId: row.CategoryId,\r\n                                                                brandId: row.BrandId,\r\n                                                                profitPercentage: row.profitPercentage\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                                <Tooltip placement=\"top\" title=\"Delete\">\r\n                                                    <IconButton\r\n                                                        color=\"primary\"\r\n                                                        sx={{\r\n                                                            color: theme.palette.orange.dark,\r\n                                                            borderColor: theme.palette.orange.main,\r\n                                                            '&:hover ': { background: theme.palette.orange.light }\r\n                                                        }}\r\n                                                        size=\"large\"\r\n                                                        onClick={() => {\r\n                                                            setDeleteOpen(true);\r\n                                                            setBrandCategoryData({\r\n                                                                categoryId: row.CategoryId,\r\n                                                                brandId: row.BrandId\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </>\r\n                            ))}\r\n                    </TableBody>\r\n                ) : (\r\n                    <>\r\n                        <Grid item md={12}>\r\n                            <Divider />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography style={{ padding: '20px', fontWeight: '800' }}> No Data Available</Typography>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default BrandCategoryTable;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport BrandCategoryTable from './component/brandCategoryTable';\r\nimport { Button, Typography, Grid, MenuItem, Menu, Pagination, OutlinedInput, InputAdornment } from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { getAllBrandCategories, getAllCategoriesDropdown } from '../../../../../redux/brandCategory/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AddUpdateBrandCategoryDialog from './component/addUpdateBrandCategory';\r\n\r\nconst BrandCategory = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const brandCategoriesList = useSelector((state) => state.brandCategoryReducer.brandCategoriesList);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [brandCategoryData, setBrandCategoryData] = useState({\r\n        brand: location?.state?.brandData,\r\n        brandId: location?.state?.brandData.id,\r\n        categoryId: 0,\r\n        profitPercentage: ''\r\n    });\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllBrandCategories({\r\n                brandId: location?.state?.brandData?.id,\r\n                search: search,\r\n                page: page,\r\n                limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n  \r\n    return (\r\n        <>\r\n            <AddUpdateBrandCategoryDialog\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n                brandCategoryData={brandCategoryData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n            <MainCard\r\n                title={\r\n                    <Typography variant=\"h3\" sx={{ fontWeight: 500, color: 'cadetblue' }}>\r\n                        Category Management of : {location?.state?.brandData?.name}\r\n                    </Typography>\r\n                }\r\n                secondary={\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            navigate('/brands');\r\n                        }}\r\n                    >\r\n                        back\r\n                    </Button>\r\n                }\r\n                content={false}\r\n            ></MainCard>\r\n\r\n            <MainCard\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={6}>\r\n                            <OutlinedInput\r\n                                id=\"input-search-list-style1\"\r\n                                placeholder=\"Search\"\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"start\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                                size=\"small\"\r\n                                onChange={(e) => {\r\n                                    setSearch(e.target.value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6} textAlign=\"end\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddUpdateOpen(true);\r\n                                    setBrandCategoryData({\r\n                                        brand: location.state.brandData,\r\n                                        brandId: location.state.brandData.id,\r\n                                        categoryId: 0,\r\n                                        profitPercentage: ''\r\n                                    });\r\n                                    dispatch(getAllCategoriesDropdown({ brandId: location.state.brandData.id }));\r\n                                }}\r\n                            >\r\n                                Add Brand Catgeory\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                <BrandCategoryTable\r\n                    brandCategoriesList={brandCategoriesList}\r\n                    search={search}\r\n                    page={page}\r\n                    limit={limit}\r\n                    addUpdateOpen={addUpdateOpen}\r\n                    setAddUpdateOpen={setAddUpdateOpen}\r\n                    brandCategoryData={brandCategoryData}\r\n                    setBrandCategoryData={setBrandCategoryData}\r\n                />\r\n\r\n                <>\r\n                    <Grid item xs={12} sx={{ p: 3 }}>\r\n                        <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                            <Grid item>\r\n                                <Pagination\r\n                                    color=\"primary\"\r\n                                    showFirstButton\r\n                                    showLastButton\r\n                                    page={page}\r\n                                    count={brandCategoriesList.pages}\r\n                                    onChange={(event, newPage) => {\r\n                                        setPage(newPage);\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    size=\"large\"\r\n                                    sx={{ color: theme.palette.grey[900] }}\r\n                                    color=\"secondary\"\r\n                                    endIcon={<ExpandMoreRoundedIcon />}\r\n                                    onClick={handleClick}\r\n                                >\r\n                                    {limit} Rows\r\n                                </Button>\r\n                                <Menu\r\n                                    id=\"menu-user-list-style1\"\r\n                                    anchorEl={anchorEl}\r\n                                    keepMounted\r\n                                    open={Boolean(anchorEl)}\r\n                                    onClose={handleCloseMenu}\r\n                                    variant=\"selectedMenu\"\r\n                                    anchorOrigin={{\r\n                                        vertical: 'top',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                    transformOrigin={{\r\n                                        vertical: 'bottom',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                >\r\n                                    <MenuItem\r\n                                        value={10}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        10 Rows\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value={25}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        25 Rows\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value={50}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        50 Rows{' '}\r\n                                    </MenuItem>\r\n                                </Menu>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BrandCategory;\r\n",null,"import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"\n}), 'RemoveRedEye');\nexports.default = _default;"],"sourceRoot":""}