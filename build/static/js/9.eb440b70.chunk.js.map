{"version":3,"sources":["shared/Card/HeadingCard.js","views/pages/superAdmin/categories/component/deleteCategoryDialog.js","views/pages/superAdmin/categories/component/categoryTable.js","views/pages/superAdmin/categories/component/addUpdateCategory.js","views/pages/superAdmin/categories/index.js"],"names":["HeadingCard","forwardRef","title","value","role","setValue","options","theme","useTheme","sx","marginBottom","spacing","gridSpacing","borderColor","palette","primary","background","default","padding","container","alignItems","justifyContent","item","variant","fontWeight","color","undefined","id","select","onChange","e","target","width","height","map","option","label","Transition","props","ref","Slide","direction","DeleteCategoryDialog","deleteId","mainBrandId","deleteOpen","setCategoryData","setDeleteOpen","page","categoryData","categoryId","brandId","limit","search","dispatch","useDispatch","handleClose","console","log","Dialog","open","TransitionComponent","keepMounted","onClose","DialogTitle","DialogContent","DialogContentText","Typography","component","DialogActions","pr","Button","error","dark","onClick","size","deleteCategory","CategoryTable","categoryList","setAddUpdateOpen","setCategoryId","useState","setDeleteId","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","row","index","Stack","Tooltip","placement","IconButton","name","BrandId","fontSize","orange","main","light","AddUpdateCategoryDialog","brandArray","addUpdateOpen","validationSchema","Yup","required","max","matches","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","addCategory","updateCategory","resetForm","className","autoComplete","handleSubmit","Grid","xs","pt","TextField","handleChange","touched","Boolean","errors","helperText","fullWidth","event","MenuItem","brandList","Categories","useSelector","state","category","brand","setBrand","setSearch","setPage","setLimit","anchorEl","setAnchorEl","handleCloseMenu","useEffect","getAllBrands","brandsList","getAllCategories","MainCard","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","brands","textAlign","content","p","Pagination","showFirstButton","showLastButton","count","pages","newPage","grey","endIcon","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin"],"mappings":"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","file":"static/js/9.eb440b70.chunk.js","sourcesContent":["import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { forwardRef } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// constant\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                marginBottom: theme.spacing(gridSpacing),\r\n\r\n                borderColor: theme.palette.primary[200] + 75,\r\n                background: theme.palette.background.default\r\n            }}\r\n        >\r\n            <Box sx={{ padding: '13px 20px 22px 20px' }}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                    <Grid item>\r\n                        <Typography variant=\"h3\" sx={{ fontWeight: 500, color: '#000' }}>\r\n                            {title}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {value !== undefined && (\r\n                        <Grid item>\r\n                            {/* {options && (role == 'teacher' || role == 'super_admin') && ( */}\r\n                            <TextField\r\n                                id=\"standard-select-currency\"\r\n                                select\r\n                                value={value}\r\n                                onChange={(e) => setValue(e.target.value)}\r\n                                sx={{ width: '110px', height: '40px' }}\r\n                            >\r\n                                {options.map((option) => (\r\n                                    <MenuItem key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                            {/* )} */}\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        </Card>\r\n    );\r\n});\r\n\r\nexport default HeadingCard;\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteCategory } from 'redux/categories/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteCategoryDialog({deleteId,mainBrandId, setCategoryData, deleteOpen, setDeleteOpen,categoryData, categoryId, brandId,page, limit, search }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setDeleteOpen(false);\r\n    };\r\n    console.log(mainBrandId,\"mainBrandId======delete\")\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={deleteOpen}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Delete Category</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to delete this Category?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteCategory({\r\n                                    categoryId: deleteId,\r\n                                    brandId:mainBrandId,\r\n                                    handleClose: handleClose,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { IconButton, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip } from '@mui/material';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport DeleteCategoryDialog from './deleteCategoryDialog';\r\nimport moment from 'moment';\r\nconst CategoryTable = ({\r\n    categoryList,\r\n    mainBrandId,\r\n    page,\r\n    limit,\r\n    search,\r\n    categoryData,\r\n    setCategoryData,\r\n    setAddUpdateOpen,\r\n    categoryId,\r\n    setCategoryId\r\n}) => {\r\n    const theme = useTheme();\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const [deleteId, setDeleteId] = useState();\r\n    const [deleteCategory, setDeleteCategory] = useState();\r\n\r\n    return (\r\n        <TableContainer>\r\n            <DeleteCategoryDialog\r\n            mainBrandId={mainBrandId}\r\n            deleteId={deleteId}\r\n            setCategoryData={setCategoryData.brandId}\r\n                deleteOpen={deleteOpen}\r\n                setDeleteOpen={setDeleteOpen}\r\n                categoryId={categoryId}\r\n                categoryData={categoryData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\">Name</TableCell>\r\n                       \r\n                        <TableCell align=\"center\">Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {categoryList.categoryList != undefined &&\r\n                        \r\n                      \r\n                        categoryList.categoryList.map((row, index) => (\r\n                            <>\r\n                                <TableRow   onClick={() => {\r\n                                        console.log('nfts', row);\r\n                                    }}>\r\n                                    <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                        {row.label}\r\n                                    </TableCell>\r\n                                   \r\n                                    <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                        <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                            <Tooltip placement=\"top\" title=\"Edit\">\r\n                                                <IconButton\r\n                                                    color=\"primary\"\r\n                                                    aria-label=\"Edit\"\r\n                                                    size=\"large\"\r\n                                                    onClick={() => {\r\n                                                        console.log('row', row);\r\n                                                        setCategoryData({\r\n                                                            name: row.name,\r\n                                                            brandId: row.BrandId\r\n                                                        });\r\n                                                        setCategoryId(row.value);\r\n                                                        setAddUpdateOpen(true);\r\n                                                    }}\r\n                                                >\r\n                                                    <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                            <Tooltip placement=\"top\" title=\"Delete\">\r\n                                                <IconButton\r\n                                                    color=\"primary\"\r\n                                                    sx={{\r\n                                                        color: theme.palette.orange.dark,\r\n                                                        borderColor: theme.palette.orange.main,\r\n                                                        '&:hover ': { background: theme.palette.orange.light }\r\n                                                    }}\r\n                                                    size=\"large\"\r\n                                                    onClick={() => {\r\n                                                        setDeleteId(row.value)\r\n                                                        setDeleteOpen(true);\r\n                                                        setCategoryId(row.id);\r\n                                                        // setCategoryData({\r\n                                                        //     name: row.name,\r\n                                                        //     brandId: row.BrandId\r\n                                                        // });\r\n                                                    }}\r\n                                                >\r\n                                                    <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </Stack>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </>\r\n                        ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default CategoryTable;\r\n","import { forwardRef, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, Grid, MenuItem } from '@mui/material';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nimport { addCategory , updateCategory } from 'redux/categories/actions'; \r\n\r\nexport default function AddUpdateCategoryDialog({\r\n    brandArray,\r\n    addUpdateOpen,\r\n    setAddUpdateOpen,\r\n    page,\r\n    limit,\r\n    search,\r\n    categoryData,\r\n    setCategoryData,\r\n    categoryId,\r\n    mainBrandId\r\n}) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    const handleBrandChange = (event) => {\r\n        setCategoryData({\r\n            name: categoryData.name,\r\n            brandId: event.target.value\r\n        });\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string()\r\n            .required('Category Name is required!')\r\n            .max(42, 'Category Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Category name')\r\n    });\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            name: categoryData.name\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            if (categoryData.name == '') {\r\n                dispatch(\r\n                    addCategory({\r\n                        name: values.name,\r\n                        brandId: categoryData.brandId,\r\n                        search: search,\r\n                        page: page,\r\n                        limit: limit,\r\n                        mainBrandId: mainBrandId,\r\n                        handleClose: handleClose,\r\n                        setCategoryData: setCategoryData\r\n                    })\r\n                );\r\n            } else {\r\n                dispatch(\r\n                    updateCategory({\r\n                        categoryId: categoryId,\r\n                        name: values.name,\r\n                        brandId: categoryData.brandId,\r\n                        search: search,\r\n                        page: page,\r\n                        limit: limit,\r\n                        handleClose: handleClose,\r\n                        setCategoryData: setCategoryData\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n    const handleClose = () => {\r\n        setAddUpdateOpen(false);\r\n        setCategoryData({\r\n            name: '',\r\n            brandId: 0\r\n        });\r\n        formik.resetForm();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                className=\"responsiveDialog\"\r\n                open={addUpdateOpen}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">{categoryData.name == '' ? 'Add Category' : 'Update Category'}</DialogTitle>\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid item xs={12} pt={4}>\r\n                            <TextField\r\n                                id=\"name\"\r\n                                name=\"name\"\r\n                                label=\"Enter Category Name\"\r\n                                value={formik.values.name}\r\n                                onChange={formik.handleChange}\r\n                                error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                helperText={formik.touched.name && formik.errors.name}\r\n                                fullWidth\r\n                                autoComplete=\"given-name\"\r\n                            />\r\n                        </Grid>\r\n                        {categoryData.name == '' && (\r\n                            <Grid item xs={12} pt={4}>\r\n                                <TextField\r\n                                    className=\"brandSelectField\"\r\n                                    id=\"outlined-select-budget\"\r\n                                    select\r\n                                    fullWidth\r\n                                    label=\"Select Brand\"\r\n                                    value={categoryData.brandId}\r\n                                    onChange={handleBrandChange}\r\n                                >\r\n                                    <MenuItem value={0}>Choose Brand</MenuItem>\r\n                                    {brandArray &&\r\n                                        brandArray.brandList &&\r\n                                        brandArray.brandList.map((option, index) => (\r\n                                            <MenuItem key={index} value={option.value}>\r\n                                                {option.label}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                </TextField>\r\n                            </Grid>\r\n                        )}\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={() => {\r\n                            handleClose();\r\n                        }}\r\n                        color=\"secondary\"\r\n                    >\r\n                        <FormattedMessage id=\"cancel\" />\r\n                    </Button>\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            formik.handleSubmit();\r\n                        }}\r\n                    >\r\n                        {categoryData.name == '' ? 'Add' : 'Update'}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport CategoryTable from './component/categoryTable';\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    Typography,\r\n    Grid,\r\n    MenuItem,\r\n    Menu,\r\n    Pagination,\r\n    OutlinedInput,\r\n    TextField,\r\n    InputAdornment\r\n} from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\n\r\nimport { getAllBrands } from '../../../../redux/brand/actions';\r\nimport { getAllCategories } from '../../../../redux/categories/actions';\r\n\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport AddUpdateCategoryDialog from './component/addUpdateCategory';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport HeadingCard from 'shared/Card/HeadingCard';\r\n\r\nconst Categories = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const categoryList = useSelector((state) => state.category.categoryList);\r\n   \r\n    const [brand, setBrand] = useState(0);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [categoryId, setCategoryId] = useState();\r\n    const [categoryData, setCategoryData] = useState({\r\n        name: '',\r\n        brandId: 0\r\n    });\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleBrandChange = (event) => {\r\n        setBrand(event.target.value);\r\n        console.log(event.target.value, \"setBrand===========\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(\"cate brand\")\r\n        dispatch(\r\n            getAllBrands({\r\n                search: search,\r\n                page: page,\r\n                limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n    \r\n    const brandsList = useSelector((state) => state.brand.brandsList);\r\n    console.log(brandsList, \"========================table==================>\");\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllCategories({\r\n                brandId: brand == 0 ? 0 : brand,\r\n                // brandId: 2,\r\n                search: search,\r\n                page: page,\r\n                limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit, brand]);\r\n    return (\r\n        <>\r\n            <AddUpdateCategoryDialog\r\n                mainBrandId={brand}\r\n               \r\n                categoryId={categoryId}\r\n                categoryData={categoryData}\r\n                setCategoryData={setCategoryData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n                addUpdateOpen={addUpdateOpen}\r\n                setAddUpdateOpen={setAddUpdateOpen}\r\n            />\r\n            <HeadingCard title=\"Category Management\" />\r\n            <MainCard\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={3}>\r\n                            <OutlinedInput\r\n                                id=\"input-search-list-style1\"\r\n                                placeholder=\"Search\"\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"start\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                                size=\"small\"\r\n                                onChange={(e) => {\r\n                                    setSearch(e.target.value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <TextField\r\n                                className=\"selectField\"\r\n                                id=\"outlined-select-budget\"\r\n                                select\r\n                                fullWidth\r\n                                label=\"Select Brand\"\r\n                                value={brand}\r\n                                onChange={handleBrandChange}\r\n                            >\r\n                                <MenuItem value={0}>All</MenuItem>\r\n                                {brandsList != undefined &&\r\n                                    \r\n                                    brandsList?.brands?.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.id}>\r\n                                            {option.name}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={6} textAlign=\"end\">\r\n                            <Button\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddUpdateOpen(true);\r\n                                    setCategoryData({\r\n                                        name: '',\r\n                                        brandId: 0\r\n                                    });\r\n                                }}\r\n                            >\r\n                                Add Category\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n             \r\n                    <>\r\n                        <CategoryTable\r\n                        mainBrandId={brand}\r\n                            categoryList={categoryList}\r\n                            page={page}\r\n                            limit={limit}\r\n                            search={search}\r\n                            categoryId={categoryId}\r\n                            setCategoryId={setCategoryId}\r\n                            categoryData={categoryData}\r\n                            setCategoryData={setCategoryData}\r\n                            setAddUpdateOpen={setAddUpdateOpen}\r\n                        />\r\n                        <Grid item xs={12} sx={{ p: 3 }}>\r\n                            <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                                <Grid item>\r\n                                    <Pagination\r\n                                        color=\"primary\"\r\n                                        showFirstButton\r\n                                        showLastButton\r\n                                        page={page}\r\n                                        count={categoryList && categoryList.pages}\r\n                                        onChange={(event, newPage) => {\r\n                                            setPage(newPage);\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        size=\"large\"\r\n                                        sx={{ color: theme.palette.grey[900] }}\r\n                                        color=\"secondary\"\r\n                                        endIcon={<ExpandMoreRoundedIcon />}\r\n                                        onClick={handleClick}\r\n                                    >\r\n                                        {limit} Rows\r\n                                    </Button>\r\n                                    <Menu\r\n                                        id=\"menu-user-list-style1\"\r\n                                        anchorEl={anchorEl}\r\n                                        keepMounted\r\n                                        open={Boolean(anchorEl)}\r\n                                        onClose={handleCloseMenu}\r\n                                        variant=\"selectedMenu\"\r\n                                        anchorOrigin={{\r\n                                            vertical: 'top',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                        transformOrigin={{\r\n                                            vertical: 'bottom',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                    >\r\n                                        <MenuItem\r\n                                            value={10}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleCloseMenu();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            10 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={25}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleCloseMenu();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            25 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={50}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleCloseMenu();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            50 Rows{' '}\r\n                                        </MenuItem>\r\n                                    </Menu>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </>\r\n             \r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Categories;\r\n"],"sourceRoot":""}