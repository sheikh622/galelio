{"version":3,"sources":["shared/Card/HeadingCard.js","views/pages/brandAdmin/nftCategory/nftcard.js","assets/images/icons/image-upload.svg","utils/formatNumber.js","views/pages/brandAdmin/nftCategory/quantitySelector.js","views/pages/brandAdmin/nftCategory/addNft.js","views/pages/brandAdmin/nftCategory/index.js"],"names":["HeadingCard","forwardRef","title","value","role","setValue","options","theme","useTheme","sx","marginBottom","spacing","gridSpacing","borderColor","palette","primary","background","default","padding","container","alignItems","justifyContent","item","variant","fontWeight","color","undefined","id","select","onChange","e","target","width","height","map","option","label","NftCard","asset","name","price","currencyType","description","Card","maxWidth","CardMedia","component","image","CardContent","Typography","gutterBottom","CardActions","Button","size","fData","number","numeral","format","QuantitySelector","formik","fileArray","index","useDispatch","style","display","marginRight","marginTop","TextField","type","className","quantity","setFieldValue","Transition","props","ref","Slide","direction","AddNft","addNftOpen","setAddNftOpen","useState","mintType","setMintType","fields","setFields","uploadedImages","setUploadedImages","fieldDataArray","setFieldDataArray","setCurrencyType","Yup","required","max","matches","useFormik","enableReinitialize","initialValues","currency_type","images","onSubmit","values","data","fieldData","console","log","hasFile","length","handleDrop","useCallback","acceptedFiles","newUploadedImages","a","acceptedFile","useDropzone","accept","onDrop","getRootProps","getInputProps","isDragActive","isDragReject","isDragAccept","Dialog","open","TransitionComponent","keepMounted","DialogTitle","DialogContent","Grid","ml","mb","xs","onClick","autoComplete","handleSubmit","handleChange","FormControl","fullWidth","InputLabel","Select","labelId","ct","MenuItem","multiline","rows","d","array","fieldName","handleFieldNameChange","fieldValue","handleFieldValueChange","float","mt","borderRadius","paddingBottom","paddingTop","lg","clsx","Box","textAlign","alt","src","UploadImage","md","Link","underline","List","disablePadding","list","AnimatePresence","file","ListItem","motion","div","ListItemIcon","icon","fileFill","ListItemText","secondary","primaryTypographyProps","ListItemSecondaryAction","IconButton","edge","newFiles","splice","handleRemoveFile","closeFill","Divider","DialogActions","pr","AnimateButton","my","disableElevation","resetForm","NFTCategory","page","useParams","categoryName","categoryId","dispatch","brandId","useSelector","state","auth","user","useEffect","getNftsByCategory","nftByCategoryList","nftsByCategoryReducer","nftsByCategoryList"],"mappings":"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","file":"static/js/15.2cf97d7a.chunk.js","sourcesContent":["import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { forwardRef } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// constant\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                marginBottom: theme.spacing(gridSpacing),\r\n\r\n                borderColor: theme.palette.primary[200] + 75,\r\n                background: theme.palette.background.default\r\n            }}\r\n        >\r\n            <Box sx={{ padding: '13px 20px 22px 20px' }}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                    <Grid item>\r\n                        <Typography variant=\"h3\" sx={{ fontWeight: 500, color: '#000' }}>\r\n                            {title}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {value !== undefined && (\r\n                        <Grid item>\r\n                            {/* {options && (role == 'teacher' || role == 'super_admin') && ( */}\r\n                            <TextField\r\n                                id=\"standard-select-currency\"\r\n                                select\r\n                                value={value}\r\n                                onChange={(e) => setValue(e.target.value)}\r\n                                sx={{ width: '110px', height: '40px' }}\r\n                            >\r\n                                {options.map((option) => (\r\n                                    <MenuItem key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                            {/* )} */}\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        </Card>\r\n    );\r\n});\r\n\r\nexport default HeadingCard;\r\n","import * as React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nexport default function NftCard({asset, name, price, currencyType, description}) {\r\n\r\n\r\n  return (\r\n    <Card sx={{ maxWidth: 345 }}>\r\n      <CardMedia\r\n        component=\"img\"\r\n        height=\"140\"\r\n        image={asset}\r\n      />\r\n      <CardContent>\r\n        <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n          {name}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n  <b>Description: </b> {description}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n  <b>Price:</b> {price} {currencyType}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button size=\"small\">Details</Button>\r\n    \r\n      </CardActions>\r\n    </Card>\r\n\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/image-upload.54137b05.svg\";","import { replace } from 'lodash';\r\nimport numeral from 'numeral';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function fCurrency(number) {\r\n  return numeral(number).format(Number.isInteger(number) ? '$0,0' : '$0,0.00');\r\n}\r\n\r\nexport function fPercent(number) {\r\n  return numeral(number / 100).format('0.0%');\r\n}\r\n\r\nexport function fNumber(number) {\r\n  return numeral(number).format();\r\n}\r\n\r\nexport function fShortenNumber(number) {\r\n  return replace(numeral(number).format('0.00a'), '.00', '');\r\n}\r\n\r\nexport function fData(number) {\r\n  return numeral(number).format('0.0 b');\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { IconButton, Typography, TextField } from '@mui/material';\r\n\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport RemoveIcon from '@mui/icons-material/Remove';\r\nconst QuantitySelector = ({ formik, fileArray, index }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = (value) => {\r\n        fileArray[index].quantity = value;\r\n        formik.setFieldValue('images', fileArray);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: 'flex', marginRight: '10px' }}>\r\n                <Typography style={{ marginTop: '12px', marginRight: '5px' }}>Quantity : </Typography>\r\n\r\n                <TextField\r\n                \r\n                    type=\"number\"\r\n                    className=\"quantityField\"\r\n                    id=\"outlined-select-currency-native\"\r\n                    value={fileArray[index].quantity}\r\n                    onChange={(e) => {\r\n                        handleChange(e.target.value);\r\n                    }}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuantitySelector;\r\n","import { forwardRef, useState, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    Item,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    TextField,\r\n    Divider,\r\n    InputLabel,\r\n    Box,\r\n    Link,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    ListItemSecondaryAction,\r\n    IconButton,\r\n    Select,\r\n    MenuItem,\r\n    FormControl\r\n} from '@mui/material';\r\nimport UploadImage from 'assets/images/icons/image-upload.svg';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\nimport clsx from 'clsx';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Icon } from '@iconify/react';\r\nimport fileFill from '@iconify-icons/eva/file-fill';\r\nimport closeFill from '@iconify-icons/eva/close-fill';\r\nimport { fData } from 'utils/formatNumber';\r\nimport QuantitySelector from './quantitySelector';\r\n\r\nexport default function AddNft({ addNftOpen, setAddNftOpen }) {\r\n    const [mintType, setMintType] = useState('directMint');\r\n    const [fields, setFields] = useState([]);\r\n    const [uploadedImages, setUploadedImages] = useState([]);\r\n\r\n    const [fieldDataArray, setFieldDataArray] = useState([]);\r\n    const [currencyType, setCurrencyType] = useState([]);\r\n\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string()\r\n            .required('Brand Name is required!')\r\n            .max(42, 'Brand Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Brand name')\r\n    });\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            name: '',\r\n            price: '',\r\n            currency_type: '',\r\n            description: '',\r\n            images: []\r\n        },\r\n        // validationSchema,\r\n        onSubmit: (values) => {\r\n            const data = {\r\n                mintType: mintType,\r\n                name: values.name,\r\n                price: values.price,\r\n                currencyType: currencyType,\r\n                description: values.description,\r\n                image: values.images[0],\r\n                fieldData: fieldDataArray\r\n            };\r\n\r\n            console.log('Formik onSubmit in addNft', data);\r\n        }\r\n    });\r\n\r\n    const hasFile = formik.values.images.length > 0;\r\n\r\n    const handleClose = () => {\r\n        setAddNftOpen(false);\r\n        formik.resetForm();\r\n    };\r\n    const handleDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            let newUploadedImages = [...uploadedImages];\r\n            acceptedFiles.map(async (acceptedFile) => {\r\n                let data = { image: acceptedFile, quantity: 1 };\r\n                newUploadedImages = [...newUploadedImages, data];\r\n            });\r\n            formik.setFieldValue('images', newUploadedImages);\r\n            setUploadedImages(newUploadedImages);\r\n        },\r\n\r\n        [formik.setFieldValue, uploadedImages]\r\n    );\r\n    const handleRemoveFile = (file, index) => {\r\n        const newFiles = [...formik.values.images];\r\n        newFiles.splice(index, 1);\r\n        setUploadedImages(newFiles);\r\n        formik.setFieldValue('images', newFiles);\r\n    };\r\n\r\n    const { getRootProps, getInputProps, isDragActive, isDragReject, isDragAccept } = useDropzone({\r\n        accept: '.jpeg,.png,.jpg,.gif',\r\n        onDrop: handleDrop\r\n    });\r\n\r\n    const handleFieldNameChange = (value, index) => {\r\n        let array = [...fieldDataArray];\r\n        array[index].fieldName = value;\r\n        setFieldDataArray(array);\r\n    };\r\n    const handleFieldValueChange = (value, index) => {\r\n        let array = [...fieldDataArray];\r\n        array[index].fieldValue = value;\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    console.log('main fieldDataArray', fieldDataArray);\r\n\r\n    const handleCurrencyTypeChange = (e) => {\r\n        let ct = e.target.value;\r\n\r\n        setCurrencyType(ct);\r\n    };\r\n    return (\r\n        <>\r\n            <Dialog\r\n                style={{}}\r\n                open={addNftOpen}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">{'Add NFT'}</DialogTitle>\r\n                {/* <Divider /> */}\r\n\r\n                <DialogContent style={{ width: '35rem' }}>\r\n                    <Grid container spacing={2} sx={{ ml: 1, mb: 2 }}>\r\n                        <Grid item xs={4}>\r\n                            <Button\r\n                                variant={mintType == 'directMint' ? 'contained' : 'outlined'}\r\n                                onClick={() => {\r\n                                    setMintType('directMint');\r\n                                }}\r\n                            >\r\n                                Direct Mint\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <Button\r\n                                variant={mintType == 'lazyMint' ? 'contained' : 'outlined'}\r\n                                onClick={() => {\r\n                                    setMintType('lazyMint');\r\n                                }}\r\n                            >\r\n                                Lazy Minting\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid container>\r\n                            <Grid xs={5}>\r\n                                <TextField\r\n                                    sx={{ marginTop: '25px' }}\r\n                                    id=\"name\"\r\n                                    name=\"name\"\r\n                                    label=\"NFT Name\"\r\n                                    value={formik.values.name}\r\n                                    onChange={formik.handleChange}\r\n                                    // error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                    // helperText={formik.touched.name && formik.errors.name}\r\n                                    // fullWidth\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid xs={3}>\r\n                                <TextField\r\n                                    sx={{ marginTop: '25px' }}\r\n                                    id=\"price\"\r\n                                    name=\"price\"\r\n                                    label=\"NFT Price\"\r\n                                    // value=\" \"\r\n                                    onChange={formik.handleChange}\r\n                                    // error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                    // helperText={formik.touched.name && formik.errors.name}\r\n                                    // fullWidth\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid xs={4}>\r\n                                <FormControl fullWidth sx={{ marginTop: '25px' }}>\r\n                                    <InputLabel id=\"demo-simple-select-label\">Currency Type</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"demo-simple-select-label\"\r\n                                        id=\"currencyType\"\r\n                                        name=\"\"\r\n                                        // label=\"currencyType\"\r\n                                        // value= \"Currency Type\"\r\n                                        onChange={handleCurrencyTypeChange}\r\n                                    >\r\n                                        <MenuItem value={'ETH'}>ETH</MenuItem>\r\n                                        <MenuItem value={'USDT'}>USDT</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {/* <TextField\r\n                            sx={{ marginTop: '25px' }}\r\n                            id=\"currency_type\"\r\n                            name=\"currency_type\"\r\n                            label=\"Currency Type\"\r\n                            // value=\" \"\r\n                            onChange={formik.handleChange}\r\n                            // error={formik.touched.name && Boolean(formik.errors.name)}\r\n                            // helperText={formik.touched.name && formik.errors.name}\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                        /> */}\r\n                        <TextField\r\n                            multiline\r\n                            rows={4}\r\n                            sx={{ marginTop: '25px' }}\r\n                            id=\"description\"\r\n                            name=\"description\"\r\n                            label=\"Description\"\r\n                            // value=\" \"\r\n                            onChange={formik.handleChange}\r\n                            //  ={formik.touched.name && Boolean(formik.errors.name)}\r\n                            // helperText={formik.touched.name && formik.errors.name}\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                        />\r\n                        {/* <TextField\r\n                            sx={{ marginTop: '25px' }}\r\n                            id=\"quantity\"\r\n                            name=\"quantity\"\r\n                            label=\"Quantity\"\r\n                            // value=\" \"\r\n                            onChange={formik.handleChange}\r\n                            // error={formik.touched.name && Boolean(formik.errors.name)}\r\n                            // helperText={formik.touched.name && formik.errors.name}\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                        /> */}\r\n\r\n                        {fields.length != 0 && (\r\n                            <>\r\n                                {fields.map((d, index) => (\r\n                                    <>\r\n                                        <Grid container spacing={5}>\r\n                                            <Grid item xs={6}>\r\n                                                {/* <span style={{backsground:\"\"}}>{index+1}</span> */}\r\n                                                <TextField\r\n                                                    sx={{ marginTop: '25px', background: '' }}\r\n                                                    id=\"field_name\"\r\n                                                    name=\"field_name\"\r\n                                                    label=\"Field Name\"\r\n                                                    // value=\" \"\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldNameChange(e.target.value, index);\r\n                                                    }}\r\n                                                    //  ={formik.touched.name && Boolean(formik.errors.name)}\r\n                                                    // helperText={formik.touched.name && formik.errors.name}\r\n                                                    variant=\"standard\"\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={6}>\r\n                                                <TextField\r\n                                                    sx={{ marginTop: '25px' }}\r\n                                                    id=\"field_value\"\r\n                                                    name=\"field_value\"\r\n                                                    label=\"Field Value\"\r\n                                                    // value=\" \"\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldValueChange(e.target.value, index);\r\n                                                    }}\r\n                                                    // error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                                    // helperText={formik.touched.name && formik.errors.name}\r\n                                                    variant=\"standard\"\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </>\r\n                                ))}\r\n                            </>\r\n                        )}\r\n\r\n                        <div style={{ height: '3rem' }}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                sx={{ float: 'right', mt: 3 }}\r\n                                onClick={() => {\r\n                                    setFields([...fields, 1]);\r\n                                    setFieldDataArray([\r\n                                        ...fieldDataArray,\r\n                                        {\r\n                                            fieldName: '',\r\n                                            fieldValue: ''\r\n                                        }\r\n                                    ]);\r\n                                }}\r\n                            >\r\n                                Add Fields\r\n                            </Button>\r\n                        </div>\r\n                        {uploadedImages.length !== 1 && (\r\n                            <Grid\r\n                                sx={{ background: '#c5cbe9', borderRadius: '5px', paddingBottom: '2rem', paddingTop: '2rem' }}\r\n                                item\r\n                                lg={12}\r\n                                mt={3}\r\n                            >\r\n                                <div className={clsx('dropZoneContainer', 'xyz')}>\r\n                                    <div\r\n                                        className={clsx('dropZone', {\r\n                                            isDragActive: isDragActive,\r\n                                            isDragAccept: isDragAccept,\r\n                                            isDragReject: isDragReject\r\n                                        })}\r\n                                        {...getRootProps()}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n\r\n                                        <Grid container direction=\"column\">\r\n                                            <Box\r\n                                                textAlign=\"center\"\r\n                                                component=\"img\"\r\n                                                alt=\"Select File\"\r\n                                                src={UploadImage}\r\n                                                sx={{ height: 60 }}\r\n                                            />\r\n\r\n                                            <Box mt={4} textAlign=\"center\" sx={{ ml: { md: 0 } }}>\r\n                                                <Typography variant=\"subtitle\" sx={{ color: 'grey', textAlign: 'center' }}>\r\n                                                    Drop your image or&nbsp;\r\n                                                    <Link underline=\"always\">browse</Link>.&nbsp;\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </div>\r\n                            </Grid>\r\n                        )}\r\n\r\n                        <List disablePadding className={clsx({ list: hasFile })} sx={{ mt: 3 }}>\r\n                            <AnimatePresence>\r\n                                {formik.values.images &&\r\n                                    formik.values.images.map((file, index) => (\r\n                                        <ListItem key={file.image.name} component={motion.div} className=\"listItem\">\r\n                                            <ListItemIcon>\r\n                                                <Icon icon={fileFill} width={32} height={32} />\r\n                                            </ListItemIcon>\r\n                                            <ListItemText\r\n                                                primary={file.image.name ? file.image.name : ''}\r\n                                                secondary={fData(file.image.size) ? fData(file.image.size) : ''}\r\n                                                primaryTypographyProps={{\r\n                                                    variant: 'subtitle2'\r\n                                                }}\r\n                                            />\r\n                                            <ListItemSecondaryAction style={{ display: 'flex' }}>\r\n                                                <QuantitySelector formik={formik} fileArray={formik.values.images} index={index} />\r\n\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => handleRemoveFile(file.image, index)}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                            </ListItemSecondaryAction>\r\n                                        </ListItem>\r\n                                    ))}\r\n                            </AnimatePresence>\r\n                        </List>\r\n                    </form>\r\n                </DialogContent>\r\n                <Divider />\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1 }}\r\n                            onClick={() => {\r\n                                formik.handleSubmit();\r\n                            }}\r\n                            size=\"large\"\r\n                            disableElevation\r\n                        >\r\n                            {'Add'}\r\n                        </Button>\r\n                    </AnimateButton>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1, color: '#fff' }}\r\n                            onClick={handleClose}\r\n                            color=\"secondary\"\r\n                            size=\"large\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </AnimateButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    Divider,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    Typography,\r\n    Grid,\r\n    MenuItem,\r\n    Menu,\r\n    Pagination,\r\n    OutlinedInput,\r\n    TextField,\r\n    InputAdornment\r\n} from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport HeadingCard from 'shared/Card/HeadingCard';\r\nimport { getNftsByCategory } from 'redux/nftManagement/actions';\r\nimport { BrowserRouter as Router, Switch, Route, Link, useParams } from 'react-router-dom';\r\n\r\nimport NftCard from './nftcard';\r\nimport AddNft from './addNft';\r\n\r\nexport default function NFTCategory() {\r\n    const [page, setPage] = useState(1);\r\n    const [size, setSize] = useState(10);\r\n    const [nfts, setNfts] = useState([]);\r\n    const { categoryName, categoryId } = useParams();\r\n    const [addNftOpen, setAddNftOpen] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const brandId = useSelector((state) => state.auth.user.brandId);\r\n    useEffect(() => {\r\n        dispatch(\r\n            getNftsByCategory({\r\n                categoryId: categoryId,\r\n                brandId: brandId,\r\n                page: page,\r\n                size: size\r\n            })\r\n        );\r\n    }, [page, size]);\r\n\r\n    const nftByCategoryList = useSelector((state) => state.nftsByCategoryReducer.nftsByCategoryList);\r\n    return (\r\n        <>\r\n          <AddNft addNftOpen={addNftOpen} setAddNftOpen={setAddNftOpen}  />\r\n            <div>\r\n              \r\n\r\n                <Button\r\n                    variant=\"contained\"\r\n                    style={{ float: 'right' }}\r\n                    onClick={() => {\r\n                        setAddNftOpen(true);\r\n                    }}\r\n                >\r\n                    Add NFT\r\n                </Button>\r\n                <h1>Categories</h1>\r\n            </div>\r\n\r\n            <HeadingCard title={categoryName} />\r\n\r\n            <Grid container>\r\n            {nftByCategoryList.length == 0 \r\n            ?\r\n            <>\r\n            <h2>No NFTs yet.</h2>\r\n            </>\r\n            :\r\n            <>\r\n              {nftByCategoryList.map((d) => {\r\n                    return (\r\n                        <>\r\n                            <NftCard\r\n                                asset={d.asset}\r\n                                name={d.name}\r\n                                price={d.price}\r\n                                description={d.description}\r\n                                currencyType={d.currencyType}\r\n                            />\r\n                        </>\r\n                    );\r\n                })}\r\n            </>\r\n            \r\n            }\r\n              \r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n"],"sourceRoot":""}