{"version":3,"sources":["views/pages/user/productDetails/component/similarProducts.js","views/pages/user/productDetails/component/properties.js","views/pages/user/productDetails/component/productView.js","views/pages/user/productDetails/index.js","ui-component/extended/Avatar.js","shared/Card/HeadingCard.js","ui-component/cards/SubCard.js","views/pages/user/commonComponent/nftCard.js"],"names":["SimilarProducts","marketplaceNfts","Grid","spacing","gridSpacing","sx","margin","item","xs","lg","md","container","mb","Typography","variant","mt","component","textAlign","sm","textTransform","justifyContent","nfts","rows","length","map","data","width","Properties","nft","theme","useTheme","NFTMetaData","responsive","superLargeDesktop","breakpoint","max","min","items","desktop","tablet","mobile","autoPlay","autoPlaySpeed","customTransition","transitionDuration","infinite","SubCard","className","background","palette","mode","fieldName","fieldValue","PropertiesView","dispatch","useDispatch","useState","bought","setBought","console","log","navigate","useNavigate","user","useSelector","state","auth","handleBuyNft","erc20Address","tokenId","parseInt","NFTTokens","contractAddress","Category","BrandCategories","price","ethers","utils","parseEther","toString","provider","providers","Web3Provider","window","ethereum","signer","getSigner","MarketplaceAbi","abi","marketplace","Contract","MarketplaceAddress","address","Erc20","token","approve","wait","purchaseItem","then","buyNft","nftId","id","nftToken","buyerAddress","from","catch","error","message","toast","RouterLink","to","CardMedia","height","image","asset","alt","ml","alignItems","Avatar","src","Brand","zeroMinWidth","textDecoration","align","fontWeight","name","color","description","paddingLeft","currencyType","isSold","style","Button","float","size","onClick","ProductDetails","location","useLocation","marketplaceReducer","search","page","limit","useEffect","getAllMarketplaceNftsByCategory","categoryId","display","outline","others","colorSX","paper","bgcolor","outlineSX","border","borderColor","sizeSX","forwardRef","ref","children","content","contentClass","darkTitle","secondary","contentSX","title","dark","light","primary","boxShadow","p","action","opacity","defaultProps","NftCard","maxWidth","borderRadius","padding","fontSize","marginTop","marginLeft"],"mappings":"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","file":"static/js/24.8259acf7.chunk.js","sourcesContent":["import { Grid, Typography } from '@mui/material';\r\nimport { gridSpacing } from 'store/constant';\r\nimport NftCard from '../../commonComponent/nftCard';\r\nconst SimilarProducts = ({ marketplaceNfts }) => {\r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12} lg={12} md={12}>\r\n                <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                    <Grid item xs={12}>\r\n                        <Typography\r\n                            variant=\"h2\"\r\n                            mt={4}\r\n                            component=\"div\"\r\n                            sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' }, textTransform: 'capitalize' }}\r\n                        >\r\n                            Similar Products\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n                <Grid container justifyContent=\"left\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n                    {marketplaceNfts?.nfts?.rows.length >0\r\n                    ?\r\n                    <>\r\n                    {marketplaceNfts?.nfts?.rows.map((item) => (\r\n                        <NftCard data={item} />\r\n                    ))}\r\n                    \r\n                    </>\r\n                    :\r\n                    <>\r\n                     <Grid sx={{width:\"100%\", margin:\"3%\"}}>\r\n                   <h3 sx={{textAlign:\"center\"}}>\r\n                No Similar products found.\r\n\r\n                   </h3>\r\n\r\n                   </Grid>\r\n                    </>\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SimilarProducts;\r\n","// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Container, Grid, Typography } from '@mui/material';\r\n\r\n// project imports\r\n\r\nimport SubCard from 'ui-component/cards/SubCard';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\nimport Carousel from 'react-multi-carousel';\r\nimport 'react-multi-carousel/lib/styles.css';\r\n\r\n// =============================|| LANDING - FEATURE PAGE ||============================= //\r\n\r\nconst Properties = ({ nft }) => {\r\n    const theme = useTheme();\r\n    const responsive = {\r\n        superLargeDesktop: {\r\n            // the naming can be any, depends on you.\r\n            breakpoint: { max: 4000, min: 3000 },\r\n            items: 5\r\n        },\r\n        desktop: {\r\n            breakpoint: { max: 3000, min: 1024 },\r\n            items: 5\r\n        },\r\n        tablet: {\r\n            breakpoint: { max: 1024, min: 464 },\r\n            items: 2\r\n        },\r\n        mobile: {\r\n            breakpoint: { max: 464, min: 0 },\r\n            items: 1\r\n        }\r\n    };\r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12} lg={12} md={12}>\r\n                <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                    <Grid item xs={12}>\r\n                        <Typography\r\n                            variant=\"h2\"\r\n                            mt={4}\r\n                            component=\"div\"\r\n                            sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' }, textTransform: 'capitalize' }}\r\n                        >\r\n                            Properties\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                {nft.NFTMetaData?.length > 0 ? (\r\n                    <>\r\n                        <Carousel\r\n                            responsive={responsive}\r\n                            autoPlay={true}\r\n                            autoPlaySpeed={2800}\r\n                            customTransition=\"all .5\"\r\n                            transitionDuration={500}\r\n                            infinite={true}\r\n                        >\r\n                            {nft.NFTMetaData.map((item) => (\r\n                                <>\r\n                                    <Grid container justifyContent=\"left\" spacing={gridSpacing} sx={{ textAlign: 'center', width: '500%' }}>\r\n                                        <Grid item md={2} sm={6}>\r\n                                            <SubCard\r\n                                                className=\"property\"\r\n                                                sx={{ background: theme.palette.mode === 'dark' ? '#181C1F' : '#fff' }}\r\n                                            >\r\n                                                <Grid container justifyContent=\"center\" spacing={2}>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography className=\"pbackground\" variant=\"body\">\r\n                                                            {item.fieldName}\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography variant=\"h3\">{item.fieldValue} </Typography>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </SubCard>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </>\r\n                            ))}\r\n                        </Carousel>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Grid sx={{ width: '100%', margin: '3%' }}>\r\n                            <h3 sx={{ textAlign: 'center' }}>No properties found.</h3>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Properties;\r\n","// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { CardMedia, Grid, Typography, Button } from '@mui/material';\r\nimport React from 'react';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\nimport { ethers } from 'ethers';\r\nimport NFTAbi from '../../../../../contractAbi/NFT.json';\r\nimport MarketplaceAbi from '../../../../../contractAbi/Marketplace.json';\r\nimport MarketplaceAddress from '../../../../../contractAbi/Marketplace-address.json';\r\nimport Erc20 from '../../../../../contractAbi/Erc20.json';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { buyNft } from 'redux/nftManagement/actions';\r\n\r\n// =============================|| LANDING - FEATURE PAGE ||============================= //\r\n\r\nconst PropertiesView = ({ nft }) => {\r\n    const dispatch = useDispatch();\r\n    const [bought, setBought] = useState(false);\r\n\r\n    console.log('nft from productview', nft);\r\n    const navigate = useNavigate();\r\n    const user = useSelector((state) => state.auth.user);\r\n    const theme = useTheme();\r\n\r\n    const handleBuyNft = async () => {\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else {\r\n            let erc20Address = '0x9C7F2b187d24147F1f993E932A16e59111675867';\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n            let price = ethers.utils.parseEther(nft.price.toString());\r\n\r\n            console.log('price', price);\r\n            console.log('erc20Address', erc20Address);\r\n            console.log('tokenId', tokenId);\r\n            console.log('contractAddress', contractAddress);\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            console.log('signer', signer);\r\n            console.log('MarketplaceAbi.abi', MarketplaceAbi.abi);\r\n\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n            console.log('Erc20.abi', Erc20);\r\n            const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n            console.log('token', token);\r\n            await (await token.approve(MarketplaceAddress.address, price)).wait();\r\n            await (\r\n                await marketplace\r\n                    .purchaseItem(tokenId, contractAddress, price)\r\n                    .then((data) => {\r\n                        dispatch(\r\n                            buyNft({\r\n                                nftId: nft.id,\r\n                                nftToken: nft.NFTTokens[0].id,\r\n                                buyerAddress: data.from\r\n                            })\r\n                        );\r\n                        setBought(true);\r\n                        console.log(\"NFT mint success\")\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('error', error.message);\r\n                        toast.error(error.message);\r\n                    })\r\n            );\r\n        }\r\n    };\r\n\r\n    \r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12}>\r\n                <Grid container justifyContent=\"center\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n                    <Grid item md={6} sm={12} component={RouterLink} to=\"/companyPage\">\r\n                        <CardMedia component=\"img\" sx={{ height: '100%' }} image={nft?.asset} alt=\"image\" />\r\n                    </Grid>\r\n\r\n                    <Grid item md={6} sm={12}>\r\n                        <Grid item xs={12}>\r\n                            <Grid container>\r\n                                <Grid item md={12} sm={12}>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid mt={4} ml={2} item xs={12}>\r\n                                            <Grid container spacing={2} alignItems=\"center\">\r\n                                                <Grid item>\r\n                                                    <Avatar alt=\"User 1\" src={nft?.Brand?.image} />\r\n                                                </Grid>\r\n                                                <Grid\r\n                                                    item\r\n                                                    xs\r\n                                                    zeroMinWidth\r\n                                                    component={RouterLink}\r\n                                                    sx={{ textDecoration: 'none' }}\r\n                                                    to=\"/companyPage\"\r\n                                                >\r\n                                                    <Typography align=\"left\" fontWeight={600} variant=\"subtitle1\">\r\n                                                        {nft?.Brand?.name}\r\n                                                    </Typography>\r\n                                                    <Typography align=\"left\" variant=\"subtitle2\">\r\n                                                        Creator\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n\r\n                                        <Grid item mt={4} xs={12}>\r\n                                            <Typography\r\n                                                className=\"Lux\"\r\n                                                color={theme.palette.mode === 'dark' ? 'white' : 'black'}\r\n                                                variant=\"h3\"\r\n                                            >\r\n                                                <span>{nft?.name}</span>\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <Typography className=\"productdescription\" variant=\"body2\">\r\n                                                {nft?.description}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        {/* <Grid item xs={12}>\r\n                                            <TextField\r\n                                                sx={{ borderRadius: '4px' }}\r\n                                                className=\"select\"\r\n                                                fullWidth\r\n                                                id=\"standard-select-currency\"\r\n                                                select\r\n                                                value={value}\r\n                                                onChange={(e) => setValue(e.target.value)}\r\n                                            >\r\n                                                {status.map((option) => (\r\n                                                    <MenuItem key={option.value} value={option.value}>\r\n                                                        {option.label}\r\n                                                    </MenuItem>\r\n                                                ))}\r\n                                            </TextField>\r\n                                        </Grid>\r\n                                        <Grid item mt={2} mb={2} className=\"timer\" xs={12}>\r\n                                            <Grid className=\"auction\" container>\r\n                                                <Grid item md={6} xs={12} sm={12}>\r\n                                                    <Typography color=\"black\" variant=\"body\">\r\n                                                        Auction Time{' '}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={12} sm={12}>\r\n                                                    <Typography color=\"black\" variant=\"body\">\r\n                                                        {' '}\r\n                                                        2h : 40m : 03s\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid> */}\r\n                                        <Grid item mt={2} mb={2} xs={12}>\r\n                                            <Grid container>\r\n                                                <Grid item md={4} xs={12} sm={12}>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography\r\n                                                            color={theme.palette.mode === 'dark' ? 'white' : '#404040'}\r\n                                                            sx={{ paddingLeft: { md: '22px' }, textAlign: { md: 'left' } }}\r\n                                                            className=\"price\"\r\n                                                            variant=\"body2\"\r\n                                                        >\r\n                                                            Price\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography\r\n                                                            color={theme.palette.mode === 'dark' ? 'white' : '#262626'}\r\n                                                            sx={{ paddingLeft: { md: '22px' }, textAlign: { md: 'left' } }}\r\n                                                            className=\"ETH\"\r\n                                                            variant=\"h3\"\r\n                                                        >\r\n                                                            {nft.price} {nft.currencyType}\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                {bought == true || nft.isSold == true ?\r\n                                                <div>\r\n\r\n                                                  <h1 style={{textAlign:\"center\", color:\"red\"}}>\r\n                                                 Item is sold already.\r\n                                                </h1>\r\n                                                    \r\n                                                </div> \r\n                                                :\r\n                                                <Grid item md={8} xs={12} sm={12} textAlign=\"center\">\r\n                                                <Button\r\n                                                    sx={{ float: { md: 'right' } }}\r\n                                                    className=\"buy\"\r\n                                                    variant=\"contained\"\r\n                                                    size=\"large\"\r\n                                                    onClick={() => {\r\n                                                        handleBuyNft();\r\n                                                    }}\r\n                                                >\r\n                                                    Buy Now\r\n                                                </Button>\r\n                                            </Grid>\r\n                                                }\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default PropertiesView;\r\n","import { useLocation } from 'react-router-dom';\r\nimport { useTheme } from '@emotion/react';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Grid } from '@mui/material';\r\nimport SimilarProducts from './component/similarProducts';\r\nimport Activity from './component/activity';\r\nimport Properties from './component/properties';\r\nimport PropertiesView from './component/productView';\r\nimport { getAllMarketplaceNftsByCategory } from 'redux/marketplace/actions';\r\n\r\nconst ProductDetails = () => {\r\n    const theme = useTheme();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n    const marketplaceNfts = useSelector((state) => state.marketplaceReducer.marketplaceNfts);\r\n    console.log('marketplaceNfts', marketplaceNfts);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllMarketplaceNftsByCategory({\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                categoryId: location?.state.nft?.Category?.id\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n    console.log(\"location.state\",location.state)\r\n    return (\r\n        <>\r\n            <Grid\r\n                container-fluid\r\n                md={11}\r\n                sx={{\r\n                    display: { xs: 'block', sm: 'block', md: 'flex' },\r\n                    background: theme.palette.mode === 'dark' ? 'black' : '#f3f3f3',\r\n                    color: theme.palette.mode === 'dark' ? 'white' : '#404040'\r\n                }}\r\n            >\r\n                <Grid item md={11} xs={12}>\r\n                    <Grid container-fluid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <PropertiesView nft={location.state.nft} />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <Properties nft={location.state.nft} />\r\n                        </Grid>\r\n                        {/* <Grid item md={12} xs={12}>\r\n                            <Activity />\r\n                        </Grid> */}\r\n\r\n                        <Grid item md={12} xs={12}>\r\n                            <SimilarProducts marketplaceNfts={marketplaceNfts}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProductDetails;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { forwardRef } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// constant\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                marginBottom: theme.spacing(gridSpacing),\r\n\r\n                borderColor: theme.palette.primary[200] + 75,\r\n                background: theme.palette.background.default\r\n            }}\r\n        >\r\n            <Box sx={{ padding: '13px 20px 22px 20px' }}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                    <Grid item>\r\n                        <Typography variant=\"h3\" sx={{ fontWeight: 500, color: '#000' }}>\r\n                            {title}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {value !== undefined && (\r\n                        <Grid item>\r\n                            {/* {options && (role == 'teacher' || role == 'super_admin') && ( */}\r\n                            <TextField\r\n                                id=\"standard-select-currency\"\r\n                                select\r\n                                value={value}\r\n                                onChange={(e) => setValue(e.target.value)}\r\n                                sx={{ width: '110px', height: '40px' }}\r\n                            >\r\n                                {options.map((option) => (\r\n                                    <MenuItem key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                            {/* )} */}\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        </Card>\r\n    );\r\n});\r\n\r\nexport default HeadingCard;\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// ==============================|| CUSTOM SUB CARD ||============================== //\r\n\r\nconst SubCard = forwardRef(({ children, content, contentClass, darkTitle, secondary, sx = {}, contentSX = {}, title, ...others }, ref) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            ref={ref}\r\n            sx={{\r\n                border: '1px solid',\r\n                borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light,\r\n                ':hover': {\r\n                    boxShadow: theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' : '0 2px 14px 0 rgb(32 40 45 / 8%)'\r\n                },\r\n                ...sx\r\n            }}\r\n            {...others}\r\n        >\r\n            {/* card header and action */}\r\n            {!darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h5\">{title}</Typography>} action={secondary} />}\r\n            {darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h4\">{title}</Typography>} action={secondary} />}\r\n\r\n            {/* content & header divider */}\r\n            {title && (\r\n                <Divider\r\n                    sx={{\r\n                        opacity: 1,\r\n                        borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light\r\n                    }}\r\n                />\r\n            )}\r\n\r\n            {/* card content */}\r\n            {content && (\r\n                <CardContent sx={{ p: 2.5, ...contentSX }} className={contentClass || ''}>\r\n                    {children}\r\n                </CardContent>\r\n            )}\r\n            {!content && children}\r\n        </Card>\r\n    );\r\n});\r\n\r\nSubCard.propTypes = {\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    sx: PropTypes.object,\r\n    contentSX: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nSubCard.defaultProps = {\r\n    content: true\r\n};\r\n\r\nexport default SubCard;\r\n","import { useTheme } from '@mui/material/styles';\r\nimport { Card, Grid, CardActionArea, CardContent, Divider } from '@mui/material';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst NftCard = ({ data }) => {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    // console.log('data', data);\r\n    return (\r\n  \r\n        <Grid\r\n            item\r\n            md={2}\r\n            sm={6}\r\n            onClick={() => {\r\n                navigate('/productDetails', {\r\n                    state: {\r\n                        nft: data\r\n                    }\r\n                });\r\n            }}\r\n            sx={{ color: theme.palette.mode === 'dark' ? 'white' : 'black', textDecoration: 'none' }}\r\n        >\r\n            <Card\r\n                sx={{\r\n                    color: theme.palette.mode === 'dark' ? 'white' : '#404040',\r\n                    background: theme.palette.mode === 'dark' ? '#181C1F' : 'white',\r\n                    maxWidth: 365,\r\n                    width: '105%',\r\n                    boxShadow: '1px 2px 6px #d3d3d3',\r\n                    borderRadius: '7px'\r\n                }}\r\n            >\r\n                <CardActionArea>\r\n                    <CardMedia component=\"img\" height=\"200\" image={data.asset} />\r\n                    <CardContent style={{ padding: '6%' }}>\r\n                        <Grid container>\r\n                            <Grid item xs={8} sx={{ textAlign: 'left' }}>\r\n                                <span style={{ fontWeight: '550', fontSize: '130%' }}> {data.Brand.name}</span>\r\n                                <div className=\"overflow\" style={{ marginTop: '5%', color:\"#656565\" }}>\r\n                                    {data.name}\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={4} sx={{ background: '' }}>\r\n                                <span style={{ fontWeight: '40 !important ', fontSize: '110%', float: 'right', color:\"#878787\" }}>Creator</span>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Divider sx={{ mt: 2, mb: 2 }} />\r\n                        <Grid>\r\n                            <Grid item md={12} xs={12} className=\"overflow\" sx={{ marginTop: { xs: '10px', md: '0' } }}>\r\n                               <span style={{float:\"left\"}}>\r\n                               Current Price :\r\n                                </span>\r\n                                <span style={{marginLeft:\"2%\"}}>\r\n                                    <b>{data.currencyType + ' ' + data.price}</b>\r\n\r\n                                </span>\r\n                \r\n                                \r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n            </Card>\r\n        </Grid>\r\n     \r\n    );\r\n};\r\n\r\nexport default NftCard;\r\n"],"sourceRoot":""}