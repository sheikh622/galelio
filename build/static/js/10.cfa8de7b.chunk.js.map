{"version":3,"sources":["views/pages/superAdmin/brands/component/deleteBrandDialog.js","views/pages/superAdmin/brands/component/brandTable.js","views/pages/superAdmin/brands/component/addUpdateBrand.js","views/pages/superAdmin/brands/index.js","ui-component/extended/Avatar.js","shared/Card/HeadingCard.js","shared/component/FileInput.js","../node_modules/@mui/icons-material/AccountCircle.js"],"names":["Transition","forwardRef","props","ref","Slide","direction","DeleteBrandDialog","open","setOpen","brandId","page","limit","search","theme","useTheme","dispatch","useDispatch","handleClose","Dialog","TransitionComponent","keepMounted","onClose","DialogTitle","id","DialogContent","DialogContentText","Typography","variant","component","DialogActions","sx","pr","Button","color","palette","error","dark","borderColor","onClick","size","deleteBrand","BrandTable","brandsList","setAddUpdateOpen","setBrandData","navigate","useNavigate","useState","deleteOpen","setDeleteOpen","setBrandId","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","undefined","brands","count","map","row","index","justifyContent","alignItems","Grid","container","spacing","item","Avatar","alt","src","image","name","padding","location","description","moment","createdAt","format","updatedAt","Stack","Tooltip","placement","title","IconButton","state","brandData","fontSize","orange","main","background","light","width","m","CircularProgress","AddUpdateBrandDialog","isUpdate","setIsUpdate","useEffect","validationSchema","Yup","default","required","max","matches","when","is","then","otherwise","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","isValid","split","pop","toast","errorHandler","addBrand","updateBrand","resetForm","className","maxWidth","Divider","autoComplete","handleSubmit","xs","pt","InputLabel","htmlFor","TextField","value","onChange","handleChange","touched","Boolean","errors","helperText","fullWidth","FileInput","accept","fieldName","placeHolder","AnimateButton","type","my","ml","disableElevation","Brands","useSelector","brand","setSearch","setPage","setLimit","addUpdateOpen","anchorEl","setAnchorEl","handleCloseMenu","getAllBrands","MainCard","gridSpacing","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","e","target","textAlign","content","p","Pagination","showFirstButton","showLastButton","pages","event","newPage","grey","endIcon","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","outline","others","colorSX","paper","bgcolor","outlineSX","border","sizeSX","height","fileRef1","useRef","current","click","hidden","setFieldValue","files","length","mt","substring","toFixed","style","marginTop","_interopRequireDefault","require","Object","defineProperty","exports","_createSvgIcon","_jsxRuntime","_default","jsx","d"],"mappings":"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","file":"static/js/10.cfa8de7b.chunk.js","sourcesContent":["import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteBrand } from '../../../../../redux/brand/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteBrandDialog({ open, setOpen, brandId, page, limit, search }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Delete Brand</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to delete this Brand?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteBrand({\r\n                                    id: brandId,\r\n                                    handleClose: handleClose,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n    IconButton,\r\n    Stack,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Tooltip,\r\n    Grid,\r\n    Typography,\r\n    CircularProgress\r\n} from '@mui/material';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport AddOutlinedIcon from '@mui/icons-material/AddOutlined';\r\nimport DeleteBrandDialog from './deleteBrandDialog';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\nimport moment from 'moment';\r\nimport DashboardIcon from '@mui/icons-material/Dashboard';\r\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\r\nconst BrandTable = ({ brandsList, page, limit, search, setAddUpdateOpen, setBrandData }) => {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const [brandId, setBrandId] = useState();\r\n    return (\r\n        <TableContainer>\r\n            <DeleteBrandDialog open={deleteOpen} setOpen={setDeleteOpen} brandId={brandId} page={page} limit={limit} search={search} />\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\">Name</TableCell>\r\n                        <TableCell align=\"center\">Location</TableCell>\r\n                        <TableCell align=\"center\">Description</TableCell>\r\n                        <TableCell align=\"center\">Created At</TableCell>\r\n                        <TableCell align=\"center\">Updated At</TableCell>\r\n                        <TableCell align=\"center\">Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {brandsList.brands != undefined && brandsList.count != 0 || undefined\r\n                    ?\r\n                    <>\r\n                       {brandsList.brands != undefined &&\r\n                        brandsList.brands.map((row, index) => (\r\n                            <TableRow>\r\n                                <TableCell align=\"center\" justifyContent=\"center\" alignItems=\"center\">\r\n                                    <Grid container spacing={2} justifyContent=\"center\" alignItems=\"center\">\r\n                                        <Grid item>\r\n                                            <Avatar alt=\"Brand Image\" src={row.image} />\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography variant=\"subtitle1\" component=\"div\">\r\n                                                {row.name}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                    {row.location}\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                    {row.description}\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">{moment(row.createdAt).format('DD-MMM-YYYY')}</TableCell>\r\n                                <TableCell align=\"center\">{moment(row.updatedAt).format('DD-MMM-YYYY')}</TableCell>\r\n                                <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                    <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                      \r\n                                        <Tooltip placement=\"top\" title=\"Add Brand Admin\">\r\n                                            <IconButton\r\n                                                color=\"primary\"\r\n                                                aria-label=\"detail\"\r\n                                                size=\"medium\"\r\n                                                onClick={() => {\r\n                                                    navigate('/brands/admin', {\r\n                                                        state: {\r\n                                                            brandData: row\r\n                                                        }\r\n                                                    });\r\n                                                }}\r\n                                            >\r\n                                                <AccountCircleIcon sx={{ fontSize: '1.5rem' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                        <Tooltip placement=\"top\" title=\"Add Brand Categories\">\r\n                                        <IconButton\r\n                                            color=\"primary\"\r\n                                            aria-label=\"detail\"\r\n                                            size=\"medium\"\r\n                                            onClick={() => {\r\n                                                navigate('/brands/category', {\r\n                                                    state: {\r\n                                                        brandData: row\r\n                                                    }\r\n                                                });\r\n                                            }}\r\n                                        >\r\n                                            <DashboardIcon sx={{ fontSize: '1.5rem' }} />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                        <Tooltip placement=\"top\" title=\"Edit\">\r\n                                            <IconButton\r\n                                                color=\"primary\"\r\n                                                aria-label=\"Edit\"\r\n                                                size=\"large\"\r\n                                                onClick={() => {\r\n                                                    setAddUpdateOpen(true);\r\n                                                    setBrandData({\r\n                                                        id: row.id,\r\n                                                        name: row.name,\r\n                                                        description: row.description,\r\n                                                        location: row.location,\r\n                                                        image: null\r\n                                                    });\r\n                                                }}\r\n                                            >\r\n                                                <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                        <Tooltip placement=\"top\" title=\"Delete\">\r\n                                            <IconButton\r\n                                                color=\"primary\"\r\n                                                sx={{\r\n                                                    color: theme.palette.orange.dark,\r\n                                                    borderColor: theme.palette.orange.main,\r\n                                                    '&:hover ': { background: theme.palette.orange.light }\r\n                                                }}\r\n                                                size=\"large\"\r\n                                                onClick={() => {\r\n                                                    setDeleteOpen(true);\r\n                                                    setBrandId(row.id);\r\n                                                }}\r\n                                            >\r\n                                                <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </Stack>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </>\r\n                    :\r\n                    <>\r\n                    \r\n                    <Grid container justifyContent=\"center\" sx={{ width: '400%', m: 5 }}>\r\n                                    <Grid item>\r\n                                        <CircularProgress size={'4rem'} />\r\n                                    </Grid>\r\n                                </Grid>\r\n                    </>\r\n                    \r\n                    }\r\n                 \r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default BrandTable;\r\n","import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Grid, Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, Divider, InputLabel } from '@mui/material';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { addBrand, updateBrand } from '../../../../../redux/brand/actions';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport FileInput from '../../../../../shared/component/FileInput';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nexport default function AddUpdateBrandDialog({ brandData, page, limit, search, open, setOpen }) {\r\n    const dispatch = useDispatch();\r\n    const [isUpdate, setIsUpdate] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (brandData.id == null) {\r\n            setIsUpdate(false);\r\n        } else {\r\n            setIsUpdate(true);\r\n        }\r\n    }, [brandData]);\r\n\r\n    const validationSchema = Yup.object({\r\n        isUpdate: Yup.boolean().default(isUpdate),\r\n        name: Yup.string()\r\n            .required('Brand Name is required!')\r\n            .max(42, 'Brand Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Brand name'),\r\n        location: Yup.string()\r\n            .required('Location is required!')\r\n            .max(42, 'Location can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Location'),\r\n        description: Yup.string()\r\n            .required('Brand is required!')\r\n            .max(42, 'Brand can not exceed 200 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Description'),\r\n        image: Yup.mixed().when(['isUpdate'], {\r\n            is: true,\r\n            then: Yup.mixed(),\r\n            otherwise: Yup.mixed().required('Image is required')\r\n        })\r\n    });\r\n    const errorHandler = (values) => {\r\n        if (values.image) {\r\n            if (\r\n                values.image.name.split('.').pop() == 'jpg' ||\r\n                values.image.name.split('.').pop() == 'png' ||\r\n                values.image.name.split('.').pop() == 'jpeg '\r\n            ) {\r\n                return true;\r\n            } else {\r\n                toast.error('Upload the files with these extensions: jpg, png, jpeg');\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: brandData,\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            const isValid = errorHandler(values);\r\n            if (isValid) {\r\n                if (brandData.id == null) {\r\n                    dispatch(\r\n                        addBrand({\r\n                            name: values.name,\r\n                            description: values.description,\r\n                            location: values.location,\r\n                            image: values.image,\r\n                            page: page,\r\n                            limit: limit,\r\n                            search: search,\r\n                            handleClose: handleClose\r\n                        })\r\n                    );\r\n                } else {\r\n                    dispatch(\r\n                        updateBrand({\r\n                            brandId: brandData.id,\r\n                            name: values.name,\r\n                            description: values.description,\r\n                            location: values.location,\r\n                            image: values.image,\r\n                            page: page,\r\n                            limit: limit,\r\n                            search: search,\r\n                            handleClose: handleClose\r\n                        })\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    });\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog\"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">{brandData.id == null ? 'Add Brand' : 'Update Brand'}</DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid container>\r\n                            <Grid item xs={6} pt={4} pr={4}>\r\n                                <InputLabel htmlFor=\"outlined-adornment-password-login\">Name</InputLabel>\r\n                                <TextField\r\n                                    id=\"name\"\r\n                                    name=\"name\"\r\n                                    value={formik.values.name}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                    helperText={formik.touched.name && formik.errors.name}\r\n                                    fullWidth\r\n                                    autoComplete=\"given-name\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6} pt={4}>\r\n                                <InputLabel htmlFor=\"outlined-adornment-password-login\">Location</InputLabel>\r\n                                <TextField\r\n                                    id=\"location\"\r\n                                    name=\"location\"\r\n                                    value={formik.values.location}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.location && Boolean(formik.errors.location)}\r\n                                    helperText={formik.touched.location && formik.errors.location}\r\n                                    fullWidth\r\n                                    autoComplete=\"given-name\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} pt={2}>\r\n                                <InputLabel htmlFor=\"outlined-adornment-password-login\">Description</InputLabel>\r\n                                <TextField\r\n                                    id=\"description\"\r\n                                    name=\"description\"\r\n                                    value={formik.values.description}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.description && Boolean(formik.errors.description)}\r\n                                    helperText={formik.touched.description && formik.errors.description}\r\n                                    fullWidth\r\n                                    autoComplete=\"given-name\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} pt={2}>\r\n                                <FileInput formik={formik} accept=\"image/*\" fieldName=\"image\" placeHolder=\"Add Brand Image\" />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n                <Divider />\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1 }}\r\n                            onClick={() => {\r\n                                formik.handleSubmit();\r\n                            }}\r\n                            size=\"large\"\r\n                            disableElevation\r\n                        >\r\n                            {brandData.id == null ? 'Add' : 'Update'}\r\n                        </Button>\r\n                    </AnimateButton>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1, color: '#fff' }}\r\n                            onClick={handleClose}\r\n                            color=\"secondary\"\r\n                            size=\"large\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </AnimateButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport BrandTable from './component/brandTable';\r\nimport {\r\n    CircularProgress,\r\n    Button,\r\n    Typography,\r\n    Grid,\r\n    MenuItem,\r\n    Menu,\r\n    Pagination,\r\n    OutlinedInput,\r\n    InputAdornment,\r\n    Divider\r\n} from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { getAllBrands } from '../../../../redux/brand/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport AddUpdateBrandDialog from './component/addUpdateBrand';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport HeadingCard from 'shared/Card/HeadingCard';\r\n\r\nconst Brands = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const brandsList = useSelector((state) => state.brand.brandsList);\r\n\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [brandData, setBrandData] = useState({\r\n        id: null,\r\n        name: '',\r\n        description: '',\r\n        image: null,\r\n        location: ''\r\n    });\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllBrands({\r\n                search: search,\r\n                page: page,\r\n                limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n\r\n    return (\r\n        <>\r\n            <AddUpdateBrandDialog\r\n                brandData={brandData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n            />\r\n\r\n                <Typography variant=\"h1\" sx={{m:2}}>\r\n            Brand Management\r\n                </Typography>\r\n            <MainCard\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={6}>\r\n                            <OutlinedInput\r\n                                id=\"input-search-list-style1\"\r\n                                placeholder=\"Search\"\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"start\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                                size=\"small\"\r\n                                onChange={(e) => {\r\n                                    setSearch(e.target.value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6} textAlign=\"end\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddUpdateOpen(true);\r\n                                    setBrandData({ id: null, name: '', description: '', location: '', image: null });\r\n                                }}\r\n                            >\r\n                                Add Brand\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                <BrandTable\r\n                    brandsList={brandsList && brandsList}\r\n                    page={page}\r\n                    limit={limit}\r\n                    search={search}\r\n                    setAddUpdateOpen={setAddUpdateOpen}\r\n                    setBrandData={setBrandData}\r\n                />\r\n\r\n                <Grid item xs={12} sx={{ p: 3 }}>\r\n                    <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                        <Grid item>\r\n                            <Pagination\r\n                                color=\"primary\"\r\n                                showFirstButton\r\n                                showLastButton\r\n                                page={page}\r\n                                count={brandsList && brandsList.pages}\r\n                                onChange={(event, newPage) => {\r\n                                    setPage(newPage);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button\r\n                                size=\"large\"\r\n                                sx={{ color: theme.palette.grey[900] }}\r\n                                color=\"secondary\"\r\n                                endIcon={<ExpandMoreRoundedIcon />}\r\n                                onClick={handleClick}\r\n                            >\r\n                                {limit} Rows\r\n                            </Button>\r\n                            <Menu\r\n                                id=\"menu-user-list-style1\"\r\n                                anchorEl={anchorEl}\r\n                                keepMounted\r\n                                open={Boolean(anchorEl)}\r\n                                onClose={handleCloseMenu}\r\n                                variant=\"selectedMenu\"\r\n                                anchorOrigin={{\r\n                                    vertical: 'top',\r\n                                    horizontal: 'right'\r\n                                }}\r\n                                transformOrigin={{\r\n                                    vertical: 'bottom',\r\n                                    horizontal: 'right'\r\n                                }}\r\n                            >\r\n                                <MenuItem\r\n                                    value={10}\r\n                                    onClick={(e) => {\r\n                                        setLimit(e.target.value);\r\n                                        setPage(1);\r\n                                        handleCloseMenu();\r\n                                    }}\r\n                                >\r\n                                    {' '}\r\n                                    10 Rows\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                    value={25}\r\n                                    onClick={(e) => {\r\n                                        setLimit(e.target.value);\r\n                                        setPage(1);\r\n                                        handleCloseMenu();\r\n                                    }}\r\n                                >\r\n                                    {' '}\r\n                                    25 Rows\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                    value={50}\r\n                                    onClick={(e) => {\r\n                                        setLimit(e.target.value);\r\n                                        setPage(1);\r\n                                        handleCloseMenu();\r\n                                    }}\r\n                                >\r\n                                    {' '}\r\n                                    50 Rows{' '}\r\n                                </MenuItem>\r\n                            </Menu>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Brands;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { forwardRef } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// constant\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                marginBottom: theme.spacing(gridSpacing),\r\n\r\n                borderColor: theme.palette.primary[200] + 75,\r\n                background: theme.palette.background.default\r\n            }}\r\n        >\r\n            <Box sx={{ padding: '13px 20px 22px 20px' }}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                    <Grid item>\r\n                        <Typography variant=\"h3\" sx={{ fontWeight: 500, color: '#000' }}>\r\n                            {title}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {value !== undefined && (\r\n                        <Grid item>\r\n                            {/* {options && (role == 'teacher' || role == 'super_admin') && ( */}\r\n                            <TextField\r\n                                id=\"standard-select-currency\"\r\n                                select\r\n                                value={value}\r\n                                onChange={(e) => setValue(e.target.value)}\r\n                                sx={{ width: '110px', height: '40px' }}\r\n                            >\r\n                                {options.map((option) => (\r\n                                    <MenuItem key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                            {/* )} */}\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        </Card>\r\n    );\r\n});\r\n\r\nexport default HeadingCard;\r\n","import PropTypes from 'prop-types';\r\nimport { useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Fragment } from 'react';\r\nimport { Grid, Typography, IconButton, Tooltip, RadioGroup, FormControlLabel, Radio } from '@mui/material';\r\n\r\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined';\r\nimport AddCircleOutlinedIcon from '@mui/icons-material/AddCircleOutlined';\r\n\r\n// Props needed for component formik ,correctOption, setCorrectOption , optionValue , formikFieldName , PlaceHOLDER\r\nconst FileInput = ({ formik, fieldName, placeHolder, accept }) => {\r\n    const dispatch = useDispatch();\r\n    const fileRef1 = useRef();\r\n\r\n    return (\r\n        <>\r\n            <Grid item className=\"displayFlex\">\r\n                <Fragment>\r\n                    <Tooltip placement=\"top\" title={accept == 'image/*' ? 'Add Image' : 'Add Audio'}>\r\n                        <IconButton color=\"primary\" aria-label=\"delete\" size=\"large\" onClick={() => fileRef1.current.click()}>\r\n                            <AddCircleOutlinedIcon sx={{ fontSize: '3.0rem' }} />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <input\r\n                        hidden\r\n                        ref={fileRef1}\r\n                        fullWidth\r\n                        type=\"file\"\r\n                        className=\"chooseFileInput\"\r\n                        accept={accept}\r\n                        onChange={(event) => {\r\n                            formik.setFieldValue(fieldName, event.currentTarget.files[0]);\r\n                        }}\r\n                        error={formik.touched[`${fieldName}`] && Boolean(formik.errors[`${fieldName}`])}\r\n                        helperText={formik.touched[`${fieldName}`] && formik.errors[`${fieldName}`]}\r\n                    />\r\n\r\n                    <Grid className=\"displayFlex\">\r\n                        {formik?.values[`${fieldName}`]?.name?.length < 40 ? (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {formik.values[`${fieldName}`]?.name}\r\n                            </Typography>\r\n                        ) : (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {formik.values[`${fieldName}`]?.name?.substring(0, 40)}\r\n                            </Typography>\r\n                        )}\r\n                        {formik?.values[`${fieldName}`] && (\r\n                            <Typography mt={3.5} variant=\"h5\" ml={2}>\r\n                                {'(' + (formik.values[`${fieldName}`]?.size / 1000000).toFixed(2) + '  mb)'}\r\n                            </Typography>\r\n                        )}\r\n\r\n                        {formik.values[`${fieldName}`] ? (\r\n                            <Tooltip placement=\"top\" title={accept == 'image/*' ? 'Clear Image' : 'Clear Audio'}>\r\n                                <IconButton\r\n                                    style={{ marginTop: '2px' }}\r\n                                    color=\"primary\"\r\n                                    aria-label=\"delete\"\r\n                                    size=\"large\"\r\n                                    onClick={() => {\r\n                                        formik.setFieldValue(fieldName, null);\r\n                                        fileRef1.current.value = null;\r\n                                    }}\r\n                                >\r\n                                    <CloseOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        ) : (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {placeHolder}\r\n                            </Typography>\r\n                        )}\r\n                    </Grid>\r\n                </Fragment>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n                <p className={'fileError'}>\r\n                    {formik.touched[`${fieldName}`] && Boolean(formik.errors[`${fieldName}`]) ? formik.errors[`${fieldName}`] : ''}\r\n                </p>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FileInput;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 4c1.93 0 3.5 1.57 3.5 3.5S13.93 13 12 13s-3.5-1.57-3.5-3.5S10.07 6 12 6zm0 14c-2.03 0-4.43-.82-6.14-2.88C7.55 15.8 9.68 15 12 15s4.45.8 6.14 2.12C16.43 19.18 14.03 20 12 20z\"\n}), 'AccountCircle');\nexports.default = _default;"],"sourceRoot":""}