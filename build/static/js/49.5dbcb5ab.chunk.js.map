{"version":3,"sources":["assets/vedio.mp4","views/pages/TrackNFT/TrackNFT.js","views/auth/verifyEmail/circularbar.js"],"names":["TrackNFT","_useState","useState","_useState2","_slicedToArray","serialNo","setSerialNo","_useState3","_useState4","rest","setRest","_useState5","_useState6","success","setSuccess","_useState7","_useState8","token","setToken","_useState9","_useState10","addres","setAddres","_useState11","_useState12","seconds","setSeconds","useDispatch","useSelector","state","auth","user","useEffect","interval","setInterval","clearInterval","navigate","useNavigate","_useState13","_useState14","searchSerial","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","provider","factoryAddr","res","address","tokenId","wrap","_context","prev","next","console","log","toast","error","ethers","providers","JsonRpcProvider","Contract","FactoryAddress","FactoryAbi","abi","serials","sent","toLowerCase","parseInt","_hex","toString","stop","apply","arguments","undefined","_jsxs","Stack","position","sx","height","overflow","children","_jsx","src","music","loop","autoPlay","Grid","item","md","xs","width","textAlign","marginTop","className","galileoLogo","alt","marginLeft","marginRight","Typography","variant","fontFamily","fontStyle","fontWeight","fontSize","sm","lg","lineHeight","color","Box","placeholder","onChange","e","target","value","Button","alignSelf","size","onClick","CircularProgress","container","justifyContent","mt","mb","href","style","CircularProgressWithLabel","props","display","_objectSpread","top","left","bottom","right","alignItems","component","concat","Math","round","CircularStatic","_React$useState","React","_React$useState2","progress","setProgress","timer","prevProgress"],"mappings":"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","file":"static/js/49.5dbcb5ab.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/vedio.c15bc5c5.mp4\";","import { Box, Grid, Stack } from '@mui/material';\r\nimport { useEffect } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport '@fontsource/public-sans';\r\nimport React, { useState } from 'react';\r\nimport { Button } from '@mui/material';\r\nimport { Typography, CircularProgress } from '@mui/material';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport CircularStatic from 'views/auth/verifyEmail/circularbar';\r\nimport { SNACKBAR_OPEN } from 'store/actions';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport galileoLogo from '../../../assets/images/galileo-white.png';\r\nimport { padding } from '@mui/system';\r\nimport music from '../../../assets/vedio.mp4';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport FactoryAbi from 'contractAbi/Factory.json';\r\nimport { getTrack } from 'redux/marketplace/actions';\r\nimport FactoryAddress from 'contractAbi/Factory-address.json';\r\nimport { ethers, utils } from 'ethers';\r\nimport { setWallet } from 'redux/auth/actions';\r\nconst TrackNFT = () => {\r\n    const [serialNo, setSerialNo] = useState('');\r\n    const [rest, setRest] = useState('');\r\n    const [success, setSuccess] = useState(false);\r\n    const [token, setToken] = useState();\r\n    const [addres, setAddres] = useState();\r\n    const [seconds, setSeconds] = useState();\r\n    const dispatch = useDispatch();\r\n    const user = useSelector((state) => state.auth.user);\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n\r\n        if (seconds > 0) {\r\n            interval = setInterval(() => {\r\n                setSeconds((seconds) => seconds - 1);\r\n            }, 1000);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [seconds]);\r\n\r\n    const navigate = useNavigate();\r\n    const [walletAddress, setWalletAddress] = useState();\r\n   {/*  const handleConnect = async () => {\r\n        const response = await window?.ethereum?.request({ method: 'eth_requestAccounts' });\r\n        if (response) {\r\n            if (!window.ethereum) {\r\n                dispatch({\r\n                    type: SNACKBAR_OPEN,\r\n                    open: true,\r\n                    message: 'No crypto wallet found. Please install it.',\r\n                    variant: 'alert',\r\n                    alertSeverity: 'info'\r\n                });\r\n                console.log('No crypto wallet found. Please install it.');\r\n                // toast.error('No crypto wallet found. Please install it.');\r\n            }\r\n\r\n          \r\n            else if (utils?.getAddress(response[0]) !== user?.walletAddress) {\r\n                dispatch({\r\n                    type: SNACKBAR_OPEN,\r\n                    open: true,\r\n                    message: 'Please connect your registered Wallet Address',\r\n                    variant: 'alert',\r\n                    alertSeverity: 'info'\r\n                });\r\n                console.log('Please connect your registered Wallet Address');\r\n                setWalletAddress();\r\n            } else {\r\n                const address = utils?.getAddress(response[0]);\r\n                setWalletAddress(address);\r\n                dispatch({\r\n                    type: SNACKBAR_OPEN,\r\n                    open: true,\r\n                    message: 'wallet connected',\r\n                    variant: 'alert',\r\n                    alertSeverity: 'success'\r\n                });\r\n            }\r\n        } else {\r\n            console.log('No crypto wallet found. Please install it.');\r\n            // toast.error('No crypto wallet found. Please install it.');\r\n        }\r\n    }; */}\r\n\r\n   {/*  useEffect(() => {\r\n        dispatch(setWallet(walletAddress));\r\n        handleConnect();\r\n    }, [walletAddress]);\r\n\r\n    if (window.ethereum) {\r\n        window.ethereum.on('accountsChanged', function (accounts) {\r\n           \r\n            handleConnect();\r\n        });\r\n    } */}\r\n    const searchSerial = async () => {\r\n        console.log('serialNo', serialNo);\r\n        \r\n        if (serialNo == '') {\r\n            setSuccess(false);\r\n            toast.error('Please enter valid serial Id');\r\n            console.log('Invalid serial Id!');\r\n        }\r\n\r\n        //  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        //  const signer = provider.getSigner();\r\n        //const signer=\"0x6f3B51bd5B67F3e5bca2fb32796215A796B79651\";\r\n        const provider= new ethers.providers.JsonRpcProvider(\"https://polygon-mumbai.g.alchemy.com/v2/Wk2k1fN6Gv2KG4f7474ABGxpmhQrZKFM\");\r\n        const factoryAddr = new ethers.Contract(FactoryAddress.address, FactoryAbi.abi, provider);\r\n        console.log('factoryAddr', factoryAddr);\r\n\r\n        // let res = await (\r\n        //     await factoryAddr.serials(\"GALGNS1\")\r\n        // )?.wait();\r\n        let res = await factoryAddr.serials(serialNo);\r\n        setRest(res);\r\n        console.log('res', rest);\r\n        // if (rest == '') {\r\n        //     toast.error('Could not get the token!');\r\n        //     }\r\n     \r\n\r\n        let address = res[0].toLowerCase();\r\n        address = address;\r\n        setAddres(address);\r\n        let tokenId = parseInt(res[1]._hex);\r\n\r\n        console.log('res?._tokenId?', res);\r\n        tokenId = tokenId.toString();\r\n\r\n        tokenId = tokenId;\r\n        if (tokenId == '0' && serialNo != '') {\r\n            toast.error('Incorrect serial Id!');\r\n            console.log('Incorrect serial Id!');\r\n        } else {\r\n            // setSuccess(true);\r\n            // console.log(seconds);\r\n        }\r\n        setToken(tokenId);\r\n        // let address = `\"0x4600b6a0f068ae1283ed68792ff3f0a085b3f0ef\"`;\r\n        // let tokenId = `\"1\"`;\r\n        // const dispatch = useDispatch();\r\n        console.log('address', address);\r\n        console.log('tokenId', tokenId);\r\n        setSuccess(true);\r\n    };\r\n    \r\n    if (seconds == 0) {\r\n        if (token != undefined && token != '0') {\r\n            navigate('/tracking/' + serialNo, {\r\n                state: {\r\n                    tokenId: token,\r\n                    address: addres\r\n                }\r\n            });\r\n        } else {\r\n          \r\n          \r\n        }\r\n    }\r\n  \r\n\r\n\r\n\r\n    return (\r\n        <Stack position={'relative'} sx={{ height: '100vh', overflow: 'hidden' }}>\r\n            {/* <Stack className=\"mainTracking main\"></Stack> */}\r\n\r\n            <video src={music} loop autoPlay=\"true\" />\r\n            <Grid item md={12} xs={12} position={'absolute'} sx={{ width: '100%' }}>\r\n                <Grid container-fluid>\r\n                    <Grid sx={{ textAlign: 'center', marginTop: '30px' }}>\r\n                        <img className=\"mainLogo\" src={galileoLogo} alt=\"logo\" />\r\n                    </Grid>\r\n                    <Grid\r\n                        sx={{\r\n                            marginTop: { xs: '100px', md: '200px' },\r\n                            marginLeft: { xs: '20px', md: '0px' },\r\n                            marginRight: { xs: '20px', md: 'none' }\r\n                        }}\r\n                    >\r\n                        <Typography\r\n                            variant=\"h1\"\r\n                            sx={{\r\n                                fontFamily: 'Public Sans !important',\r\n                                fontStyle: 'normal !important',\r\n                                fontWeight: '700',\r\n                                textAlign: 'center',\r\n                                fontSize: { xs: '12px', sm: '30px', md: '30px', lg: '30px' },\r\n                                lineHeight: { xs: '1', sm: '1', md: '33px', lg: '33px' },\r\n\r\n                                color: 'white'\r\n                            }}\r\n                        >\r\n                            Track your NFT history{' '}\r\n                        </Typography>\r\n                        <Box className=\"trackBox\">\r\n                            <input\r\n                                className=\"trackInput\"\r\n                                placeholder=\"Serial Id\"\r\n                                onChange={(e) => {\r\n                                    setSerialNo(e.target.value);\r\n                                }}\r\n                            />\r\n                            {success == true && token != '0' ? (\r\n                                <Button\r\n                                    sx={{ alignSelf: 'center !important' }}\r\n                                    className=\"createTrack\"\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    onClick={() => {\r\n                                        setSeconds(6);\r\n                                        searchSerial();\r\n                                    }}\r\n                                >\r\n                                    <CircularProgress />\r\n                                </Button>\r\n                            ) : (\r\n                                <Button\r\n                                    sx={{ alignSelf: 'center !important' }}\r\n                                    className=\"createTrack\"\r\n                                    size=\"small\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={() => {\r\n                                        setSeconds(6);\r\n                                        // handleConnect();\r\n                                        searchSerial();\r\n                                    }}\r\n                                >\r\n                                    Track\r\n                                </Button>\r\n                            )}\r\n                        </Box>\r\n                        <Grid container justifyContent=\"center\">\r\n                            <Typography\r\n                                variant=\"h4\"\r\n                                mt={-1}\r\n                                mb={1}\r\n                                sx={{\r\n                                    fontFamily: 'Public Sans !important',\r\n                                    fontStyle: 'normal !important',\r\n                                    fontWeight: '600',\r\n                                    textAlign: 'center',\r\n                                    fontSize: { xs: '12px', sm: '15px', md: '15px', lg: '15px' },\r\n                                    // lineHeight: { xs: '1', sm: '1', md: '33px', lg: '33px' },\r\n\r\n                                    color: '#2fc1ff'\r\n                                }}\r\n                            >\r\n                                {success == true && token != '0' ? 'Please wait for tracking...' : ''}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Box>\r\n                            <Typography\r\n                                variant=\"h4\"\r\n                                sx={{\r\n                                    fontFamily: 'Public Sans !important',\r\n                                    fontStyle: 'normal !important',\r\n                                    fontWeight: '400',\r\n                                    textAlign: 'center',\r\n                                    fontSize: { xs: '12px', sm: '15px', md: '15px', lg: '15px' },\r\n                                    // lineHeight: { xs: '1', sm: '1', md: '33px', lg: '33px' },\r\n\r\n                                    color: 'white'\r\n                                }}\r\n                            >\r\n                                By initiating authentication, you declare that you accept our{' '}\r\n                                <a href=\"\" style={{ color: '#ffff' }}>\r\n                                    Legal Notice\r\n                                </a>{' '}\r\n                                and{' '}\r\n                                <a href=\"\" style={{ color: '#ffff' }}>\r\n                                    Privacy Policy.\r\n                                </a>\r\n                            </Typography>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default TrackNFT;\r\n","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\n\r\nfunction CircularProgressWithLabel(props) {\r\n  return (\r\n    <Box sx={{ position: 'relative', display: 'inline-flex' }}>\r\n      <CircularProgress variant=\"determinate\" {...props} />\r\n      <Box\r\n        sx={{\r\n          top: 0,\r\n          left: 0,\r\n          bottom: 0,\r\n          right: 0,\r\n          position: 'absolute',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n        }}\r\n      >\r\n        <Typography variant=\"caption\" component=\"div\" color=\"text.secondary\">\r\n          {`${Math.round(props.value)}%`}\r\n        </Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nCircularProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate variant.\r\n   * Value between 0 and 100.\r\n   * @default 0\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default function CircularStatic() {\r\n  const [progress, setProgress] = React.useState(10);\r\n\r\n  React.useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setProgress((prevProgress) => (prevProgress >= 100 ? 0 : prevProgress + 5));\r\n    }, 1500);\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, []);\r\n\r\n  return <CircularProgressWithLabel value={progress} />;\r\n}"],"sourceRoot":""}