{"version":3,"sources":["views/auth/emailVerifyBefore/Verify.js","views/auth/emailVerifyBefore/index.js","shared/component/AuthWrapper.js","shared/component/AuthCardWrapper.js","assets/images/auth-pattern.png","ui-component/cards/BackgroundPattern1.js"],"names":["VerifyEmail","_ref","token","_Yup$object$shape","others","_objectWithoutProperties","_excluded","theme","useTheme","user","useSelector","state","auth","loader","navigate","useNavigate","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","seconds","setSeconds","_useState11","_useState12","refresh","setRefresh","_useState13","_useState14","walletAddress","setWalletAddress","handleConnect","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_window","_window$ethereum","response","address","wrap","_context","prev","next","window","ethereum","request","method","sent","utils","getAddress","type","SNACKBAR_OPEN","open","message","variant","alertSeverity","console","log","stop","apply","arguments","useEffect","interval","setInterval","clearInterval","setWallet","on","accounts","_jsx","_Fragment","children","Formik","enableReinitialize","initialValues","firstName","lastName","email","password","confirmPassword","validationSchema","Yup","shape","required","max","matches","_defineProperty","oneOf","onSubmit","_ref3","_callee2","values","_context2","setLoader","signup","_x","_ref4","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","_jsxs","_objectSpread","noValidate","Grid","xs","sx","color","palette","mode","Typography","className","mt","md","Box","InputLabel","htmlFor","FormControl","typography","customInput","fullWidth","error","Boolean","TextField","placeholder","margin","value","name","autoComplete","onBlur","onChange","inputProps","FormHelperText","id","submit","AnimateButton","Button","disableElevation","disabled","size","Verify","urlSearchParams","useMediaQuery","breakpoints","down","URLSearchParams","location","search","params","Object","fromEntries","entries","AuthWrapper1","container","justifyContent","alignItems","minHeight","background","Helmet","charSet","item","lg","position","alignSelf","display","BackgroundPattern1","spacing","AuthCardWrapper","direction","sm","noWrap","component","marginTop","src","galileoWhite","alt","width","galileo","mb","AuthWrapper","styled","backgroundColor","other","MainCard","borderRadius","maxWidth","flexGrow","flexBasis","content","p","xl","bgcolor","backgroundImage","concat","AuthPatternDark","backgroundPosition","backgroundRepeat","backgroundSize","overflow","opacity"],"mappings":"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","file":"static/js/42.17c77dc1.chunk.js","sourcesContent":["// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Box, Button, FormControl, FormHelperText, InputLabel, IconButton, Typography, Grid } from '@mui/material';\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport { Switch } from '@mui/material';\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { emailVerification } from 'redux/auth/actions';\r\nimport Visibility from '@mui/icons-material/Visibility';\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\r\n\r\n// import { setLoader } from '../../../../redux/auth/actions';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport '@fontsource/source-sans-pro';\r\nimport '@fontsource/public-sans';\r\nimport { ethers, utils } from 'ethers';\r\nimport { signup, setLoader } from 'redux/auth/actions';\r\nimport { setWallet } from 'redux/auth/actions';\r\nimport { SNACKBAR_OPEN } from 'store/actions';\r\n// third party\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\n\r\n// project imports\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n// ========================|| FIREBASE - FORGOT PASSWORD ||======================== //\r\n\r\nconst VerifyEmail = ({ token, ...others }) => {\r\n    const theme = useTheme();\r\n    // console.log(token, 'token=>');\r\n    const loader = useSelector((state) => state.auth.loader);\r\n    const user = useSelector((state) => state.auth.user);\r\n    // console.log(user, 'user===========>>');\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const [changeEmail, setChangeEmail] = useState(false);\r\n    const [checked, setChecked] = useState(false);\r\n    // const [checked, setChecked] = useState(true);\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [showconfirmPassword, setShowconfirmPassword] = useState(false);\r\n    const [seconds, setSeconds] = useState(60);\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [walletAddress, setWalletAddress] = useState('');\r\n    const handleConnect = async () => {\r\n        const response = await window?.ethereum?.request({ method: 'eth_requestAccounts' });\r\n        if (response) {\r\n            if (!window.ethereum) {\r\n                dispatch({\r\n                    type: SNACKBAR_OPEN,\r\n                    open: true,\r\n                    message: 'No crypto wallet found. Please install it.',\r\n                    variant: 'alert',\r\n                    alertSeverity: 'info'\r\n                });\r\n                console.log('No crypto wallet found. Please install it.');\r\n                // toast.error('No crypto wallet found. Please install it.');\r\n            }\r\n\r\n            // else if (window?.ethereum?.networkVersion !== '5') {\r\n            //   console.log('window?.ethereum?.networkVersion !== 5', window?.ethereum?.networkVersion);\r\n            //     dispatch({\r\n            //         type: SNACKBAR_OPEN,\r\n            //         open: true,\r\n            //         message: 'Please change your Chain ID to Goerli',\r\n            //         variant: 'alert',\r\n            //         alertSeverity: 'info'\r\n            //     });\r\n            //     console.log('Please change your Chain ID to Goerli');\r\n            //     setWalletAddress()\r\n            // }\r\n            else {\r\n                const address = utils?.getAddress(response[0]);\r\n                setWalletAddress(address);\r\n                dispatch({\r\n                    type: SNACKBAR_OPEN,\r\n                    open: true,\r\n                    message: 'Success',\r\n                    variant: 'alert',\r\n                    alertSeverity: 'success'\r\n                });\r\n            }\r\n        } else {\r\n            console.log('No crypto wallet found. Please install it.');\r\n            // toast.error('No crypto wallet found. Please install it.');\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (seconds > 0) {\r\n            interval = setInterval(() => {\r\n                setSeconds((seconds) => seconds - 1);\r\n            }, 1000);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [seconds]);\r\n    const ReEnterEmail = (event) => {\r\n        setChangeEmail(true);\r\n        setChecked(event?.target?.checked);\r\n    };\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n    const handleMouseDownconfirmPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n    const handleClickShowconfirmPassword = () => {\r\n        setShowconfirmPassword(!showconfirmPassword);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(setWallet(walletAddress));\r\n        handleConnect();\r\n    }, [walletAddress]);\r\n\r\n    if (window.ethereum) {\r\n        window.ethereum.on('accountsChanged', function (accounts) {\r\n            // Time to reload your interface with accounts[0]!\r\n            // setReload(true)\r\n            handleConnect();\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{\r\n                    firstName: user?.firstName ? user?.firstName : '',\r\n                    lastName: user?.lastName ? user?.lastName : '',\r\n                    email: user?.email ? user?.email : '',\r\n                    password: '',\r\n                    confirmPassword: '',\r\n                    walletAddress: user?.email ? user?.walletAddress : '',\r\n                    address: user?.address ? user?.address : ''\r\n                }}\r\n                validationSchema={Yup.object().shape({\r\n                    firstName: Yup.string().required('First Name is required!').max(42, 'First Name can not exceed 42 characters'),\r\n                    // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Name'),\r\n                    lastName: Yup.string().required('Last Name is required!').max(42, 'Last Name can not exceed 42 characters'),\r\n                    // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Name'),\r\n                    email: Yup.string().email('Enter valid email').max(255).required('Email is required!'),\r\n                    password: Yup.string()\r\n                        .max(255)\r\n                        .required('Password is required!')\r\n                        .matches(\r\n                            /^(?=(?:.*[A-Z].*){1})(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\r\n                            'Must Contain 8 Characters,  One Uppercase, One Lowercase, One Number and one special case Character'\r\n                        ),\r\n                    confirmPassword: Yup.string().max(255).required('Confirm Password is required!'),\r\n                    confirmPassword: Yup.string().oneOf([Yup.ref('password')], 'Both password need to be the same'),\r\n                    address: Yup.string().max(255).required('Delivery address is required!')\r\n                })}\r\n                onSubmit={async (values) => {\r\n                    console.log(values, 'values');\r\n                    setRefresh(true);\r\n                    if (walletAddress == '') {\r\n                        dispatch({\r\n                            type: SNACKBAR_OPEN,\r\n                            open: true,\r\n                            message: 'Please connect to your wallet',\r\n                            variant: 'alert',\r\n                            alertSeverity: 'info'\r\n                        });\r\n                    }\r\n                    await dispatch(setLoader(true));\r\n                    dispatch(\r\n                        signup({\r\n                            firstName: values.firstName,\r\n                            lastName: values.lastName,\r\n                            email: values.email,\r\n                            password: values.password,\r\n                            walletAddress: walletAddress,\r\n                            address: values.address,\r\n                            navigate: navigate\r\n                        })\r\n                    );\r\n                }}\r\n            >\r\n                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n                    <form noValidate onSubmit={handleSubmit} {...others}>\r\n                        <Grid xs={12} sx={{ color: theme.palette.mode === 'dark' ? '#CDCDCD' : '#6d6e72' }}>\r\n                            <Typography className=\"wallet-select\" variant=\"h3\">\r\n                            Please check your email account , the verification email has been sent to you.\r\n                                 <b>{user?.email}</b>{' '} \r\n                            </Typography>\r\n                        </Grid>{' '}\r\n                        {/*  <AnimateButton>\r\n                            <Button\r\n                                className=\"ReEnterEmail\"\r\n                                fullWidth\r\n                                onClick={ReEnterEmail}\r\n                                size=\"large\"\r\n                                variant=\"outlined\"\r\n                                color=\"secondary\"\r\n                            >\r\n                                Re-Enter Email\r\n                            </Button>\r\n                        </AnimateButton> */}\r\n                        {refresh == false ? (\r\n                            <Grid mt={2} xs={12}>\r\n                       \r\n                                <Grid xs={12} md={1}></Grid>\r\n                                <Grid xs={12} md={12}>\r\n                                   \r\n                                        <Box>\r\n                                          {/*   <Grid mt={1} xs={12} md={12}>\r\n                                                <Button className=\"ReEnterEmail\" variant=\"text\" sx={{}}>\r\n                                                     Edit  Signup information?\r\n                                                </Button>\r\n                                                <Switch\r\n                                                    checked={checked}\r\n                                                    onChange={(e) => ReEnterEmail(e)}\r\n\r\n                                                    // inputProps={{ 'aria-label': 'controlled' }}\r\n                                                />\r\n                                            </Grid> */}\r\n                                        {/*     {changeEmail == true && checked == true && ( */}\r\n                                                <Box>\r\n                                                 {/*    <InputLabel\r\n                                                        sx={{ color: theme.palette.mode === 'dark' ? 'white' : '#404040' }}\r\n                                                        className=\"authFont\"\r\n                                                        htmlFor=\"outlined-adornment-email-login\"\r\n                                                    >\r\n                                                        First Name{' '}\r\n                                                    </InputLabel>\r\n                                                    <FormControl\r\n                                                        sx={{ ...theme.typography.customInput }}\r\n                                                        className=\"auth-formcontrol\"\r\n                                                        fullWidth\r\n                                                        error={Boolean(touched.firstName && errors.firstName)}\r\n                                                    >\r\n                                                        <TextField\r\n                                                            placeholder=\"First Name\"\r\n                                                            className=\"textForm\"\r\n                                                            // onChange={(event)=>handelAccount(\"password\",event)}\r\n                                                            variant=\"outlined\"\r\n                                                            margin=\"normal\"\r\n                                                            required\r\n                                                            fullWidth\r\n                                                            type=\"name\"\r\n                                                            value={values.firstName}\r\n                                                            name=\"firstName\"\r\n                                                            onBlur={handleBlur}\r\n                                                            onChange={handleChange}\r\n                                                            inputProps={{}}\r\n                                                        />\r\n                                                        {touched.firstName && errors.firstName && (\r\n                                                            <FormHelperText error id=\"standard-weight-helper-text-name-login\">\r\n                                                                {errors.firstName}\r\n                                                            </FormHelperText>\r\n                                                        )}\r\n                                                    </FormControl>\r\n                                                    <InputLabel\r\n                                                        sx={{ color: theme.palette.mode === 'dark' ? 'white' : '#404040' }}\r\n                                                        className=\"authFont\"\r\n                                                        htmlFor=\"outlined-adornment-email-login\"\r\n                                                    >\r\n                                                        Last Name{' '}\r\n                                                    </InputLabel>\r\n                                                    <FormControl\r\n                                                        sx={{ ...theme.typography.customInput }}\r\n                                                        className=\"auth-formcontrol\"\r\n                                                        fullWidth\r\n                                                        error={Boolean(touched.lastName && errors.lastName)}\r\n                                                    >\r\n                                                        <TextField\r\n                                                            placeholder=\"Last Name\"\r\n                                                            className=\"textForm\"\r\n                                                            // onChange={(event)=>handelAccount(\"password\",event)}\r\n                                                            variant=\"outlined\"\r\n                                                            margin=\"normal\"\r\n                                                            required\r\n                                                            fullWidth\r\n                                                            type=\"lastName\"\r\n                                                            value={values.lastName}\r\n                                                            name=\"lastName\"\r\n                                                            onBlur={handleBlur}\r\n                                                            onChange={handleChange}\r\n                                                            inputProps={{}}\r\n                                                        />\r\n                                                        {touched.lastName && errors.lastName && (\r\n                                                            <FormHelperText error id=\"standard-weight-helper-text-name-login\">\r\n                                                                {errors.lastName}\r\n                                                            </FormHelperText>\r\n                                                        )}\r\n                                                    </FormControl> */}\r\n                                                    <InputLabel\r\n                                                        sx={{ color: theme.palette.mode === 'dark' ? 'white' : '#404040' }}\r\n                                                        className=\"authFont\"\r\n                                                        htmlFor=\"outlined-adornment-email-login\"\r\n                                                    >\r\n                                                   Change  Email Address\r\n                                                    </InputLabel>{' '}\r\n                                                    <FormControl\r\n                                                        sx={{ ...theme.typography.customInput }}\r\n                                                        className=\"auth-formcontrol\"\r\n                                                        fullWidth\r\n                                                        error={Boolean(touched.email && errors.email)}\r\n                                                    >\r\n                                                        <TextField\r\n                                                            placeholder=\"email\"\r\n                                                            className=\"textForm\"\r\n                                                            // onChange={(event)=>handelAccount(\"password\",event)}\r\n                                                            variant=\"outlined\"\r\n                                                            margin=\"normal\"\r\n                                                            required\r\n                                                            fullWidth\r\n                                                            type=\"email\"\r\n                                                            value={values.email}\r\n                                                            name=\"email\"\r\n                                                            autoComplete=\"current-email\"\r\n                                                            onBlur={handleBlur}\r\n                                                            onChange={handleChange}\r\n                                                            inputProps={{}}\r\n                                                        />\r\n                                                        {touched.email && errors.email && (\r\n                                                            <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n                                                                {errors.email}\r\n                                                            </FormHelperText>\r\n                                                        )}\r\n                                                    </FormControl>\r\n                                                 \r\n                                                    {errors.submit && (\r\n                                                        <Box sx={{ mt: 3 }}>\r\n                                                            <FormHelperText error>{errors.submit}</FormHelperText>\r\n                                                        </Box>\r\n                                                    )}\r\n                                                    <Box sx={{ mt: 2 }}>\r\n                                                        <AnimateButton>\r\n                                                            <Button\r\n                                                                className=\"signbuttonMarket\"\r\n                                                                disableElevation\r\n                                                                disabled={isSubmitting}\r\n                                                                fullWidth\r\n                                                                size=\"large\"\r\n                                                                type=\"submit\"\r\n                                                                variant=\"contained\"\r\n                                                                color=\"secondary\"\r\n                                                            >\r\n                                                                Re-Enter\r\n                                                            </Button>\r\n                                                        </AnimateButton>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                          {/*   )} */}\r\n                                        </Box>\r\n                                   \r\n                                </Grid>\r\n                            </Grid>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default VerifyEmail;\r\n","import { Link } from 'react-router-dom';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Divider, Grid, Stack, Typography, useMediaQuery, Box } from '@mui/material';\r\nimport '@fontsource/public-sans';\r\n\r\nimport galileo from 'assets/images/galileo.png';\r\nimport galileoWhite from 'assets/images/galileo-white.png';\r\n// project imports\r\nimport AuthWrapper1 from 'shared/component/AuthWrapper';\r\nimport AuthCardWrapper from 'shared/component/AuthCardWrapper';\r\nimport { Helmet } from 'react-helmet';\r\nimport BackgroundPattern1 from 'ui-component/cards/BackgroundPattern1';\r\nimport AuthSlider from 'ui-component/cards/AuthSlider';\r\nimport VerifyEmail from './Verify';\r\nimport React from 'react';\r\n// import { FormattedMessage } from 'react-intl';\r\nconst Verify = () => {\r\n    const theme = useTheme();\r\n    const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\r\n    const urlSearchParams = new URLSearchParams(window.location.search);\r\n    const params = Object.fromEntries(urlSearchParams.entries());\r\n\r\n    return (\r\n        <AuthWrapper1>\r\n            <Grid\r\n                container\r\n                justifyContent=\"space-between\"\r\n                alignItems=\"center\"\r\n                sx={{ minHeight: '100vh', background: theme.palette.mode === 'dark' ? '#000' : '#fff' }}\r\n            >\r\n                <Helmet>\r\n                    <meta charSet=\"utf-8\" />\r\n                    <title> Email  Verification </title>\r\n                </Helmet>\r\n                <Grid item md={6} lg={5} sx={{ position: 'relative', alignSelf: 'stretch', display: { xs: 'none', md: 'block' } }}>\r\n                    <BackgroundPattern1>\r\n                        <Grid item container alignItems=\"flex-end\" justifyContent=\"center\" spacing={3}>\r\n                            <Grid item xs={12}>\r\n                                <span />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </BackgroundPattern1>\r\n                </Grid>\r\n                <Grid item container justifyContent=\"center\" md={6} lg={7} >\r\n                    <AuthCardWrapper>\r\n                        <Grid container direction=\"column\" justifyContent=\"center\" spacing={2}>\r\n                            <Grid item xs={12} container alignItems=\"center\" justifyContent=\"center\">\r\n                                <Box sx={{ display: { xs: 'block', sm: 'block', md: 'none', lg: 'none' } }}>\r\n                                    <Typography variant=\"h6\" noWrap component=\"div\" sx={{ marginTop: '5px' }}>\r\n                                        {theme.palette.mode === 'dark' ? (\r\n                                            <img src={galileoWhite} alt=\"Galileo White Logo\" width=\"100\" />\r\n                                        ) : (\r\n                                            <img src={galileo} alt=\"Galileo Dark Logo\" width=\"100\" />\r\n                                        )}\r\n                                    </Typography>\r\n                                </Box>\r\n                            </Grid>\r\n                            <Grid item xs={12} container alignItems=\"center\" justifyContent=\"center\">\r\n                                <Box sx={{ mb: 4 }}>\r\n                                    <Typography className=\"signInMarket\" variant=\"subtitle1\">\r\n                                        Email Verification{' '}\r\n                                    </Typography>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={2} justifyContent=\"center\">\r\n                            <Grid item xs={12}>\r\n                                <VerifyEmail  token={params.token}/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </AuthCardWrapper>\r\n                </Grid>\r\n            </Grid>\r\n        </AuthWrapper1>\r\n    );\r\n};\r\n\r\nexport default Verify;\r\n","// material-ui\r\nimport { styled } from '@mui/material/styles';\r\n\r\n// ==============================|| AUTHENTICATION 1 WRAPPER ||============================== //\r\n\r\nconst AuthWrapper = styled('div')(({ theme }) => ({\r\n    backgroundColor: theme.palette.mode === 'dark' ? '#fff' : '#fff',\r\n    minHeight: '100vh'\r\n}));\r\n\r\nexport default AuthWrapper;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Box } from '@mui/material';\r\n\r\n// project import\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\n// ==============================|| AUTHENTICATION CARD WRAPPER ||============================== //\r\n\r\nconst AuthCardWrapper = ({ children, ...other }) => (\r\n    <MainCard\r\n        sx={{\r\n            borderRadius:'4px',\r\n            maxWidth: { xs: 400, lg: 475 },\r\n            margin: { xs: 2.5, md: 3 },\r\n            '& > *': {\r\n                flexGrow: 1,\r\n                flexBasis: '50%'\r\n            }\r\n        }}\r\n        content={false}\r\n        {...other}\r\n    >\r\n        <Box sx={{ p: { xs: 2, sm: 3, xl: 5 } }}>{children}</Box>\r\n    </MainCard>\r\n);\r\n\r\nAuthCardWrapper.propTypes = {\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default AuthCardWrapper;\r\n","export default __webpack_public_path__ + \"static/media/auth-pattern.46739974.png\";","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Box } from '@mui/material';\r\n\r\n// assets\r\nimport AuthPattern from 'assets/images/auth-pattern.png';\r\nimport AuthPatternDark from 'assets/images/auth-pattern.png';\r\n\r\n// ===========================|| BACKGROUND GRID PATTERN 1 ||=========================== //\r\n\r\nconst BackgroundPattern1 = ({ children }) => {\r\n    const theme = useTheme();\r\n    return (\r\n        <Box\r\n            component=\"span\"\r\n            sx={{\r\n                display: 'flex',\r\n                minHeight: '97%',\r\n                bgcolor: theme.palette.mode === 'dark' ? '#fff': '#fff',\r\n                backgroundImage: theme.palette.mode === 'dark' ? `url(${AuthPatternDark})` : `url(${AuthPattern})`,\r\n               \r\n                backgroundPosition: 'center',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundSize: 'cover',\r\n                overflow: 'hidden',\r\n               margin:'10px',\r\n              \r\n                opacity: theme.palette.mode === 'dark' ? 0.85 : 0.9\r\n            }}\r\n        >\r\n            {children}\r\n        </Box>\r\n    );\r\n};\r\n\r\nBackgroundPattern1.propTypes = {\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default BackgroundPattern1;\r\n"],"sourceRoot":""}