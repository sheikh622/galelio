{"version":3,"sources":["views/pages/subAdmin/brands/brandCategory/component/addUpdateBrandCategory.js","views/pages/subAdmin/brands/brandCategory/component/deleteBrandCategoryDialog.js","views/pages/subAdmin/brands/brandCategory/component/brandCategoryTable.js","views/pages/subAdmin/brands/brandCategory/index.js","ui-component/extended/Avatar.js","constants.js"],"names":["Transition","forwardRef","props","ref","Slide","direction","AddUpdateBrandCategoryDialog","open","setOpen","brandCategoryData","page","limit","search","user","useSelector","state","auth","dispatch","useDispatch","categoryArray","brandCategoryReducer","categoriesDropdownList","useState","category","setCategory","isUpdate","setIsUpdate","loader","setLoader","useEffect","categoryId","checkWallet","window","ethereum","request","method","response","_metamask","isUnlocked","connectWallet","type","SNACKBAR_OPEN","message","variant","alertSeverity","console","log","utils","getAddress","walletAddress","handleContractDeployment","brandName","brand","name","categories","map","data","value","categoryName","label","contractName","symbol","substring","provider","ethers","providers","Web3Provider","signer","getSigner","factoryAddr","Contract","FactoryAddress","address","FactoryAbi","deployMintingContract","catch","error","wait","res","addr","events","args","addBrandCategory","brandId","profitPercentage","formik","values","contractAddress","handleClose","validationSchema","Yup","default","min","max","required","typeError","useFormik","enableReinitialize","initialValues","onSubmit","updateBrandCategory","resetForm","getAllCategoriesDropdown","Dialog","className","maxWidth","TransitionComponent","keepMounted","DialogTitle","id","Divider","DialogContent","noValidate","handleSubmit","Grid","container","item","xs","pt","TextField","select","fullWidth","onChange","event","target","MenuItem","option","index","handleChange","touched","Boolean","errors","helperText","DialogActions","sx","display","margin","CircularProgress","AnimateButton","Button","width","background","size","disableElevation","onClick","my","ml","color","DeleteBrandCategoryDialog","theme","useTheme","DialogContentText","Typography","component","pr","palette","dark","borderColor","deleteBrandCategory","BrandCategoryTable","brandCategoriesList","addUpdateOpen","setAddUpdateOpen","navigate","setBrandCategoryData","useNavigate","deleteOpen","setDeleteOpen","TableContainer","undefined","brandCategories","justifyContent","m","disableShrink","count","Table","TableHead","TableRow","TableCell","align","borderBottom","TableBody","padding","row","textTransform","lg","Avatar","alt","src","Category","image","moment","createdAt","format","updatedAt","Stack","Tooltip","placement","title","IconButton","brandData","fontSize","style","fontWeight","BrandCategory","location","useLocation","brandCategoriesByAdminList","setSearch","setPage","getAllBrandCategoriesByAdmin","adminId","MainCard","marginTop","marginLeft","md","mode","secondary","float","content","spacing","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","e","p","gridSpacing","Pagination","showFirstButton","showLastButton","pages","newPage","outline","others","colorSX","paper","bgcolor","outlineSX","border","sizeSX","height","BLOCKCHAIN","WALLET_ADDRESS","ERC20"],"mappings":"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","file":"static/js/43.c5512e55.chunk.js","sourcesContent":["import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ethers, utils } from 'ethers';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { updateBrandCategory, addBrandCategory, getAllCategoriesDropdown } from 'redux/brandCategory/actions';\r\nimport {\r\n    MenuItem,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    TextField,\r\n    Divider,\r\n    Grid,\r\n    CircularProgress\r\n} from '@mui/material';\r\nimport FactoryAbi from '../../../../../../contractAbi/Factory.json';\r\nimport FactoryAddress from '../../../../../../contractAbi/Factory-address.json';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport BLOCKCHAIN from '../../../../../../constants';\r\nimport { SNACKBAR_OPEN } from 'store/actions';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nexport default function AddUpdateBrandCategoryDialog({ open, setOpen, brandCategoryData, page, limit, search }) {\r\n    const user = useSelector((state) => state.auth.user);\r\n    const dispatch = useDispatch();\r\n    const categoryArray = useSelector((state) => state.brandCategoryReducer.categoriesDropdownList);\r\n    const [category, setCategory] = useState(0);\r\n    const [isUpdate, setIsUpdate] = useState(false);\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (brandCategoryData.categoryId == 0) {\r\n            setIsUpdate(false);\r\n        } else {\r\n            setIsUpdate(true);\r\n        }\r\n        setCategory(brandCategoryData.categoryId);\r\n    }, [brandCategoryData]);\r\n\r\n    const handleCategoryChange = (event) => {\r\n        setCategory(event.target.value);\r\n    };\r\n\r\n    const checkWallet = async () => {\r\n        const response = await window?.ethereum?.request({ method: 'eth_requestAccounts' });\r\n        let connectWallet = await ethereum._metamask.isUnlocked();\r\n\r\n        if ((window.ethereum && connectWallet) == false) {\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'No crypto wallet found. Please connect one',\r\n                variant: 'alert',\r\n                alertSeverity: 'info'\r\n            });\r\n            console.log('No crypto wallet found. Please install it.');\r\n            // toast.error('No crypto wallet found. Please install it.');\r\n        } \r\n        \r\n        // else if (window?.ethereum?.networkVersion !== '5') {\r\n        //     dispatch({\r\n        //         type: SNACKBAR_OPEN,\r\n        //         open: true,\r\n        //         message: 'Please change your Chain ID to Goerli',\r\n        //         variant: 'alert',\r\n        //         alertSeverity: 'info'\r\n        //     });\r\n        //     console.log('Please change your Chain ID to Goerli');\r\n        // } \r\n        \r\n        else if (utils?.getAddress(response[0]) !== user.walletAddress) {\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'Please connect your registered Wallet Address',\r\n                variant: 'alert',\r\n                alertSeverity: 'info'\r\n            });\r\n            console.log('Please connect your registered Wallet Address');\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const handleContractDeployment = async () => {\r\n        if (await checkWallet()) {\r\n            setLoader(true);\r\n            let brandName = brandCategoryData?.brand.name;\r\n            let categoryName;\r\n            categoryArray.categories.map((data) => {\r\n                if (data.value == category) {\r\n                    categoryName = data.label;\r\n                }\r\n            });\r\n            const contractName = 'Galileo' + ' ' + brandName + ' ' + categoryName;\r\n            const symbol = 'G' + brandName?.substring(0, 1) + categoryName?.substring(0, 1);\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const factoryAddr = new ethers.Contract(FactoryAddress.address, FactoryAbi, signer);\r\n\r\n            let res = await (\r\n                await factoryAddr.deployMintingContract(contractName, symbol).catch((error) => {\r\n                    setOpen(false);\r\n                    setLoader(false);\r\n                    console.log('error',error);\r\n                })\r\n            )?.wait();\r\n\r\n            let addr = res?.events[2]?.args[0];\r\n            if (res) {\r\n                dispatch(\r\n                    addBrandCategory({\r\n                        brandId: brandCategoryData.brandId,\r\n                        categoryId: category,\r\n                        profitPercentage: formik.values.profitPercentage,\r\n                        contractAddress: addr,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        isUpdate: Yup.boolean().default(isUpdate),\r\n        profitPercentage: Yup.number()\r\n            .min(1, 'Profit Percentage should not be less than one')\r\n            .max(99, 'Profit Percentage should not exceed 99')\r\n            .required('Profit Percentage is required')\r\n            .typeError('Invalid Profit Percentage')\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: brandCategoryData,\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            if (!isUpdate) {\r\n                handleContractDeployment();\r\n            } else {\r\n                dispatch(\r\n                    updateBrandCategory({\r\n                        brandId: brandCategoryData.brandId,\r\n                        categoryId: brandCategoryData.categoryId,\r\n                        profitPercentage: values.profitPercentage,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n        setLoader(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllCategoriesDropdown({ brandId: brandCategoryData.brandId }));\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"adminDialog dialog\"\r\n                maxWidth=\"sm\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\" className=\"assignheading\">\r\n                    {!isUpdate ? 'Assign Category ' : ' Update Profit '}\r\n                </DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <form noValidate onSubmit={formik.handleSubmit} id=\"validation-forms\">\r\n                        <Grid container>\r\n                            <>\r\n                                {!isUpdate && (\r\n                                    <Grid item xs={12} pt={2}>\r\n                                        <TextField\r\n                                            className=\"responsiveSelectfield textfieldStyle field\"\r\n                                            id=\"outlined-select-budget\"\r\n                                            select\r\n                                            fullWidth\r\n                                            label=\"Select Category\"\r\n                                            value={category}\r\n                                            onChange={handleCategoryChange}\r\n                                            variant=\"standard\"\r\n                                        >\r\n                                            <MenuItem value={0}>Choose Category</MenuItem>\r\n                                            {categoryArray &&\r\n                                                categoryArray.categories &&\r\n                                                categoryArray.categories.map((option, index) => (\r\n                                                    <MenuItem key={index} value={option.value}>\r\n                                                        {option.label}\r\n                                                    </MenuItem>\r\n                                                ))}\r\n                                        </TextField>\r\n                                    </Grid>\r\n                                )}\r\n\r\n                                <Grid item xs={12} pt={2}>\r\n                                    <TextField\r\n                                        className=\"textfieldStyle field\"\r\n                                        variant=\"standard\"\r\n                                        id=\"profitPercentage\"\r\n                                        name=\"profitPercentage\"\r\n                                        label=\"Enter Profit Percentage\"\r\n                                        value={formik.values.profitPercentage}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.profitPercentage && Boolean(formik.errors.profitPercentage)}\r\n                                        helperText={formik.touched.profitPercentage && formik.errors.profitPercentage}\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                            </>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n\r\n                <DialogActions sx={{ display: 'block', margin: '10px 10px 0px 20px' }}>\r\n                    {loader ? (\r\n                        <CircularProgress />\r\n                    ) : (\r\n                        <>\r\n                            <AnimateButton>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    className=\"buttons\"\r\n                                    sx={{ width: '92%',\r\n                                    margin: '0px 0px 10px 8px', \r\n                                        background: 'linear-gradient(97.63deg, #2F57FF 0%, #2FA3FF 108.45%)'\r\n                                    }}\r\n                                    type=\"submit\"\r\n                                    size=\"large\"\r\n                                    disableElevation\r\n                                    onClick={() => {\r\n                                        formik.handleSubmit();\r\n                                    }}\r\n                                >\r\n                                    {!isUpdate ? 'Create ' : 'Update '}\r\n                                </Button>\r\n                                </AnimateButton>\r\n                                <AnimateButton>\r\n                                <Button\r\n                                    className=\"buttons\"\r\n                                    variant=\"outlined\"\r\n                                    sx={{ my: 1, ml: 0, width: '95%', margin: '0px 0px 10px 0px', color: '#4044ED' }}\r\n                                    onClick={handleClose}\r\n                                    color=\"secondary\"\r\n                                    size=\"large\"\r\n                                >\r\n                                    Cancel\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </>\r\n                    )}\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteBrandCategory } from '../../../../../../redux/brandCategory/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteBrandCategoryDialog({ open, setOpen, page, limit, search, brandCategoryData }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\"  className=\"assignheading\">Delete Brand Category</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\" className=\"statustypo\" >\r\n                            Are you sure you want to delete this Category?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"  className='buttonSize' size='large' \r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        className='buttonSize' size='large' \r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteBrandCategory({\r\n                                    categoryId: brandCategoryData.categoryId,\r\n                                    brandId: brandCategoryData.brandId,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n    Divider,\r\n    Typography,\r\n    IconButton,\r\n    Grid,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    Button,\r\n    TableRow,\r\n    Tooltip,\r\n    Stack,\r\n    CircularProgress\r\n} from '@mui/material';\r\n\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport AddUpdateBrandCategoryDialog from './addUpdateBrandCategory';\r\nimport DeleteBrandCategoryDialog from './deleteBrandCategoryDialog';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport RemoveRedEyeIcon from '@mui/icons-material/RemoveRedEye';\r\nimport moment from 'moment';\r\n\r\nconst BrandCategoryTable = ({\r\n    brandCategoriesList,\r\n    search,\r\n    page,\r\n    limit,\r\n    addUpdateOpen,\r\n    setAddUpdateOpen,\r\n    brandCategoryData,\r\n    setBrandCategoryData\r\n}) => {\r\n    const navigate = useNavigate();\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const [detailId, setDetailId] = useState();\r\n    const theme = useTheme();\r\n\r\n    const openDetails = (id) => {\r\n        if (detailId === id) {\r\n            setDetailId(null);\r\n        } else {\r\n            setDetailId(id);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <TableContainer>\r\n            <AddUpdateBrandCategoryDialog\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n                brandCategoryData={brandCategoryData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n\r\n            <DeleteBrandCategoryDialog\r\n                open={deleteOpen}\r\n                setOpen={setDeleteOpen}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n                brandCategoryData={brandCategoryData}\r\n            />\r\n            {brandCategoriesList.brandCategories == undefined ? (\r\n                <Grid container justifyContent=\"center\" sx={{ width: '80%', m: '15px auto '}}>\r\n            <Grid item>\r\n        <CircularProgress disableShrink size={'4rem'} />\r\n    </Grid>\r\n            </Grid>):(<>\r\n            {brandCategoriesList.brandCategories != undefined && brandCategoriesList.count > 0 ? (\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\" sx={{ borderBottom: 'none' }}></TableCell>\r\n                        <TableCell align=\"left \" className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                            Category name{' '}\r\n                        </TableCell>\r\n                          <TableCell   className='Tableheading' sx={{borderBottom:'none'}}>Profit Percentage</TableCell>\r\n                    {/* <TableCell   className='Tableheading' sx={{borderBottom:'none'}}>Description</TableCell> */}\r\n\r\n                        <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                            Created At\r\n                        </TableCell>\r\n                        <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                            Updated At\r\n                        </TableCell>\r\n                        <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                            Actions\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                    <TableBody sx={{ padding: '10px' }}>\r\n                        {brandCategoriesList.brandCategories != undefined &&\r\n                            brandCategoriesList.brandCategories.map((row, index) => (\r\n                                <>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"right\" sx={{ borderBottom: 'none' }}></TableCell>\r\n                                        <TableCell\r\n                                            sx={{\r\n                                                display: 'flex',\r\n                                                borderBottom: 'none',\r\n                                                textTransform: 'capitalize',\r\n                                                borderBottom: 'none'\r\n                                            }}\r\n                                        >\r\n                                            <Grid item lg={6}>\r\n                                                <Avatar alt=\"Brand Image\" src={row.Category.image} sx={{}} />\r\n                                            </Grid>\r\n                                            <Grid item lg={6} className=\"tableName\">\r\n                                                {row.Category.name}\r\n                                            </Grid>\r\n                                        </TableCell>\r\n\r\n                                        <TableCell className=\"tablecell\" sx={{ borderBottom: 'none' }}>\r\n                                            {row.profitPercentage}%\r\n                                        </TableCell>\r\n                                        <TableCell className=\"tablecell\" sx={{ borderBottom: 'none' }}>\r\n                                            {moment(row.createdAt).format('DD-MMM-YYYY')}\r\n                                        </TableCell>\r\n                                        <TableCell className=\"tablecell\" sx={{ borderBottom: 'none' }}>\r\n                                            {moment(row.updatedAt).format('DD-MMM-YYYY')}\r\n                                        </TableCell>\r\n\r\n                                        <TableCell align=\"left\" sx={{ padding: '0px', borderBottom: 'none' }}>\r\n                                            <Stack direction=\"row\">\r\n                                                <Tooltip placement=\"top\" title=\" View NFT'S\">\r\n                                                    <IconButton\r\n                                                        color=\"primary\"\r\n                                                        aria-label=\"detail\"\r\n                                                        size=\"medium\"\r\n                                                        onClick={() => {\r\n                                                            navigate('/nftManagement', {\r\n                                                                state: {\r\n                                                                    brandData: row\r\n                                                                }\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        <RemoveRedEyeIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n\r\n                                                {/* <Tooltip placement=\"top\" title=\"Edit\">\r\n                                                    <IconButton\r\n                                                        sx={{ color: '#008b04' }}\r\n                                                        aria-label=\"Edit\"\r\n                                                        size=\"large\"\r\n                                                        onClick={() => {\r\n                                                            setAddUpdateOpen(true);\r\n                                                            setBrandCategoryData({\r\n                                                                categoryId: row.CategoryId,\r\n                                                                brandId: row.BrandId,\r\n                                                                profitPercentage: row.profitPercentage\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip> */}\r\n                                                {/* <Tooltip placement=\"top\" title=\"Delete\">\r\n                                                    <IconButton\r\n                                                        color=\"primary\"\r\n                                                        sx={{\r\n                                                            color: theme.palette.orange.dark,\r\n                                                            borderColor: theme.palette.orange.main,\r\n                                                            '&:hover ': { background: theme.palette.orange.light }\r\n                                                        }}\r\n                                                        size=\"large\"\r\n                                                        onClick={() => {\r\n                                                            setDeleteOpen(true);\r\n                                                            setBrandCategoryData({\r\n                                                                categoryId: row.CategoryId,\r\n                                                                brandId: row.BrandId\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip> */}\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </>\r\n                            ))}\r\n                    </TableBody>\r\n          \r\n            </Table>\r\n           ) : (\r\n                <>\r\n                  \r\n                    <Grid item>\r\n                        <Typography className=\"statustypo\" style={{     padding: '20px 20px 20px 70px', \r\n                        fontWeight: '500' }}> No Data Available</Typography>\r\n                    </Grid>\r\n                </>\r\n            )}\r\n            </>)}\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default BrandCategoryTable;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport BrandCategoryTable from './component/brandCategoryTable';\r\nimport { Button, Typography, Grid, MenuItem, Menu, Pagination, OutlinedInput, InputAdornment } from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { getAllBrandCategories, getAllBrandCategoriesByAdmin, getAllCategoriesDropdown } from '../../../../../redux/brandCategory/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AddUpdateBrandCategoryDialog from './component/addUpdateBrandCategory';\r\nimport { userStory } from 'store/kanban';\r\n\r\nconst BrandCategory = () => {\r\n    const user = useSelector((state) => state.auth.user);\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const brandCategoriesList = useSelector((state) => state.brandCategoryReducer.brandCategoriesByAdminList);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [brandCategoryData, setBrandCategoryData] = useState({\r\n        brand: location?.state?.brandData,\r\n        brandId: location?.state?.brandData.id,\r\n        categoryId: 0,\r\n        profitPercentage: ''\r\n    });\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllBrandCategoriesByAdmin({\r\n                brandId: location?.state?.brandData?.id,\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                adminId: user.id\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n  \r\n    return (\r\n        <>\r\n            <AddUpdateBrandCategoryDialog\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n                brandCategoryData={brandCategoryData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n            <MainCard\r\n            className='Adminheading'\r\n\r\n                title={\r\n                    <Typography variant=\"h1\" component=\"h2\" className='headingcard' sx={{ marginTop:'10px' ,  \r\n                        fontWeight: 600, color: '#000' , marginLeft:{lg:'-20px', md:'-20px'}, \r\n                        background: theme.palette.mode === 'dark' ? 'black' : '#f3f3f3',\r\n                        color: theme.palette.mode === 'dark' ? 'white' : '#404040' }}>\r\n                           \r\n                        Brand Management\r\n                    </Typography>\r\n                }\r\n                secondary={\r\n                    <Button className='buttonSize' sx={{float:'right'}}\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    onClick={() => {\r\n                        navigate('/brands');\r\n                    }}\r\n                >\r\n                    Back\r\n                </Button>\r\n                }\r\n                content={false}\r\n            ></MainCard>\r\n\r\n            <MainCard\r\n            className='tableShadow'\r\n            title={\r\n                <Grid container spacing={4} >\r\n                <Grid item xs={6} lg={8} >\r\n                <Typography className='mainheading' variant=\"h1\" component=\"h2\"\r\n                 sx={{marginLeft:{lg:'48px', md:'48px'}}}>\r\n                 Category Management of : {location?.state?.brandData?.name}\r\n              </Typography>\r\n                </Grid>\r\n                    <Grid item xs={3} lg={2} >\r\n                   \r\n                    <OutlinedInput\r\n                    id=\"input-search-list-style1\"\r\n                    placeholder=\"Search\"\r\n                    startAdornment={\r\n                        <InputAdornment position=\"start\">\r\n                            <IconSearch stroke={1.5} size=\"1rem\" />\r\n                        </InputAdornment>\r\n                    }\r\n                    size=\"small\"\r\n                    onChange={(e) => {\r\n                        setSearch(e.target.value);\r\n                    }}\r\n                />\r\n                    </Grid>\r\n                    {/* <Grid item xs={3} lg={2} textAlign=\"start\">\r\n                        <Button className='buttonSize' sx={{marginLeft:{lg:'-16px', md:'-16px'}}}\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                            onClick={() => {\r\n                                setAddUpdateOpen(true);\r\n                                setBrandCategoryData({\r\n                                    brand: location.state.brandData,\r\n                                    brandId: location.state.brandData.id,\r\n                                    categoryId: 0,\r\n                                    profitPercentage: ''\r\n                                });\r\n                                dispatch(getAllCategoriesDropdown({ brandId: location.state.brandData.id }));\r\n                            }}\r\n                        >\r\n                        Create\r\n                        </Button>\r\n                    </Grid> */}\r\n                </Grid> }\r\n                content={false}\r\n            >\r\n                <BrandCategoryTable\r\n                    brandCategoriesList={brandCategoriesList}\r\n                    search={search}\r\n                    page={page}\r\n                    limit={limit}\r\n                    addUpdateOpen={addUpdateOpen}\r\n                    setAddUpdateOpen={setAddUpdateOpen}\r\n                    brandCategoryData={brandCategoryData}\r\n                    setBrandCategoryData={setBrandCategoryData}\r\n                />\r\n\r\n                <>\r\n                    <Grid item xs={12} sx={{ p: 3 }}>\r\n                        <Grid container justifyContent=\"center\" spacing={gridSpacing}>\r\n                            <Grid item>\r\n                                <Pagination\r\n                                    color=\"primary\"\r\n                                    showFirstButton\r\n                                    showLastButton\r\n                                    page={page}\r\n                                    count={brandCategoriesList.pages}\r\n                                    onChange={(event, newPage) => {\r\n                                        setPage(newPage);\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                          \r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BrandCategory;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","const BLOCKCHAIN = \r\n{\r\n    WALLET_ADDRESS: '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651',\r\n    ERC20: '0x44405b9819dd99b331A317f5c76667EcCcf19072'\r\n}\r\n\r\nexport default BLOCKCHAIN\r\n"],"sourceRoot":""}