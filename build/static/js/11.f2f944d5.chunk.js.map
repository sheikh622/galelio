{"version":3,"sources":["views/pages/superAdmin/categories/component/deleteCategoryDialog.js","views/pages/superAdmin/categories/component/categoryTable.js","views/pages/superAdmin/categories/component/addUpdateCategory.js","views/pages/superAdmin/categories/index.js","ui-component/extended/Avatar.js","shared/Card/HeadingCard.js","shared/component/FileInput.js"],"names":["Transition","forwardRef","props","ref","Slide","direction","DeleteCategoryDialog","open","setOpen","page","limit","search","categoryId","theme","useTheme","dispatch","useDispatch","handleClose","Dialog","TransitionComponent","keepMounted","onClose","DialogTitle","id","DialogContent","DialogContentText","Typography","variant","component","DialogActions","sx","pr","Button","color","palette","error","dark","borderColor","onClick","size","deleteCategory","CategoryTable","categoryList","setAddUpdateOpen","setCategoryData","useState","deleteOpen","setDeleteOpen","setCategoryId","TableContainer","Table","TableHead","TableRow","TableCell","align","undefined","categories","length","Grid","item","style","padding","fontWeight","justifyContent","TableBody","map","row","index","alignItems","container","spacing","Avatar","alt","src","image","name","description","moment","createdAt","format","updatedAt","Stack","Tooltip","placement","title","IconButton","fontSize","orange","main","background","light","width","m","CircularProgress","Divider","AddUpdateCategory","categoryData","isUpdate","setIsUpdate","useEffect","validationSchema","Yup","default","required","max","matches","when","is","then","otherwise","errorHandler","values","split","pop","toast","formik","useFormik","enableReinitialize","initialValues","onSubmit","addCategory","updateCategory","resetForm","className","maxWidth","noValidate","handleSubmit","InputLabel","htmlFor","TextField","value","onChange","handleChange","touched","Boolean","errors","helperText","fullWidth","autoComplete","marginTop","xs","pt","FileInput","accept","fieldName","placeHolder","AnimateButton","my","ml","type","disableElevation","Categories","useSelector","state","category","setSearch","setPage","setLimit","addUpdateOpen","anchorEl","setAnchorEl","handleCloseMenu","getAllCategories","MainCard","gridSpacing","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","e","target","textAlign","content","p","Pagination","showFirstButton","showLastButton","count","pages","event","newPage","grey","endIcon","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","outline","others","colorSX","paper","bgcolor","outlineSX","border","sizeSX","height","fileRef1","useRef","current","click","hidden","setFieldValue","files","mt","substring","toFixed"],"mappings":"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","file":"static/js/11.f2f944d5.chunk.js","sourcesContent":["import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteCategory } from 'redux/categories/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteCategoryDialog({ open, setOpen, page, limit, search, categoryId }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Delete Category</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to delete this Category?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteCategory({\r\n                                    categoryId: categoryId,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    IconButton,\r\n    Stack,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    Grid,\r\n    Divider,\r\n    Typography,\r\n    TableHead,\r\n    TableRow,\r\n    Tooltip,\r\n    CircularProgress\r\n} from '@mui/material';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport DeleteCategoryDialog from './deleteCategoryDialog';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\nimport moment from 'moment';\r\n\r\nconst CategoryTable = ({ categoryList, page, limit, search, setAddUpdateOpen, setCategoryData }) => {\r\n    const theme = useTheme();\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const [categoryId, setCategoryId] = useState();\r\n    return (\r\n        <>\r\n            <DeleteCategoryDialog\r\n                open={deleteOpen}\r\n                setOpen={setDeleteOpen}\r\n                categoryId={categoryId}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n            <DeleteCategoryDialog />\r\n            <TableContainer>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\">Name</TableCell>\r\n                            <TableCell align=\"center\">Description</TableCell>\r\n                            <TableCell align=\"center\">Created At</TableCell>\r\n                            <TableCell align=\"center\">Updated At</TableCell>\r\n                            <TableCell align=\"center\">Actions</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    {(categoryList.categories == undefined && categoryList.categories?.length == 0) || undefined ? (\r\n                        <>\r\n                            <Grid item>\r\n                                <Typography style={{ padding: '20px', fontWeight: '800', justifyContent: 'center' }}>\r\n                                    {' '}\r\n                                    No Data Available\r\n                                </Typography>\r\n                            </Grid>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            {categoryList.categories?.length > 0 ? (\r\n                                <>\r\n                                    <TableBody>\r\n                                        {categoryList.categories != undefined &&\r\n                                            categoryList.categories.map((row, index) => (\r\n                                                <>\r\n                                                    <TableRow>\r\n                                                        <TableCell align=\"center\" justifyContent=\"center\" alignItems=\"center\">\r\n                                                            <Grid container spacing={2} justifyContent=\"center\" alignItems=\"center\">\r\n                                                                <Grid item>\r\n                                                                    <Avatar alt=\"Category Image\" src={row.image} />\r\n                                                                </Grid>\r\n                                                                <Grid item>\r\n                                                                    <Typography variant=\"subtitle1\" component=\"div\">\r\n                                                                        {row.name}\r\n                                                                    </Typography>\r\n                                                                </Grid>\r\n                                                            </Grid>\r\n                                                        </TableCell>\r\n\r\n                                                        <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                                            {row.description}\r\n                                                        </TableCell>\r\n                                                        <TableCell align=\"center\">{moment(row.createdAt).format('DD-MMM-YYYY')}</TableCell>\r\n                                                        <TableCell align=\"center\">{moment(row.updatedAt).format('DD-MMM-YYYY')}</TableCell>\r\n                                                        <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                                            <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                                                <Tooltip placement=\"top\" title=\"Edit\">\r\n                                                                    <IconButton\r\n                                                                        color=\"primary\"\r\n                                                                        aria-label=\"Edit\"\r\n                                                                        size=\"large\"\r\n                                                                        onClick={() => {\r\n                                                                            setAddUpdateOpen(true);\r\n                                                                            setCategoryData({\r\n                                                                                id: row.id,\r\n                                                                                name: row.name,\r\n                                                                                description: row.description,\r\n                                                                                image: null\r\n                                                                            });\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                                    </IconButton>\r\n                                                                </Tooltip>\r\n                                                                <Tooltip placement=\"top\" title=\"Delete\">\r\n                                                                    <IconButton\r\n                                                                        color=\"primary\"\r\n                                                                        sx={{\r\n                                                                            color: theme.palette.orange.dark,\r\n                                                                            borderColor: theme.palette.orange.main,\r\n                                                                            '&:hover ': { background: theme.palette.orange.light }\r\n                                                                        }}\r\n                                                                        size=\"large\"\r\n                                                                        onClick={() => {\r\n                                                                            setDeleteOpen(true);\r\n                                                                            setCategoryId(row.id);\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                                    </IconButton>\r\n                                                                </Tooltip>\r\n                                                            </Stack>\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                </>\r\n                                            ))}\r\n                                    </TableBody>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <Grid container justifyContent=\"center\" sx={{ width: '300%', m: 5 }}>\r\n                                        <Grid item>\r\n                                            <CircularProgress size={'4rem'} />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </Table>\r\n                <Divider />\r\n            </TableContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CategoryTable;\r\n","import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Button, Dialog, DialogContent, InputLabel, TextField, Grid, DialogTitle, Divider, DialogActions, Slide } from '@mui/material';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { addCategory, updateCategory } from 'redux/categories/actions';\r\nimport FileInput from '../../../../../shared/component/FileInput';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nexport default function AddUpdateCategory({ open, setOpen, categoryData, page, limit, search }) {\r\n    const dispatch = useDispatch();\r\n    const [isUpdate, setIsUpdate] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (categoryData.id == null) {\r\n            setIsUpdate(false);\r\n        } else {\r\n            setIsUpdate(true);\r\n        }\r\n    }, [categoryData]);\r\n\r\n    const validationSchema = Yup.object({\r\n        isUpdate: Yup.boolean().default(isUpdate),\r\n        name: Yup.string()\r\n            .required('Category Name is required!')\r\n            .max(42, 'Category Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Category name'),\r\n        description: Yup.string()\r\n            .required('Description is required!')\r\n            .max(42, 'Description can not exceed 200 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Description'),\r\n        image: Yup.mixed().when(['isUpdate'], {\r\n            is: true,\r\n            then: Yup.mixed(),\r\n            otherwise: Yup.mixed().required('Image is required')\r\n        })\r\n    });\r\n\r\n    const errorHandler = (values) => {\r\n        if (values.image) {\r\n            if (\r\n                values.image.name.split('.').pop() == 'jpg' ||\r\n                values.image.name.split('.').pop() == 'png' ||\r\n                values.image.name.split('.').pop() == 'jpeg '\r\n            ) {\r\n                return true;\r\n            } else {\r\n                toast.error('Upload the files with these extensions: jpg, png, jpeg');\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: categoryData,\r\n        validationSchema,\r\n        onSubmit: async (values) => {\r\n            const isValid = errorHandler(values);\r\n            if (isValid) {\r\n                if (categoryData.id == null) {\r\n                    await dispatch(\r\n                        addCategory({\r\n                            name: values.name,\r\n                            description: values.description,\r\n                            image: values.image,\r\n                            page: page,\r\n                            limit: limit,\r\n                            search: search,\r\n                            handleClose: handleClose\r\n                        })\r\n                    );\r\n                } else {\r\n                    dispatch(\r\n                        updateCategory({\r\n                            categoryId: categoryData.id,\r\n                            name: values.name,\r\n                            description: values.description,\r\n                            image: values.image,\r\n                            page: page,\r\n                            limit: limit,\r\n                            search: search,\r\n                            handleClose: handleClose\r\n                        })\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n\r\n        formik.resetForm();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog\"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">{categoryData.id == null ? 'Add Category ' :\r\n                 ' Update Category '}</DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <form noValidate onSubmit={formik.handleSubmit} id=\"validation-forms\">\r\n                        <Grid container>\r\n                            <InputLabel htmlFor=\"outlined-adornment-password-login\">Name</InputLabel>\r\n                            <TextField\r\n                                id=\"name\"\r\n                                name=\"name\"\r\n                                value={formik.values.name}\r\n                                onChange={formik.handleChange}\r\n                                error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                helperText={formik.touched.name && formik.errors.name}\r\n                                fullWidth\r\n                                autoComplete=\"given-name\"\r\n                            />\r\n\r\n                            <InputLabel sx={{ marginTop: '15px' }} htmlFor=\"outlined-adornment-password-login\">\r\n                                Description\r\n                            </InputLabel>\r\n                            <TextField\r\n                                id=\"description\"\r\n                                name=\"description\"\r\n                                value={formik.values.description}\r\n                                onChange={formik.handleChange}\r\n                                error={formik.touched.description && Boolean(formik.errors.description)}\r\n                                helperText={formik.touched.description && formik.errors.description}\r\n                                fullWidth\r\n                                autoComplete=\"given-name\"\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} pt={2}>\r\n                            <FileInput formik={formik} accept=\"image/*\" fieldName=\"image\" placeHolder=\"Add Category Image\" />\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 3 }}>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1 }}\r\n                            type=\"submit\"\r\n                            size=\"large\"\r\n                            onClick={formik.handleSubmit}\r\n                            disableElevation\r\n                        >\r\n                            {categoryData.name !== '' ? 'Update ' : 'Add '}\r\n                        </Button>\r\n                    </AnimateButton>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1, color: '#fff' }}\r\n                            onClick={handleClose}\r\n                            color=\"secondary\"\r\n                            size=\"large\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </AnimateButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport CategoryTable from './component/categoryTable';\r\nimport { Button, Grid, MenuItem, Menu, Pagination, OutlinedInput, InputAdornment, Typography } from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { getAllCategories } from '../../../../redux/categories/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport AddUpdateCategory from './component/addUpdateCategory';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport HeadingCard from 'shared/Card/HeadingCard';\r\n\r\nconst Categories = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const categoryList = useSelector((state) => state.category.categoryList);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [categoryData, setCategoryData] = useState({\r\n        id: null,\r\n        name: '',\r\n        description: '',\r\n        image: null\r\n    });\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllCategories({\r\n                search: search,\r\n                page: page,\r\n                limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n\r\n    return (\r\n        <>\r\n            <AddUpdateCategory\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n                categoryData={categoryData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n\r\n            <Typography variant=\"h1\" sx={{ m: 2 }}>\r\n                Category Management\r\n            </Typography>\r\n            <MainCard\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={3}>\r\n                            <OutlinedInput\r\n                                id=\"input-search-list-style1\"\r\n                                placeholder=\"Search\"\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"start\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                                size=\"small\"\r\n                                onChange={(e) => {\r\n                                    setSearch(e.target.value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={9} textAlign=\"end\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddUpdateOpen(true);\r\n                                    setCategoryData({ id: null, name: '', description: '', image: null });\r\n                                }}\r\n                            >\r\n                                Add Category\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                <CategoryTable\r\n                    categoryList={categoryList && categoryList}\r\n                    page={page}\r\n                    limit={limit}\r\n                    search={search}\r\n                    setAddUpdateOpen={setAddUpdateOpen}\r\n                    setCategoryData={setCategoryData}\r\n                />\r\n\r\n                <>\r\n                    <Grid item xs={12} sx={{ p: 3 }}>\r\n                        <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                            <Grid item>\r\n                                <Pagination\r\n                                    color=\"primary\"\r\n                                    showFirstButton\r\n                                    showLastButton\r\n                                    page={page}\r\n                                    count={categoryList && categoryList.pages}\r\n                                    onChange={(event, newPage) => {\r\n                                        setPage(newPage);\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    size=\"large\"\r\n                                    sx={{ color: theme.palette.grey[900] }}\r\n                                    color=\"secondary\"\r\n                                    endIcon={<ExpandMoreRoundedIcon />}\r\n                                    onClick={handleClick}\r\n                                >\r\n                                    {limit} Rows\r\n                                </Button>\r\n                                <Menu\r\n                                    id=\"menu-user-list-style1\"\r\n                                    anchorEl={anchorEl}\r\n                                    keepMounted\r\n                                    open={Boolean(anchorEl)}\r\n                                    onClose={handleCloseMenu}\r\n                                    variant=\"selectedMenu\"\r\n                                    anchorOrigin={{\r\n                                        vertical: 'top',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                    transformOrigin={{\r\n                                        vertical: 'bottom',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                >\r\n                                    <MenuItem\r\n                                        value={10}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        10 Rows\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value={25}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        25 Rows\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value={50}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        50 Rows{' '}\r\n                                    </MenuItem>\r\n                                </Menu>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Categories;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { forwardRef } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// constant\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                marginBottom: theme.spacing(gridSpacing),\r\n\r\n                borderColor: theme.palette.primary[200] + 75,\r\n                background: theme.palette.background.default\r\n            }}\r\n        >\r\n            <Box sx={{ padding: '13px 20px 22px 20px' }}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                    <Grid item>\r\n                        <Typography variant=\"h3\" sx={{ fontWeight: 500, color: '#000' }}>\r\n                            {title}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {value !== undefined && (\r\n                        <Grid item>\r\n                            {/* {options && (role == 'teacher' || role == 'super_admin') && ( */}\r\n                            <TextField\r\n                                id=\"standard-select-currency\"\r\n                                select\r\n                                value={value}\r\n                                onChange={(e) => setValue(e.target.value)}\r\n                                sx={{ width: '110px', height: '40px' }}\r\n                            >\r\n                                {options.map((option) => (\r\n                                    <MenuItem key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                            {/* )} */}\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        </Card>\r\n    );\r\n});\r\n\r\nexport default HeadingCard;\r\n","import PropTypes from 'prop-types';\r\nimport { useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Fragment } from 'react';\r\nimport { Grid, Typography, IconButton, Tooltip, RadioGroup, FormControlLabel, Radio } from '@mui/material';\r\n\r\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined';\r\nimport AddCircleOutlinedIcon from '@mui/icons-material/AddCircleOutlined';\r\n\r\n// Props needed for component formik ,correctOption, setCorrectOption , optionValue , formikFieldName , PlaceHOLDER\r\nconst FileInput = ({ formik, fieldName, placeHolder, accept }) => {\r\n    const dispatch = useDispatch();\r\n    const fileRef1 = useRef();\r\n\r\n    return (\r\n        <>\r\n            <Grid item className=\"displayFlex\">\r\n                <Fragment>\r\n                    <Tooltip placement=\"top\" title={accept == 'image/*' ? 'Add Image' : 'Add Audio'}>\r\n                        <IconButton color=\"primary\" aria-label=\"delete\" size=\"large\" onClick={() => fileRef1.current.click()}>\r\n                            <AddCircleOutlinedIcon sx={{ fontSize: '3.0rem' }} />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <input\r\n                        hidden\r\n                        ref={fileRef1}\r\n                        fullWidth\r\n                        type=\"file\"\r\n                        className=\"chooseFileInput\"\r\n                        accept={accept}\r\n                        onChange={(event) => {\r\n                            formik.setFieldValue(fieldName, event.currentTarget.files[0]);\r\n                        }}\r\n                        error={formik.touched[`${fieldName}`] && Boolean(formik.errors[`${fieldName}`])}\r\n                        helperText={formik.touched[`${fieldName}`] && formik.errors[`${fieldName}`]}\r\n                    />\r\n\r\n                    <Grid className=\"displayFlex\">\r\n                        {formik?.values[`${fieldName}`]?.name?.length < 40 ? (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {formik.values[`${fieldName}`]?.name}\r\n                            </Typography>\r\n                        ) : (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {formik.values[`${fieldName}`]?.name?.substring(0, 40)}\r\n                            </Typography>\r\n                        )}\r\n                        {formik?.values[`${fieldName}`] && (\r\n                            <Typography mt={3.5} variant=\"h5\" ml={2}>\r\n                                {'(' + (formik.values[`${fieldName}`]?.size / 1000000).toFixed(2) + '  mb)'}\r\n                            </Typography>\r\n                        )}\r\n\r\n                        {formik.values[`${fieldName}`] ? (\r\n                            <Tooltip placement=\"top\" title={accept == 'image/*' ? 'Clear Image' : 'Clear Audio'}>\r\n                                <IconButton\r\n                                    style={{ marginTop: '2px' }}\r\n                                    color=\"primary\"\r\n                                    aria-label=\"delete\"\r\n                                    size=\"large\"\r\n                                    onClick={() => {\r\n                                        formik.setFieldValue(fieldName, null);\r\n                                        fileRef1.current.value = null;\r\n                                    }}\r\n                                >\r\n                                    <CloseOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        ) : (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {placeHolder}\r\n                            </Typography>\r\n                        )}\r\n                    </Grid>\r\n                </Fragment>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n                <p className={'fileError'}>\r\n                    {formik.touched[`${fieldName}`] && Boolean(formik.errors[`${fieldName}`]) ? formik.errors[`${fieldName}`] : ''}\r\n                </p>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FileInput;\r\n"],"sourceRoot":""}