{"version":3,"sources":["views/pages/superAdmin/brands/brandCategory/component/addUpdateBrandCategory.js","views/pages/superAdmin/brands/brandCategory/component/deleteBrandCategoryDialog.js","views/pages/superAdmin/brands/brandCategory/component/brandCategoryTable.js","views/pages/superAdmin/brands/brandCategory/index.js","../../src.ts/index.ts","ui-component/extended/Avatar.js","constants.js","../node_modules/@mui/material/TableContainer/tableContainerClasses.js","../node_modules/@mui/material/TableContainer/TableContainer.js","../node_modules/@mui/icons-material/RemoveRedEye.js"],"names":["Transition","forwardRef","props","ref","Slide","direction","AddUpdateBrandCategoryDialog","open","setOpen","brandCategoryData","page","limit","search","dispatch","useDispatch","categoryArray","useSelector","state","brandCategoryReducer","categoriesDropdownList","useState","category","setCategory","isUpdate","setIsUpdate","useEffect","categoryId","handleContractDeployment","window","ethereum","console","log","type","SNACKBAR_OPEN","message","variant","alertSeverity","brandName","brand","name","categories","map","data","value","categoryName","label","contractName","symbol","substring","admin","BLOCKCHAIN","WALLET_ADDRESS","validator","provider","ethers","providers","Web3Provider","signer","getSigner","minterAddress","factoryAddr","Contract","FactoryAddress","address","FactoryAbi","abi","deployMintingContract","catch","error","toast","wait","res","addr","events","args","addBrandCategory","brandId","profitPercentage","formik","values","contractAddress","handleClose","validationSchema","Yup","default","min","max","required","typeError","useFormik","enableReinitialize","initialValues","onSubmit","updateBrandCategory","resetForm","getAllCategoriesDropdown","Dialog","onClose","className","maxWidth","TransitionComponent","keepMounted","DialogTitle","id","Divider","DialogContent","noValidate","handleSubmit","Grid","container","item","xs","pt","pr","TextField","select","fullWidth","onChange","event","target","MenuItem","option","index","handleChange","touched","Boolean","errors","helperText","autoComplete","DialogActions","sx","AnimateButton","Button","my","ml","size","disableElevation","onClick","color","DeleteBrandCategoryDialog","theme","useTheme","DialogContentText","Typography","component","palette","dark","borderColor","deleteBrandCategory","BrandCategoryTable","brandCategoriesList","addUpdateOpen","setAddUpdateOpen","setBrandCategoryData","navigate","useNavigate","deleteOpen","setDeleteOpen","TableContainer","Table","TableHead","TableRow","TableCell","align","undefined","brandCategories","count","TableBody","padding","row","justifyContent","alignItems","spacing","Avatar","alt","src","Category","image","description","Stack","Tooltip","placement","title","IconButton","brandData","fontSize","CategoryId","BrandId","orange","main","background","light","md","style","fontWeight","BrandCategory","location","useLocation","setSearch","setPage","setLimit","anchorEl","setAnchorEl","handleCloseMenu","getAllBrandCategories","MainCard","secondary","content","gridSpacing","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","e","textAlign","p","Pagination","showFirstButton","showLastButton","pages","newPage","grey","endIcon","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","anyGlobal","_ethers","outline","others","colorSX","paper","bgcolor","outlineSX","border","sizeSX","width","height","ERC20","getTableContainerUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TableContainerRoot","styled","overridesResolver","styles","root","overflowX","React","inProps","useThemeProps","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","_jsx","as","clsx","_interopRequireDefault","require","Object","defineProperty","exports","_createSvgIcon","_jsxRuntime","_default","jsx","d"],"mappings":"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","file":"static/js/9.2d777c3d.chunk.js","sourcesContent":["import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ethers } from 'ethers';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { updateBrandCategory, addBrandCategory, getAllCategoriesDropdown } from 'redux/brandCategory/actions';\r\nimport { MenuItem, Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, Divider, Grid } from '@mui/material';\r\nimport FactoryAbi from '../../../../../../contractAbi/Factory.json';\r\nimport FactoryAddress from '../../../../../../contractAbi/Factory-address.json';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport  BLOCKCHAIN from '../../../../../../constants';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nexport default function AddUpdateBrandCategoryDialog({ open, setOpen, brandCategoryData, page, limit, search }) {\r\n    const dispatch = useDispatch();\r\n    const categoryArray = useSelector((state) => state.brandCategoryReducer.categoriesDropdownList);\r\n    const [category, setCategory] = useState(0);\r\n    const [isUpdate, setIsUpdate] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (brandCategoryData.categoryId == 0) {\r\n            setIsUpdate(false);\r\n        } else {\r\n            setIsUpdate(true);\r\n        }\r\n        setCategory(brandCategoryData.categoryId);\r\n    }, [brandCategoryData]);\r\n\r\n    const handleCategoryChange = (event) => {\r\n        setCategory(event.target.value);\r\n    };\r\n\r\n    const handleContractDeployment = async () => {\r\n        if (!window.ethereum) {\r\n            console.log(\"meta mask not connected\")\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'No crypto wallet found. Please install it.',\r\n                variant: 'alert',\r\n                alertSeverity: 'info'\r\n                \r\n            })\r\n            console.log(\"No crypto wallet found. Please install it.\")\r\n            // toast.error('No crypto wallet found. Please install it.');\r\n        }else {\r\n            let brandName = brandCategoryData.brand.name;\r\n            let categoryName;\r\n            categoryArray.categories.map((data) => {\r\n                if (data.value == category) {\r\n                    categoryName = data.label;\r\n                }\r\n            });\r\n            const contractName = 'Galileo' + ' ' + brandName + ' ' + categoryName;\r\n            const symbol = 'G' + brandName.substring(0, 1) + categoryName.substring(0, 1);\r\n            const admin = BLOCKCHAIN.WALLET_ADDRESS\r\n            const validator = BLOCKCHAIN.WALLET_ADDRESS\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const minterAddress = BLOCKCHAIN.WALLET_ADDRESS\r\n            const factoryAddr = new ethers.Contract(FactoryAddress.address, FactoryAbi.abi, signer);\r\n            \r\n            let res = await (\r\n                await factoryAddr.deployMintingContract(contractName, symbol, admin, minterAddress, validator).catch((error) => {\r\n                    toast.error(error.message);\r\n                })\r\n            ).wait();\r\n            let addr = res.events[3].args[0];\r\n            dispatch(\r\n                addBrandCategory({\r\n                    brandId: brandCategoryData.brandId,\r\n                    categoryId: category,\r\n                    profitPercentage: formik.values.profitPercentage,\r\n                    contractAddress: addr,\r\n                    page: page,\r\n                    limit: limit,\r\n                    search: search,\r\n                    handleClose: handleClose\r\n                })\r\n            ); \r\n        }\r\n      \r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        isUpdate: Yup.boolean().default(isUpdate),\r\n        profitPercentage: Yup.number()\r\n            .min(1, 'Profit Percentage should not be less than one')\r\n            .max(99, 'Profit Percentage should not exceed 99')\r\n            .required('Profit Percentage is required')\r\n            .typeError('Invalid Profit Percentage')\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: brandCategoryData,\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            if (!isUpdate) {\r\n                handleContractDeployment();\r\n            } else {\r\n                dispatch(\r\n                    updateBrandCategory({\r\n                        brandId: brandCategoryData.brandId,\r\n                        categoryId: brandCategoryData.categoryId,\r\n                        profitPercentage: values.profitPercentage,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllCategoriesDropdown({ brandId: brandCategoryData.brandId }));\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog\"\r\n                maxWidth=\"sm\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">\r\n                    {!isUpdate ? 'Assign Category to brand ' : ' Update Profit percentage of category'}\r\n                </DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <form noValidate onSubmit={formik.handleSubmit} id=\"validation-forms\">\r\n                        <Grid container>\r\n                            <>\r\n                                {!isUpdate && (\r\n                                    <Grid item xs={12} pt={2} pr={4}>\r\n                                        <TextField\r\n                                            className=\"responsiveSelectfield\"\r\n                                            id=\"outlined-select-budget\"\r\n                                            select\r\n                                            fullWidth\r\n                                            label=\"Select Category\"\r\n                                            value={category}\r\n                                            onChange={handleCategoryChange}\r\n                                        >\r\n                                            <MenuItem value={0}>\r\n                                            Choose Category\r\n                                            </MenuItem>\r\n                                            {categoryArray &&\r\n                                                categoryArray.categories &&\r\n                                                categoryArray.categories.map((option, index) => (\r\n                                                    <MenuItem key={index} value={option.value}>\r\n                                                        {option.label}\r\n                                                    </MenuItem>\r\n                                                ))}\r\n                                        </TextField>\r\n                                    </Grid>\r\n                                )}\r\n\r\n                                <Grid item xs={12} pt={4} pr={4}>\r\n                                    <TextField\r\n                                        id=\"profitPercentage\"\r\n                                        name=\"profitPercentage\"\r\n                                        label=\"Enter Profit Percentage\"\r\n                                        value={formik.values.profitPercentage}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.profitPercentage && Boolean(formik.errors.profitPercentage)}\r\n                                        helperText={formik.touched.profitPercentage && formik.errors.profitPercentage}\r\n                                        fullWidth\r\n                                        autoComplete=\"given-name\"\r\n                                    />\r\n                                </Grid>\r\n                            </>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n\r\n                <DialogActions sx={{ pr: 3 }}>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1 }}\r\n                            type=\"submit\"\r\n                            size=\"large\"\r\n                            disableElevation\r\n                            onClick={() => {\r\n                                formik.handleSubmit();\r\n                            }}\r\n                        >\r\n                            {!isUpdate ? 'Add ' : 'Update '}\r\n                        </Button>\r\n                    </AnimateButton>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1, color: '#fff' }}\r\n                            onClick={handleClose}\r\n                            color=\"secondary\"\r\n                            size=\"large\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </AnimateButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}","import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteBrandCategory } from '../../../../../../redux/brandCategory/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteBrandCategoryDialog({ open, setOpen, page, limit, search, brandCategoryData }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Delete Brand Category</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to delete this Category?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteBrandCategory({\r\n                                    categoryId: brandCategoryData.categoryId,\r\n                                    brandId: brandCategoryData.brandId,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n    Divider,\r\n    Typography,\r\n    IconButton,\r\n    Grid,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    Button,\r\n    TableRow,\r\n    Tooltip,\r\n    Stack\r\n} from '@mui/material';\r\n\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport AddUpdateBrandCategoryDialog from './addUpdateBrandCategory';\r\nimport DeleteBrandCategoryDialog from './deleteBrandCategoryDialog';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport RemoveRedEyeIcon from '@mui/icons-material/RemoveRedEye';\r\nconst BrandCategoryTable = ({\r\n    brandCategoriesList,\r\n    search,\r\n    page,\r\n    limit,\r\n    addUpdateOpen,\r\n    setAddUpdateOpen,\r\n    brandCategoryData,\r\n    setBrandCategoryData\r\n}) => {\r\n    const navigate = useNavigate();\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const [detailId, setDetailId] = useState();\r\n    const theme = useTheme();\r\n\r\n    const openDetails = (id) => {\r\n        if (detailId === id) {\r\n            setDetailId(null);\r\n        } else {\r\n            setDetailId(id);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <TableContainer>\r\n            <AddUpdateBrandCategoryDialog\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n                brandCategoryData={brandCategoryData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n\r\n            <DeleteBrandCategoryDialog\r\n                open={deleteOpen}\r\n                setOpen={setDeleteOpen}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n                brandCategoryData={brandCategoryData}\r\n            />\r\n\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\">Category</TableCell>\r\n                        <TableCell align=\"center\">Description</TableCell>\r\n                        <TableCell align=\"center\">Profit percentage</TableCell>\r\n                        <TableCell align=\"center\">Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                {brandCategoriesList.brandCategories != undefined && brandCategoriesList.count > 0 ? (\r\n                    <TableBody sx={{ padding: '10px' }}>\r\n                        {brandCategoriesList.brandCategories != undefined &&\r\n                            brandCategoriesList.brandCategories.map((row, index) => (\r\n                                <>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"center\" justifyContent=\"center\" alignItems=\"center\">\r\n                                            <Grid container spacing={2} justifyContent=\"center\" alignItems=\"center\">\r\n                                                <Grid item>\r\n                                                    <Avatar alt=\"Category Image\" src={row.Category.image} />\r\n                                                </Grid>\r\n                                                <Grid item>\r\n                                                    <Typography variant=\"subtitle1\" component=\"div\">\r\n                                                        {row.Category.name}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </TableCell>\r\n\r\n                                        <TableCell align=\"center\">{row.Category.description}</TableCell>\r\n                                        <TableCell align=\"center\">{row.profitPercentage}</TableCell>\r\n\r\n                                        <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                            <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                                <Tooltip placement=\"top\" title=\" View NFT'S\">\r\n                                                    <IconButton\r\n                                                        color=\"primary\"\r\n                                                        aria-label=\"detail\"\r\n                                                        size=\"medium\"\r\n                                                        onClick={() => {\r\n                                                            navigate('/nftManagement', {\r\n                                                                state: {\r\n                                                                    brandData: row\r\n                                                                }\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        <RemoveRedEyeIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n\r\n                                                <Tooltip placement=\"top\" title=\"Edit\">\r\n                                                    <IconButton\r\n                                                    sx={{color:\"#008b04\"}}\r\n                                                        aria-label=\"Edit\"\r\n                                                        size=\"large\"\r\n                                                        onClick={() => {\r\n                                                            setAddUpdateOpen(true);\r\n                                                            setBrandCategoryData({\r\n                                                                categoryId: row.CategoryId,\r\n                                                                brandId: row.BrandId,\r\n                                                                profitPercentage: row.profitPercentage\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                                <Tooltip placement=\"top\" title=\"Delete\">\r\n                                                    <IconButton\r\n                                                        color=\"primary\"\r\n                                                        sx={{\r\n                                                            color: theme.palette.orange.dark,\r\n                                                            borderColor: theme.palette.orange.main,\r\n                                                            '&:hover ': { background: theme.palette.orange.light }\r\n                                                        }}\r\n                                                        size=\"large\"\r\n                                                        onClick={() => {\r\n                                                            setDeleteOpen(true);\r\n                                                            setBrandCategoryData({\r\n                                                                categoryId: row.CategoryId,\r\n                                                                brandId: row.BrandId\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </>\r\n                            ))}\r\n                    </TableBody>\r\n                ) : (\r\n                    <>\r\n                        <Grid item md={12}>\r\n                            <Divider />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography style={{ padding: '20px', fontWeight: '800' }}> No Data Available</Typography>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default BrandCategoryTable;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport BrandCategoryTable from './component/brandCategoryTable';\r\nimport { Button, Typography, Grid, MenuItem, Menu, Pagination, OutlinedInput, InputAdornment } from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { getAllBrandCategories, getAllCategoriesDropdown } from '../../../../../redux/brandCategory/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AddUpdateBrandCategoryDialog from './component/addUpdateBrandCategory';\r\n\r\nconst BrandCategory = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const brandCategoriesList = useSelector((state) => state.brandCategoryReducer.brandCategoriesList);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [brandCategoryData, setBrandCategoryData] = useState({\r\n        brand: location?.state?.brandData,\r\n        brandId: location?.state?.brandData.id,\r\n        categoryId: 0,\r\n        profitPercentage: ''\r\n    });\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllBrandCategories({\r\n                brandId: location?.state?.brandData?.id,\r\n                search: search,\r\n                page: page,\r\n                limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n  \r\n    return (\r\n        <>\r\n            <AddUpdateBrandCategoryDialog\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n                brandCategoryData={brandCategoryData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n            <MainCard\r\n                title={\r\n                    <Typography variant=\"h3\" sx={{ fontWeight: 500, color: 'cadetblue' }}>\r\n                        Category Management of : {location?.state?.brandData?.name}\r\n                    </Typography>\r\n                }\r\n                secondary={\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            navigate('/brands');\r\n                        }}\r\n                    >\r\n                        back\r\n                    </Button>\r\n                }\r\n                content={false}\r\n            ></MainCard>\r\n\r\n            <MainCard\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={6}>\r\n                            <OutlinedInput\r\n                                id=\"input-search-list-style1\"\r\n                                placeholder=\"Search\"\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"start\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                                size=\"small\"\r\n                                onChange={(e) => {\r\n                                    setSearch(e.target.value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6} textAlign=\"end\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddUpdateOpen(true);\r\n                                    setBrandCategoryData({\r\n                                        brand: location.state.brandData,\r\n                                        brandId: location.state.brandData.id,\r\n                                        categoryId: 0,\r\n                                        profitPercentage: ''\r\n                                    });\r\n                                    dispatch(getAllCategoriesDropdown({ brandId: location.state.brandData.id }));\r\n                                }}\r\n                            >\r\n                                Add Brand Catgeory\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                <BrandCategoryTable\r\n                    brandCategoriesList={brandCategoriesList}\r\n                    search={search}\r\n                    page={page}\r\n                    limit={limit}\r\n                    addUpdateOpen={addUpdateOpen}\r\n                    setAddUpdateOpen={setAddUpdateOpen}\r\n                    brandCategoryData={brandCategoryData}\r\n                    setBrandCategoryData={setBrandCategoryData}\r\n                />\r\n\r\n                <>\r\n                    <Grid item xs={12} sx={{ p: 3 }}>\r\n                        <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                            <Grid item>\r\n                                <Pagination\r\n                                    color=\"primary\"\r\n                                    showFirstButton\r\n                                    showLastButton\r\n                                    page={page}\r\n                                    count={brandCategoriesList.pages}\r\n                                    onChange={(event, newPage) => {\r\n                                        setPage(newPage);\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    size=\"large\"\r\n                                    sx={{ color: theme.palette.grey[900] }}\r\n                                    color=\"secondary\"\r\n                                    endIcon={<ExpandMoreRoundedIcon />}\r\n                                    onClick={handleClick}\r\n                                >\r\n                                    {limit} Rows\r\n                                </Button>\r\n                                <Menu\r\n                                    id=\"menu-user-list-style1\"\r\n                                    anchorEl={anchorEl}\r\n                                    keepMounted\r\n                                    open={Boolean(anchorEl)}\r\n                                    onClose={handleCloseMenu}\r\n                                    variant=\"selectedMenu\"\r\n                                    anchorOrigin={{\r\n                                        vertical: 'top',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                    transformOrigin={{\r\n                                        vertical: 'bottom',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                >\r\n                                    <MenuItem\r\n                                        value={10}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        10 Rows\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value={25}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        25 Rows\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value={50}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        50 Rows{' '}\r\n                                    </MenuItem>\r\n                                </Menu>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BrandCategory;\r\n",null,"import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","const BLOCKCHAIN = \r\n    {\r\n        WALLET_ADDRESS: '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651',\r\n        ERC20: '0xa4f949079320f3C6fFBfdEcB1C8D6ffEb0E44113'\r\n    }\r\n    \r\n\r\n\r\nexport default BLOCKCHAIN\r\n","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getTableContainerUtilityClass(slot) {\n  return generateUtilityClass('MuiTableContainer', slot);\n}\nconst tableContainerClasses = generateUtilityClasses('MuiTableContainer', ['root']);\nexport default tableContainerClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport { getTableContainerUtilityClass } from './tableContainerClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTableContainerUtilityClass, classes);\n};\nconst TableContainerRoot = styled('div', {\n  name: 'MuiTableContainer',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  width: '100%',\n  overflowX: 'auto'\n});\nconst TableContainer = /*#__PURE__*/React.forwardRef(function TableContainer(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTableContainer'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(TableContainerRoot, _extends({\n    ref: ref,\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableContainer.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component, normally `Table`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableContainer;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"\n}), 'RemoveRedEye');\nexports.default = _default;"],"sourceRoot":""}