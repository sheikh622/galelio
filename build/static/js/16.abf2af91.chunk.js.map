{"version":3,"sources":["shared/Card/HeadingCard.js","../node_modules/@mui/icons-material/Visibility.js","views/pages/brandAdmin/categories/component/categoryTable.js","views/pages/brandAdmin/categories/component/deleteCategoryDialog.js","views/pages/brandAdmin/categories/component/addUpdateCategory.js","views/pages/brandAdmin/categories/index.js"],"names":["HeadingCard","forwardRef","title","value","role","setValue","options","theme","useTheme","sx","marginBottom","spacing","gridSpacing","borderColor","palette","primary","background","default","padding","container","alignItems","justifyContent","item","variant","fontWeight","color","undefined","id","select","onChange","e","target","width","height","map","option","label","_interopRequireDefault","require","Object","defineProperty","exports","_createSvgIcon","_jsxRuntime","_default","jsx","d","CategoryTable","setOpen","open","categories","setCategories","categoryList","navigate","setDeleteOpen","useNavigate","TableContainer","Table","TableHead","TableRow","TableCell","align","length","TableBody","row","index","onClick","name","profitPercentage","Stack","direction","Tooltip","placement","IconButton","size","fontSize","replace","Grid","md","Divider","Typography","style","Transition","props","ref","Slide","DeleteCategoryDialog","deleteOpen","page","limit","search","dispatch","useDispatch","handleClose","brandId","Dialog","TransitionComponent","keepMounted","onClose","DialogTitle","DialogContent","DialogContentText","component","DialogActions","pr","Button","error","dark","deleteCategory","categoryId","AddUpdateCategory","useState","brand","setBrand","brandsList","useSelector","state","handleBrandChange","event","validationSchema","Yup","required","max","matches","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","a","addCategory","updateCategory","resetForm","noValidate","handleSubmit","InputLabel","htmlFor","TextField","handleChange","touched","Boolean","errors","helperText","fullWidth","autoComplete","marginTop","InputLabelProps","shrink","defaultValue","MenuItem","brands","AnimateButton","my","ml","type","disableElevation","Categories","category","auth","user","searchCategories","setSearchCategories","pageCategories","setPageCategories","limitCategories","setLimitCategories","addEditModal","setAddEditModal","anchorEl","setAnchorEl","handleCloseMenu","useEffect","getAllBrands","getAllCategories","MainCard","xs","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","content","mainBrandId","p","Pagination","showFirstButton","showLastButton","count","totalPages","newPage","grey","endIcon","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin"],"mappings":"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","file":"static/js/16.abf2af91.chunk.js","sourcesContent":["import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { forwardRef } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// constant\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                marginBottom: theme.spacing(gridSpacing),\r\n\r\n                borderColor: theme.palette.primary[200] + 75,\r\n                background: theme.palette.background.default\r\n            }}\r\n        >\r\n            <Box sx={{ padding: '13px 20px 22px 20px' }}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                    <Grid item>\r\n                        <Typography variant=\"h3\" sx={{ fontWeight: 500, color: '#000' }}>\r\n                            {title}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {value !== undefined && (\r\n                        <Grid item>\r\n                            {/* {options && (role == 'teacher' || role == 'super_admin') && ( */}\r\n                            <TextField\r\n                                id=\"standard-select-currency\"\r\n                                select\r\n                                value={value}\r\n                                onChange={(e) => setValue(e.target.value)}\r\n                                sx={{ width: '110px', height: '40px' }}\r\n                            >\r\n                                {options.map((option) => (\r\n                                    <MenuItem key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                            {/* )} */}\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        </Card>\r\n    );\r\n});\r\n\r\nexport default HeadingCard;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"\n}), 'Visibility');\n\nexports.default = _default;","import { useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    IconButton,\r\n    Stack,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    Grid,\r\n    Divider,\r\n    Typography,\r\n    TableHead,\r\n    TableRow,\r\n    Tooltip\r\n} from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\n\r\nimport moment from 'moment';\r\nimport { useNavigate } from 'react-router-dom';\r\nconst CategoryTable = ({ setOpen, open, categories, setCategories, categoryList, setDeleteOpen }) => {\r\n\r\n    const navigate = useNavigate();\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <>\r\n            <TableContainer>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\">Name</TableCell>\r\n                            <TableCell align=\"center\">Profit</TableCell>\r\n\r\n                            <TableCell align=\"center\">Actions</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    {categoryList.categories?.length > 0 ? (\r\n                        <TableBody>\r\n                            {categoryList.categories != undefined &&\r\n                                categoryList.categories.map((row, index) => (\r\n                                    <>\r\n                                        <TableRow onClick={() => {}}>\r\n                                            <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                                {row.name}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                                {row.profitPercentage}%\r\n                                            </TableCell>\r\n\r\n                                            <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                                <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                                    <Tooltip placement=\"top\" title=\"View\">\r\n                                                        <IconButton\r\n                                                            color=\"primary\"\r\n                                                            aria-label=\"View\"\r\n                                                            size=\"large\"\r\n                                                            onClick={() => {                                                            \r\n                                                            }}\r\n                                                        >\r\n                                                            <VisibilityIcon sx={{ fontSize: '1.5rem' }}\r\n                                                            onClick={()=>{\r\n                                                                navigate(  `/${row.name}/${row.id}`, {replace: true})\r\n                                                            }}\r\n                                                            \r\n                                                            />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                </Stack>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    </>\r\n                                ))}\r\n                        </TableBody>\r\n                    ) : (\r\n                        <>\r\n                            <Grid item md={12}>\r\n                                <Divider />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography style={{ padding: '20px', fontWeight: '800' }}> No Data Available</Typography>\r\n                            </Grid>\r\n                        </>\r\n                    )}\r\n                </Table>\r\n                <Divider />\r\n            </TableContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CategoryTable;\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteCategory } from 'redux/categories/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteCategoryDialog({categories,setCategories, deleteOpen, setDeleteOpen,page, limit, search }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setDeleteOpen(false);\r\n        setCategories({ brandId: 0 });\r\n    };\r\n   \r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={deleteOpen}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Delete Category</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to delete this Category?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteCategory({\r\n                                    categoryId: categories.categoryId,\r\n                                    brandId:categories.brandId,\r\n                                    handleClose: handleClose,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    Button,\r\n    Stack,\r\n    Dialog,\r\n    CardContent,\r\n    DialogContent,\r\n    InputLabel,\r\n    FormControl,\r\n    MenuItem,\r\n    TextField,\r\n    Grid,\r\n    DialogTitle,\r\n    Divider,\r\n    DialogActions\r\n} from '@mui/material';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { addCategory, updateCategory } from 'redux/categories/actions';\r\n\r\nexport default function AddUpdateCategory({\r\n    setOpen,\r\n    open,\r\n    categories,\r\n    setCategories,\r\n\r\n    limit,\r\n    page,\r\n    search\r\n}) {\r\n    const theme = useTheme();\r\n\r\n    const [brand, setBrand] = useState(0);\r\n\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const brandsList = useSelector((state) => state.brand.brandsList);\r\n    const handleBrandChange = (event) => {\r\n        setBrand(event.target.value);\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string()\r\n            .required('Category Name is required!')\r\n            .max(42, 'Category Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Category name'),\r\n        profitPercentage: Yup.string()\r\n            .required('Profit Percentage required!')\r\n            .max(42, 'profit Percentage can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid profit Percentage')\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n\r\n        initialValues: categories,\r\n        validationSchema,\r\n        onSubmit: async (values) => {\r\n            if (categories.name == '') {\r\n                await dispatch(\r\n                    addCategory({\r\n                        name: values.name,\r\n                        profitPercentage: values.profitPercentage,\r\n                        brandId: brand,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            } else {\r\n                dispatch(\r\n                    updateCategory({\r\n                        name: values.name,\r\n                        profitPercentage: categories.profitPercentage,\r\n                        brandId: categories.brandId,\r\n                        categoryId: categories.categoryId,\r\n                        limit: limit,\r\n                        page: page,\r\n                        search: search,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setCategories({ name: '', profitPercentage: '', brandId: 0, categoryId: 0 });\r\n        formik.resetForm();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={open} onClose={handleClose} handleBrandChange={handleBrandChange} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">{categories.name !== '' ? 'Update Category ' : ' Add Category '}</DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <form noValidate onSubmit={formik.handleSubmit} id=\"validation-forms\">\r\n                        <Grid container>\r\n                            <InputLabel htmlFor=\"outlined-adornment-password-login\">Name</InputLabel>\r\n                            <TextField\r\n                                id=\"name\"\r\n                                name=\"name\"\r\n                                // label=\"Name\"\r\n                                value={formik.values.name}\r\n                                onChange={formik.handleChange}\r\n                                error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                helperText={formik.touched.name && formik.errors.name}\r\n                                fullWidth\r\n                                autoComplete=\"given-name\"\r\n                            />\r\n\r\n                            <InputLabel sx={{ marginTop: '15px' }} htmlFor=\"outlined-adornment-password-login\">\r\n                                Profit Percentage\r\n                            </InputLabel>\r\n                            <TextField\r\n                                id=\"profitPercentage\"\r\n                                name=\"profitPercentage\"\r\n                                value={formik.values.profitPercentage}\r\n                                onChange={formik.handleChange}\r\n                                error={formik.touched.profitPercentage && Boolean(formik.errors.profitPercentage)}\r\n                                helperText={formik.touched.profitPercentage && formik.errors.profitPercentage}\r\n                                fullWidth\r\n                                autoComplete=\"given-name\"\r\n                            />\r\n\r\n                            {categories.name == '' && (\r\n                                <>\r\n                                    <InputLabel sx={{ marginTop: '15px' }} htmlFor=\"outlined-adornment-password-login\">\r\n                                        Brand Name\r\n                                    </InputLabel>\r\n                                    <TextField\r\n                                        id=\"outlined-select-currency\"\r\n                                        select\r\n                                        fullWidth\r\n                                        InputLabelProps={{ shrink: true }}\r\n                                        value={brand}\r\n                                        defaultValue={formik.values.brand}\r\n                                        onChange={handleBrandChange}\r\n                                        error={formik.touched.brand && Boolean(formik.errors.brand)}\r\n                                        helperText={formik.touched.brand && formik.errors.brand}\r\n                                        autoComplete=\"given-name\"\r\n                                    >\r\n                                        <MenuItem value={0}>Choose Brand</MenuItem>\r\n                                        {brandsList != undefined &&\r\n                                            brandsList?.brands?.map((option, index) => (\r\n                                                <MenuItem key={index} value={option.id}>\r\n                                                    {option.name}\r\n                                                </MenuItem>\r\n                                            ))}\r\n                                    </TextField>\r\n                                </>\r\n                            )}\r\n\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions sx={{pr: 3}}>\r\n\r\n                <AnimateButton>\r\n                                <Button variant=\"contained\" sx={{ my: 3, ml: 1 }} type=\"submit\" size=\"large\" disableElevation \r\n                                onClick={formik.handleSubmit}\r\n                                >\r\n                                    {categories.name !== '' ? 'Update ' : 'Add '}\r\n                                </Button>\r\n                            </AnimateButton>\r\n                            <AnimateButton>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    sx={{ my: 3, ml: 1, color: '#fff' }}\r\n                                    onClick={handleClose}\r\n                                    color=\"secondary\"\r\n                                    size=\"large\"\r\n                                >\r\n                                    Cancel\r\n                                </Button>\r\n                            </AnimateButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport CategoryTable from './component/categoryTable';\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    Divider,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    Typography,\r\n    Grid,\r\n    MenuItem,\r\n    Menu,\r\n    Pagination,\r\n    OutlinedInput,\r\n    TextField,\r\n    InputAdornment\r\n} from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\n\r\nimport { getAllBrands } from '../../../../redux/brand/actions';\r\nimport { getAllCategories } from '../../../../redux/categories/actions';\r\nimport DeleteCategoryDialog from './component/deleteCategoryDialog';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport AddUpdateCategory from './component/addUpdateCategory';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport HeadingCard from 'shared/Card/HeadingCard';\r\n\r\nconst Categories = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const categoryList = useSelector((state) => state.category.categoryList);\r\n    const user = useSelector((state) => state.auth.user);\r\n    const [brand, setBrand] = useState(0);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const [searchCategories, setSearchCategories] = useState('');\r\n    const [pageCategories, setPageCategories] = useState(1);\r\n    const [limitCategories, setLimitCategories] = useState(10);\r\n    const [addEditModal, setAddEditModal] = useState(false);\r\n    const [categories, setCategories] = useState({\r\n        name: '',\r\n        profitPercentage: '',\r\n        brandId: 0,\r\n        categoryId: 0\r\n    });\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleBrandChange = (event) => {\r\n        setBrand(event.target.value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllBrands({\r\n                search: search,\r\n                page: page,\r\n                limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n    const brandId = useSelector((state)=>state.auth.user.brandId);\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllCategories({\r\n                brandId: brandId,\r\n                search: searchCategories,\r\n                page: pageCategories,\r\n                limit: limitCategories\r\n            })\r\n        );\r\n    }, [searchCategories, pageCategories, limitCategories, brand]);\r\n\r\n    return (\r\n        <>\r\n            <AddUpdateCategory\r\n                open={addEditModal}\r\n                categories={categories}\r\n                setCategories={setCategories}\r\n                setOpen={setAddEditModal}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n            <DeleteCategoryDialog\r\n                categories={categories}\r\n                setCategories={setCategories}\r\n                deleteOpen={deleteOpen}\r\n                setDeleteOpen={setDeleteOpen}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n            <HeadingCard title=\"Category Management\" />\r\n            <MainCard\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={3}>\r\n                            <OutlinedInput\r\n                                id=\"input-search-list-style1\"\r\n                                placeholder=\"Search\"\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"start\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                                size=\"small\"\r\n                                onChange={(e) => {\r\n                                    setSearchCategories(e.target.value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        {/* <Grid item xs={3}>\r\n                            <TextField\r\n                                className=\"selectField\"\r\n                                id=\"outlined-select-budget\"\r\n                                select\r\n                                fullWidth\r\n                                label=\"Select Brand\"\r\n                                value={brand}\r\n                                // defaultValue={brand}\r\n                                onChange={handleBrandChange}\r\n                            >\r\n                                <MenuItem value=\"0\">Select</MenuItem>\r\n                                {brandsList != undefined &&\r\n                                    brandsList?.brands?.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.id}>\r\n                                            {option.name}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                            </TextField>\r\n                        </Grid> */}\r\n                        {/* <Grid item xs={6} textAlign=\"end\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddEditModal(true);\r\n                                    setCategories({ name: '', profitPercentage: '', brandId: 0, categoryId: 0 });\r\n                                }}\r\n                            >\r\n                                Add Category\r\n                            </Button>\r\n                        </Grid> */}\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                <CategoryTable\r\n                    open={addEditModal}\r\n                    categories={categories}\r\n                    setCategories={setCategories}\r\n                    setOpen={setAddEditModal}\r\n                    setDeleteOpen={setDeleteOpen}\r\n                    mainBrandId={brand}\r\n                    categoryList={categoryList}\r\n                    page={pageCategories}\r\n                    limit={limitCategories}\r\n                    search={searchCategories}\r\n                />\r\n\r\n                <>\r\n                    <Grid item xs={12} sx={{ p: 3 }}>\r\n                        <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                            <Grid item>\r\n                                <Pagination\r\n                                    color=\"primary\"\r\n                                    showFirstButton\r\n                                    showLastButton\r\n                                    page={pageCategories}\r\n                                    count={categoryList.totalPages}\r\n                                    onChange={(event, newPage) => {\r\n                                        setPageCategories(newPage);\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    size=\"large\"\r\n                                    sx={{ color: theme.palette.grey[900] }}\r\n                                    color=\"secondary\"\r\n                                    endIcon={<ExpandMoreRoundedIcon />}\r\n                                    onClick={handleClick}\r\n                                >\r\n                                    {limitCategories} Rows\r\n                                </Button>\r\n                                <Menu\r\n                                    id=\"menu-user-list-style1\"\r\n                                    anchorEl={anchorEl}\r\n                                    keepMounted\r\n                                    open={Boolean(anchorEl)}\r\n                                    onClose={handleCloseMenu}\r\n                                    variant=\"selectedMenu\"\r\n                                    anchorOrigin={{\r\n                                        vertical: 'top',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                    transformOrigin={{\r\n                                        vertical: 'bottom',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                >\r\n                                    <MenuItem\r\n                                        value={10}\r\n                                        onClick={(e) => {\r\n                                            setLimitCategories(e.target.value);\r\n                                            setPageCategories(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        10 Rows\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value={25}\r\n                                        onClick={(e) => {\r\n                                            setLimitCategories(e.target.value);\r\n                                            setPageCategories(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        25 Rows\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value={50}\r\n                                        onClick={(e) => {\r\n                                            setLimitCategories(e.target.value);\r\n                                            setPageCategories(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        50 Rows{' '}\r\n                                    </MenuItem>\r\n                                </Menu>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Categories;\r\n"],"sourceRoot":""}