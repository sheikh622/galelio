{"version":3,"sources":["views/pages/brandAdmin/nftManagement/component/quantitySelector.js","views/pages/brandAdmin/nftManagement/component/addNft.js","views/pages/brandAdmin/nftManagement/component/mainCard.js","views/pages/brandAdmin/nftManagement/component/editNftDialog.js","views/pages/brandAdmin/nftManagement/component/requestForMintDialog.js","views/pages/brandAdmin/nftManagement/component/deleteNftDialog.js","views/pages/brandAdmin/nftManagement/component/details.js","views/pages/brandAdmin/nftManagement/component/nftcard.js","views/pages/brandAdmin/nftManagement/index.js","assets/images/icons/image-upload.svg"],"names":["QuantitySelector","formik","fileArray","index","style","display","marginRight","Typography","variant","marginTop","TextField","type","className","id","value","quantity","onChange","e","target","setFieldValue","Transition","forwardRef","props","ref","Slide","direction","typeArray","label","AddNft","open","setOpen","data","search","page","limit","nftType","dispatch","useDispatch","user","useSelector","state","auth","useState","mintType","setMintType","uploadedImages","setUploadedImages","fieldDataArray","setFieldDataArray","setType","loader","setLoader","fileDataArray","setFileDataArray","wallettoggle","setWallettoggle","checked","setChecked","validationSchema","Yup","nftName","required","max","nftDescription","directBuyerAddress","min","nftPrice","typeError","useFormik","enableReinitialize","initialValues","images","onSubmit","values","map","fieldValue","fileNameArray","fieldName","isValid","length","toast","error","array","console","log","size","image","name","split","pop","parseInt","handleError","require","validate","addNft","categoryId","CategoryId","metaDataArray","price","description","currencyType","asset","walletAddress","contractAddress","handleClose","BrandId","hasFile","resetForm","handleDrop","useCallback","acceptedFiles","newUploadedImages","acceptedFile","useDropzone","accept","onDrop","getRootProps","getInputProps","isDragActive","isDragReject","isDragAccept","Dialog","fullScreen","maxWidth","TransitionComponent","keepMounted","DialogTitle","Divider","Grid","container","DialogActions","AnimateButton","Button","sx","my","ml","padding","md","lg","onClick","DialogContent","autoComplete","handleSubmit","mt","xs","fullWidth","handleChange","touched","Boolean","errors","helperText","pl","pr","select","event","option","MenuItem","float","Switch","placeholder","isEditable","proofRequired","spacing","item","handleFieldNameChange","handleFieldValueChange","Tooltip","title","placement","arrow","handleproof","IconButton","color","edge","splice","handleRemoveField","icon","closeFill","width","height","handleFileFieldNameChange","handleFileFieldValueChange","currentTarget","files","handleFileRemoveField","background","borderRadius","paddingBottom","paddingTop","clsx","Box","textAlign","component","alt","src","UploadImage","Link","underline","List","disablePadding","list","AnimatePresence","file","ListItem","motion","div","ListItemIcon","fileFill","ListItemText","primary","primaryTypographyProps","newFiles","handleRemoveFile","margin","justifyContent","m","CircularProgress","disableShrink","disableElevation","headerSX","mr","MainCard","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","others","theme","useTheme","Card","borderColor","palette","mode","default","CardHeader","action","CardContent","currencyTypeArray","EditNftDialog","nftInfo","setCurrencyType","isFile","File","perviousUploadedItems","filter","newUploadedItems","editNft","brandId","useEffect","multiline","rows","structuredClone","href","RequestForMintDialog","nftData","checkWallet","window","ethereum","request","method","response","_metamask","isUnlocked","connectWallet","SNACKBAR_OPEN","message","alertSeverity","utils","getAddress","handleMintRequest","erc20Address","BLOCKCHAIN","ERC20","provider","ethers","providers","Web3Provider","signer","getSigner","token","Contract","Erc20","abi","parseEther","allowance","Category","BrandCategories","approvalAmount","approvePrice","toString","approve","wait","requestNftForMinting","reason","DialogContentText","dark","DeleteNFTDialog","deleteNft","DetailsDialog","status","Brand","onClose","pt","ListItemButton","textTransform","CardMedia","minheight","maxHeight","overflow","cursor","NftCard","openRequestMint","setOpenRequestMint","editNftOpen","setEditNftOpen","deleteNftOpen","setDeleteNftOpen","DetailsNftOpen","setDetailsNftOpen","setImage","setNftInfo","NFTTokens","position","transform","transition","marginBottom","xl","CardActionArea","objectFit","p","textDecoration","Stack","alignItems","NFTMetaData","NFTMetaFiles","NftManagement","navigate","useNavigate","location","useLocation","setSearch","setPage","setLimit","addNftOpen","setAddNftOpen","setAnchorEl","getAllNft","nftList","nftReducer","fontWeight","marginLeft","nfts","undefined","gridSpacing","nft","sm","Pagination","showFirstButton","showLastButton","count","pages","newPage"],"mappings":"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","file":"static/js/53.52bb8100.chunk.js","sourcesContent":["import { Typography, TextField } from '@mui/material';\r\nconst QuantitySelector = ({ formik, fileArray, index }) => {\r\n    const handleChange = (value) => {\r\n        fileArray[index].quantity = value;\r\n        formik.setFieldValue('images', fileArray);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: 'flex', marginRight: '10px', }}>\r\n                <Typography variant='h3' style={{ marginTop: '5px',\r\n                 marginRight: '5px' }}>Quantity  </Typography>\r\n\r\n                <TextField\r\n              \r\n               variant='filled'\r\n                    type=\"number\"\r\n                    className=\"quantityField\"\r\n                    id=\"outlined-select-currency-native\"\r\n                    value={fileArray[index].quantity}\r\n                    onChange={(e) => {\r\n                        handleChange(e.target.value);\r\n                    }}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuantitySelector;\r\n","import { forwardRef, useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Tooltip from '@mui/material/Tooltip';\r\n\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    TextField,\r\n    Divider,\r\n    Box,\r\n    Link,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    IconButton,\r\n    MenuItem,\r\n    CircularProgress\r\n} from '@mui/material';\r\n\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Switch } from '@mui/material';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Icon } from '@iconify/react';\r\nimport { addNft } from 'redux/nftManagement/actions';\r\nimport { fData } from 'utils/formatNumber';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport QuantitySelector from './quantitySelector';\r\nimport fileFill from '@iconify-icons/eva/file-fill';\r\nimport closeFill from '@iconify-icons/eva/close-fill';\r\nimport UploadImage from 'assets/images/icons/image-upload.svg';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport clsx from 'clsx';\r\nimport { DataArraySharp } from '@mui/icons-material';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nconst typeArray = [\r\n    {\r\n        value: 'USDT',\r\n        label: 'USDT'\r\n    }\r\n];\r\n\r\nexport default function AddNft({ open, setOpen, data, search, page, limit, nftType }) {\r\n    const dispatch = useDispatch();\r\n    const user = useSelector((state) => state.auth.user);\r\n    const [mintType, setMintType] = useState('directMint');\r\n\r\n    const [uploadedImages, setUploadedImages] = useState([]);\r\n\r\n    const [fieldDataArray, setFieldDataArray] = useState([]);\r\n    const [type, setType] = useState('USDT');\r\n    const [loader, setLoader] = useState(false);\r\n    const [fileDataArray, setFileDataArray] = useState([]);\r\n    const [isDirectTransfer, setIsDirectTransfer] = useState(false);\r\n    const [wallettoggle, setWallettoggle] = useState(false);\r\n    const handleType = (event) => {\r\n        setType(event.target.value);\r\n    };\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    const handleError = (fieldDataArray, fileDataArray, values) => {\r\n        // console.log('im in handle error');\r\n        let isValid = true;\r\n        // console.log('fieldDataArray', fieldDataArray);\r\n        // console.log('fileDataArray', fileDataArray);\r\n        // console.log('values', values);\r\n\r\n        if (fieldDataArray.length == 0) {\r\n            isValid = false;\r\n            toast.error('Metadata is required');\r\n        }\r\n        if (checked == true) {\r\n            // isValid = false;\r\n            // toast.error('Wallet address is required');\r\n        }\r\n\r\n        // else  (fieldDataArray.length > 0) {\r\n\r\n        fieldDataArray.map((array) => {\r\n            if (array.fieldName == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata name cannot be empty`);\r\n            } else if (array.fieldValue == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata value cannot be empty`);\r\n            }\r\n        });\r\n        // }\r\n        if (fileDataArray.length == 0) {\r\n            isValid = false;\r\n            toast.error('Proof of Authenticity is required');\r\n        }\r\n\r\n        //    else (fileDataArray.length > 0) {\r\n        console.log('im here 2');\r\n        fileDataArray.map((array) => {\r\n            if (array.fieldName == '') {\r\n                isValid = false;\r\n                toast.error(`File name field is mandatory`);\r\n            } else if (array.fieldValue == null) {\r\n                isValid = false;\r\n                toast.error(`Attach proof of authenticity`);\r\n            } else if (array.fieldValue?.size / 1000000 > 5) {\r\n                isValid = false;\r\n                toast.error(`Please attach a less than 5 mb proof of authenticity`);\r\n            }\r\n        });\r\n        // }\r\n\r\n        if (values.images.length == 0) {\r\n            toast.error('Please upload a NFT Image');\r\n            isValid = false;\r\n        } else if (values.images[0].image.size / 1000000 > 5) {\r\n            toast.error('Please upload a image less than 5 mb');\r\n            isValid = false;\r\n        } else if (values.images[0].image.name.split('.').pop() !== 'jpg' && values.images[0].image.name.split('.').pop() !== 'png') {\r\n            toast.error('Upload the files with these extensions: jpg, png, gif');\r\n            isValid = false;\r\n        } else if (parseInt(values.images[0].quantity) <= 0) {\r\n            toast.error('NFT Quantity should be atleast one');\r\n            isValid = false;\r\n        }\r\n        console.log(values.images, 'values.images.length');\r\n\r\n        return isValid;\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        nftName: Yup.string().required('NFT Name is required!').max(60, 'NFT Name can not exceed 60 characters'),\r\n        // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT name'),\r\n        nftDescription: Yup.string()\r\n            .required('NFT Description is required!')\r\n            .max(1000, 'Invalid NFT description can not exceed 1000 characters'),\r\n        directBuyerAddress:\r\n            checked == true &&\r\n            Yup.string()\r\n                .required('Wallet address  is required!')\r\n                // .max(1000, 'Invalid NFT description can not exceed 1000 characters'),\r\n                .min(26, 'Minimum length 26 character ')\r\n                .max(42, 'Must be exactly 42 characters'),\r\n        // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT description'),\r\n        nftPrice: Yup.number()\r\n            .min(0.000000001, 'Price should be greater than zero')\r\n            .required('NFT Price is required')\r\n            .typeError('Invalid Price')\r\n        // image: Yup.mixed()\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            nftName: '',\r\n            nftDescription: '',\r\n            directBuyerAddress: '',\r\n            nftPrice: 0,\r\n            images: []\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            // console.log('values', values);\r\n\r\n            let fileArray = fileDataArray.map((data) => {\r\n                return data.fieldValue;\r\n            });\r\n            let fileNameArray = fileDataArray.map((data) => {\r\n                return data.fieldName;\r\n            });\r\n\r\n            let isValid = handleError(fieldDataArray, fileDataArray, values);\r\n            // console.log('isValid', isValid);\r\n\r\n            if (isValid == true) {\r\n                var WAValidator = require('wallet-address-validator');\r\n\r\n                var valid = WAValidator.validate(values.directBuyerAddress, 'ETH');\r\n                if (valid || values.directBuyerAddress == '') {\r\n                    //  toast.success(``);\r\n\r\n                    console.log('This is a valid wallet address');\r\n\r\n                    setLoader(true);\r\n                    dispatch(\r\n                        addNft({\r\n                            categoryId: data.CategoryId,\r\n                            mintType: mintType,\r\n                            metaDataArray: fieldDataArray,\r\n                            fileNameArray: fileNameArray,\r\n                            fileArray: fileArray,\r\n                            name: values.nftName,\r\n                            price: values.nftPrice,\r\n                            description: values.nftDescription,\r\n                            directBuyerAddress: values.directBuyerAddress ? values.directBuyerAddress : '',\r\n                            currencyType: type,\r\n                            quantity: values.images[0].quantity,\r\n                            asset: values.images[0].image,\r\n                            type: nftType,\r\n                            page: page,\r\n                            limit: limit,\r\n                            search: search,\r\n                            categoryId: data.CategoryId,\r\n                            requesterAddress: user.walletAddress,\r\n                            contractAddress: data.contractAddress,\r\n                            handleClose: handleClose,\r\n                            brandId: user.BrandId,\r\n                            isDirectTransfer: values.directBuyerAddress == '' ? false : true\r\n                        })\r\n                    );\r\n                } else toast.error(`Wallet Address invalid !`);\r\n                // console.log('Address INVALID');\r\n            }\r\n        }\r\n    });\r\n\r\n    const hasFile = formik.values.images.length > 0;\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n        setMintType('directMint');\r\n        setType('USDT');\r\n        setUploadedImages([]);\r\n        setFieldDataArray([]);\r\n        setLoader(false);\r\n        setFileDataArray([]);\r\n    };\r\n    const handleDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            let newUploadedImages = [...uploadedImages];\r\n            acceptedFiles.map(async (acceptedFile) => {\r\n                let data = { image: acceptedFile, quantity: 1 };\r\n                newUploadedImages = [...newUploadedImages, data];\r\n            });\r\n            formik.setFieldValue('images', newUploadedImages);\r\n            setUploadedImages(newUploadedImages);\r\n        },\r\n\r\n        [formik.setFieldValue, uploadedImages]\r\n    );\r\n    const handleRemoveFile = (file, index) => {\r\n        const newFiles = [...formik.values.images];\r\n        newFiles.splice(index, 1);\r\n        setUploadedImages(newFiles);\r\n        formik.setFieldValue('images', newFiles);\r\n    };\r\n\r\n    const { getRootProps, getInputProps, isDragActive, isDragReject, isDragAccept } = useDropzone({\r\n        accept: '.jpeg,.png,.jpg,.gif',\r\n        onDrop: handleDrop\r\n    });\r\n\r\n    const handleFieldNameChange = (value, index) => {\r\n        let array = [...fieldDataArray];\r\n        array[index].fieldName = value;\r\n        setFieldDataArray(array);\r\n    };\r\n    const handleFieldValueChange = (value, index) => {\r\n        let array = [...fieldDataArray];\r\n        array[index].fieldValue = value;\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleChange = (event, index) => {\r\n        // setChecked(event.target.checked);\r\n        let array = [...fieldDataArray];\r\n        array[index].isEditable = event.target?.checked;\r\n        setFieldDataArray(array);\r\n        // let array = [...fieldDataArray];\r\n        // [...checked] = value;\r\n        // setFieldDataArray(array);\r\n        // console.log(event.target.checked,'value==============?')\r\n    };\r\n    const handleproof = (event, index) => {\r\n        // setChecked(event.target.checked);\r\n        let array = [...fieldDataArray];\r\n        array[index].proofRequired = event.target?.checked;\r\n        setFieldDataArray(array);\r\n        // let array = [...fieldDataArray];\r\n        // [...checked] = value;\r\n        // setFieldDataArray(array);\r\n        // console.log(event.target.checked,'value==============?')\r\n    };\r\n\r\n    const walletadded = (event, index) => {\r\n        setWallettoggle(true);\r\n        setChecked(event.target.checked);\r\n\r\n        // let array = [...fieldDataArray];\r\n        // [...checked] = value;\r\n        // setFieldDataArray(array);\r\n        // console.log(event.target.checked,'value==============?')\r\n    };\r\n    const handleRemoveField = (index) => {\r\n        let array = [...fieldDataArray];\r\n        array.splice(index, 1);\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleFileFieldNameChange = (value, index) => {\r\n        let array = [...fileDataArray];\r\n        array[index].fieldName = value;\r\n        setFileDataArray(array);\r\n    };\r\n    const handleFileFieldValueChange = (value, index) => {\r\n        let array = [...fileDataArray];\r\n        array[index].fieldValue = value;\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    const handleFileRemoveField = (index) => {\r\n        let array = [...fileDataArray];\r\n        array.splice(index, 1);\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog fullScreen\r\n                open={open}\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                // className=\"brandDialog \"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\" className=\"adminname\">\r\n                    Add NFT\r\n                </DialogTitle>\r\n                <Divider />\r\n                <Grid container>\r\n                    <DialogActions>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                variant={mintType == 'directMint' ? 'contained' : 'outlined'}\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setMintType('directMint');\r\n                                }}\r\n                            >\r\n                                Direct minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant={mintType == 'lazyMint' ? 'contained' : 'outlined'}\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={() => {\r\n                                    setMintType('lazyMint');\r\n                                }}\r\n                            >\r\n                                Lazy minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </DialogActions>\r\n                </Grid>\r\n\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid container mt={1}>\r\n                            <Grid xs={4} md={4} lg={4}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftName\"\r\n                                    name=\"nftName\"\r\n                                    label=\"NFT Name\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftName && Boolean(formik.errors.nftName)}\r\n                                    helperText={formik.touched.nftName && formik.errors.nftName}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                           \r\n                            <Grid xs={4}  md={4} lg={4} pl={2} pr={2}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftPrice\"\r\n                                    name=\"nftPrice\"\r\n                                    label=\"NFT Price\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftPrice}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftPrice && Boolean(formik.errors.nftPrice)}\r\n                                    helperText={formik.touched.nftPrice && formik.errors.nftPrice}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid  xs={4} md={4} lg={4}  mt={1.5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    variant=\"filled\"\r\n                                    id=\"outlined-select-budget\"\r\n                                    select\r\n                                    fullWidth\r\n                                    value={type}\r\n                                    onChange={handleType}\r\n                                >\r\n                                    {typeArray.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Grid>\r\n                            <Grid xs={12} mt={1}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftDescription\"\r\n                                    name=\"nftDescription\"\r\n                                    label=\"NFT Description\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftDescription}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftDescription && Boolean(formik.errors.nftDescription)}\r\n                                    helperText={formik.touched.nftDescription && formik.errors.nftDescription}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            {mintType == 'directMint' && (\r\n                                <>\r\n                                    <Grid xs={12} mt={2} ml={-1}>\r\n                                        <Button className=\"walletbutton\" variant=\"text\" sx={{ float: 'left' }}>\r\n                                            Mint to wallet.\r\n                                        </Button>\r\n                                        <Switch\r\n                                            checked={checked}\r\n                                            onChange={(e) => walletadded(e)}\r\n\r\n                                            // inputProps={{ 'aria-label': 'controlled' }}\r\n                                        />\r\n                                    </Grid>\r\n                                    {wallettoggle == true && checked == true && (\r\n                                        <Grid xs={12} mt={1}>\r\n                                            <TextField\r\n                                                className=\"textfieldStyle\"\r\n                                                id=\"directBuyerAddress\"\r\n                                                name=\"directBuyerAddress\"\r\n                                                label=\"Wallet Address\"\r\n                                                placeholder=\"wallet Address\"\r\n                                                fullWidth\r\n                                                value={formik.values.directBuyerAddress}\r\n                                                onChange={formik.handleChange}\r\n                                                error={formik.touched.directBuyerAddress && Boolean(formik.errors.directBuyerAddress)}\r\n                                                helperText={formik.touched.directBuyerAddress && formik.errors.directBuyerAddress}\r\n                                                autoComplete=\"\"\r\n                                                variant=\"standard\"\r\n                                            />\r\n                                        </Grid>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                            <Grid xs={12} mt={2}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'left', padding: { md: ' 6px 38px', lg: '6px 38px' } }}\r\n                                    onClick={() => {\r\n                                        setFieldDataArray([\r\n                                            ...fieldDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: '',\r\n                                                isEditable: false,\r\n                                                proofRequired: false\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add Metadata\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {fieldDataArray.length != 0 && (\r\n                            <>\r\n                                <Grid container spacing={4} sx={{ mt: 1 }}>\r\n                                    {fieldDataArray.map((data, index) => (\r\n                                        <>\r\n                                            <Grid item xs={5} md={3}>\r\n                                                <TextField\r\n                                                    id=\"field_name\"\r\n                                                    className=\"textfieldStyle\"\r\n                                                    name=\"field_name\"\r\n                                                    label=\"Metadata Name\"\r\n                                                    value={data.fieldName}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldNameChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={5} md={3}>\r\n                                                <TextField\r\n                                                    className=\"textfieldStyle\"\r\n                                                    id=\"field_value\"\r\n                                                    name=\"field_value\"\r\n                                                    label=\"Metadata Value\"\r\n                                                    value={data.fieldValue}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldValueChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2} md={3}>\r\n                                              \r\n                                                <Tooltip className=\"fontsize\" title=\"Allow update by NFT owner\" placement=\"top\" arrow>\r\n                                                    <Switch\r\n                                                        value={data?.isEditable}\r\n                                                        checked={data?.isEditable}\r\n                                                        onChange={(e) => handleChange(e, index)}\r\n                                                        // inputProps={{ 'aria-label': 'controlled' }}\r\n                                                    />\r\n                                                </Tooltip>\r\n                                                {data?.isEditable == true && (\r\n                                                    <Tooltip\r\n                                                        className=\"fontsize\"\r\n                                                        title=\"Accept proof on update of metadata\"\r\n                                                        placement=\"top\"\r\n                                                        arrow\r\n                                                    >\r\n                                                        <Switch\r\n                                                            value={data.proofRequired}\r\n                                                            checked={data.proofRequired}\r\n                                                            onChange={(e) => handleproof(e, index)}\r\n                                                            // inputProps={{ 'aria-label': 'controlled' }}\r\n                                                        />\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                                <IconButton\r\n                                                color=\"error\"\r\n                                                edge=\"end\"\r\n                                                size=\"small\"\r\n                                                onClick={() => {\r\n                                                    handleRemoveField(index);\r\n                                                }}\r\n                                            >\r\n                                                <Icon icon={closeFill} width={28} height={28} />\r\n                                            </IconButton>\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2} md={3}></Grid>\r\n                                        </>\r\n                                    ))}\r\n                                </Grid>\r\n                            </>\r\n                        )}\r\n                        <Grid container>\r\n                            <Grid xs={12} mt={2}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'left' }}\r\n                                    onClick={() => {\r\n                                        setFileDataArray([\r\n                                            ...fileDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: null\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add Authenticity Files\r\n                                </Button>\r\n                            </Grid>\r\n                            {fileDataArray.length != 0 && (\r\n                                <>\r\n                                    <Grid container spacing={2} mt={2}>\r\n                                        {fileDataArray.map((data, index) => (\r\n                                            <>\r\n                                                <Grid item xs={3}>\r\n                                                    <TextField\r\n                                                        id=\"field_name\"\r\n                                                        name=\"field_name\"\r\n                                                        label=\"File Name\"\r\n                                                        value={data.fieldName}\r\n                                                        onChange={(e) => {\r\n                                                            handleFileFieldNameChange(e.target.value, index);\r\n                                                        }}\r\n                                                        variant=\"standard\"\r\n                                                        fullWidth\r\n                                                    />\r\n                                                </Grid>\r\n\r\n                                                <Grid item mt={3} xs={3}>\r\n                                                    <input\r\n                                                        type=\"file\"\r\n                                                        id=\"avatar\"\r\n                                                        name=\"avatar\"\r\n                                                        accept=\"image/*,.pdf\"\r\n                                                        onChange={(event) => {\r\n                                                            handleFileFieldValueChange(event.currentTarget.files[0], index);\r\n                                                        }}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} mt={2}>\r\n                                                    <IconButton\r\n                                                        color=\"error\"\r\n                                                        edge=\"end\"\r\n                                                        size=\"small\"\r\n                                                        onClick={() => {\r\n                                                            handleFileRemoveField(index);\r\n                                                        }}\r\n                                                    >\r\n                                                        <Icon icon={closeFill} width={28} height={28} />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                                <Grid item mt={3} xs={3}></Grid>\r\n                                            </>\r\n                                        ))}\r\n                                    </Grid>\r\n                                </>\r\n                            )}\r\n                        </Grid>\r\n\r\n                        {uploadedImages.length !== 1 && (\r\n                            <Grid\r\n                                sx={{ background: '#c5cbe9', borderRadius: '5px', paddingBottom: '2rem', paddingTop: '2rem' }}\r\n                                item\r\n                                lg={12}\r\n                                mt={10}\r\n                            >\r\n                                <div className={clsx('dropZoneContainer', 'xyz')}>\r\n                                    <div\r\n                                        className={clsx('dropZone', {\r\n                                            isDragActive: isDragActive,\r\n                                            isDragAccept: isDragAccept,\r\n                                            isDragReject: isDragReject\r\n                                        })}\r\n                                        {...getRootProps()}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n\r\n                                        <Grid container direction=\"column\">\r\n                                            <Box\r\n                                                textAlign=\"center\"\r\n                                                component=\"img\"\r\n                                                alt=\"Select File\"\r\n                                                src={UploadImage}\r\n                                                sx={{ height: 60 }}\r\n                                            />\r\n\r\n                                            <Box mt={4} textAlign=\"center\" sx={{ ml: { md: 0 } }}>\r\n                                                <Typography variant=\"subtitle\" sx={{ color: 'grey', textAlign: 'center' }}>\r\n                                                    Drop your image or&nbsp;\r\n                                                    <Link underline=\"always\">browse</Link>.&nbsp;\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </div>\r\n                            </Grid>\r\n                        )}\r\n\r\n                        <Grid item lg={12} mt={3}>\r\n                            <List disablePadding className={clsx({ list: hasFile })} sx={{ mt: 3 }}>\r\n                                <AnimatePresence>\r\n                                    {formik.values.images &&\r\n                                        formik.values.images.map((file, index) => (\r\n                                            <ListItem key={file.image.name} component={motion.div} className=\"listItem\">\r\n                                                <ListItemIcon>\r\n                                                    <Icon icon={fileFill} width={32} height={32} />\r\n                                                </ListItemIcon>\r\n                                                <ListItemText\r\n                                                    primary={file.image.name ? file.image.name : ''}\r\n                                                    primaryTypographyProps={{\r\n                                                        variant: 'h3'\r\n                                                    }}\r\n                                                />\r\n                                                {mintType == 'directMint' && (\r\n                                                    <QuantitySelector formik={formik} fileArray={formik.values.images} index={index} />\r\n                                                )}\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => handleRemoveFile(file.image, index)}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                            </ListItem>\r\n                                        ))}\r\n                                </AnimatePresence>\r\n                            </List>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n                <Divider />\r\n                <Grid container>\r\n                    <DialogActions>\r\n                        {loader ? (\r\n                            <DialogActions sx={{ display: 'block', margin: '10px 5px 0px 5px' }}>\r\n                                <Grid container justifyContent=\"center\" sx={{ width: '50%', m: '15px auto ' }}>\r\n                                    <Grid item>\r\n                                        <CircularProgress disableShrink size={'4rem'} />\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                                <Button\r\n                                    className=\"buttons\"\r\n                                    variant=\"Text\"\r\n                                    sx={{ width: '100%', margin: '0px 0px 10px 0px', color: '#2196f3' }}\r\n                                    size=\"large\"\r\n                                >\r\n                                    NFT is being Created...\r\n                                </Button>\r\n                            </DialogActions>\r\n                        ) : (\r\n                            <>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                        onClick={() => {\r\n                                            formik.handleSubmit();\r\n                                        }}\r\n                                        className=\"buttons\"\r\n                                        size=\"large\"\r\n                                        disableElevation\r\n                                    >\r\n                                        Add\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        className=\"buttons\"\r\n                                        size=\"large\"\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                        onClick={handleClose}\r\n                                        color=\"error\"\r\n                                        disableElevation\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </>\r\n                        )}\r\n                    </DialogActions>\r\n                </Grid>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.mode === 'dark' ? theme.palette.background.default\r\n                     : \r\n                    theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow\r\n                            ? shadow ||\r\n                              (theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' :\r\n                               '0 2px 14px 0 rgb(32 40 45 / 8%)')\r\n                            : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} \r\n                    action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","import { forwardRef, useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    TextField,\r\n    Divider,\r\n    Box,\r\n    Tooltip,\r\n    Link,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    IconButton,\r\n    MenuItem\r\n} from '@mui/material';\r\nimport { Switch } from '@mui/material';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Icon } from '@iconify/react';\r\nimport { editNft } from 'redux/nftManagement/actions';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport fileFill from '@iconify-icons/eva/file-fill';\r\nimport closeFill from '@iconify-icons/eva/close-fill';\r\nimport QuantitySelector from './quantitySelector';\r\nimport UploadImage from 'assets/images/icons/image-upload.svg';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport clsx from 'clsx';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nconst currencyTypeArray = [\r\n    {\r\n        value: 'USDT',\r\n        label: 'USDT'\r\n    }\r\n];\r\n\r\nexport default function EditNftDialog({ nftInfo, categoryId, type, search, page, limit, loader, setLoader, open, setOpen }) {\r\n    const dispatch = useDispatch();\r\n    console.log(nftInfo, 'nftInfo');\r\n    const [mintType, setMintType] = useState('directMint');\r\n    const [currencyType, setCurrencyType] = useState('USDT');\r\n    const [fieldDataArray, setFieldDataArray] = useState([]);\r\n    const [fileDataArray, setFileDataArray] = useState([]);\r\n    const [uploadedImages, setUploadedImages] = useState([]);\r\n    const user = useSelector((state) => state.auth.user);\r\n    const handleCurrencyType = (event) => {\r\n        setCurrencyType(event.target.value);\r\n    };\r\n    const [checked, setChecked] = useState(true);\r\n    // const handleChange = (event) => {\r\n    //     setChecked(event.target.checked);\r\n    // };\r\n\r\n    const handleError = (fieldDataArray, fileDataArray, values) => {\r\n        console.log('im in handle error');\r\n        let isValid = true;\r\n        // console.log('fieldDataArray', fieldDataArray);\r\n        // console.log('fileDataArray', fileDataArray);\r\n        // console.log('values', values);\r\n\r\n        if (fieldDataArray.length == 0) {\r\n            isValid = false;\r\n            toast.error('Metadata is required');\r\n        }\r\n\r\n        // else  (fieldDataArray.length > 0) {\r\n\r\n        fieldDataArray.map((array) => {\r\n            if (array.fieldName == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata name cannot be empty`);\r\n            } else if (array.fieldValue == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata value cannot be empty`);\r\n            }\r\n        });\r\n        // }\r\n        if (fileDataArray.length == 0) {\r\n            isValid = false;\r\n            toast.error('Proof of Authenticity is required');\r\n        }\r\n\r\n        //    else (fileDataArray.length > 0) {\r\n        console.log('im here 2');\r\n        fileDataArray.map((array) => {\r\n            if (array.fieldName == '') {\r\n                isValid = false;\r\n                toast.error(`File name field is mandatory`);\r\n            } else if (array.fieldValue == null) {\r\n                isValid = false;\r\n                toast.error(`Attach proof of authenticity`);\r\n            } else if (array.fieldValue?.size / 1000000 > 5) {\r\n                isValid = false;\r\n                toast.error(`Please attach a less than 5 mb proof of authenticity`);\r\n            }\r\n        });\r\n        // }\r\n\r\n        if (values.images.length == 0) {\r\n            toast.error('Please upload a NFT Image');\r\n            isValid = false;\r\n        } else if (values.images[0].image.size / 1000000 > 5) {\r\n            toast.error('Please upload a image less than 5 mb');\r\n            isValid = false;\r\n        } else if (values.images[0].image.name.split('.').pop() !== 'jpg' && values.images[0].image.name.split('.').pop() !== 'png') {\r\n            toast.error('Upload the files with these extensions: jpg, png, gif');\r\n            isValid = false;\r\n        } else if (parseInt(values.images[0].quantity) <= 0) {\r\n            toast.error('NFT Quantity should be atleast one');\r\n            isValid = false;\r\n        }\r\n\r\n        return isValid;\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        nftName: Yup.string().required('NFT Name is required!').max(60, 'NFT Name can not exceed 60 characters'),\r\n        // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT name'),\r\n        nftDescription: Yup.string()\r\n            .required('NFT Description is required!')\r\n            .max(1000, 'Invalid NFT description can not exceed 1000 characters'),\r\n        // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT description'),\r\n        nftPrice: Yup.number()\r\n            .min(0.000001, 'Price should not less than zero')\r\n            .required('NFT Price is required')\r\n            .typeError('Invalid Price'),\r\n        images: Yup.mixed()\r\n        // .when(['isUpdate'], {\r\n        //     is: true,\r\n        //     then: Yup.mixed(),\r\n        //     otherwise: Yup.mixed().required('Image is required')\r\n        // })\r\n\r\n        // .test('image size',\r\n        //  'this image is too large', (value) => !value || (value && value.size <= 1_000_000))\r\n    });\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: nftInfo,\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            let file = values.images[0].image;\r\n            let isFile = file instanceof File;\r\n\r\n            let perviousUploadedItems = fileDataArray.filter((data) => {\r\n                if (typeof data.fieldValue === 'string') return data;\r\n            });\r\n\r\n            let newUploadedItems = fileDataArray.filter((data) => {\r\n                if (typeof data.fieldValue !== 'string') return data;\r\n            });\r\n\r\n            let fileArray = newUploadedItems.map((data) => {\r\n                return data.fieldValue;\r\n            });\r\n            let fileNameArray = newUploadedItems.map((data) => {\r\n                return data.fieldName;\r\n            });\r\n\r\n            let isValid = handleError(fieldDataArray, fileDataArray, values, isFile);\r\n\r\n            if (isValid) {\r\n                dispatch(\r\n                    editNft({\r\n                        id: nftInfo.id,\r\n                        name: values.nftName,\r\n                        price: values.nftPrice,\r\n                        description: values.nftDescription,\r\n                        quantity: values.images[0].quantity,\r\n                        asset: isFile ? values.images[0].image : null,\r\n                        isFile: isFile,\r\n                        currencyType: currencyType,\r\n                        mintType: mintType,\r\n                        metaDataArray: fieldDataArray,\r\n                        fileNameArray: fileNameArray,\r\n                        fileArray: fileArray,\r\n                        perviousUploadedItems: perviousUploadedItems,\r\n                        type: type,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        categoryId: categoryId,\r\n                        brandId: nftInfo.brandId,\r\n                        handleClose: handleClose\r\n                        // brandId: user.BrandId\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n\r\n    const hasFile = formik.values.images.length > 0;\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n    const handleDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            let newUploadedImages = [...uploadedImages];\r\n            acceptedFiles.map(async (acceptedFile) => {\r\n                let data = { image: acceptedFile, quantity: 1 };\r\n                newUploadedImages = [...newUploadedImages, data];\r\n            });\r\n            formik.setFieldValue('images', newUploadedImages);\r\n            setUploadedImages(newUploadedImages);\r\n        },\r\n\r\n        [formik.setFieldValue, uploadedImages]\r\n    );\r\n    const handleRemoveFile = (index) => {\r\n        const newFiles = [...formik.values.images];\r\n        newFiles.splice(index, 1);\r\n        setUploadedImages(newFiles);\r\n        formik.setFieldValue('images', newFiles);\r\n    };\r\n\r\n    const { getRootProps, getInputProps, isDragActive, isDragReject, isDragAccept } = useDropzone({\r\n        accept: '.jpeg,.png,.jpg,.gif',\r\n        onDrop: handleDrop\r\n    });\r\n    const handleFieldNameChange = (value, index) => {\r\n        let array = structuredClone(fieldDataArray);\r\n        // let array = [...fieldDataArray];\r\n        array[index].fieldName = value;\r\n        setFieldDataArray(array);\r\n    };\r\n    const handleFieldValueChange = (value, index) => {\r\n        let array = structuredClone(fieldDataArray);\r\n        // let array = [...fieldDataArray];\r\n        array[index].fieldValue = value;\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleChange = (event, index) => {\r\n        // setChecked(event.target.checked);\r\n        let array = structuredClone(fieldDataArray);\r\n        // let array = [...fieldDataArray];\r\n        array[index].isEditable = event.target?.checked;\r\n        setFieldDataArray(array);\r\n        // let array = [...fieldDataArray];\r\n        // [...checked] = value;\r\n        // setFieldDataArray(array);\r\n        // console.log(event.target.checked,'value==============?')\r\n    };\r\n    const handleproof = (event, index) => {\r\n        let array = structuredClone(fieldDataArray);\r\n        // setChecked(event.target.checked);\r\n        // let array = [...fieldDataArray];\r\n        array[index].proofRequired = event.target?.checked;\r\n        setFieldDataArray(array);\r\n        // let array = [...fieldDataArray];\r\n        // [...checked] = value;\r\n        // setFieldDataArray(array);\r\n        // console.log(event.target.checked,'value==============?')\r\n    };\r\n\r\n    const handleRemoveField = (index) => {\r\n        let array = structuredClone([...fieldDataArray]);\r\n        array.splice(index, 1);\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleFileFieldNameChange = (value, index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array[index].fieldName = value;\r\n        setFileDataArray(array);\r\n    };\r\n    const handleFileFieldValueChange = (value, index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array[index].fieldValue = value;\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    const handleFileRemoveField = (index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array.splice(index, 1);\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setFieldDataArray(nftInfo.fieldDataArray);\r\n        setFileDataArray(nftInfo.fileDataArray);\r\n        setMintType(nftInfo.mintType);\r\n        setCurrencyType(nftInfo.currencyType);\r\n        setUploadedImages(nftInfo.images);\r\n    }, [nftInfo]);\r\n\r\n    useEffect(() => {}, [fileDataArray]);\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                fullScreen\r\n                open={open}\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                // className=\"brandDialog Nftdialog\"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1 \" className=\"adminname\">\r\n                    Edit NFT\r\n                </DialogTitle>\r\n                <Divider />\r\n                <Grid container>\r\n                    {/* <DialogActions>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                variant={mintType == 'directMint' ? 'contained' : 'outlined'}\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setMintType('directMint');\r\n                                }}\r\n                            >\r\n                                Direct minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant={mintType == 'lazyMint' ? 'contained' : 'outlined'}\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={() => {\r\n                                    setMintType('lazyMint');\r\n                                }}\r\n                            >\r\n                                Lazy minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </DialogActions> */}\r\n                </Grid>\r\n\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid container mt={1}>\r\n                            <Grid xs={4} md={4} lg={4}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftName\"\r\n                                    name=\"nftName\"\r\n                                    label=\"NFT Name\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftName && Boolean(formik.errors.nftName)}\r\n                                    helperText={formik.touched.nftName && formik.errors.nftName}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid xs={4} md={4} lg={4} pl={2} pr={2}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftPrice\"\r\n                                    name=\"nftPrice\"\r\n                                    label=\"NFT Price\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftPrice}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftPrice && Boolean(formik.errors.nftPrice)}\r\n                                    helperText={formik.touched.nftPrice && formik.errors.nftPrice}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} md={4} lg={4} mt={1.5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"outlined-select-budget\"\r\n                                    select\r\n                                    fullWidth\r\n                                    variant=\"filled\"\r\n                                    value={currencyType}\r\n                                    onChange={handleCurrencyType}\r\n                                >\r\n                                    {currencyTypeArray.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Grid>\r\n                            <Grid xs={12} md={12} lg={12} mt={2}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    multiline\r\n                                    rows={2}\r\n                                    id=\"nftDescription\"\r\n                                    name=\"nftDescription\"\r\n                                    label=\"NFT Description\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftDescription}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftDescription && Boolean(formik.errors.nftDescription)}\r\n                                    helperText={formik.touched.nftDescription && formik.errors.nftDescription}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} mt={2}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'left', padding: { md: ' 6px 38px', lg: '6px 38px' } }}\r\n                                    onClick={() => {\r\n                                        setFieldDataArray([\r\n                                            ...fieldDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: '',\r\n                                                isEditable: false,\r\n                                                proofRequired: false\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add more fields\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {fieldDataArray.length != 0 && (\r\n                            <>\r\n                                <Grid container spacing={4} mt={1}>\r\n                                    {fieldDataArray.map((data, index) => (\r\n                                        <>\r\n                                            <Grid item xs={5} md={3}>\r\n                                                <TextField\r\n                                                    id=\"field_name\"\r\n                                                    className=\"textfieldStyle\"\r\n                                                    name=\"field_name\"\r\n                                                    label=\"Metadata Name\"\r\n                                                    value={data.fieldName}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldNameChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={5} md={3}>\r\n                                                <TextField\r\n                                                    className=\"textfieldStyle\"\r\n                                                    id=\"field_value\"\r\n                                                    name=\"field_value\"\r\n                                                    label=\"Metadata Value\"\r\n                                                    value={data.fieldValue}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldValueChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2} md={3}>\r\n                                                <Tooltip className=\"fontsize\" title=\"Allow update by NFT owner\" placement=\"top\" arrow>\r\n                                                    <Switch\r\n                                                        value={data?.isEditable}\r\n                                                        checked={data?.isEditable}\r\n                                                        onChange={(e) => handleChange(e, index)}\r\n                                                        // inputProps={{ 'aria-label': 'controlled' }}\r\n                                                    />\r\n                                                </Tooltip>\r\n                                                {data?.isEditable == true && (\r\n                                                    <Tooltip\r\n                                                        className=\"fontsize\"\r\n                                                        title=\"Accept proof on update of metadata\"\r\n                                                        placement=\"top\"\r\n                                                        arrow\r\n                                                    >\r\n                                                        <Switch\r\n                                                            value={data.proofRequired}\r\n                                                            checked={data.proofRequired}\r\n                                                            onChange={(e) => handleproof(e, index)}\r\n                                                            // inputProps={{ 'aria-label': 'controlled' }}\r\n                                                        />\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        handleRemoveField(index);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2} md={3}></Grid>\r\n                                        </>\r\n                                    ))}\r\n                                </Grid>\r\n                            </>\r\n                        )}\r\n                        <Grid container>\r\n                            <Grid xs={12} mt={2} pr={3}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'left' }}\r\n                                    onClick={() => {\r\n                                        setFileDataArray([\r\n                                            ...fileDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: null\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add Authenticity Files\r\n                                </Button>\r\n                            </Grid>\r\n                            {fileDataArray?.length != 0 && (\r\n                                <>\r\n                                    <Grid container spacing={2} mt={1}>\r\n                                        {fileDataArray?.map((data, index) => (\r\n                                            <>\r\n                                                <Grid item xs={3}>\r\n                                                    <TextField\r\n                                                        id=\"field_name\"\r\n                                                        name=\"field_name\"\r\n                                                        label=\"File Name\"\r\n                                                        value={data.fieldName}\r\n                                                        onChange={(e) => {\r\n                                                            handleFileFieldNameChange(e.target.value, index);\r\n                                                        }}\r\n                                                        variant=\"standard\"\r\n                                                        fullWidth\r\n                                                    />\r\n                                                </Grid>\r\n\r\n                                                {data?.fieldValue?.length > 1 ? (\r\n                                                    <Grid item xs={3} mt={3.5} className=\"encap\" sx={{}}>\r\n                                                        <a target=\"_blank\" href={data?.fieldValue} style={{ color: '#4198e3' }}>\r\n                                                            {data?.fieldValue}\r\n                                                        </a>\r\n                                                    </Grid>\r\n                                                ) : (\r\n                                                    <Grid item xs={3} mt={3}>\r\n                                                        <input\r\n                                                            style={{ display: 'inlineBlock' }}\r\n                                                            type=\"file\"\r\n                                                            id=\"avatar\"\r\n                                                            name=\"avatar\"\r\n                                                            accept=\"image/*,.pdf\"\r\n                                                            // value={data?.fieldName}\r\n                                                            onChange={(event) => {\r\n                                                                handleFileFieldValueChange(event.currentTarget.files[0], index);\r\n                                                            }}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                )}\r\n\r\n                                                {/* <div style={{marginTop:\"3%\", marginLeft:\"2%\"}}><b>Previous file: </b><a target=\"_blank\" href={data.fieldValue}>{data.fieldValue}</a></div> */}\r\n                                                <Grid item xs={2} mt={2}>\r\n                                                    <IconButton\r\n                                                        color=\"error\"\r\n                                                        edge=\"end\"\r\n                                                        size=\"small\"\r\n                                                        onClick={() => {\r\n                                                            handleFileRemoveField(index);\r\n                                                        }}\r\n                                                    >\r\n                                                        <Icon icon={closeFill} width={28} height={28} />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                                <Grid item xs={2} mt={2} md={3}></Grid>\r\n                                            </>\r\n                                        ))}\r\n                                    </Grid>\r\n                                </>\r\n                            )}\r\n                        </Grid>\r\n\r\n                        {uploadedImages.length !== 1 && (\r\n                            <Grid\r\n                                sx={{ background: '#c5cbe9', borderRadius: '5px', paddingBottom: '2rem', paddingTop: '2rem' }}\r\n                                item\r\n                                lg={12}\r\n                                mt={10}\r\n                            >\r\n                                <div className={clsx('dropZoneContainer', 'xyz')}>\r\n                                    <div\r\n                                        className={clsx('dropZone', {\r\n                                            isDragActive: isDragActive,\r\n                                            isDragAccept: isDragAccept,\r\n                                            isDragReject: isDragReject\r\n                                        })}\r\n                                        {...getRootProps()}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n\r\n                                        <Grid container direction=\"column\">\r\n                                            <Box\r\n                                                textAlign=\"center\"\r\n                                                component=\"img\"\r\n                                                alt=\"Select File\"\r\n                                                src={UploadImage}\r\n                                                sx={{ height: 60 }}\r\n                                            />\r\n\r\n                                            <Box mt={4} textAlign=\"center\" sx={{ ml: { md: 0 } }}>\r\n                                                <Typography variant=\"subtitle\" sx={{ color: 'grey', textAlign: 'center' }}>\r\n                                                    Drop your image or&nbsp;\r\n                                                    <Link underline=\"always\">browse</Link>.&nbsp;\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </div>\r\n                            </Grid>\r\n                        )}\r\n\r\n                        <List disablePadding className={clsx({ list: hasFile })} sx={{ mt: 3 }}>\r\n                            <AnimatePresence>\r\n                                {formik.values.images &&\r\n                                    formik.values.images.map((file, index) => (\r\n                                        <ListItem key={file.image.name} component={motion.div} className=\"listItem\">\r\n                                            <ListItemIcon>\r\n                                                <Icon icon={fileFill} width={32} height={32} />\r\n                                            </ListItemIcon>\r\n\r\n                                            <ListItemText\r\n                                                className=\"encap\"\r\n                                                primary={file.image.name ? file.image.name : ''}\r\n                                                // secondary={fData(file.image.size) ? fData(file.image.size) : ''}\r\n                                                // primaryTypographyProps={{\r\n                                                //     variant: 'body2'\r\n                                                // }}\r\n                                            />\r\n                                            {mintType == 'directMint' && (\r\n                                                <QuantitySelector formik={formik} fileArray={formik.values.images} index={index} />\r\n                                            )}\r\n\r\n                                            <IconButton\r\n                                                color=\"error\"\r\n                                                edge=\"end\"\r\n                                                size=\"small\"\r\n                                                onClick={() => handleRemoveFile(file.image, index)}\r\n                                            >\r\n                                                <Icon icon={closeFill} width={28} height={28} />\r\n                                            </IconButton>\r\n                                        </ListItem>\r\n                                    ))}\r\n                            </AnimatePresence>\r\n                        </List>\r\n                    </form>\r\n                </DialogContent>\r\n                <Divider />\r\n                <Grid container>\r\n                    <DialogActions>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={() => {\r\n                                    formik.handleSubmit();\r\n                                }}\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                disableElevation\r\n                            >\r\n                                Edit\r\n                            </Button>\r\n                        </AnimateButton>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={handleClose}\r\n                                color=\"error\"\r\n                                disableElevation\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </DialogActions>\r\n                </Grid>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    DialogContentText,\r\n    Typography,\r\n    CircularProgress\r\n} from '@mui/material';\r\nimport { requestNftForMinting } from 'redux/nftManagement/actions';\r\nimport Erc20 from '../../../../../contractAbi/Erc20.json';\r\nimport { ethers, utils } from 'ethers';\r\nimport BLOCKCHAIN from '../../../../../constants';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { SNACKBAR_OPEN } from 'store/actions';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function RequestForMintDialog({ open, setOpen, page, limit, search, type, nftData, categoryId }) {\r\n    const theme = useTheme();\r\n    const [loader, setLoader] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setLoader(false);\r\n    };\r\n    const user = useSelector((state) => state.auth.user);\r\n    // console.log('nftData', nftData.Category.BrandCategories[0].contractAddress);\r\n\r\n    const checkWallet = async () => {\r\n        const response = await window?.ethereum?.request({ method: 'eth_requestAccounts' });\r\n        let connectWallet = await ethereum._metamask.isUnlocked();\r\n\r\n        if ((window.ethereum && connectWallet) == false) {\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'No crypto wallet found. Please connect one',\r\n                variant: 'alert',\r\n                alertSeverity: 'info'\r\n            });\r\n            console.log('No crypto wallet found. Please install it.');\r\n            // toast.error('No crypto wallet found. Please install it.');\r\n            setOpen(false);\r\n            setLoader(false);\r\n        }\r\n        \r\n        // else if (window?.ethereum?.networkVersion !== '5') {\r\n        //     dispatch({\r\n        //         type: SNACKBAR_OPEN,\r\n        //         open: true,\r\n        //         message: 'Please change your Chain ID to Goerli',\r\n        //         variant: 'alert',\r\n        //         alertSeverity: 'info'\r\n        //     });\r\n        //     console.log('Please change your Chain ID to Goerli');\r\n        //     setOpen(false);\r\n        //     setLoader(false);\r\n        // }\r\n        \r\n        else if (utils?.getAddress(response[0]) !== user.walletAddress) {\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'Please connect your registered Wallet Address',\r\n                variant: 'alert',\r\n                alertSeverity: 'info'\r\n            });\r\n            console.log('Please connect your registered Wallet Address');\r\n            setOpen(false);\r\n            setLoader(false);\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const handleMintRequest = async () => {\r\n        if (await checkWallet()) {\r\n            try {\r\n                setLoader(true);\r\n                let erc20Address = BLOCKCHAIN.ERC20;\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                const signer = provider.getSigner();\r\n                    \r\n                const token = new ethers.Contract(erc20Address, Erc20.abi, signer);\r\n\r\n                // let data = await (await token.approve(nftData.Category.BrandCategories[0].contractAddress,\"100000000000000000000000000000000000000\")).wait();\r\n                // let balance= await token.balanceOf(user.walletAddress);\r\n                // if(balance> )\r\n                 let price= ethers.utils.parseEther(\"10000000000000000000000\");\r\n                let approvalAmount = await token.allowance(user.walletAddress,nftData.Category.BrandCategories[0].contractAddress);\r\n                console.log(\"hy\")\r\n            //    console.log(balance.toString())\r\n               let approvePrice = ethers.utils.parseEther('10000000000000000000');\r\n               if (approvalAmount.toString() < price.toString()) {\r\n                   await (await token.approve(nftData.Category.BrandCategories[0].contractAddress, approvePrice)).wait();\r\n               }0\r\n\r\n                await dispatch(\r\n                    requestNftForMinting({\r\n                        id: nftData.id,\r\n                        categoryId: categoryId,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        type: type,\r\n                        brandId: user.BrandId,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n                setLoader(false);\r\n                // toast.success(\"Please wait for confirmation Notification !\");\r\n            } catch (error) {\r\n                console.log('error', error);\r\n                toast.error(error.reason);\r\n                setOpen(false);\r\n                setLoader(false);\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Request Admin for mint</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to request Admin to mint this NFT?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    {loader ? (\r\n                        <CircularProgress />\r\n                    ) : (\r\n                        <>\r\n                            <Button\r\n                                sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                                onClick={handleClose}\r\n                                color=\"secondary\"\r\n                            >\r\n                                No\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    handleMintRequest();\r\n                                }}\r\n                            >\r\n                                Yes\r\n                            </Button>\r\n                        </>\r\n                    )}\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteNft } from 'redux/nftManagement/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteNFTDialog({ nftInfo, categoryId, type, search, page, limit, loader, setLoader, open, setOpen }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const user = useSelector((state) => state.auth.user);\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\" className=\"statusHeading\">Delete Brand Admin</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\" className=\"statustypo\">\r\n                            Are you sure you want to delete this Admin?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                        className='buttonSize' size='large'\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        className='buttonSize' size='large'\r\n                     \r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteNft({\r\n                                    id: nftInfo.id,\r\n                                    categoryId: categoryId,\r\n                                    type: type,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    brandId: user.BrandId,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef, useState } from 'react';\r\n\r\n// material-ui\r\nimport { AppBar,DialogActions, Button, Dialog, CardMedia,Divider,Grid, IconButton, ListItemText, ListItemButton, List, Slide, Toolbar, Typography } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// assets\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\n// slide animation\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\n// ===============================|| UI DIALOG - FULL SCREEN ||=============================== //\r\n\r\nexport default function DetailsDialog({ open, setOpen, nftData }) {\r\n    const theme = useTheme();\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const status = [\r\n        {\r\n            name: 'Name:',\r\n            value: nftData?.name\r\n        },\r\n        {\r\n            name: 'Status:',\r\n            value: nftData?.status\r\n        },\r\n        {\r\n            name: 'Description:',\r\n            value: nftData?.description\r\n        },\r\n        {\r\n            name: 'Price:',\r\n            value: nftData?.price\r\n        },\r\n        {\r\n            name: 'Mint Type:',\r\n            value: nftData?.mintType\r\n        },\r\n        {\r\n            name: 'Brand:',\r\n            value: nftData?.Brand.name\r\n        },\r\n        {\r\n            name: 'Token URL:',\r\n            value: 'Null'\r\n        }\r\n    ];\r\n    return (\r\n        <div>\r\n           \r\n            <Dialog fullScreen open={open} \r\n            onClose={handleClose} \r\n            TransitionComponent={Transition}>\r\n             {/*    <IconButton float=\"left\" color=\"inherit\" onClick={handleClose} aria-label=\"close\" size=\"large\">\r\n                    <CloseIcon />\r\n                </IconButton> */}\r\n                <DialogActions sx={{ pr: 2.5, pt: 2.5 }}>\r\n                <Button  className='buttonSize' size='large' sx={{ color: theme.palette.error.dark }} onClick={handleClose} color=\"secondary\">\r\n                <CloseIcon />\r\n                </Button>\r\n            </DialogActions>\r\n            <Grid container   sx={{ pr: 2.5,  pl: 2.5, pt: 2.5 }}>\r\n            <Grid item xs={12} md={8} lg={8}  sx={{ pr: 2.5 }}>\r\n                <List>\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail'>Name</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail' sx={{textTransform:'capitalize'}}>{nftData?.name}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail'>Status</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail'>{nftData?.status}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail'>Description</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail' sx={{textTransform:'capitalize'}}>{nftData?.description}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail' >Price</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail'  sx={{textTransform:'capitalize'}}>{nftData?.price}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail' >Mint Type</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail'  sx={{textTransform:'capitalize'}}>{ nftData?.mintType}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail' >Brand Name</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail'  sx={{textTransform:'capitalize'}}>{nftData?.Brand.name}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                </List>\r\n                </Grid>\r\n                <Grid item  xs={12} md={4} lg={4}>\r\n                <CardMedia\r\n                            \r\n                component=\"img\"\r\n                image={nftData?.asset}\r\n                \r\n                sx={{ minheight: 'auto', maxHeight:'570px',\r\n                 overflow: 'hidden', cursor: 'Pointer' }}\r\n            />\r\n               </Grid></Grid>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Button, CardContent, CardMedia, Grid, Stack, Typography, CardActionArea, Card , Tooltip} from '@mui/material';\r\nimport MainCard from './mainCard';\r\nimport EditNftDialog from './editNftDialog';\r\nimport RequestForMintDialog from './requestForMintDialog';\r\nimport DeleteNFTDialog from './deleteNftDialog';\r\nimport DetailsDialog from './details';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { useEffect } from 'react';\r\nconst NftCard = ({ nftData, categoryId, search, page, limit, type }) => {\r\n    const dispatch = useDispatch();\r\n    const [loader, setLoader] = useState(false);\r\n    const theme = useTheme();\r\n    console.log(nftData,'nftData')\r\n\r\n    const [openRequestMint, setOpenRequestMint] = useState(false);\r\n    const [editNftOpen, setEditNftOpen] = useState(false);\r\n    const [editable, seteditable] = useState(false);\r\n    const [deleteNftOpen, setDeleteNftOpen] = useState(false);\r\n    const [DetailsNftOpen, setDetailsNftOpen] = useState(false);\r\n    const [image, setImage] = useState([]);\r\n    const [nftInfo, setNftInfo] = useState({\r\n        id: null,\r\n        brandId: null,\r\n        nftName: '',\r\n        nftDescription: '',\r\n        nftPrice: 0,\r\n        mintType: 'directMint',\r\n        currencyType: 'USDT',\r\n        fieldDataArray: [],\r\n        fileDataArray: [],\r\n        images: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        const length = nftData.asset.split('/').length;\r\n        setImage([\r\n            {\r\n                image: { name: nftData.asset.split('/')[length - 1] },\r\n                quantity: nftData.NFTTokens.length\r\n            }\r\n        ]);\r\n    }, [nftData]);\r\n    return (\r\n        <>\r\n            <DeleteNFTDialog\r\n                nftInfo={nftInfo}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={deleteNftOpen}\r\n                setOpen={setDeleteNftOpen}\r\n            />\r\n            <EditNftDialog\r\n                nftInfo={nftInfo}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={editNftOpen}\r\n                setOpen={setEditNftOpen}\r\n            />\r\n            <RequestForMintDialog\r\n                nftData={nftData}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={openRequestMint}\r\n                setOpen={setOpenRequestMint}\r\n            />\r\n            <DetailsDialog open={DetailsNftOpen} \r\n            setOpen={setDetailsNftOpen} \r\n            nftData={nftData} />\r\n            <MainCard\r\n                content={false}\r\n                className='tableShadow'\r\n                boxShadow\r\n                sx={{\r\n                    position: 'relative',\r\n                    '&:hover': {\r\n                        transform: 'scale3d(1.02, 1.02, 1)',\r\n                        transition: 'all .4s ease-in-out'\r\n                    }\r\n                }}\r\n            >\r\n            <Card        \r\n              sx={{ maxWidth: 345,\r\n                color: theme.palette.mode === 'dark' ? 'white' : '#404040',\r\n                background: theme.palette.mode === 'dark' ? '#181C1F' : 'white',\r\n                // maxWidth: nfts && nfts?.length > 3? 0 : 365,\r\n                width:'100%',\r\n                maxHeight:'410px',\r\n                // boxShadow: '1px 2px 6px #d3d3d3',\r\n                borderRadius: '3px',\r\n                marginBottom: '10px',\r\n                maxWidth:{xl:'100%'},\r\n            }} >\r\n            <CardActionArea>\r\n            <CardMedia component=\"img\" height=\"220\" sx={{objectFit:'scale-down'}} image={nftData.asset} />\r\n           \r\n            \r\n              \r\n                <CardContent sx={{ p: 2 }}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={9}>\r\n                        <Tooltip placement=\"left\" title= {nftData.name}>\r\n                            <Typography variant=\"subtitle1\" className='fontstyling encap-nft'\r\n                             sx={{ textDecoration: 'none', textTransform: 'capitalize' }}>\r\n                                {nftData.name}\r\n                            </Typography>\r\n                            </Tooltip>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} mt={-1.5}>\r\n                        <Tooltip placement=\"left\" title= {nftData?.description}>\r\n                        <Typography\r\n                            className='fontstyling encap-nft'\r\n                                variant=\"body1\"\r\n                                sx={{\r\n                                    overflow: 'hidden',\r\n                                    height: 16,\r\n                                    textTransform: 'capitalize'\r\n                                }}\r\n                            >\r\n                                {nftData.description}\r\n                            </Typography>\r\n                            </Tooltip>   \r\n                        </Grid>\r\n\r\n                        <Grid item xs={6}>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\" className='fontstyling'>\r\n                                    {nftData.price} {nftData.currencyType}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\" className='fontstyling'>{nftData.NFTTokens.length} Items</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                          \r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                                sx={{\r\n                                    marginRight: '10px',\r\n                                    float: 'right',\r\n                                    ':hover': {\r\n                                        boxShadow: 'none'\r\n                                    },\r\n                                    color: '#2F5AFF',\r\n                                    background: '#B9DDFF',\r\n                                    \r\n                                }}\r\n                                \r\n                                onClick={() => {\r\n                                    setDetailsNftOpen(true);\r\n                                }}\r\n                            >\r\n                                Details\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\">\r\n                            {\r\n                                (nftData.status !== 'MINTED'\r\n                                 &&  nftData.status !== 'REQUESTED') && (\r\n                                    <>\r\n                                        <Button\r\n                                        className='fontstyling'\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            sx={{ marginRight: '5px' }}\r\n                                            onClick={() => {\r\n                                                setEditNftOpen(true);\r\n                                                setNftInfo({\r\n                                                    id: nftData.id,\r\n                                                    brandId: nftData.Brand.id,\r\n                                                    nftName: nftData.name,\r\n                                                    nftDescription: nftData.description,\r\n                                                    nftPrice: nftData.price,\r\n                                                    mintType: nftData.mintType,\r\n                                                    currencyType: nftData.currencyType,\r\n                                                    fieldDataArray: nftData.NFTMetaData,\r\n                                                    fileDataArray: nftData.NFTMetaFiles,\r\n                                                    images: image\r\n                                                });\r\n                                            }}\r\n                                        >\r\n                                            Edit\r\n                                        </Button>\r\n                                        <Button\r\n                                        className='fontstyling'\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            sx={{ marginRight: '5px' }}\r\n                                            onClick={() => {\r\n                                                setDeleteNftOpen(true);\r\n                                                setNftInfo({\r\n                                                    id: nftData.id,\r\n                                                    nftName: nftData.name,\r\n                                                    nftDescription: nftData.description,\r\n                                                    nftPrice: nftData.price,\r\n                                                    mintType: nftData.mintType,\r\n                                                    currencyType: nftData.currencyType,\r\n                                                    fieldDataArray: nftData.NFTMetaData,\r\n                                                    images: image\r\n                                                });\r\n                                            }}\r\n                                        >\r\n                                            Delete\r\n                                        </Button>\r\n                                    </>\r\n                                )\r\n                             }   \r\n                          \r\n\r\n                                {(nftData.status == 'DRAFT' || nftData.status == 'REJECTED') && (\r\n                                    <Button\r\n                                    className='fontstyling'\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        sx={{ marginRight: '5px' }}\r\n                                        onClick={() => {\r\n                                            setOpenRequestMint(true);\r\n                                        }}\r\n                                    >\r\n                                        Request\r\n                                    </Button>\r\n                                )}\r\n                                {(nftData.status == 'MINTED') && (\r\n                                    <Button\r\n                                    className='fontstyling'\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        sx={{ marginRight: '5px' }}\r\n                                     \r\n                                    >\r\n                                       Edit Request\r\n                                    </Button>\r\n                                )}\r\n                            </Stack>\r\n                            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\"></Stack>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n                </CardActionArea></Card>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NftCard;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Grid, Typography, Pagination, Menu, MenuItem, TextField, Box } from '@mui/material';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AddNft from './component/addNft';\r\nimport { getAllNft } from '../../../../redux/nftManagement/actions';\r\nimport NftCard from './component/nftcard';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nconst typeArray = [\r\n    {\r\n        value: 'all',\r\n        label: \"All NFT'S\"\r\n    },\r\n    {\r\n        value: 'directMint',\r\n        label: 'Minted NFTS'\r\n    },\r\n    {\r\n        value: 'lazyMint',\r\n        label: \"Lazy Minted NFT'S\"\r\n    },\r\n    {\r\n        value: 'waiting',\r\n        label: 'Waiting For approval'\r\n    },\r\n    {\r\n        value: 'draft',\r\n        label: 'Draft NFTS'\r\n    },\r\n    {\r\n        value: 'rejected',\r\n        label: 'Rejected NFTS'\r\n    }\r\n];\r\n\r\nconst NftManagement = () => {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n\r\n    const user = useSelector((state) => state.auth.user);\r\n    const [type, setType] = useState('all');\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(12);\r\n    const [addNftOpen, setAddNftOpen] = useState(false);\r\n    const [loader, setLoader] = useState(true);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n        setLoader(false);\r\n    };\r\n    const handleType = (event) => {\r\n        setType(event.target.value);\r\n        setLimit(12);\r\n        setSearch('');\r\n        setPage(1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllNft({\r\n                categoryId: location.state.data.CategoryId,\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                type: type,\r\n                brandId: user.BrandId,\r\n                handleClose: handleClose\r\n            })\r\n        );\r\n    }, [search, page, limit, type]);\r\n\r\n    const nftList = useSelector((state) => state.nftReducer.nftList);\r\n    \r\n    return (\r\n        <>\r\n            <AddNft\r\n                open={addNftOpen}\r\n                setOpen={setAddNftOpen}\r\n                data={location?.state?.data}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                nftType={type}\r\n            />\r\n            <MainCard\r\n                className=\"Adminheading\"\r\n                \r\n                title={\r\n                <Grid container sx={{display:'flex'}}>\r\n                    <Grid item md={8} xs={12}>\r\n                        <Typography\r\n                        variant=\"h1\"\r\n                        component=\"h2\"\r\n                        className=\"headingcard\"\r\n                        sx={{   fontWeight: 600, color:  theme.palette.mode === 'dark' ? '#fff' : '#000' ,\r\n                         marginLeft: { lg: '-20px', md: '-20px' },  }}\r\n                    >\r\n                        Categories\r\n                    </Typography>\r\n                    </Grid>\r\n                    <Grid item md={4} xs={12}>\r\n                    <Button\r\n                        className=\"buttonSize\"\r\n                        sx={{float:{xs:'left' , md:'right'}, marginTop:{xs:\"10px\",md:\"0px\"} }}\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            navigate('/categories');\r\n                        }}\r\n                    >\r\n                        Back\r\n                    </Button>\r\n                        </Grid>\r\n                        </Grid>\r\n                   \r\n                }\r\n              \r\n                content={false}\r\n            ></MainCard>\r\n            <MainCard\r\n                className=\"yellow tableShadow\"\r\n                title={\r\n                    <Grid container spacing={4}>\r\n                        <Grid item xs={12} lg={8}>\r\n                            <Typography className=\"mainheading\" variant=\"h1\" component=\"h2\" \r\n                            sx={{ marginLeft: { lg: '48px', md: '48px' },marginTop:{md:\"6px\"} }}>\r\n                                NFT Management  \r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6} lg={2}>\r\n                            <TextField\r\n                                className=\"selectField selectstyle\"\r\n                                id=\"outlined-select-budget\"\r\n                                select\r\n                                fullWidth\r\n                                value={type}\r\n                                onChange={handleType}\r\n                                variant=\"standard\"\r\n                            >\r\n                                {typeArray.map((option, index) => (\r\n                                    <MenuItem  key={index} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={6} lg={2} textAlign=\"start\">\r\n                            <Button\r\n                                className=\"buttonSize\"\r\n                                sx={{ marginLeft: { lg: '-16px', md: '-16px' } }}\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddNftOpen(true);\r\n                                }}\r\n                            >\r\n                                Add NFT\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                <Grid container>\r\n                    {(nftList && nftList.nfts && nftList.nfts.rows && nftList.nfts.rows != undefined) ? (\r\n                        <>\r\n                       { nftList.nfts.rows.length > 0?(\r\n                        <>\r\n                            {' '}\r\n                            <Grid container spacing={gridSpacing} mt={2}\r\n                             sx={{ padding:\"0px 16px\" }}>\r\n                                {nftList.nfts.rows &&\r\n                                    nftList.nfts.rows.map((nft, index) => {\r\n                                        return (\r\n                                            <Grid key={index} item xs={12} sm={6} md={4} lg={3}>\r\n                                                <NftCard\r\n                                                    className=\"tableShadow\"\r\n                                                    nftData={nft}\r\n                                                    categoryId={location.state.data.CategoryId}\r\n                                                    search={search}\r\n                                                    page={page}\r\n                                                    limit={limit}\r\n                                                    type={type}\r\n                                                />\r\n                                            </Grid>\r\n                                        );\r\n                                    })}\r\n                            </Grid>\r\n                            <Grid item xs={12} sx={{ p: 3 }}>\r\n                                <Grid container justifyContent=\"center\" spacing={gridSpacing}>\r\n                                    <Grid item>\r\n                                        <Pagination\r\n                                            page={page}\r\n                                            color=\"primary\"\r\n                                            showFirstButton\r\n                                            showLastButton\r\n                                            count={nftList && nftList.pages}\r\n                                            onChange={(event, newPage) => {\r\n                                                setPage(newPage);\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            </>\r\n                       )\r\n                       :\r\n                       (\r\n                        <Grid item>\r\n                        <Typography className=\"statustypo\" style={{  padding: '20px 20px 20px 70px', fontWeight: '500' }}>\r\n                         No Data Available</Typography>\r\n                    </Grid>\r\n                       )}\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                        <Grid container justifyContent=\"center\" sx={{ width: '80%', m: '15px auto '}}>\r\n                                <Grid item>\r\n                            <CircularProgress disableShrink size={'4rem'} />\r\n                        </Grid>\r\n                                </Grid>\r\n                        </>\r\n                  \r\n                    )}\r\n                </Grid>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NftManagement;\r\n","export default __webpack_public_path__ + \"static/media/image-upload.54137b05.svg\";"],"sourceRoot":""}