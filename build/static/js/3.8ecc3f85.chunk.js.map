{"version":3,"sources":["shared/Card/HeadingCard.js","../node_modules/@mui/icons-material/EditOutlined.js","../node_modules/@mui/icons-material/DeleteOutlineOutlined.js","views/pages/superAdmin/brands/component/deleteBrandDialog.js","views/pages/superAdmin/brands/component/brandTable.js","views/pages/superAdmin/brands/component/addUpdateBrand.js","views/pages/superAdmin/brands/index.js"],"names":["HeadingCard","forwardRef","title","value","role","setValue","options","theme","useTheme","sx","marginBottom","spacing","gridSpacing","borderColor","palette","primary","background","default","padding","container","alignItems","justifyContent","item","variant","fontWeight","color","undefined","id","select","onChange","e","target","width","height","map","option","label","_interopRequireDefault","require","Object","defineProperty","exports","_createSvgIcon","_jsxRuntime","_default","jsx","d","Transition","props","ref","Slide","direction","DeleteBrandDialog","deleteOpen","setDeleteOpen","brandId","page","limit","search","dispatch","useDispatch","handleClose","Dialog","open","TransitionComponent","keepMounted","onClose","DialogTitle","DialogContent","DialogContentText","Typography","component","DialogActions","pr","Button","error","dark","onClick","size","deleteBrand","BrandTable","setBrandName","setOpen","setAddUpdateOpen","setBrandId","useNavigate","useState","brandsList","useSelector","state","brand","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","brands","row","index","name","Stack","Tooltip","placement","IconButton","fontSize","orange","main","light","AddUpdateBrandDialog","addUpdateOpen","brandName","validationSchema","Yup","required","max","matches","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","addBrand","updateBrand","resetForm","className","Divider","autoComplete","handleSubmit","TextField","marginTop","handleChange","touched","Boolean","errors","helperText","fullWidth","Brands","setSearch","setPage","setLimit","anchorEl","setAnchorEl","handleCloseMenu","useEffect","getAllBrands","MainCard","Grid","xs","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","textAlign","content","count","p","Pagination","showFirstButton","showLastButton","totalPages","event","newPage","grey","endIcon","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","md","style"],"mappings":"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","file":"static/js/3.8ecc3f85.chunk.js","sourcesContent":["import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { forwardRef } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// constant\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                marginBottom: theme.spacing(gridSpacing),\r\n\r\n                borderColor: theme.palette.primary[200] + 75,\r\n                background: theme.palette.background.default\r\n            }}\r\n        >\r\n            <Box sx={{ padding: '13px 20px 22px 20px' }}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                    <Grid item>\r\n                        <Typography variant=\"h3\" sx={{ fontWeight: 500, color: '#000' }}>\r\n                            {title}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {value !== undefined && (\r\n                        <Grid item>\r\n                            {/* {options && (role == 'teacher' || role == 'super_admin') && ( */}\r\n                            <TextField\r\n                                id=\"standard-select-currency\"\r\n                                select\r\n                                value={value}\r\n                                onChange={(e) => setValue(e.target.value)}\r\n                                sx={{ width: '110px', height: '40px' }}\r\n                            >\r\n                                {options.map((option) => (\r\n                                    <MenuItem key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                            {/* )} */}\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        </Card>\r\n    );\r\n});\r\n\r\nexport default HeadingCard;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m14.06 9.02.92.92L5.92 19H5v-.92l9.06-9.06M17.66 3c-.25 0-.51.1-.7.29l-1.83 1.83 3.75 3.75 1.83-1.83c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.2-.2-.45-.29-.71-.29zm-3.6 3.19L3 17.25V21h3.75L17.81 9.94l-3.75-3.75z\"\n}), 'EditOutlined');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM8 9h8v10H8V9zm7.5-5-1-1h-5l-1 1H5v2h14V4h-3.5z\"\n}), 'DeleteOutlineOutlined');\n\nexports.default = _default;","import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteBrand } from '../../../../../redux/brand/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteBrandDialog({ deleteOpen, setDeleteOpen, brandId, page, limit, search }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setDeleteOpen(false);\r\n        \r\n    };\r\n   \r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={deleteOpen}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Delete Brand</DialogTitle>\r\n                \r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to delete this Brand?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteBrand({\r\n                                    id: brandId,\r\n                                    handleClose: handleClose,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search\r\n                                   \r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { IconButton, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip } from '@mui/material';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport DeleteBrandDialog from './deleteBrandDialog';\r\nimport VisibilityOutlinedIcon from '@mui/icons-material/VisibilityOutlined';\r\nimport moment from 'moment';\r\nimport { useNavigate } from 'react-router-dom';\r\nconst BrandTable = ({ page, limit, search, setOpen, setBrandName, setAddUpdateOpen, brandId, setBrandId }) => {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const brandsList = useSelector((state) => state.brand.brandsList);\r\n   \r\n    return (\r\n        <TableContainer>\r\n            <DeleteBrandDialog\r\n                deleteOpen={deleteOpen}\r\n                setDeleteOpen={setDeleteOpen}\r\n                brandId={brandId}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n\r\n                        <TableCell align=\"center\">Brand Name</TableCell>\r\n                        <TableCell align=\"center\">Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n\r\n                    {brandsList.brands != undefined &&\r\n                        brandsList.brands.map((row, index) => (\r\n                            <TableRow>\r\n\r\n                                <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                    {row.name}\r\n                                </TableCell>\r\n\r\n                                <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                    <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                        <Tooltip placement=\"top\" title=\"Edit\">\r\n                                            <IconButton\r\n                                                color=\"primary\"\r\n                                                aria-label=\"Edit\"\r\n                                                size=\"large\"\r\n                                                onClick={() => {\r\n                                                    setBrandName(row.name);\r\n                                                    setBrandId(row.id);\r\n                                                    setAddUpdateOpen(true);\r\n                                                }}\r\n                                            >\r\n                                                <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                        <Tooltip placement=\"top\" title=\"Delete\">\r\n                                            <IconButton\r\n                                                color=\"primary\"\r\n                                                sx={{\r\n                                                    color: theme.palette.orange.dark,\r\n                                                    borderColor: theme.palette.orange.main,\r\n                                                    '&:hover ': { background: theme.palette.orange.light }\r\n                                                }}\r\n                                                size=\"large\"\r\n                                                onClick={() => {\r\n                                                    setDeleteOpen(true);\r\n                                                    setBrandId(row.id);\r\n                                                }}\r\n                                            >\r\n                                                <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </Stack>\r\n                                </TableCell>\r\n\r\n\r\n                            </TableRow>\r\n                        ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default BrandTable;\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, Divider } from '@mui/material';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nimport { addBrand, updateBrand } from '../../../../../redux/brand/actions';\r\n\r\nexport default function AddUpdateBrandDialog({ addUpdateOpen, setAddUpdateOpen, page, limit, search, brandName, setBrandName, brandId }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string()\r\n            .required('Brand Name is required!')\r\n            .max(42, 'Brand Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Brand name')\r\n    });\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            name: brandName\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            if (brandName == '') {\r\n                dispatch(\r\n                    addBrand({\r\n                        name: values.name,\r\n                        search: search,\r\n                        page: page,\r\n                        limit: limit,\r\n                        handleClose: handleClose,\r\n                        setBrandName: setBrandName\r\n                    })\r\n                );\r\n            } else {\r\n                dispatch(\r\n                    updateBrand({\r\n                        brandId: brandId,\r\n                        name: values.name,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n\r\n                        handleClose: handleClose,\r\n                        setBrandName: setBrandName\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n    const handleClose = () => {\r\n        setAddUpdateOpen(false);\r\n        setBrandName('');\r\n        formik.resetForm();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                className=\"responsiveDialog\"\r\n                open={addUpdateOpen}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">{brandName == '' ? 'Add Brand' : 'Update Brand'}</DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <TextField\r\n                            sx={{ marginTop: '25px' }}\r\n                            id=\"name\"\r\n                            name=\"name\"\r\n                            label=\"Enter Brand Name\"\r\n                            value={formik.values.name}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.name && Boolean(formik.errors.name)}\r\n                            helperText={formik.touched.name && formik.errors.name}\r\n                            fullWidth\r\n                            autoComplete=\"given-name\"\r\n                        />\r\n                    </form>\r\n                </DialogContent>\r\n                <Divider />\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={() => {\r\n                            handleClose();\r\n                        }}\r\n                        color=\"secondary\"\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            formik.handleSubmit();\r\n                        }}\r\n                    >\r\n                        {brandName == '' ?\r\n                            'Add'\r\n                            : 'Update'}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport BrandTable from './component/brandTable';\r\nimport { Button, Typography, Grid, MenuItem, Menu, Pagination, OutlinedInput, InputAdornment, Divider  } from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { getAllBrands } from '../../../../redux/brand/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport AddUpdateBrandDialog from './component/addUpdateBrand';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport HeadingCard from 'shared/Card/HeadingCard';\r\nconst Brands = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const [open, setOpen] = useState(false);\r\n    const brandsList = useSelector((state) => state.brand.brandsList);\r\n   \r\n   \r\n    \r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [brandId, setBrandId] = useState();\r\n    const [brandName, setBrandName] = useState('');\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n       \r\n        dispatch(\r\n            getAllBrands({\r\n                search: search,\r\n                page: page,\r\n                limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n    return (\r\n        <>\r\n            <AddUpdateBrandDialog\r\n                brandId={brandId}\r\n                setBrandId={setBrandId}\r\n                brandName={brandName}\r\n                setBrandName={setBrandName}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n                addUpdateOpen={addUpdateOpen}\r\n                setAddUpdateOpen={setAddUpdateOpen}\r\n            />\r\n            <HeadingCard title=\"Brand Management\" />\r\n            <MainCard\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={6}>\r\n                            <OutlinedInput\r\n                                id=\"input-search-list-style1\"\r\n                                placeholder=\"Search\"\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"start\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                                size=\"small\"\r\n                                onChange={(e) => {\r\n                                    setSearch(e.target.value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6} textAlign=\"end\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddUpdateOpen(true);\r\n\r\n                                    setBrandName('');\r\n                                }}\r\n                            >\r\n                                Add Brand\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n            {brandsList.brands != undefined && brandsList.count > 0 ? (\r\n                    <>\r\n                        <BrandTable\r\n                            brandsList={brandsList}\r\n                            page={page}\r\n                            limit={limit}\r\n                            search={search}\r\n                            setOpen={setOpen}\r\n                            brandId={brandId}\r\n                            setBrandId={setBrandId}\r\n                            setBrandName={setBrandName}\r\n                            setAddUpdateOpen={setAddUpdateOpen}\r\n                        />\r\n                        <Grid item xs={12} sx={{ p: 3 }}>\r\n                            <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                                <Grid item>\r\n                                    <Pagination\r\n                                        color=\"primary\"\r\n                                        showFirstButton\r\n                                        showLastButton\r\n                                        page={page}\r\n                                        count={brandsList.totalPages}\r\n                                        onChange={(event, newPage) => {\r\n                                            setPage(newPage);\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        size=\"large\"\r\n                                        sx={{ color: theme.palette.grey[900] }}\r\n                                        color=\"secondary\"\r\n                                        endIcon={<ExpandMoreRoundedIcon />}\r\n                                        onClick={handleClick}\r\n                                    >\r\n                                        {limit} Rows\r\n                                    </Button>\r\n                                    <Menu\r\n                                        id=\"menu-user-list-style1\"\r\n                                        anchorEl={anchorEl}\r\n                                        keepMounted\r\n                                        open={Boolean(anchorEl)}\r\n                                        onClose={handleCloseMenu}\r\n                                        variant=\"selectedMenu\"\r\n                                        anchorOrigin={{\r\n                                            vertical: 'top',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                        transformOrigin={{\r\n                                            vertical: 'bottom',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                    >\r\n                                        <MenuItem\r\n                                            value={10}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleCloseMenu();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            10 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={25}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleCloseMenu();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            25 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={50}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleCloseMenu();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            50 Rows{' '}\r\n                                        </MenuItem>\r\n                                    </Menu>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </>\r\n                    ) : (\r\n                        <>\r\n                            <Grid item md={12}>\r\n                                <Divider />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography style={{ padding: '20px', fontWeight: '800' }}> No Data Available</Typography>\r\n                            </Grid>\r\n                        </>\r\n                    )}\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Brands;\r\n"],"sourceRoot":""}