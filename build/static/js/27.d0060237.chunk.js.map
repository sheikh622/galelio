{"version":3,"sources":["views/pages/user/productDetails/component/productView.js","views/pages/user/productDetails/component/similarProducts.js","views/pages/user/productDetails/component/activity.js","views/pages/user/productDetails/component/properties.js","views/pages/user/productDetails/index.js","ui-component/extended/Avatar.js","constants.js","ui-component/cards/SubCard.js"],"names":["PropertiesView","nft","console","log","dispatch","useDispatch","useState","resell","setResell","bought","setBought","redeem","setRedeem","loader","setLoader","redeemLoader","setRedeemLoader","resellLoader","setResellLoader","navigate","useNavigate","user","useSelector","state","auth","age","setAge","theme","useTheme","React","open","setOpen","rprice","ResellDialog","handleClose","Grid","sx","width","Button","float","md","className","variant","size","onClick","mintType","handleResellNft","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","fullWidth","onChange","e","target","value","DialogActions","buyNftResolve","redeemNftResolve","resellNftResolve","checkWallet","window","ethereum","request","method","response","_metamask","isUnlocked","connectWallet","type","SNACKBAR_OPEN","message","alertSeverity","networkVersion","utils","getAddress","walletAddress","handleBuyNft","erc20Address","BLOCKCHAIN","ERC20","tokenId","parseInt","NFTTokens","contractAddress","Brand","BrandCategories","price","ethers","parseEther","toString","provider","providers","Web3Provider","signer","getSigner","address","marketplace","Contract","MarketplaceAddress","MarketplaceAbi","abi","token","Erc20","allowance","approvalAmount","approvePrice","approve","wait","purchaseItem","then","data","buyNft","nftId","id","nftToken","buyerAddress","from","catch","error","toast","signerAddress","signature","nfts","NFTAbi","prices","voucher","uri","tokenUri","mintedNFT","events","args","changeTokenId","rrprice","resellItem","resellNft","success","makeItem","handleRedeemNft","redeemNft","addDeliveryNft","status","TokenId","WalletAddress","NftId","UserId","buyerNft","nftReducer","nftBuyer","useEffect","getNftBuyer","NFTTokenId","spacing","gridSpacing","item","xs","container","justifyContent","textAlign","sm","component","RouterLink","to","CardMedia","height","objectFit","image","asset","watch1","alt","mt","ml","alignItems","Avatar","src","zeroMinWidth","textDecoration","Typography","align","fontWeight","name","color","palette","mode","description","Box","borderRadius","FormControl","background","InputLabel","Select","labelId","event","NFTMetaFiles","map","option","MenuItem","fieldValue","fieldName","mb","paddingLeft","currencyType","isSold","JSON","stringify","founded","display","Alert","severity","CircularProgress","role","marginTop","lg","SimilarProducts","similarProductNfts","marketplaceReducer","search","page","limit","click","setClick","getAllSimilarProducts","categoryId","CategoryId","textTransform","rows","lenght","Card","maxWidth","boxShadow","CardActionArea","CardContent","padding","style","fontSize","Divider","pt","pl","Activity","MainCard","title","border","content","TableContainer","Table","TableHead","TableRow","TableCell","days","TableBody","Properties","NFTMetaData","length","SubCard","ProductDetails","location","useLocation","marketplaceNfts","outline","others","colorSX","paper","bgcolor","outlineSX","borderColor","sizeSX","WALLET_ADDRESS","forwardRef","ref","children","contentClass","darkTitle","secondary","contentSX","dark","light","primary","p","action","opacity","defaultProps"],"mappings":"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","file":"static/js/27.d0060237.chunk.js","sourcesContent":["// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { CardMedia, Grid, Typography, Button, Alert, InputLabel, Select, FormControl, Box, MenuItem } from '@mui/material';\r\n\r\nimport React, { useEffect } from 'react';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\nimport { ethers, utils } from 'ethers';\r\nimport NFTAbi from '../../../../../contractAbi/NFT.json';\r\nimport MarketplaceAbi from '../../../../../contractAbi/Marketplace.json';\r\nimport MarketplaceAddress from '../../../../../contractAbi/Marketplace-address.json';\r\nimport Erc20 from '../../../../../contractAbi/Erc20.json';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { buyNft, resellNft, redeemNft, getNftBuyer, addDeliveryNft, changeTokenId } from 'redux/nftManagement/actions';\r\n// import ResellDialog from \"./resellDialog\"\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport BLOCKCHAIN from '../../../../../constants';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport { SNACKBAR_OPEN } from 'store/actions';\r\nimport { setLoader } from 'redux/auth/actions';\r\n\r\n// =============================|| LANDING - FEATURE PAGE ||============================= //\r\n\r\nconst PropertiesView = ({ nft }) => {\r\n    console.log('nft from product view', nft);\r\n    const dispatch = useDispatch();\r\n    const [resell, setResell] = useState(false);\r\n    const [bought, setBought] = useState(false);\r\n    const [redeem, setRedeem] = useState(false);\r\n    const [loader, setLoader] = useState(false);\r\n    const [redeemLoader, setRedeemLoader] = useState(false);\r\n    const [resellLoader, setResellLoader] = useState(false);\r\n    const navigate = useNavigate();\r\n    const user = useSelector((state) => state.auth.user);\r\n\r\n    const [age, setAge] = useState('');\r\n\r\n    const handleChange = (event) => {\r\n        setAge(event.target.value);\r\n    };\r\n    const theme = useTheme();\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    let rprice = 0;\r\n    const ResellDialog = () => {\r\n        const handleClickOpen = () => {\r\n            setOpen(true);\r\n        };\r\n\r\n        const handleClose = () => {\r\n            setOpen(false);\r\n        };\r\n\r\n        return (\r\n            <Grid sx={{ width: '100%' }}>\r\n                <Button\r\n                    sx={{ float: { md: 'right' } }}\r\n                    className=\"buy\"\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    onClick={() => {\r\n                        if (nft.mintType == 'directMint') {\r\n                            setOpen(true);\r\n                        } else if (nft.mintType == 'lazyMint') {\r\n                            handleResellNft();\r\n                        }\r\n                    }}\r\n                >\r\n                    Resell\r\n                </Button>\r\n                <Dialog open={open} onClose={handleClose}>\r\n                    <DialogTitle>NFT Resell Price</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>Please enter the price for the NFT</DialogContentText>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Price \"\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                            // value={rprice}\r\n                            onChange={(e) => {\r\n                                rprice = e.target.value;\r\n                            }}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose}>Cancel</Button>\r\n                        <Button\r\n                            onClick={() => {\r\n                                handleResellNft();\r\n                            }}\r\n                        >\r\n                            Resell\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                <Grid></Grid>\r\n            </Grid>\r\n        );\r\n    };\r\n\r\n    const buyNftResolve = () => {\r\n        setBought(true);\r\n        setLoader(false);\r\n    };\r\n\r\n    const redeemNftResolve = () => {\r\n        setRedeem(true);\r\n        setRedeemLoader(false);\r\n    };\r\n\r\n    const resellNftResolve = () => {\r\n        setResell(true);\r\n        setResellLoader(false);\r\n        setOpen(false);\r\n    };\r\n\r\n    const checkWallet = async () => {\r\n        const response = await window?.ethereum?.request({ method: 'eth_requestAccounts' });\r\n        let connectWallet = await ethereum._metamask.isUnlocked();\r\n\r\n        if ((window.ethereum && connectWallet) == false) {\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'No crypto wallet found. Please connect one',\r\n                variant: 'alert',\r\n                alertSeverity: 'info'\r\n            });\r\n            console.log('No crypto wallet found. Please install it.');\r\n            // toast.error('No crypto wallet found. Please install it.');\r\n        } else if (window?.ethereum?.networkVersion !== '5') {\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'Please change your Chain ID to Goerli',\r\n                variant: 'alert',\r\n                alertSeverity: 'info'\r\n            });\r\n            console.log('Please change your Chain ID to Goerli');\r\n        } else if (utils?.getAddress(response[0]) !== user.walletAddress) {\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'Please connect your registered Wallet Address',\r\n                variant: 'alert',\r\n                alertSeverity: 'info'\r\n            });\r\n            console.log('Please connect your registered Wallet Address');\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const handleBuyNft = async () => {\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else if (await checkWallet()) {\r\n            if (nft.mintType == 'directMint') {\r\n                try {\r\n                    setLoader(true);\r\n\r\n                    let erc20Address = BLOCKCHAIN.ERC20;\r\n                    let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n                    let contractAddress = nft.Brand.BrandCategories[0].contractAddress;\r\n                    let price = ethers.utils.parseEther(nft.price.toString());\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                    const signer = provider.getSigner();\r\n                    const address = signer.getAddress();\r\n\r\n                    const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n                    const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n                    // await (await token.approve(MarketplaceAddress.address, price)).wait();\r\n\r\n                    // -------------\r\n                    let approvalAmount = await token.allowance(address, MarketplaceAddress.address);\r\n\r\n                    let approvePrice = ethers.utils.parseEther('10000');\r\n                    if (approvalAmount.toString() < nft.price.toString()) {\r\n                        await (await token.approve(MarketplaceAddress.address, approvePrice)).wait();\r\n                    }\r\n                    // ---------------\r\n                    console.log('tokenId, contractAddress, price from product view', tokenId, contractAddress, price);\r\n                    await (await marketplace.purchaseItem(tokenId, contractAddress, price))\r\n                        .wait()\r\n                        .then((data) => {\r\n                            console.log('im in then');\r\n                            dispatch(\r\n                                buyNft({\r\n                                    nftId: nft.id,\r\n                                    nftToken: nft.NFTTokens[0].id,\r\n                                    buyerAddress: data.from,\r\n                                    contractAddress: contractAddress,\r\n                                    buyNftResolve: buyNftResolve\r\n                                })\r\n                            );\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('im here now');\r\n                            setLoader(false);\r\n                            toast.error(error.message);\r\n                        });\r\n                } catch (error) {\r\n                    setLoader(false);\r\n                    toast.error(error.message);\r\n                }\r\n            } else if (nft.mintType == 'lazyMint') {\r\n                try {\r\n                    setLoader(true);\r\n                    let signers = nft.signerAddress;\r\n                    let erc20Address = BLOCKCHAIN.ERC20;\r\n                    let signature = nft.NFTTokens[0].signature;\r\n                    let contractAddress = nft.Brand.BrandCategories[0].contractAddress;\r\n                    // let contractAddress = \"0x6e9550E5fee2bE7BdB208214e9cE2B47131a5Ca0\";\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                    const signer = provider.getSigner();\r\n                    const address = signer.getAddress();\r\n                    const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n\r\n                    let prices = ethers.utils.parseEther(nft.price.toString());\r\n\r\n                    let voucher = {\r\n                        uri: nft.tokenUri,\r\n                        price: prices,\r\n                        token: erc20Address\r\n                    };\r\n\r\n                    let validatorAddress = '0x6f3b51bd5b67f3e5bca2fb32796215a796b79651';\r\n                    const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n                    //const signature = await signer._signTypedData(domain, types, voucher);\r\n                    // const verifyAddr = ethers.utils.verifyTypedData(domain, types, voucher, signature);\r\n\r\n                    let approvalAmount = await token.allowance(address, contractAddress);\r\n\r\n                    let approvePrice = ethers.utils.parseEther('10000');\r\n                    if (approvalAmount.toString() < nft.price.toString()) {\r\n                        await (await token.approve(contractAddress, approvePrice)).wait();\r\n                    }\r\n                    // await (await token.approve(contractAddress, prices)).wait();\r\n\r\n                    //\r\n                    try {\r\n                        let mintedNFT = await (await nfts.buyNft(voucher, signature, MarketplaceAddress.address)).wait();\r\n                        const id = parseInt(mintedNFT.events[0].args[2]);\r\n\r\n                        dispatch(\r\n                            changeTokenId({\r\n                                id: nft.NFTTokens[0].id,\r\n                                tokenId: id.toString()\r\n                            })\r\n                        );\r\n\r\n                        dispatch(\r\n                            buyNft({\r\n                                nftId: nft.id,\r\n                                nftToken: nft.NFTTokens[0].id,\r\n                                buyerAddress: mintedNFT.from,\r\n                                contractAddress: contractAddress,\r\n                                buyNftResolve: buyNftResolve\r\n                            })\r\n                        );\r\n                    } catch (error) {\r\n                        toast.error(error.message);\r\n                    }\r\n                } catch (error) {\r\n                    setLoader(false);\r\n                    toast.error(error.message);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleResellNft = async () => {\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else if (await checkWallet()) {\r\n            if (nft.mintType == 'directMint') {\r\n                try {\r\n                    setResellLoader(true);\r\n                    let erc20Address = BLOCKCHAIN.ERC20;\r\n                    let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n                    let contractAddress = nft.Brand.BrandCategories[0].contractAddress;\r\n\r\n                    let rrprice = ethers.utils.parseEther(rprice.toString());\r\n\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                    const signer = provider.getSigner();\r\n\r\n                    const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n                    const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n\r\n                    await (await nfts.approve(MarketplaceAddress.address, tokenId)).wait();\r\n                    await (await marketplace.resellItem(tokenId, contractAddress, rrprice))\r\n                        .wait()\r\n                        .then((data) => {\r\n                            dispatch(\r\n                                resellNft({\r\n                                    rprice: rprice,\r\n                                    nftId: nft.id,\r\n                                    nftToken: nft.NFTTokens[0].id,\r\n                                    buyerAddress: data.from,\r\n                                    contractAddress: contractAddress,\r\n                                    resellNftResolve: resellNftResolve\r\n                                })\r\n                            );\r\n                            toast.success('NFT is Resold');\r\n                        })\r\n                        .catch((error) => {\r\n                            toast.error(error.message);\r\n                        });\r\n                } catch (error) {\r\n                    setResellLoader(false);\r\n                    toast.error(error.message);\r\n                }\r\n            } else if (nft.mintType == 'lazyMint') {\r\n                try {\r\n                    let erc20Address = BLOCKCHAIN.ERC20;\r\n                    let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n                    let contractAddress = nft.Brand.BrandCategories[0].contractAddress;\r\n\r\n                    let rrprice = ethers.utils.parseEther(nft.price.toString());\r\n\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                    const signer = provider.getSigner();\r\n\r\n                    const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n                    const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n\r\n                    // await (await nfts.approve(MarketplaceAddress.address, tokenId)).wait();\r\n                    await (await marketplace.makeItem(erc20Address, tokenId, contractAddress, rrprice))\r\n                        .wait()\r\n                        .then((data) => {\r\n                            dispatch(\r\n                                resellNft({\r\n                                    nftId: nft.id,\r\n                                    nftToken: nft.NFTTokens[0].id,\r\n                                    buyerAddress: data.from,\r\n                                    contractAddress: contractAddress,\r\n                                    resellNftResolve: resellNftResolve\r\n                                })\r\n                            );\r\n\r\n                            toast.success('NFT is Resold');\r\n                        })\r\n                        .catch((error) => {\r\n                            toast.error(error.message);\r\n                        });\r\n                    setOpen(false);\r\n                } catch (error) {\r\n                    setResellLoader(false);\r\n                    toast.error(error.message);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleRedeemNft = async () => {\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else if (await checkWallet()) {\r\n            if (nft.mintType == 'directMint') {\r\n                try{\r\n                    setRedeemLoader(true);\r\n                    let erc20Address = BLOCKCHAIN.ERC20;\r\n                    let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n                    let contractAddress = nft.Brand.BrandCategories[0].contractAddress;\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                    const signer = provider.getSigner();\r\n    \r\n                    const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n    \r\n                    await (await marketplace.redeemNft(tokenId, contractAddress))\r\n                        .wait()\r\n                        .then((data) => {\r\n                            dispatch(\r\n                                redeemNft({\r\n                                    nftId: nft.id,\r\n                                    nftToken: nft.NFTTokens[0].id,\r\n                                    buyerAddress: data.from,\r\n                                    contractAddress: contractAddress\r\n                                })\r\n                            );\r\n                            dispatch(\r\n                                addDeliveryNft({\r\n                                    status: 'Pending',\r\n                                    TokenId: nft.NFTTokens[0].id,\r\n                                    WalletAddress: data.from,\r\n                                    NftId: nft.id,\r\n                                    UserId: user.id,\r\n                                    redeemNftResolve: redeemNftResolve\r\n                                })\r\n                            );\r\n    \r\n                            toast.success('NFT Redeem successfully');\r\n                        })\r\n                        .catch((error) => {\r\n                            toast.error(error.message);\r\n                        });\r\n                }catch(error){\r\n                    setRedeemLoader(false);\r\n                    toast.error(error.message);\r\n                }\r\n                \r\n            } else if (nft.mintType == 'lazyMint') {\r\n                try{\r\n                    setRedeemLoader(true);\r\n                    let erc20Address = BLOCKCHAIN.ERC20;\r\n                    let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n                    let contractAddress = nft.Brand.BrandCategories[0].contractAddress;\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                    const signer = provider.getSigner();\r\n    \r\n                    const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n                    let rrprice = ethers.utils.parseEther(nft.price.toString());\r\n    \r\n                    await (await marketplace.redeem(erc20Address, tokenId, contractAddress, rrprice))\r\n                        .wait()\r\n                        .then((data) => {\r\n                            dispatch(\r\n                                redeemNft({\r\n                                    nftId: nft.id,\r\n                                    nftToken: nft.NFTTokens[0].id,\r\n                                    buyerAddress: data.from,\r\n                                    contractAddress: contractAddress\r\n                                })\r\n                            );\r\n                            dispatch(\r\n                                addDeliveryNft({\r\n                                    status: 'Pending',\r\n                                    TokenId: nft.NFTTokens[0].id,\r\n                                    WalletAddress: data.from,\r\n                                    NftId: nft.id,\r\n                                    UserId: user.id,\r\n                                    redeemNftResolve: redeemNftResolve\r\n                                })\r\n                            );\r\n    \r\n                            toast.success('NFT Redeem successfully');\r\n                        })\r\n                        .catch((error) => {\r\n                            toast.error(error.message);\r\n                        });\r\n                }catch(error){\r\n                    setRedeemLoader(false);\r\n                    toast.error(error.message);\r\n                }\r\n                \r\n            }\r\n        }\r\n    };\r\n\r\n    const buyerNft = useSelector((state) => state.nftReducer.nftBuyer);\r\n    useEffect(() => {\r\n        if (user) {\r\n            dispatch(\r\n                getNftBuyer({\r\n                    walletAddress: user?.walletAddress,\r\n                    NFTTokenId: nft.NFTTokens[0].id,\r\n                    NftId: nft.id\r\n                })\r\n            );\r\n        }\r\n    }, [useSelector, dispatch, resell, bought, redeem]);\r\n\r\n    useEffect(() => {}, []);\r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12}>\r\n                <Grid container justifyContent=\"center\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n                    <Grid item md={6} sm={12} component={RouterLink} to=\"/companyPage\">\r\n                        <CardMedia component=\"img\" sx={{ height: '592px' , objectFit:'fill'}} \r\n                        image={nft?.asset ? nft?.asset : watch1} alt=\"green iguana\" />\r\n                    </Grid>\r\n\r\n                    <Grid item md={6} sm={12}>\r\n                        <Grid item xs={12}>\r\n                            <Grid container>\r\n                                <Grid item md={12} sm={12}>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid mt={4} ml={2} item xs={12}>\r\n                                            <Grid container spacing={2} alignItems=\"center\">\r\n                                                <Grid item>\r\n                                                    <Avatar\r\n                                                        alt=\"User 1\"\r\n                                                        src={nft?.Brand?.image}\r\n                                                        sx={{ width: 56, height: 56, objectFit: 'fill' }}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid\r\n                                                    item\r\n                                                    xs\r\n                                                    zeroMinWidth\r\n                                                    component={RouterLink}\r\n                                                    sx={{ textDecoration: 'none' }}\r\n                                                    to=\"/companyPage\"\r\n                                                >\r\n                                                    <Typography align=\"left\" fontWeight={600} variant=\"h2\" className=\"brand\">\r\n                                                        {nft?.Brand?.name}\r\n                                                    </Typography>\r\n                                                    <Typography align=\"left\" variant=\"h3\" className=\"creator\">\r\n                                                        Brand\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n\r\n                                        <Grid item mt={2} xs={12}>\r\n                                            <Typography\r\n                                                className=\"Lux\"\r\n                                                color={theme.palette.mode === 'dark' ? 'white' : 'black'}\r\n                                                variant=\"h3\"\r\n                                            >\r\n                                                {nft?.name ? nft?.name : 'Luxury Stainless Watch'}{' '}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <Typography className=\"productdescription\" variant=\"body2\">\r\n                                                {nft?.description}{' '}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <Box sx={{ borderRadius: '4px', width: '95%', margin: '0 auto' }}>\r\n                                                <FormControl\r\n                                                    sx={{\r\n                                                        background: theme.palette.mode === 'dark' ? '#181C1F' : '#d9d9d9',\r\n                                                        color: theme.palette.mode === 'dark' ? '#ffff' : 'black',\r\n                                                        borderRadius: '4px'\r\n                                                    }}\r\n                                                    fullWidth\r\n                                                >\r\n                                                    <InputLabel\r\n                                                        sx={{ color: theme.palette.mode === 'dark' ? '#ffff' : 'black' }}\r\n                                                        id=\"demo-simple-select-label\"\r\n                                                    >\r\n                                                        PROOF OF AUTHENTICITY\r\n                                                    </InputLabel>\r\n                                                    <Select\r\n                                                        variant=\"standard\"\r\n                                                        labelId=\"demo-simple-select-label\"\r\n                                                        id=\"demo-simple-select\"\r\n                                                        value={age}\r\n                                                        onChange={handleChange}\r\n                                                    >\r\n                                                        {nft?.NFTMetaFiles.map((option) => (\r\n                                                            <MenuItem\r\n                                                                // component={redirect}\r\n                                                                // to={option.fieldValue}\r\n                                                                // key={option.fieldValue}\r\n                                                                // value={option.fieldValue}\r\n                                                                // onClick={useNavigate(option.fieldValue)}\r\n                                                                onClick={() => {\r\n                                                                    // useNavigate(option.fieldValue)\r\n                                                                    window.open(option.fieldValue, '_blank');\r\n                                                                }}\r\n                                                            >\r\n                                                                {option.fieldName}\r\n                                                            </MenuItem>\r\n                                                        ))}\r\n                                                    </Select>\r\n                                                </FormControl>\r\n                                            </Box>\r\n                                            {/*     // <TextField\r\n                                        //     sx={{ borderRadius: '4px' }}\r\n                                        //     className=\"select\"\r\n                                        //     fullWidth\r\n                                        //     id=\"standard-select-currency\"\r\n                                        //     select\r\n                                        //     lable='PROOF OF AUTHENTICITY'\r\n                                        //     value={fieldValue}\r\n                                        //     onChange={(e) => setFieldValue(e.target.value)}\r\n                                        // >\r\n                                        \r\n                                        //     {nft?.NFTMetaFiles.map((option) => (\r\n                                        //         <MenuItem key={option.fieldValue} value={option.fieldValue}>\r\n                                        //             {option.fieldName}\r\n                                        //         </MenuItem>\r\n                                        //     ))}\r\n                                        // </TextField> */}\r\n                                        </Grid>\r\n                                        <Grid item mt={2} mb={2} className=\"timer\" xs={12}>\r\n                                            <Grid\r\n                                                sx={{ background: theme.palette.mode === 'dark' ? '#181C1F' : '#d9d9d9' }}\r\n                                                className=\"auction\"\r\n                                                container\r\n                                            >\r\n                                                <Grid item md={6} xs={12} sm={12}>\r\n                                                    <Typography color={theme.palette.mode === 'dark' ? 'white' : 'black'} variant=\"body\">\r\n                                                        Auction Time{' '}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={12} sm={12}>\r\n                                                    <Typography color={theme.palette.mode === 'dark' ? 'white' : 'black'} variant=\"body\">\r\n                                                        {' '}\r\n                                                        2h : 40m : 03s\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <Grid container>\r\n                                                <Grid mt={-2} item md={3} xs={12} sm={12}>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography\r\n                                                            color={theme.palette.mode === 'dark' ? 'white' : '#404040'}\r\n                                                            sx={{ paddingLeft: { md: '22px' }, textAlign: { md: 'left' } }}\r\n                                                            className=\"price\"\r\n                                                            variant=\"body2\"\r\n                                                        >\r\n                                                            Price\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography\r\n                                                            color={theme.palette.mode === 'dark' ? 'white' : '#262626'}\r\n                                                            sx={{ paddingLeft: { md: '22px' }, textAlign: { md: 'left' } }}\r\n                                                            className=\"ETH \"\r\n                                                            variant=\"h3\"\r\n                                                        >\r\n                                                            {nft.price} {nft.currencyType}\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                {/*      {buyerNft?.founded && (\r\n                                            <>\r\n                                                <Grid item xs={12} md={12} mt={1}>\r\n                                                    {(nft?.transactionHash !== '' || nft?.transactionHash) && (\r\n                                                        <>\r\n                                                            <Accordion sx={{ margin: '10px', border: '2px solid', borderRadius: '4px' }}>\r\n                                                                <AccordionSummary\r\n                                                                    expandIcon={<ExpandMoreIcon />}\r\n                                                                    aria-controls=\"panel1a-content\"\r\n                                                                    id=\"panel1a-header\"\r\n                                                                >\r\n                                                                    <Typography>Transaction hash</Typography>\r\n                                                                </AccordionSummary>\r\n                                                                <AccordionDetails>\r\n                                                                    <a target=\"_blank\" href={nft?.transactionHash}>\r\n                                                                        {nft?.transactionHash}\r\n                                                                    </a>\r\n                                                                </AccordionDetails>\r\n                                                            </Accordion>\r\n                                                        </>\r\n                                                    )}\r\n                                                </Grid>\r\n                                                <Grid item xs={12} md={12}>\r\n                                                    <Accordion sx={{ margin: '10px', border: '2px solid', borderRadius: '4px' }}>\r\n                                                        <AccordionSummary\r\n                                                            expandIcon={<ExpandMoreIcon />}\r\n                                                            aria-controls=\"panel2a-content\"\r\n                                                            id=\"panel2a-header\"\r\n                                                        >\r\n                                                            <Typography>Contract address</Typography>\r\n                                                        </AccordionSummary>\r\n                                                        <AccordionDetails>\r\n                                                            <Typography>{nft?.Category?.BrandCategories[0].contractAddress}</Typography>\r\n                                                        </AccordionDetails>\r\n                                                    </Accordion>\r\n                                                </Grid>\r\n                                            </>\r\n                                        )} */}\r\n\r\n                                                <>\r\n                                                    {(bought == true || nft?.isSold == true) && JSON.stringify(buyerNft) === '{}' ? (\r\n                                                        <>\r\n                                                            <Grid item md={8} xs={12} sm={12} textAlign=\"center\">\r\n                                                                <Alert severity=\"error\">\r\n                                                                    <b>This item is sold already!</b>\r\n                                                                </Alert>\r\n                                                            </Grid>\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <>\r\n                                                            {buyerNft?.founded ? (\r\n                                                                <>\r\n                                                                    <>\r\n                                                                        <Grid item md={12} sx={{ mt: 1, display: 'flex' }}>\r\n                                                                            <Grid item md={6} xs={12} sm={12}>\r\n                                                                                {buyerNft?.status == 'Redeem' || redeem ? (\r\n                                                                                    <>\r\n                                                                                        <Alert severity=\"success\">\r\n                                                                                            <b>This item is Redeemed</b>\r\n                                                                                        </Alert>\r\n                                                                                    </>\r\n                                                                                ) : (\r\n                                                                                    <>\r\n                                                                                        {buyerNft?.status !== 'Resell' && redeem !== true && (\r\n                                                                                            <>\r\n                                                                                                <Button\r\n                                                                                                    sx={{ float: { md: 'right' } }}\r\n                                                                                                    className=\"buy\"\r\n                                                                                                    variant=\"contained\"\r\n                                                                                                    size=\"large\"\r\n                                                                                                    onClick={() => {\r\n                                                                                                        handleRedeemNft();\r\n                                                                                                    }}\r\n                                                                                                >\r\n                                                                                                    {redeemLoader ? (\r\n                                                                                                        <CircularProgress\r\n                                                                                                            sx={{ color: 'white' }}\r\n                                                                                                        />\r\n                                                                                                    ) : (\r\n                                                                                                        <span> Redeem</span>\r\n                                                                                                    )}\r\n                                                                                                </Button>\r\n                                                                                            </>\r\n                                                                                        )}\r\n                                                                                    </>\r\n                                                                                )}\r\n                                                                            </Grid>\r\n                                                                            {buyerNft?.status == 'Resell' || resell == true ? (\r\n                                                                                <>\r\n                                                                                    <Grid\r\n                                                                                        item\r\n                                                                                        md={12}\r\n                                                                                        xs={12}\r\n                                                                                        sm={12}\r\n                                                                                        textAlign=\"center\"\r\n                                                                                        sx={{}}\r\n                                                                                    >\r\n                                                                                        <Alert severity=\"info\" sx={{ float: 'left' }}>\r\n                                                                                            <b>This item is resold by you!</b>\r\n                                                                                        </Alert>\r\n                                                                                    </Grid>\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    {buyerNft?.status !== 'Redeem' && redeem == false && (\r\n                                                                                        <>\r\n                                                                                            {resellLoader ? (\r\n                                                                                                <CircularProgress sx={{ color: 'white' }} />\r\n                                                                                            ) : (\r\n                                                                                                <ResellDialog />\r\n                                                                                            )}\r\n                                                                                        </>\r\n                                                                                    )}\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                        </Grid>\r\n                                                                    </>\r\n                                                                </>\r\n                                                            ) : (\r\n                                                                <>\r\n                                                                    {user?.role != 'Super Admin' &&\r\n                                                                        user?.role != 'Admin' &&\r\n                                                                        user?.role != 'Brand Admin' && (\r\n                                                                            <>\r\n                                                                                {bought !== true && (\r\n                                                                                    <Grid\r\n                                                                                        item\r\n                                                                                        md={9}\r\n                                                                                        xs={12}\r\n                                                                                        sm={12}\r\n                                                                                        sx={{ marginTop: { md: '-10px', lg: '-10px' } }}\r\n                                                                                        textAlign=\"center\"\r\n                                                                                    >\r\n                                                                                        <Button\r\n                                                                                            sx={{ float: { md: 'right' } }}\r\n                                                                                            className=\"buy\"\r\n                                                                                            variant=\"contained\"\r\n                                                                                            size=\"large\"\r\n                                                                                            onClick={() => {\r\n                                                                                                handleBuyNft();\r\n                                                                                            }}\r\n                                                                                        >\r\n                                                                                            {loader ? (\r\n                                                                                                <CircularProgress className=\"circul\" />\r\n                                                                                            ) : (\r\n                                                                                                <span>Buy Now</span>\r\n                                                                                            )}\r\n                                                                                        </Button>\r\n                                                                                    </Grid>\r\n                                                                                )}\r\n                                                                            </>\r\n                                                                        )}\r\n                                                                </>\r\n                                                            )}\r\n                                                        </>\r\n                                                    )}\r\n                                                </>\r\n                                            </Grid>\r\n                                            {/* \r\n                                            <Button onClick={()=>{\r\n                                                setBought(true)\r\n                                            }}>Set Bought True</Button>\r\n                                            <Button onClick={()=>{\r\n                                                setBought(false)\r\n                                            }}>Set Bought False</Button> */}\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item md={1} sm={12}></Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default PropertiesView;\r\n","// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Container, Card, Grid, Typography, CardActionArea, CardContent, Divider } from '@mui/material';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport { getAllSimilarProducts } from 'redux/marketplace/actions';\r\nconst SimilarProducts = ({ nft }) => {\r\n    const theme = useTheme();\r\n    const itemData = [\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Cars',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Shoes',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1522770179533-24471fcdba45',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Real Estate',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Goods',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Cars',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Shoes',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1522770179533-24471fcdba45',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Real Estate',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Goods',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        }\r\n    ];\r\n\r\n    const dispatch = useDispatch();\r\n    const similarProductNfts = useSelector((state) => state.marketplaceReducer.similarProductNfts);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(12);\r\n    const [click, setClick] = useState(false);\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllSimilarProducts({\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                categoryId: nft.CategoryId,\r\n                nftId: nft.id\r\n            })\r\n        );\r\n        setClick(false);\r\n    }, [click, search, page, limit]);\r\n\r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12} lg={12} md={12}>\r\n                <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                    <Grid item xs={12}>\r\n                        <Typography\r\n                        color={theme.palette.mode === 'dark' ? '#FFFFFF' : 'black'}\r\n                        className='productfigmastyl'\r\n                            variant=\"h2\"\r\n                            mt={4}\r\n                            component=\"div\"\r\n                            sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' },\r\n                             textTransform: 'capitalize' }}\r\n                        >\r\n                            Similar Products\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            {similarProductNfts?.nfts?.rows.lenght > 0 ? (\r\n                <Grid item xs={12}>\r\n                    <Grid container justifyContent=\"left\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n                        {similarProductNfts?.nfts?.rows.map((data) => (\r\n                            <Grid item md={2} sm={6}>\r\n                                <Card\r\n                                    sx={{\r\n                                        color: theme.palette.mode === 'dark' ? 'white' : '#404040',\r\n                                        background: theme.palette.mode === 'dark' ? '#181C1F' : 'white',\r\n                                        maxWidth: 365,\r\n                                        width: '105%',\r\n                                        boxShadow: '1px 2px 6px #d3d3d3',\r\n                                        borderRadius: '7px'\r\n                                    }}\r\n                                >\r\n                                    <CardActionArea>\r\n                                        <CardMedia component=\"img\" height=\"200\" image={data.asset} />\r\n                                        <CardContent sx={{ padding: '6%' }}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={8} sx={{ textAlign: 'left' }}>\r\n                                                    <span style={{ fontWeight: '550', fontSize: '130%' }}>\r\n                                                    {data.Brand.name}</span>\r\n                                                    <Grid className=\"overflow\" sx={{ marginTop: '5%' }}>\r\n                                                        {data.name}\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid item xs={4} sx={{ background: '' }}>\r\n                                                    <span style={{ fontWeight: '50 !important ', fontSize: '110%', \r\n                                                    float: 'right' }}>\r\n                                                        Creator\r\n                                                    </span>\r\n                                                </Grid>\r\n                                            </Grid>\r\n\r\n                                            <Divider sx={{ mt: 2, mb: 2 }} />\r\n                                            <Grid container sx={{ background: '' }}>\r\n                                                <Grid item md={6} xs={12} className=\"overflow\" sx={{ pt: 1 }}>\r\n                                                    <span\r\n                                                        style={{\r\n                                                            background: theme.palette.mode === 'dark' ? 'black' : '#d9d9d9',\r\n                                                            padding: '3% 4%',\r\n                                                            borderRadius: '10%',\r\n                                                            color: 'white',\r\n                                                            fontSize: '80%'\r\n                                                        }}\r\n                                                    >\r\n                                                        02h\r\n                                                    </span>{' '}\r\n                                                    :{' '}\r\n                                                    <span\r\n                                                        style={{\r\n                                                            background: theme.palette.mode === 'dark' ? 'black' : '#d9d9d9',\r\n                                                            padding: '3% 4%',\r\n                                                            borderRadius: '10%',\r\n                                                            color: 'white',\r\n                                                            fontSize: '80%'\r\n                                                        }}\r\n                                                    >\r\n                                                        25m\r\n                                                    </span>{' '}\r\n                                                    :{' '}\r\n                                                    <span\r\n                                                        style={{\r\n                                                            background: theme.palette.mode === 'dark' ? 'black' : '#d9d9d9',\r\n                                                            padding: '3% 4%  ',\r\n                                                            borderRadius: '10%',\r\n                                                            color: 'white',\r\n                                                            fontSize: '80%'\r\n                                                        }}\r\n                                                    >\r\n                                                        04s\r\n                                                    </span>\r\n                                                </Grid>\r\n                                                <Grid\r\n                                                    item\r\n                                                    md={6}\r\n                                                    xs={12}\r\n                                                    className=\"overflow\"\r\n                                                    sx={{ pl: 1, marginTop: { xs: '10px', md: '0' } }}\r\n                                                >\r\n                                                    Current Bid\r\n                                                    <div style={{ marginTop: '5%', fontSize: '110%' }}>\r\n                                                        {data.currencyType + ' ' + data.price}\r\n                                                    </div>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </CardContent>\r\n                                    </CardActionArea>\r\n                                </Card>\r\n                            </Grid>\r\n                        ))}\r\n                    </Grid>\r\n                </Grid>\r\n            ) : (\r\n                <Grid item xs={12}>\r\n                    <Typography\r\n                        variant=\"h3\"\r\n                        mt={1}\r\n                        component=\"div\"\r\n                        sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center', color: 'gray' }, textTransform: 'capitalize' }}\r\n                    >\r\n                         Not any similar product available..!\r\n                    </Typography>\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SimilarProducts;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport AutorenewIcon from '@mui/icons-material/Autorenew';\r\nimport {\r\n    Typography,\r\n    Grid,\r\n    Select,\r\n    InputLabel,\r\n    FormControl,\r\n    MenuItem,\r\n   \r\n    Divider\r\n} from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { IconButton, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip } from '@mui/material';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nconst Activity = () => {\r\n    const theme = useTheme();\r\n    const itemData = [\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Vlad556 ',\r\n            to: 'Vlad556 ',\r\n            days: '9 Days ago '\r\n        },\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Alex 67 ',\r\n            to: 'Alex 67 ',\r\n            days: '6 Days ago '\r\n        },\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'cynthia321 ',\r\n            to: 'cynthia321 ',\r\n            days: '60 Days ago '\r\n        },\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Vlad556 ',\r\n            to: 'Vlad556 ',\r\n            days: '79 Days ago '\r\n        }\r\n    ];\r\n    const [search, setSearch] = useState('');\r\n\r\n    return (\r\n        <>\r\n            <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n                <Grid item xs={12} lg={12} md={12}>\r\n                    <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                        <Grid item xs={12}>\r\n                            <Typography\r\n                            color={theme.palette.mode === 'dark' ? '#FFFFFF' : 'black'}\r\n                            className='productfigmastyl'\r\n                                variant=\"h2\"\r\n                                mt={4}\r\n                                component=\"div\"\r\n                                sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' }, \r\n                                textTransform: 'capitalize' }}\r\n                            >\r\n                                Activity\r\n                                <AutorenewIcon />\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <Grid item md={12} sm={12}>\r\n                        <MainCard\r\n                         className='tableShadow'\r\n                            sx={{ background: theme.palette.mode === 'dark' ? '#181C1F' : '#fff' }}\r\n                            title={\r\n                                <Grid container spacing={gridSpacing}>\r\n                                    <Grid item xs={12}>\r\n                                        <FormControl  sx={{ background:theme.palette.mode === 'dark' ? '#181C1F'\r\n                                        : '#d9d9d9',color:theme.palette.mode === 'dark' ? '#ffff'\r\n                                        : 'black', border: '2px solid #CDCDCD' , borderRadius:'4px'}} fullWidth>\r\n                                            <InputLabel sx={{color:'#CDCDCD'}} id=\"age-select\">Filter</InputLabel>\r\n                                            <Select\r\n                                            variant='standard'\r\n                                                fullWidth\r\n                                                labelId=\"age-select\"\r\n                                                id=\"age\"\r\n                                                name=\"age\"\r\n                                                // defaultValue={formik.values.age}\r\n                                                // onChange={formik.handleChange}\r\n                                                label=\"Age\"\r\n                                            >\r\n                                                <MenuItem value=\"\">\r\n                                                    <em>Filter</em>\r\n                                                </MenuItem>\r\n                                                <MenuItem value={10}>Ten</MenuItem>\r\n                                                <MenuItem value={20}>Twenty</MenuItem>\r\n                                                <MenuItem value={30}>Thirty</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            }\r\n                            content={false}\r\n                        >\r\n                            <Divider />\r\n                            <TableContainer>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">Event </TableCell>\r\n                                            <TableCell align=\"center\">Price </TableCell>\r\n                                            <TableCell align=\"center\">From</TableCell>\r\n                                            <TableCell align=\"center\">To </TableCell>\r\n                                            <TableCell align=\"center\">Date</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    {itemData.map((item) => (\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell align=\"center\">{item.title}</TableCell>\r\n                                                <TableCell align=\"center\">{item.price}</TableCell>\r\n                                                <TableCell sx={{ color: '#2194FF' }} align=\"center\">\r\n                                                    {item.from}\r\n                                                </TableCell>\r\n                                                <TableCell sx={{ color: '#2194FF' }} align=\"center\">\r\n                                                    {item.to}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"center\">{item.days}</TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    ))}\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </MainCard>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Activity;\r\n","// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Container, Grid, Typography } from '@mui/material';\r\n\r\n// project imports\r\n\r\nimport SubCard from 'ui-component/cards/SubCard';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// =============================|| LANDING - FEATURE PAGE ||============================= //\r\n\r\nconst Properties = ({ nft }) => {\r\n    const theme = useTheme();\r\n    const property = [\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        }\r\n    ];\r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12} lg={12} md={12}>\r\n                <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                    <Grid item xs={12}>\r\n                        <Typography\r\n                        color={theme.palette.mode === 'dark' ? '#FFFFFF' : 'black'}\r\n                        className='productfigmastyl'\r\n                            variant=\"h2\"\r\n                            mt={4}\r\n                            component=\"div\"\r\n                            sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' }, textTransform: 'capitalize' }}\r\n                        >\r\n                            Properties\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            {nft.NFTMetaData?.length > 0 ? (\r\n                <>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justifyContent=\"left\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n                            {nft?.NFTMetaData.map((item) => (\r\n                                <Grid item md={4} lg={2} xs={12} sm={6} >\r\n                                    <SubCard\r\n                                        className=\"property propertyShadow\"\r\n                                        sx={{ background: theme.palette.mode === 'dark' ? '#181C1F' : '#fff' }}\r\n                                    >\r\n                                        <Grid container justifyContent=\"center\" spacing={2}>\r\n                                            <Grid item xs={12}>\r\n                                                <Typography className=\"pbackground\" variant=\"h3\">\r\n                                                    {item.fieldName}\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={12}>\r\n                                            \r\n                                                <Typography  color={theme.palette.mode === 'dark' ? 'white' : 'black'}\r\n                                                 className=\"centerText encapPropertry\" variant=\"h3\">\r\n                                                    {item.fieldValue}{' '}\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={12}>\r\n                                                <Typography\r\n                                                \r\n                                                    // color={theme.palette.mode === 'dark' ? 'white' : 'black'}\r\n                                                    className=\"plight\"\r\n                                                    variant=\"body2\"\r\n                                                >\r\n                                                    94% Have this trait\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </SubCard>\r\n                                </Grid>\r\n                            ))}\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Typography\r\n                                variant=\"h3\"\r\n                                mt={2}\r\n                                component=\"div\"\r\n                                sx={{\r\n                                    textAlign: { xs: 'center', md: 'left', sm: 'center' },\r\n                                    textTransform: 'capitalize',\r\n                                    color: '#9498aa'\r\n                                }}\r\n                            >\r\n                                No Property Found..!\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            )}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Properties;\r\n","import { useLocation } from 'react-router-dom';\r\nimport { useTheme } from '@emotion/react';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Grid } from '@mui/material';\r\nimport PropertiesView from './component/productView';\r\nimport SimilarProducts from './component/similarProducts';\r\nimport Activity from './component/activity';\r\nimport Properties from './component/properties';\r\nconst ProductDetails = () => {\r\n    const theme = useTheme();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n    const marketplaceNfts = useSelector((state) => state.marketplaceReducer.marketplaceNfts);\r\n\r\n    return (\r\n        <>\r\n            <Grid\r\n                container-fluid\r\n                md={12}\r\n                lg={11}\r\n                sx={{\r\n                    display: { xs: 'block', sm: 'block', md: 'flex', lg: 'flex' },\r\n                    background: 'tranparent',\r\n                    color: theme.palette.mode === 'dark' ? 'white' : '#404040'\r\n                }}\r\n            >\r\n                <Grid item md={12} xs={12} lg={11}>\r\n                    <Grid container-fluid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <Grid container>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <PropertiesView nft={location.state.nft} />\r\n                                </Grid>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <Properties nft={location.state.nft} />\r\n                                </Grid>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <Activity nft={location.state.nft} />\r\n                                </Grid>\r\n\r\n                                <Grid item md={12} xs={12}>\r\n                                    <SimilarProducts nft={location.state.nft} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProductDetails;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","const BLOCKCHAIN = \r\n    {\r\n        WALLET_ADDRESS: '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651',\r\n        ERC20: '0x943b645e4dEE17D102745f5b1B40B775f06C0366'\r\n    }\r\n    \r\n\r\n\r\nexport default BLOCKCHAIN\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// ==============================|| CUSTOM SUB CARD ||============================== //\r\n\r\nconst SubCard = forwardRef(({ children, content, contentClass, darkTitle, secondary, sx = {}, contentSX = {}, title, ...others }, ref) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            ref={ref}\r\n            sx={{\r\n                border: '1px solid',\r\n                borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light,\r\n                ':hover': {\r\n                    boxShadow: theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' : '0 2px 14px 0 rgb(32 40 45 / 8%)'\r\n                },\r\n                ...sx\r\n            }}\r\n            {...others}\r\n        >\r\n            {/* card header and action */}\r\n            {!darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h5\">{title}</Typography>} action={secondary} />}\r\n            {darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h4\">{title}</Typography>} action={secondary} />}\r\n\r\n            {/* content & header divider */}\r\n            {title && (\r\n                <Divider\r\n                    sx={{\r\n                        opacity: 1,\r\n                        borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light\r\n                    }}\r\n                />\r\n            )}\r\n\r\n            {/* card content */}\r\n            {content && (\r\n                <CardContent sx={{ p: 2.5, ...contentSX }} className={contentClass || ''}>\r\n                    {children}\r\n                </CardContent>\r\n            )}\r\n            {!content && children}\r\n        </Card>\r\n    );\r\n});\r\n\r\nSubCard.propTypes = {\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    sx: PropTypes.object,\r\n    contentSX: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nSubCard.defaultProps = {\r\n    content: true\r\n};\r\n\r\nexport default SubCard;\r\n"],"sourceRoot":""}