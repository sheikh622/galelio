{"version":3,"sources":["utils/formatNumber.js","views/pages/brandAdmin/nftManagement/component/quantitySelector.js","assets/images/icons/image-upload.svg","views/pages/brandAdmin/nftManagement/component/addNft.js","views/pages/brandAdmin/nftManagement/component/mainCard.js","views/pages/brandAdmin/nftManagement/component/editNftDialog.js","views/pages/brandAdmin/nftManagement/component/requestForMintDialog.js","views/pages/brandAdmin/nftManagement/component/deleteNftDialog.js","views/pages/brandAdmin/nftManagement/component/details.js","views/pages/brandAdmin/nftManagement/component/nftcard.js","views/pages/brandAdmin/nftManagement/index.js","constants.js"],"names":["fData","number","numeral","format","QuantitySelector","formik","fileArray","index","style","display","marginRight","Typography","marginTop","TextField","type","className","id","value","quantity","onChange","e","target","setFieldValue","Transition","forwardRef","props","ref","Slide","direction","typeArray","label","AddNft","open","setOpen","data","search","page","limit","nftType","dispatch","useDispatch","user","useSelector","state","auth","useState","mintType","setMintType","uploadedImages","setUploadedImages","fieldDataArray","setFieldDataArray","setType","validationSchema","Yup","nftName","required","max","matches","nftDescription","nftPrice","min","typeError","images","useFormik","enableReinitialize","initialValues","onSubmit","values","isValid","parseInt","toast","error","image","name","split","pop","forEach","array","fieldName","fieldValue","handleError","addNft","categoryId","CategoryId","metaDataArray","price","description","currencyType","asset","handleClose","BrandId","hasFile","length","resetForm","handleDrop","useCallback","acceptedFiles","newUploadedImages","map","acceptedFile","useDropzone","accept","onDrop","getRootProps","getInputProps","isDragActive","isDragReject","isDragAccept","Dialog","onClose","maxWidth","TransitionComponent","keepMounted","Grid","container","spacing","item","md","xs","textAlign","DialogTitle","sx","Button","variant","onClick","Divider","DialogContent","autoComplete","handleSubmit","mt","pr","fullWidth","handleChange","touched","Boolean","errors","helperText","select","event","option","MenuItem","multiline","rows","float","handleFieldNameChange","handleFieldValueChange","IconButton","color","edge","size","splice","handleRemoveField","icon","closeFill","width","height","background","borderRadius","paddingBottom","paddingTop","lg","clsx","Box","component","alt","src","UploadImage","ml","Link","underline","List","disablePadding","list","AnimatePresence","file","ListItem","motion","div","ListItemIcon","fileFill","ListItemText","primary","secondary","primaryTypographyProps","newFiles","handleRemoveFile","DialogActions","AnimateButton","my","disableElevation","headerSX","mr","MainCard","border","boxShadow","children","content","contentClass","contentSX","darkTitle","shadow","title","others","theme","useTheme","Card","borderColor","palette","mode","default","CardHeader","action","CardContent","currencyTypeArray","EditNftDialog","nftInfo","loader","setLoader","setCurrencyType","isFile","File","editNft","useEffect","structuredClone","RequestForMintDialog","nftData","handleMintRequest","console","log","profitPercentage","Category","BrandCategories","quant","NFTTokens","amount","prices","ethers","utils","parseEther","toString","erc20Address","BLOCKCHAIN","ERC20","provider","providers","Web3Provider","window","ethereum","signer","getSigner","token","Contract","Erc20","transfer","requestNftForMinting","brandId","DialogContentText","dark","DeleteNFTDialog","deleteNft","DetailsDialog","status","Brand","scroll","descriptionElementRef","useRef","descriptionElement","current","focus","dividers","gridSpacing","margin","justifyContent","sm","pt","NftCard","openRequestMint","setOpenRequestMint","editNftOpen","setEditNftOpen","deleteNftOpen","setDeleteNftOpen","DetailsNftOpen","setDetailsNftOpen","setImage","setNftInfo","position","transform","transition","CardMedia","p","textDecoration","textTransform","overflow","Stack","alignItems","NFTMetaData","NftManagement","navigate","useNavigate","location","useLocation","nftList","nftReducer","setSearch","setPage","setLimit","addNftOpen","setAddNftOpen","anchorEl","setAnchorEl","getAllNft","marginBottom","fontWeight","nfts","mb","pl","nft","Pagination","showFirstButton","showLastButton","count","pages","newPage","grey","endIcon","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","padding","WALLET_ADDRESS"],"mappings":"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","file":"static/js/32.fa46b593.chunk.js","sourcesContent":["import { replace } from 'lodash';\r\nimport numeral from 'numeral';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function fCurrency(number) {\r\n  return numeral(number).format(Number.isInteger(number) ? '$0,0' : '$0,0.00');\r\n}\r\n\r\nexport function fPercent(number) {\r\n  return numeral(number / 100).format('0.0%');\r\n}\r\n\r\nexport function fNumber(number) {\r\n  return numeral(number).format();\r\n}\r\n\r\nexport function fShortenNumber(number) {\r\n  return replace(numeral(number).format('0.00a'), '.00', '');\r\n}\r\n\r\nexport function fData(number) {\r\n  return numeral(number).format('0.0 b');\r\n}\r\n","import { Typography, TextField } from '@mui/material';\r\nconst QuantitySelector = ({ formik, fileArray, index }) => {\r\n    const handleChange = (value) => {\r\n        fileArray[index].quantity = value;\r\n        formik.setFieldValue('images', fileArray);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: 'flex', marginRight: '10px' }}>\r\n                <Typography style={{ marginTop: '12px', marginRight: '5px' }}>Quantity : </Typography>\r\n\r\n                <TextField\r\n                    type=\"number\"\r\n                    className=\"quantityField\"\r\n                    id=\"outlined-select-currency-native\"\r\n                    value={fileArray[index].quantity}\r\n                    onChange={(e) => {\r\n                        handleChange(e.target.value);\r\n                    }}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuantitySelector;\r\n","export default __webpack_public_path__ + \"static/media/image-upload.54137b05.svg\";","import { forwardRef, useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    TextField,\r\n    Divider,\r\n    Box,\r\n    Link,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    IconButton,\r\n    MenuItem\r\n} from '@mui/material';\r\n\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Icon } from '@iconify/react';\r\nimport { addNft } from 'redux/nftManagement/actions';\r\nimport { fData } from 'utils/formatNumber';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport QuantitySelector from './quantitySelector';\r\nimport fileFill from '@iconify-icons/eva/file-fill';\r\nimport closeFill from '@iconify-icons/eva/close-fill';\r\nimport UploadImage from 'assets/images/icons/image-upload.svg';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport clsx from 'clsx';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nconst typeArray = [\r\n    {\r\n        value: 'ETH',\r\n        label: 'ETH'\r\n    },\r\n    {\r\n        value: 'USDT',\r\n        label: 'USDT'\r\n    }\r\n];\r\n\r\nexport default function AddNft({ open, setOpen, data, search, page, limit, nftType }) {\r\n    const dispatch = useDispatch();\r\n    const user = useSelector((state) => state.auth.user);\r\n    const [mintType, setMintType] = useState('directMint');\r\n    const [uploadedImages, setUploadedImages] = useState([]);\r\n    const [fieldDataArray, setFieldDataArray] = useState([]);\r\n    const [type, setType] = useState('ETH');\r\n    const handleType = (event) => {\r\n        setType(event.target.value);\r\n    };\r\n\r\n    const handleError = (fieldDataArray, values) => {\r\n        let isValid = true;\r\n        if (parseInt(values.images[0].quantity) < 1) {\r\n            toast.error('NFT Quantity must be greater than zero');\r\n            isValid = false;\r\n        }\r\n        if (values.images[0].image.name.split('.').pop() == 'jpg' || values.images[0].image.name.split('.').pop() == 'png') {\r\n        } else {\r\n            toast.error('Upload the files with these extensions: jpg, png, gif');\r\n            isValid = false;\r\n        }\r\n\r\n        fieldDataArray.forEach((array) => {\r\n            if (array.fieldName == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata name fields are mandatory`);\r\n            }\r\n            if (array.fieldValue == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata value fields are mandatory`);\r\n            }\r\n        });\r\n        return isValid;\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        nftName: Yup.string()\r\n            .required('NFT Name is required!')\r\n            .max(42, 'NFT Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT name'),\r\n        nftDescription: Yup.string()\r\n            .required('NFT Description is required!')\r\n            .max(500, 'Invalid NFT description can not exceed 500 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT description'),\r\n        nftPrice: Yup.number()\r\n            .min(0.000001, 'Price should not less than zero')\r\n            .required('NFT Price is required')\r\n            .typeError('Invalid Price'),\r\n        images: Yup.mixed()\r\n    });\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            nftName: '',\r\n            nftDescription: '',\r\n            nftPrice: 0,\r\n            images: []\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            let isValid = handleError(fieldDataArray, values);\r\n            if (isValid) {\r\n                dispatch(\r\n                    addNft({\r\n                        categoryId: data.CategoryId,\r\n                        mintType: mintType,\r\n                        metaDataArray: fieldDataArray,\r\n                        name: values.nftName,\r\n                        price: values.nftPrice,\r\n                        description: values.nftDescription,\r\n                        currencyType: type,\r\n                        quantity: values.images[0].quantity,\r\n                        asset: values.images[0].image,\r\n                        type: nftType,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        categoryId: data.CategoryId,\r\n                        handleClose: handleClose,\r\n                        brandId: user.BrandId\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n\r\n    const hasFile = formik.values.images.length > 0;\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n        setMintType('directMint');\r\n        setType('ETH');\r\n        setUploadedImages([]);\r\n        setFieldDataArray([]);\r\n    };\r\n    const handleDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            let newUploadedImages = [...uploadedImages];\r\n            acceptedFiles.map(async (acceptedFile) => {\r\n                let data = { image: acceptedFile, quantity: 1 };\r\n                newUploadedImages = [...newUploadedImages, data];\r\n            });\r\n            formik.setFieldValue('images', newUploadedImages);\r\n            setUploadedImages(newUploadedImages);\r\n        },\r\n\r\n        [formik.setFieldValue, uploadedImages]\r\n    );\r\n    const handleRemoveFile = (file, index) => {\r\n        const newFiles = [...formik.values.images];\r\n        newFiles.splice(index, 1);\r\n        setUploadedImages(newFiles);\r\n        formik.setFieldValue('images', newFiles);\r\n    };\r\n\r\n    const { getRootProps, getInputProps, isDragActive, isDragReject, isDragAccept } = useDropzone({\r\n        accept: '.jpeg,.png,.jpg,.gif',\r\n        onDrop: handleDrop\r\n    });\r\n\r\n    const handleFieldNameChange = (value, index) => {\r\n        let array = [...fieldDataArray];\r\n        array[index].fieldName = value;\r\n        setFieldDataArray(array);\r\n    };\r\n    const handleFieldValueChange = (value, index) => {\r\n        let array = [...fieldDataArray];\r\n        array[index].fieldValue = value;\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleRemoveField = (index) => {\r\n        let array = [...fieldDataArray];\r\n        array.splice(index, 1);\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog\"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={8} xs={12} textAlign=\"left\">\r\n                        <DialogTitle id=\"alert-dialog-slide-title1\">Add NFT</DialogTitle>\r\n                    </Grid>\r\n                    <Grid item md={4} xs={12} sx={{ marginTop: '15px' }}>\r\n                        <Button\r\n                            sx={{ marginRight: '10px' }}\r\n                            variant={mintType == 'directMint' ? 'contained' : 'outlined'}\r\n                            onClick={() => {\r\n                                setMintType('directMint');\r\n                            }}\r\n                        >\r\n                            Direct Mint\r\n                        </Button>\r\n                        <Button\r\n                            variant={mintType == 'lazyMint' ? 'contained' : 'outlined'}\r\n                            onClick={() => {\r\n                                setMintType('lazyMint');\r\n                            }}\r\n                        >\r\n                            Lazy Minting\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid container mt={2}>\r\n                            <Grid xs={4} mt={2} pr={3}>\r\n                                <TextField\r\n                                    id=\"nftName\"\r\n                                    name=\"nftName\"\r\n                                    label=\"NFT Name\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftName && Boolean(formik.errors.nftName)}\r\n                                    helperText={formik.touched.nftName && formik.errors.nftName}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid xs={4} mt={2} pr={3}>\r\n                                <TextField\r\n                                    id=\"nftPrice\"\r\n                                    name=\"nftPrice\"\r\n                                    label=\"NFT Price\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftPrice}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftPrice && Boolean(formik.errors.nftPrice)}\r\n                                    helperText={formik.touched.nftPrice && formik.errors.nftPrice}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid xs={4} mt={2} pr={3}>\r\n                                <TextField\r\n                                    id=\"outlined-select-budget\"\r\n                                    select\r\n                                    fullWidth\r\n                                    label=\"Select Token\"\r\n                                    value={type}\r\n                                    onChange={handleType}\r\n                                >\r\n                                    {typeArray.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Grid>\r\n                            <Grid xs={12} mt={2} pr={3}>\r\n                                <TextField\r\n                                    multiline\r\n                                    rows={2}\r\n                                    id=\"nftDescription\"\r\n                                    name=\"nftDescription\"\r\n                                    label=\"NFT Description\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftDescription}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftDescription && Boolean(formik.errors.nftDescription)}\r\n                                    helperText={formik.touched.nftDescription && formik.errors.nftDescription}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} mt={2} pr={3}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'right' }}\r\n                                    onClick={() => {\r\n                                        setFieldDataArray([\r\n                                            ...fieldDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: ''\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add Fields\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {fieldDataArray.length != 0 && (\r\n                            <>\r\n                                <Grid container spacing={4}>\r\n                                    {fieldDataArray.map((data, index) => (\r\n                                        <>\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    id=\"field_name\"\r\n                                                    name=\"field_name\"\r\n                                                    label=\"Metadata Name\"\r\n                                                    value={data.fieldName}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldNameChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    id=\"field_value\"\r\n                                                    name=\"field_value\"\r\n                                                    label=\"Metadata Value\"\r\n                                                    value={data.fieldValue}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldValueChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2}>\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        handleRemoveField(index);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                            </Grid>\r\n                                        </>\r\n                                    ))}\r\n                                </Grid>\r\n                            </>\r\n                        )}\r\n\r\n                        {uploadedImages.length !== 1 && (\r\n                            <Grid\r\n                                sx={{ background: '#c5cbe9', borderRadius: '5px', paddingBottom: '2rem', paddingTop: '2rem' }}\r\n                                item\r\n                                lg={12}\r\n                                mt={3}\r\n                            >\r\n                                <div className={clsx('dropZoneContainer', 'xyz')}>\r\n                                    <div\r\n                                        className={clsx('dropZone', {\r\n                                            isDragActive: isDragActive,\r\n                                            isDragAccept: isDragAccept,\r\n                                            isDragReject: isDragReject\r\n                                        })}\r\n                                        {...getRootProps()}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n\r\n                                        <Grid container direction=\"column\">\r\n                                            <Box\r\n                                                textAlign=\"center\"\r\n                                                component=\"img\"\r\n                                                alt=\"Select File\"\r\n                                                src={UploadImage}\r\n                                                sx={{ height: 60 }}\r\n                                            />\r\n\r\n                                            <Box mt={4} textAlign=\"center\" sx={{ ml: { md: 0 } }}>\r\n                                                <Typography variant=\"subtitle\" sx={{ color: 'grey', textAlign: 'center' }}>\r\n                                                    Drop your image or&nbsp;\r\n                                                    <Link underline=\"always\">browse</Link>.&nbsp;\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </div>\r\n                            </Grid>\r\n                        )}\r\n                        <Grid item lg={12} mt={3}>\r\n                            <List disablePadding className={clsx({ list: hasFile })} sx={{ mt: 3 }}>\r\n                                <AnimatePresence>\r\n                                    {formik.values.images &&\r\n                                        formik.values.images.map((file, index) => (\r\n                                            <ListItem key={file.image.name} component={motion.div} className=\"listItem\">\r\n                                                <ListItemIcon>\r\n                                                    <Icon icon={fileFill} width={32} height={32} />\r\n                                                </ListItemIcon>\r\n                                                <ListItemText\r\n                                                    primary={file.image.name ? file.image.name : ''}\r\n                                                    secondary={fData(file.image.size) ? fData(file.image.size) : ''}\r\n                                                    primaryTypographyProps={{\r\n                                                        variant: 'subtitle2'\r\n                                                    }}\r\n                                                />\r\n                                                <QuantitySelector formik={formik} fileArray={formik.values.images} index={index} />\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => handleRemoveFile(file.image, index)}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                            </ListItem>\r\n                                        ))}\r\n                                </AnimatePresence>\r\n                            </List>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n                <Divider />\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1 }}\r\n                            onClick={() => {\r\n                                formik.handleSubmit();\r\n                            }}\r\n                            size=\"large\"\r\n                            disableElevation\r\n                        >\r\n                            Add\r\n                        </Button>\r\n                    </AnimateButton>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1, color: '#fff' }}\r\n                            onClick={handleClose}\r\n                            color=\"secondary\"\r\n                            size=\"large\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </AnimateButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.mode === 'dark' ? theme.palette.background.default\r\n                     : \r\n                    theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow\r\n                            ? shadow ||\r\n                              (theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' :\r\n                               '0 2px 14px 0 rgb(32 40 45 / 8%)')\r\n                            : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","import { forwardRef, useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    TextField,\r\n    Divider,\r\n    Box,\r\n    Link,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    ListItemSecondaryAction,\r\n    IconButton,\r\n    MenuItem\r\n} from '@mui/material';\r\n\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Icon } from '@iconify/react';\r\nimport { editNft } from 'redux/nftManagement/actions';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport fileFill from '@iconify-icons/eva/file-fill';\r\nimport closeFill from '@iconify-icons/eva/close-fill';\r\nimport QuantitySelector from './quantitySelector';\r\nimport UploadImage from 'assets/images/icons/image-upload.svg';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport clsx from 'clsx';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nconst currencyTypeArray = [\r\n    {\r\n        value: 'ETH',\r\n        label: 'ETH'\r\n    },\r\n    {\r\n        value: 'USDT',\r\n        label: 'USDT'\r\n    }\r\n];\r\n\r\nexport default function EditNftDialog({ nftInfo, categoryId, type, search, page, limit, loader, setLoader, open, setOpen }) {\r\n    const dispatch = useDispatch();\r\n    const [mintType, setMintType] = useState('directMint');\r\n    const [currencyType, setCurrencyType] = useState('ETH');\r\n    const [fieldDataArray, setFieldDataArray] = useState([]);\r\n    const [uploadedImages, setUploadedImages] = useState([]);\r\n\r\n    const handleCurrencyType = (event) => {\r\n        setCurrencyType(event.target.value);\r\n    };\r\n\r\n    const handleError = (fieldDataArray, values, isFile) => {\r\n        let isValid = true;\r\n        if (isFile) {\r\n            if (values.images[0].image.name.split('.').pop() == 'jpg' || values.images[0].image.name.split('.').pop() == 'png') {\r\n            } else {\r\n                toast.error('Upload the files with these extensions: jpg, png, gif');\r\n                isValid = false;\r\n            }\r\n        }\r\n\r\n        if (parseInt(values.images[0].quantity) < 1) {\r\n            toast.error('NFT Quantity must be greater than zero');\r\n            isValid = false;\r\n        }\r\n\r\n        fieldDataArray.forEach((array) => {\r\n            if (array.fieldName == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata name fields are mandatory`);\r\n            }\r\n            if (array.fieldValue == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata value fields are mandatory`);\r\n            }\r\n        });\r\n        return isValid;\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        nftName: Yup.string()\r\n            .required('NFT Name is required!')\r\n            .max(42, 'NFT Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT name'),\r\n        nftDescription: Yup.string()\r\n            .required('NFT Description is required!')\r\n            .max(500, 'Invalid NFT description can not exceed 500 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT description'),\r\n        nftPrice: Yup.number()\r\n            .min(0.000001, 'Price should not less than zero')\r\n            .required('NFT Price is required')\r\n            .typeError('Invalid Price'),\r\n        images: Yup.mixed()\r\n    });\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: nftInfo,\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            let file = values.images[0].image;\r\n            let isFile = file instanceof File;\r\n            let isValid = handleError(fieldDataArray, values, isFile);\r\n            if (isValid) {\r\n                dispatch(\r\n                    editNft({\r\n                        id: nftInfo.id,\r\n                        name: values.nftName,\r\n                        price: values.nftPrice,\r\n                        description: values.nftDescription,\r\n                        quantity: values.images[0].quantity,\r\n                        asset: isFile ? values.images[0].image : null,\r\n                        currencyType: currencyType,\r\n                        mintType: mintType,\r\n                        metaDataArray: fieldDataArray,\r\n                        type: type,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        categoryId: categoryId,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n\r\n    const hasFile = formik.values.images.length > 0;\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n    const handleDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            let newUploadedImages = [...uploadedImages];\r\n            acceptedFiles.map(async (acceptedFile) => {\r\n                let data = { image: acceptedFile, quantity: 1 };\r\n                newUploadedImages = [...newUploadedImages, data];\r\n            });\r\n            formik.setFieldValue('images', newUploadedImages);\r\n            setUploadedImages(newUploadedImages);\r\n        },\r\n\r\n        [formik.setFieldValue, uploadedImages]\r\n    );\r\n    const handleRemoveFile = (index) => {\r\n        const newFiles = [...formik.values.images];\r\n        newFiles.splice(index, 1);\r\n        setUploadedImages(newFiles);\r\n        formik.setFieldValue('images', newFiles);\r\n    };\r\n\r\n    const { getRootProps, getInputProps, isDragActive, isDragReject, isDragAccept } = useDropzone({\r\n        accept: '.jpeg,.png,.jpg,.gif',\r\n        onDrop: handleDrop\r\n    });\r\n\r\n    const handleFieldNameChange = (value, index) => {\r\n        let array = structuredClone(fieldDataArray);\r\n        array[index].fieldName = value;\r\n        setFieldDataArray(array);\r\n    };\r\n    const handleFieldValueChange = (value, index) => {\r\n        let array = structuredClone(fieldDataArray);\r\n        array[index].fieldValue = value;\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleRemoveField = (index) => {\r\n        let array = [...fieldDataArray];\r\n        array.splice(index, 1);\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setFieldDataArray(nftInfo.fieldDataArray);\r\n        setMintType(nftInfo.mintType);\r\n        setCurrencyType(nftInfo.currencyType);\r\n        setUploadedImages(nftInfo.images);\r\n    }, [nftInfo]);\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog\"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n            <Grid container spacing={2}>\r\n            <Grid item md={8} xs={12} textAlign=\"left\">\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Edit NFT</DialogTitle>\r\n            </Grid>\r\n            <Grid item md={4} xs={12} sx={{ marginTop: '15px' }}>\r\n                <Button\r\n                    sx={{ marginRight: '10px' }}\r\n                    variant={mintType == 'directMint' ? 'contained' : 'outlined'}\r\n                    onClick={() => {\r\n                        setMintType('directMint');\r\n                    }}\r\n                >\r\n                    Direct Mint\r\n                </Button>\r\n                <Button\r\n                    variant={mintType == 'lazyMint' ? 'contained' : 'outlined'}\r\n                    onClick={() => {\r\n                        setMintType('lazyMint');\r\n                    }}\r\n                >\r\n                    Lazy Minting\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n        <Divider />\r\n\r\n                <DialogContent>\r\n                    <Grid container spacing={2} textAlign=\"end\">\r\n                        <Grid item xs={12}>\r\n                            <Button\r\n                                sx={{ marginRight: '10px' }}\r\n                                variant={mintType == 'directMint' ? 'contained' : 'outlined'}\r\n                                onClick={() => {\r\n                                    setMintType('directMint');\r\n                                }}\r\n                            >\r\n                                Direct Mint\r\n                            </Button>\r\n                            <Button\r\n                                variant={mintType == 'lazyMint' ? 'contained' : 'outlined'}\r\n                                onClick={() => {\r\n                                    setMintType('lazyMint');\r\n                                }}\r\n                            >\r\n                                Lazy Minting\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid container mt={2}>\r\n                            <Grid xs={4} mt={2} pr={3}>\r\n                                <TextField\r\n                                    id=\"nftName\"\r\n                                    name=\"nftName\"\r\n                                    label=\"NFT Name\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftName && Boolean(formik.errors.nftName)}\r\n                                    helperText={formik.touched.nftName && formik.errors.nftName}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid xs={4} mt={2} pr={3}>\r\n                                <TextField\r\n                                    id=\"nftPrice\"\r\n                                    name=\"nftPrice\"\r\n                                    label=\"NFT Price\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftPrice}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftPrice && Boolean(formik.errors.nftPrice)}\r\n                                    helperText={formik.touched.nftPrice && formik.errors.nftPrice}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid xs={4} mt={2} pr={3}>\r\n                                <TextField\r\n                                    id=\"outlined-select-budget\"\r\n                                    select\r\n                                    fullWidth\r\n                                    label=\"Select Token\"\r\n                                    value={currencyType}\r\n                                    onChange={handleCurrencyType}\r\n                                >\r\n                                    {currencyTypeArray.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Grid>\r\n                            <Grid xs={12} mt={2} pr={3}>\r\n                                <TextField\r\n                                    multiline\r\n                                    rows={2}\r\n                                    id=\"nftDescription\"\r\n                                    name=\"nftDescription\"\r\n                                    label=\"NFT Description\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftDescription}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftDescription && Boolean(formik.errors.nftDescription)}\r\n                                    helperText={formik.touched.nftDescription && formik.errors.nftDescription}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} mt={2} pr={3}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'right' }}\r\n                                    onClick={() => {\r\n                                        setFieldDataArray([\r\n                                            ...fieldDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: ''\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add Fields\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {fieldDataArray.length != 0 && (\r\n                            <>\r\n                                <Grid container spacing={4}>\r\n                                    {fieldDataArray.map((data, index) => (\r\n                                        <>\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    id=\"field_name\"\r\n                                                    name=\"field_name\"\r\n                                                    label=\"Metadata Name\"\r\n                                                    value={data.fieldName}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldNameChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    id=\"field_value\"\r\n                                                    name=\"field_value\"\r\n                                                    label=\"Metadata Value\"\r\n                                                    value={data.fieldValue}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldValueChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2}>\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        handleRemoveField(index);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                            </Grid>\r\n                                        </>\r\n                                    ))}\r\n                                </Grid>\r\n                            </>\r\n                        )}\r\n\r\n                        {uploadedImages.length !== 1 && (\r\n                            <Grid\r\n                                sx={{ background: '#c5cbe9', borderRadius: '5px', paddingBottom: '2rem', paddingTop: '2rem' }}\r\n                                item\r\n                                lg={12}\r\n                                mt={3}\r\n                            >\r\n                                <div className={clsx('dropZoneContainer', 'xyz')}>\r\n                                    <div\r\n                                        className={clsx('dropZone', {\r\n                                            isDragActive: isDragActive,\r\n                                            isDragAccept: isDragAccept,\r\n                                            isDragReject: isDragReject\r\n                                        })}\r\n                                        {...getRootProps()}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n\r\n                                        <Grid container direction=\"column\">\r\n                                            <Box\r\n                                                textAlign=\"center\"\r\n                                                component=\"img\"\r\n                                                alt=\"Select File\"\r\n                                                src={UploadImage}\r\n                                                sx={{ height: 60 }}\r\n                                            />\r\n\r\n                                            <Box mt={4} textAlign=\"center\" sx={{ ml: { md: 0 } }}>\r\n                                                <Typography variant=\"subtitle\" sx={{ color: 'grey', textAlign: 'center' }}>\r\n                                                    Drop your image or&nbsp;\r\n                                                    <Link underline=\"always\">browse</Link>.&nbsp;\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </div>\r\n                            </Grid>\r\n                        )}\r\n\r\n                        <List disablePadding className={clsx({ list: hasFile })} sx={{ mt: 3 }}>\r\n                            <AnimatePresence>\r\n                                {formik.values.images &&\r\n                                    formik.values.images.map((file, index) => (\r\n                                        <ListItem key={file.image.name} component={motion.div} className=\"listItem\">\r\n                                            <ListItemIcon>\r\n                                                <Icon icon={fileFill} width={32} height={32} />\r\n                                            </ListItemIcon>\r\n                                            <ListItemText\r\n                                                primary={file.image.name ? file.image.name : ''}\r\n                                                // secondary={fData(file.image.size) ? fData(file.image.size) : ''}\r\n                                                // primaryTypographyProps={{\r\n                                                //     variant: 'subtitle2'\r\n                                                // }}\r\n                                            />\r\n                                            <QuantitySelector formik={formik} fileArray={formik.values.images} index={index} />\r\n\r\n                                            <IconButton\r\n                                                color=\"error\"\r\n                                                edge=\"end\"\r\n                                                size=\"small\"\r\n                                                onClick={() => handleRemoveFile(file.image, index)}\r\n                                            >\r\n                                                <Icon icon={closeFill} width={28} height={28} />\r\n                                            </IconButton>\r\n                                        </ListItem>\r\n                                    ))}\r\n                            </AnimatePresence>\r\n                        </List>\r\n                    </form>\r\n                </DialogContent>\r\n                <Divider />\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1 }}\r\n                            onClick={() => {\r\n                                formik.handleSubmit();\r\n                            }}\r\n                            size=\"large\"\r\n                            disableElevation\r\n                        >\r\n                            Edit NFT\r\n                        </Button>\r\n                    </AnimateButton>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1, color: '#fff' }}\r\n                            onClick={handleClose}\r\n                            color=\"secondary\"\r\n                            size=\"large\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </AnimateButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { requestNftForMinting } from 'redux/nftManagement/actions';\r\nimport Erc20 from '../../../../../contractAbi/Erc20.json';\r\nimport { ethers } from 'ethers';\r\nimport BLOCKCHAIN from '../../../../../constants';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function RequestForMintDialog({ open, setOpen, page, limit, search, type, nftData, categoryId }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const user = useSelector((state) => state.auth.user);\r\n\r\n    const handleMintRequest = async () => {\r\n        console.log('nftData', nftData);\r\n        let profitPercentage = parseInt(nftData.Category.BrandCategories[0].profitPercentage);\r\n        let quant = nftData.NFTTokens.length\r\n        let price = (quant * nftData.price);\r\n        console.log('profitPercentage', profitPercentage);\r\n        console.log('price', price);\r\n        let amount = (price / 100) * profitPercentage;\r\n        console.log('amount', amount);\r\n\r\n\r\n\r\n\r\n        let prices = ethers.utils.parseEther(amount.toString());\r\n\r\n        let erc20Address = BLOCKCHAIN.ERC20\r\n        let ownerAddress = '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651';\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n        console.log('signer', signer);\r\n        let data = await await token.transfer(ownerAddress, prices);\r\n        console.log('data', data);\r\n\r\n        dispatch(\r\n            requestNftForMinting({\r\n                id: nftData.id,\r\n                categoryId: categoryId,\r\n                page: page,\r\n                limit: limit,\r\n                search: search,\r\n                type: type,\r\n                handleClose: handleClose,\r\n                brandId: user.BrandId\r\n            })\r\n        );\r\n    };\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Request Admin for mint</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to request Admin to mint this NFT?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            handleMintRequest();\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteNft } from 'redux/nftManagement/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteNFTDialog({ nftInfo, categoryId, type, search, page, limit, loader, setLoader, open, setOpen }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const user = useSelector((state) => state.auth.user);\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Delete NFT</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to delete this NFT?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteNft({\r\n                                    id: nftInfo.id,\r\n                                    categoryId: categoryId,\r\n                                    type: type,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    brandId: user.BrandId,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState, useRef, useEffect } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, Typography } from '@mui/material';\r\nimport { Card, Container, CardMedia, TextField, MenuItem, Chip, Divider } from '@mui/material';\r\nimport React from 'react';\r\n// project imports\r\n\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\n// ===============================|| UI DIALOG - SCROLLABLE ||=============================== //\r\n\r\nexport default function DetailsDialog({ open, setOpen, nftData }) {\r\n    const theme = useTheme();\r\n\r\n    const status = [\r\n        {\r\n            name: 'Name:',\r\n            value: nftData?.name\r\n        },\r\n        {\r\n            name: 'Status:',\r\n            value: nftData?.status\r\n        },\r\n        {\r\n            name: 'Description:',\r\n            value: nftData?.description\r\n        },\r\n        {\r\n            name: 'Price:',\r\n            value: nftData?.price\r\n        },\r\n        {\r\n            name: 'Mint Type:',\r\n            value: nftData?.mintType\r\n        },\r\n        {\r\n            name: 'Brand:',\r\n            value: nftData?.Brand.name\r\n        },\r\n        {\r\n            name: 'Token URL:',\r\n            value: 'Null'\r\n        }\r\n    ];\r\n    const [scroll, setScroll] = useState('paper');\r\n\r\n    const handleClickOpen = (scrollType) => () => {\r\n        setOpen(true);\r\n        setScroll(scrollType);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const descriptionElementRef = useRef(null);\r\n    useEffect(() => {\r\n        if (open) {\r\n            const { current: descriptionElement } = descriptionElementRef;\r\n            if (descriptionElement !== null) {\r\n                descriptionElement?.focus();\r\n            }\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                scroll={scroll}\r\n                aria-labelledby=\"scroll-dialog-title\"\r\n                aria-describedby=\"scroll-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"scroll-dialog-title\">NFT Details</DialogTitle>\r\n                <DialogContent dividers={scroll === 'paper'}>\r\n                    <Grid container spacing={3}>\r\n                        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n                            <Grid item xs={12}>\r\n                                <Grid container justifyContent=\"center\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n                                    <Grid item lg={6} className=\"NFTdetails\">\r\n                                        <img src={nftData?.asset} alt=\"Statement Image\" className=\"imageSize\" />\r\n                                    </Grid>\r\n\r\n                                    <Grid item md={6} sm={12}>\r\n                                        <Grid item xs={12}>\r\n                                            <Grid container justifyContent=\"left\">\r\n                                                <Grid item md={12} sm={12}>\r\n                                                    {status.map((option) => (\r\n                                                        <Grid container spacing={2}>\r\n                                                            <Grid item md={6} xs={12}>\r\n                                                                <Typography\r\n                                                                    mt={1}\r\n                                                                    className=\"nftHead\"\r\n                                                                    color={theme.palette.mode === 'dark' ? 'white' : 'black'}\r\n                                                                    variant=\"h3\"\r\n                                                                >\r\n                                                                    {option.name}\r\n                                                                </Typography>\r\n                                                            </Grid>\r\n\r\n                                                            <Grid item md={6} xs={12} sx={{ marginTop: '12px', textAlign: 'left' }}>\r\n                                                                <Typography\r\n                                                                    mt={1}\r\n                                                                    className=\"nftText\"\r\n                                                                    color={theme.palette.mode === 'dark' ? 'white' : '#767676'}\r\n                                                                    variant=\"body\"\r\n                                                                >\r\n                                                                    {option.value}\r\n                                                                </Typography>\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                    ))}\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5, pt: 2.5 }}>\r\n                    <Button sx={{ color: theme.palette.error.dark }} onClick={handleClose} color=\"secondary\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Button, CardContent, CardMedia, Grid, Stack, Typography } from '@mui/material';\r\nimport MainCard from './mainCard';\r\nimport EditNftDialog from './editNftDialog';\r\nimport RequestForMintDialog from './requestForMintDialog';\r\nimport DeleteNFTDialog from './deleteNftDialog';\r\nimport DetailsDialog from './details';\r\nimport { useEffect } from 'react';\r\nconst NftCard = ({ nftData, categoryId, search, page, limit, type }) => {\r\n    const dispatch = useDispatch();\r\n    const [loader, setLoader] = useState(false);\r\n    const [openRequestMint, setOpenRequestMint] = useState(false);\r\n    const [editNftOpen, setEditNftOpen] = useState(false);\r\n    const [deleteNftOpen, setDeleteNftOpen] = useState(false);\r\n    const [DetailsNftOpen, setDetailsNftOpen] = useState(false);\r\n    const [image, setImage] = useState([]);\r\n    const [nftInfo, setNftInfo] = useState({\r\n        id: null,\r\n        nftName: '',\r\n        nftDescription: '',\r\n        nftPrice: 0,\r\n        mintType: 'directMint',\r\n        currencyType: 'ETH',\r\n        fieldDataArray: [],\r\n        images: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        const length = nftData.asset.split('/').length;\r\n        setImage([\r\n            {\r\n                image: { name: nftData.asset.split('/')[length - 1] },\r\n                quantity: nftData.NFTTokens.length\r\n            }\r\n        ]);\r\n    }, [nftData]);\r\n    return (\r\n        <>\r\n            <DeleteNFTDialog\r\n                nftInfo={nftInfo}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={deleteNftOpen}\r\n                setOpen={setDeleteNftOpen}\r\n            />\r\n            <EditNftDialog\r\n                nftInfo={nftInfo}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={editNftOpen}\r\n                setOpen={setEditNftOpen}\r\n            />\r\n            <RequestForMintDialog\r\n                nftData={nftData}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={openRequestMint}\r\n                setOpen={setOpenRequestMint}\r\n            />\r\n            <DetailsDialog open={DetailsNftOpen} setOpen={setDetailsNftOpen} nftData={nftData} />\r\n            <MainCard\r\n                content={false}\r\n                boxShadow\r\n                sx={{\r\n                    position: 'relative',\r\n                    '&:hover': {\r\n                        transform: 'scale3d(1.02, 1.02, 1)',\r\n                        transition: 'all .4s ease-in-out'\r\n                    }\r\n                }}\r\n            >\r\n                <CardMedia sx={{ height: 220 }} image={nftData.asset} />\r\n                <CardContent sx={{ p: 2 }}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={9}>\r\n                            <Typography variant=\"subtitle1\"\r\n                             sx={{ textDecoration: 'none', textTransform: 'capitalize' }}>\r\n                                {nftData.name}\r\n                            </Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} mt={-1.5}>\r\n                            <Typography\r\n                                variant=\"body1\"\r\n                                sx={{\r\n                                    overflow: 'hidden',\r\n                                    height: 30,\r\n                                    textTransform: 'capitalize'\r\n                                }}\r\n                            >\r\n                                {nftData.description}\r\n                            </Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6}>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\">\r\n                                    {nftData.price} {nftData.currencyType}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\">{nftData.NFTTokens.length} Items</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                                size=\"small\"\r\n                                sx={{\r\n                                    marginRight: '10px',\r\n                                    float: 'right',\r\n                                    ':hover': {\r\n                                        boxShadow: 'none'\r\n                                    }\r\n                                }}\r\n                                variant=\"outlined\"\r\n                                onClick={() => {\r\n                                    setDetailsNftOpen(true);\r\n                                }}\r\n                            >\r\n                                Details\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\">\r\n                                {nftData.status !== 'MINTED' && (\r\n                                    <>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            sx={{ marginRight: '5px' }}\r\n                                            onClick={() => {\r\n                                                setEditNftOpen(true);\r\n                                                setNftInfo({\r\n                                                    id: nftData.id,\r\n                                                    nftName: nftData.name,\r\n                                                    nftDescription: nftData.description,\r\n                                                    nftPrice: nftData.price,\r\n                                                    mintType: nftData.mintType,\r\n                                                    currencyType: nftData.currencyType,\r\n                                                    fieldDataArray: nftData.NFTMetaData,\r\n                                                    images: image\r\n                                                });\r\n                                            }}\r\n                                        >\r\n                                            Edit\r\n                                        </Button>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            sx={{ marginRight: '5px' }}\r\n                                            onClick={() => {\r\n                                                setDeleteNftOpen(true);\r\n                                                setNftInfo({\r\n                                                    id: nftData.id,\r\n                                                    nftName: nftData.name,\r\n                                                    nftDescription: nftData.description,\r\n                                                    nftPrice: nftData.price,\r\n                                                    mintType: nftData.mintType,\r\n                                                    currencyType: nftData.currencyType,\r\n                                                    fieldDataArray: nftData.NFTMetaData,\r\n                                                    images: image\r\n                                                });\r\n                                            }}\r\n                                        >\r\n                                            Delete\r\n                                        </Button>\r\n                                    </>\r\n                                )}\r\n\r\n                                {(nftData.status == 'DRAFT' || nftData.status == 'REJECTED') && (\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        sx={{ marginRight: '5px' }}\r\n                                        onClick={() => {\r\n                                            setOpenRequestMint(true);\r\n                                        }}\r\n                                    >\r\n                                        Request\r\n                                    </Button>\r\n                                )}\r\n                            </Stack>\r\n                            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\"></Stack>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NftCard;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Grid, Typography, Pagination, Menu, MenuItem, TextField } from '@mui/material';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AddNft from './component/addNft';\r\nimport { getAllNft } from '../../../../redux/nftManagement/actions';\r\nimport NftCard from './component/nftcard';\r\nconst typeArray = [\r\n    {\r\n        value: 'all',\r\n        label: \"All NFT'S\"\r\n    },\r\n    {\r\n        value: 'directMint',\r\n        label: 'Minted NFTS'\r\n    },\r\n    {\r\n        value: 'lazyMint',\r\n        label: \"Lazy Minted NFT'S\"\r\n    },\r\n    {\r\n        value: 'waiting',\r\n        label: 'Waiting For approval'\r\n    },\r\n    {\r\n        value: 'draft',\r\n        label: 'Draft NFTS'\r\n    },\r\n    {\r\n        value: 'rejected',\r\n        label: 'Rejected NFTS'\r\n    }\r\n];\r\n\r\nconst NftManagement = () => {\r\n\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n    const nftList = useSelector((state) => state.nftReducer.nftList);\r\n    const user = useSelector((state) => state.auth.user);\r\n    const [type, setType] = useState('all');\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(12);\r\n    const [addNftOpen, setAddNftOpen] = useState(false);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const handleType = (event) => {\r\n        setType(event.target.value);\r\n        setLimit(12);\r\n        setSearch('');\r\n        setPage(1);\r\n    };\r\n    \r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllNft({\r\n                categoryId: location.state.data.CategoryId,\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                type: type,\r\n                brandId: user.BrandId\r\n                \r\n                \r\n            })\r\n        );\r\n    }, [search, page, limit, type]);\r\n\r\n    return (\r\n        <>\r\n            <AddNft\r\n                open={addNftOpen}\r\n                setOpen={setAddNftOpen}\r\n                data={location.state.data}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                nftType={type}\r\n            />\r\n            <MainCard\r\n                className=\"yellow\"\r\n                style={{ marginBottom: '15px' }}\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={3}>\r\n                            <Typography variant=\"h3\" sx={{ fontWeight: 500, color: 'cadetblue', marginTop: '12px' }}>\r\n                                NFT Management\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <TextField\r\n                                className=\"selectField\"\r\n                                id=\"outlined-select-budget\"\r\n                                select\r\n                                fullWidth\r\n                                label=\"Select Type\"\r\n                                value={type}\r\n                                onChange={handleType}\r\n                            >\r\n                                {typeArray.map((option, index) => (\r\n                                    <MenuItem key={index} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={6} style={{ textAlign: 'end' }}>\r\n                            <Button\r\n                                size=\"large\"\r\n                                sx={{\r\n                                    marginRight: '10px',\r\n                                    ':hover': {\r\n                                        boxShadow: 'none'\r\n                                    }\r\n                                }}\r\n                                variant=\"contained\"\r\n                                onClick={() => {\r\n                                    setAddNftOpen(true);\r\n                                }}\r\n                            >\r\n                                Add NFT\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    navigate('/categories');\r\n                                }}\r\n                            >\r\n                                back\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            ></MainCard>\r\n            <Grid container>\r\n                {nftList && nftList.nfts && nftList.nfts.rows && nftList.nfts.rows.length > 0 ? (\r\n                    <>\r\n                        {' '}\r\n                        <Grid container spacing={gridSpacing} mb={4} pl={2}>\r\n                            {nftList.nfts.rows &&\r\n                                nftList.nfts.rows.map((nft, index) => {\r\n                                    return (\r\n                                        <Grid key={index} item xs={12} sm={6} md={4} lg={3}>\r\n                                            <NftCard\r\n                                                nftData={nft}\r\n                                                categoryId={location.state.data.CategoryId}\r\n                                                search={search}\r\n                                                page={page}\r\n                                                limit={limit}\r\n                                                type={type}\r\n                                            />\r\n                                        </Grid>\r\n                                    );\r\n                                })}\r\n                        </Grid>\r\n                        <Grid item xs={12} sx={{ p: 3 }}>\r\n                            <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                                <Grid item>\r\n                                    <Pagination\r\n                                        page={page}\r\n                                        color=\"primary\"\r\n                                        showFirstButton\r\n                                        showLastButton\r\n                                        count={nftList && nftList.pages}\r\n                                        onChange={(event, newPage) => {\r\n                                            setPage(newPage);\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        size=\"large\"\r\n                                        sx={{ color: theme.palette.grey[900] }}\r\n                                        color=\"secondary\"\r\n                                        endIcon={<ExpandMoreRoundedIcon />}\r\n                                        onClick={handleClick}\r\n                                    >\r\n                                        {limit} Rows\r\n                                    </Button>\r\n                                    <Menu\r\n                                        id=\"menu-user-list-style1\"\r\n                                        anchorEl={anchorEl}\r\n                                        keepMounted\r\n                                        open={Boolean(anchorEl)}\r\n                                        onClose={handleClose}\r\n                                        variant=\"selectedMenu\"\r\n                                        anchorOrigin={{\r\n                                            vertical: 'top',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                        transformOrigin={{\r\n                                            vertical: 'bottom',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                    >\r\n                                        <MenuItem\r\n                                            value={12}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleClose();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            12 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={24}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleClose();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            24 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={36}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleClose();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            36 Rows{' '}\r\n                                        </MenuItem>\r\n                                    </Menu>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Grid item>\r\n                            <Typography style={{ padding: '20px' }}> No Data Available</Typography>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NftManagement;\r\n","const BLOCKCHAIN = \r\n    {\r\n        WALLET_ADDRESS: '0x600f0E1D3AC3bF30F3C9b0D894c427B26fB26c78',\r\n        ERC20: '0xa4f949079320f3C6fFBfdEcB1C8D6ffEb0E44113'\r\n    }\r\n    \r\n\r\n\r\nexport default BLOCKCHAIN\r\n"],"sourceRoot":""}