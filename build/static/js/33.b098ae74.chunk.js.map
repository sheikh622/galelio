{"version":3,"sources":["views/pages/brandAdmin/deliveryDashboard/component/changeStatus.js","views/pages/brandAdmin/deliveryDashboard/component/deliveryDashboard.js","views/pages/brandAdmin/deliveryDashboard/index.js","ui-component/extended/Avatar.js","shared/Card/HeadingCard.js"],"names":["Transition","forwardRef","props","ref","Slide","direction","ChangeStatusDialog","open","setOpen","user","page","limit","search","deliveryId","theme","setDeliveryId","useTheme","React","status","setStatus","dispatch","useDispatch","handleClose","Dialog","TransitionComponent","keepMounted","onClose","DialogTitle","id","Divider","DialogContent","DialogContentText","Typography","variant","component","Box","sx","minWidth","margin","FormControl","fullWidth","InputLabel","Select","labelId","value","label","onChange","event","target","map","option","MenuItem","DialogActions","pr","Button","color","palette","error","dark","borderColor","onClick","size","changeStatus","brand","BrandId","delivery","DeliveryDashboard","deliveryList","useState","TableContainer","Table","TableHead","TableRow","TableCell","align","undefined","length","Grid","item","style","padding","fontWeight","justifyContent","TableBody","row","index","alignItems","container","spacing","Avatar","alt","src","Nft","asset","name","price","currencyType","description","moment","createdAt","format","updatedAt","Stack","Tooltip","placement","title","endIcon","Delivered","useSelector","state","auth","setSearch","setPage","setLimit","image","anchorEl","setAnchorEl","handleCloseMenu","useEffect","getDeliveryDashboard","HeadingCard","MainCard","gridSpacing","xs","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","e","content","p","Pagination","showFirstButton","showLastButton","count","newPage","grey","currentTarget","Menu","Boolean","anchorOrigin","vertical","horizontal","transformOrigin","outline","others","colorSX","background","paper","bgcolor","outlineSX","border","sizeSX","width","height","role","setValue","options","marginBottom","primary","default","marginTop","select"],"mappings":"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","file":"static/js/33.b098ae74.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Divider, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { changeStatus } from 'redux/deliveryDashboard/actions';\r\nimport Box from '@mui/material/Box';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function ChangeStatusDialog({ open, setOpen, page, limit, search, user, deliveryId, setDeliveryId }) {\r\n    const theme = useTheme();\r\n    const [status, setStatus] = React.useState('Delivered');\r\n\r\n    const handleChange = (event) => {\r\n        setStatus(event.target.value);\r\n    };\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const state = [\r\n        {\r\n            value: 'Delivered',\r\n            label: 'Status'\r\n        },\r\n        {\r\n            value: 'Delivered',\r\n            label: 'Delivered'\r\n        },\r\n        {\r\n            value: 'Pending',\r\n            label: 'Pending'\r\n        },\r\n        {\r\n            value: 'In Process',\r\n            label: 'In Process'\r\n        },\r\n        {\r\n            value: 'In Transit',\r\n            label: 'In Transit'\r\n        }\r\n    ];\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Change Status</DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to change the status?\r\n                        </Typography>\r\n\r\n                        <Box sx={{ minWidth: 120, margin: '20px' }}>\r\n                            <FormControl fullWidth>\r\n                                <InputLabel id=\"demo-simple-select-label\">Status</InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-simple-select-label\"\r\n                                    id=\"demo-simple-select\"\r\n                                    value={status}\r\n                                    label=\"Status\"\r\n                                    onChange={handleChange}\r\n                                >\r\n                                    {state.map((option) => (\r\n                                        <MenuItem key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Box>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <Divider />\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                changeStatus({\r\n                                    brand: user.BrandId,\r\n                                    delivery:deliveryId,\r\n                                    status: status,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport {\r\n    IconButton,\r\n    Stack,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    Grid,\r\n    Divider,\r\n    Typography,\r\n    TableHead,\r\n    TableRow,\r\n    Tooltip,Button,\r\n    CircularProgress\r\n} from '@mui/material';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport ChangeStatusDialog from './changeStatus';\r\n\r\nimport Avatar from 'ui-component/extended/Avatar';\r\nimport moment from 'moment';\r\n\r\nconst DeliveryDashboard = ({ deliveryList , user }) => {\r\n    const theme = useTheme();\r\n    const [open, setOpen] = useState(false);\r\n    const [deliveryId, setDeliveryId] = useState(0);\r\n    return (\r\n        <>\r\n        <ChangeStatusDialog setOpen={setOpen} open={open} user={user} setDeliveryId ={setDeliveryId} deliveryId={deliveryId}/>\r\n            <TableContainer>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\">Name</TableCell>\r\n                            <TableCell align=\"center\">Price</TableCell>\r\n                            <TableCell align=\"center\">Status</TableCell>\r\n                            <TableCell align=\"center\">Description</TableCell>\r\n                            <TableCell align=\"center\">Created At</TableCell>\r\n                            <TableCell align=\"center\">Updated At</TableCell>\r\n                            <TableCell align=\"center\">Actions</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <>\r\n                        {(deliveryList == undefined && deliveryList?.length == 0) || undefined ? (\r\n                            <>\r\n                                <Grid item>\r\n                                    <Typography style={{ padding: '20px', fontWeight: '800', justifyContent: 'center' }}>\r\n                                        {' '}\r\n                                        No Data Available\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </>\r\n                        ) : (\r\n                            <TableBody>\r\n                                {deliveryList != undefined &&\r\n                                    deliveryList?.map((row, index) => (\r\n                                        <>\r\n                                            <TableRow>\r\n                                                <TableCell align=\"center\" justifyContent=\"center\" alignItems=\"center\">\r\n                                                    <Grid container spacing={2} justifyContent=\"center\" alignItems=\"center\">\r\n                                                        <Grid item>\r\n                                                            <Avatar alt=\"Image\" src={row?.Nft.asset} />\r\n                                                        </Grid>\r\n                                                        <Grid item>\r\n                                                            <Typography variant=\"subtitle1\" component=\"div\">\r\n                                                                {row?.Nft.name}\r\n                                                            </Typography>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </TableCell>\r\n\r\n                                                <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                                    {row?.Nft.price} {row?.Nft.currencyType}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                    align=\"center\"\r\n                                                    sx={{\r\n                                                        padding: '0px',\r\n                                                        color:\r\n                                                            row?.status == 'Delivered'\r\n                                                                ? 'Green'\r\n                                                                : row?.status == 'pending'\r\n                                                                ? 'Blue'\r\n                                                                : 'Orange'\r\n                                                    }}\r\n                                                >\r\n                                                    {row?.status}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                                    {row?.Nft.description}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"center\">{moment(row.createdAt).format('DD-MMM-YYYY')}</TableCell>\r\n                                                <TableCell align=\"center\">{moment(row.updatedAt).format('DD-MMM-YYYY')}</TableCell>\r\n                                                <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                                    <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                                        <Tooltip placement=\"top\" title=\"Status\">\r\n                                                        <Button variant=\"outlined\" endIcon={<SendIcon />} \r\n                                                        onClick={() => {\r\n                                                            setOpen(true);\r\n                                                             setDeliveryId(row?.id);\r\n                                                        }}   >\r\n                                                        Status\r\n                                                      </Button>\r\n                                                        </Tooltip>\r\n                                                    </Stack>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        </>\r\n                                    ))}\r\n                            </TableBody>\r\n                        )}\r\n                    </>\r\n                </Table>\r\n                <Divider />\r\n            </TableContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DeliveryDashboard;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { Button, Grid, MenuItem, Menu, Pagination, OutlinedInput, InputAdornment, Typography } from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { getDeliveryDashboard } from 'redux/deliveryDashboard/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport DeliveryDashboard from './component/deliveryDashboard';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport HeadingCard from 'shared/Card/HeadingCard';\r\n\r\nconst Delivered = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const deliveryList = useSelector((state) => state.delivery.deliveryList);\r\n    const user = useSelector((state) => state.auth.user);\r\n\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [categoryData, setCategoryData] = useState({\r\n        id: null,\r\n        name: '',\r\n        description: '',\r\n        image: null\r\n    });\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getDeliveryDashboard({\r\n                brand: user.BrandId\r\n                // search: search,\r\n                // page: page,\r\n                // limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n\r\n    return (\r\n        <>\r\n            <HeadingCard title=\" Delivery Dashboard\" />\r\n\r\n            <MainCard\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={3}>\r\n                            <OutlinedInput\r\n                                id=\"input-search-list-style1\"\r\n                                placeholder=\"Search\"\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"start\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                                size=\"small\"\r\n                                onChange={(e) => {\r\n                                    setSearch(e.target.value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                <DeliveryDashboard deliveryList={deliveryList} user={user} />\r\n\r\n                <>\r\n                    <Grid item xs={12} sx={{ p: 3 }}>\r\n                        <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                            <Grid item>\r\n                                <Pagination\r\n                                    color=\"primary\"\r\n                                    showFirstButton\r\n                                    showLastButton\r\n                                    page={page}\r\n                                    count={1}\r\n                                    onChange={(event, newPage) => {\r\n                                        setPage(newPage);\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    size=\"large\"\r\n                                    sx={{ color: theme.palette.grey[900] }}\r\n                                    color=\"secondary\"\r\n                                    endIcon={<ExpandMoreRoundedIcon />}\r\n                                    onClick={handleClick}\r\n                                >\r\n                                    {limit} Rows\r\n                                </Button>\r\n                                <Menu\r\n                                    id=\"menu-user-list-style1\"\r\n                                    anchorEl={anchorEl}\r\n                                    keepMounted\r\n                                    open={Boolean(anchorEl)}\r\n                                    onClose={handleCloseMenu}\r\n                                    variant=\"selectedMenu\"\r\n                                    anchorOrigin={{\r\n                                        vertical: 'top',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                    transformOrigin={{\r\n                                        vertical: 'bottom',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                >\r\n                                    <MenuItem\r\n                                        value={10}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        10 Rows\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value={25}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        25 Rows\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value={50}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        50 Rows{' '}\r\n                                    </MenuItem>\r\n                                </Menu>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Delivered;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { forwardRef } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// constant\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                marginBottom: theme.spacing(gridSpacing),\r\n\r\n                borderColor: theme.palette.primary[200] + 75,\r\n                background: theme.palette.background.default\r\n            }}\r\n        >\r\n            <Box sx={{ padding: '13px 20px 22px 20px' }}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                    <Grid item>\r\n                        <Typography variant=\"h3\" sx={{ marginTop:'10px' , fontWeight: 500, color: '#000' }}>\r\n                            {title}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {value !== undefined && (\r\n                        <Grid item>\r\n                            {/* {options && (role == 'teacher' || role == 'super_admin') && ( */}\r\n                            <TextField\r\n                                id=\"standard-select-currency\"\r\n                                select\r\n                                value={value}\r\n                                onChange={(e) => setValue(e.target.value)}\r\n                                sx={{ width: '110px', height: '40px' }}\r\n                            >\r\n                                {options.map((option) => (\r\n                                    <MenuItem key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                            {/* )} */}\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        </Card>\r\n    );\r\n});\r\n\r\nexport default HeadingCard;\r\n"],"sourceRoot":""}