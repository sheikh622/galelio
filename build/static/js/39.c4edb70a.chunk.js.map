{"version":3,"sources":["views/pages/brandAdmin/nftManagement/component/quantitySelector.js","views/pages/brandAdmin/nftManagement/component/addNft.js","views/pages/brandAdmin/nftManagement/component/mainCard.js","views/pages/brandAdmin/nftManagement/component/editNftDialog.js","views/pages/brandAdmin/nftManagement/component/requestForMintDialog.js","views/pages/brandAdmin/nftManagement/component/deleteNftDialog.js","views/pages/brandAdmin/nftManagement/component/details.js","views/pages/brandAdmin/nftManagement/component/nftcard.js","views/pages/brandAdmin/nftManagement/index.js","constants.js","assets/images/icons/image-upload.svg"],"names":["QuantitySelector","formik","fileArray","index","style","display","marginRight","Typography","variant","marginTop","TextField","type","className","id","value","quantity","onChange","e","target","setFieldValue","Transition","forwardRef","props","ref","Slide","direction","typeArray","label","AddNft","open","setOpen","data","search","page","limit","nftType","dispatch","useDispatch","user","useSelector","state","auth","useState","mintType","setMintType","uploadedImages","setUploadedImages","fieldDataArray","setFieldDataArray","setType","loader","setLoader","fileDataArray","setFileDataArray","validationSchema","Yup","nftName","required","max","nftDescription","directBuyerAddress","min","nftPrice","typeError","useFormik","enableReinitialize","initialValues","images","onSubmit","values","console","log","map","fieldValue","fileNameArray","fieldName","isValid","length","toast","error","array","size","image","name","split","pop","parseInt","handleError","require","validate","addNft","categoryId","CategoryId","metaDataArray","price","description","currencyType","asset","walletAddress","contractAddress","handleClose","BrandId","hasFile","resetForm","handleDrop","useCallback","acceptedFiles","newUploadedImages","acceptedFile","useDropzone","accept","onDrop","getRootProps","getInputProps","isDragActive","isDragReject","isDragAccept","Dialog","maxWidth","TransitionComponent","keepMounted","DialogTitle","Divider","Grid","container","DialogActions","AnimateButton","Button","sx","my","ml","padding","md","lg","onClick","DialogContent","autoComplete","handleSubmit","mt","xs","fullWidth","handleChange","touched","Boolean","errors","helperText","select","event","option","MenuItem","multiline","rows","placeholder","InputProps","inputProps","float","isEditable","spacing","item","handleFieldNameChange","handleFieldValueChange","IconButton","color","edge","splice","handleRemoveField","icon","closeFill","width","height","Switch","checked","handleFileFieldNameChange","handleFileFieldValueChange","currentTarget","files","handleFileRemoveField","background","borderRadius","paddingBottom","paddingTop","clsx","Box","textAlign","component","alt","src","UploadImage","Link","underline","List","disablePadding","list","AnimatePresence","file","ListItem","motion","div","ListItemIcon","fileFill","ListItemText","primary","primaryTypographyProps","newFiles","handleRemoveFile","margin","justifyContent","m","CircularProgress","disableShrink","disableElevation","headerSX","mr","MainCard","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","title","others","theme","useTheme","Card","borderColor","palette","mode","default","CardHeader","action","CardContent","currencyTypeArray","EditNftDialog","nftInfo","setCurrencyType","setChecked","isFile","File","perviousUploadedItems","filter","newUploadedItems","editNft","brandId","useEffect","structuredClone","pr","marginBottom","href","slice","RequestForMintDialog","nftData","checkWallet","window","ethereum","request","method","response","_metamask","isUnlocked","connectWallet","SNACKBAR_OPEN","message","alertSeverity","utils","getAddress","handleMintRequest","erc20Address","BLOCKCHAIN","ERC20","provider","ethers","providers","Web3Provider","signer","getSigner","token","Contract","Erc20","approve","Category","BrandCategories","wait","requestNftForMinting","success","reason","DialogContentText","dark","DeleteNFTDialog","deleteNft","DetailsDialog","status","Brand","fullScreen","onClose","pt","pl","ListItemButton","textTransform","CardMedia","minheight","maxHeight","overflow","cursor","NftCard","openRequestMint","setOpenRequestMint","editNftOpen","setEditNftOpen","deleteNftOpen","setDeleteNftOpen","DetailsNftOpen","setDetailsNftOpen","setImage","setNftInfo","NFTTokens","position","transform","transition","xl","CardActionArea","objectFit","p","Tooltip","placement","textDecoration","Stack","alignItems","NFTMetaData","NFTMetaFiles","NftManagement","navigate","useNavigate","location","useLocation","setSearch","setPage","setLimit","addNftOpen","setAddNftOpen","setAnchorEl","getAllNft","nftList","nftReducer","fontWeight","marginLeft","nfts","undefined","gridSpacing","nft","sm","Pagination","showFirstButton","showLastButton","count","pages","newPage","WALLET_ADDRESS"],"mappings":"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","file":"static/js/39.c4edb70a.chunk.js","sourcesContent":["import { Typography, TextField } from '@mui/material';\r\nconst QuantitySelector = ({ formik, fileArray, index }) => {\r\n    const handleChange = (value) => {\r\n        fileArray[index].quantity = value;\r\n        formik.setFieldValue('images', fileArray);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: 'flex', marginRight: '10px', }}>\r\n                <Typography variant='h3' style={{ marginTop: '5px',\r\n                 marginRight: '5px' }}>Quantity  </Typography>\r\n\r\n                <TextField\r\n              \r\n               variant='filled'\r\n                    type=\"number\"\r\n                    className=\"quantityField\"\r\n                    id=\"outlined-select-currency-native\"\r\n                    value={fileArray[index].quantity}\r\n                    onChange={(e) => {\r\n                        handleChange(e.target.value);\r\n                    }}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuantitySelector;\r\n","import { forwardRef, useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    TextField,\r\n    Divider,\r\n    Box,\r\n    Link,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    IconButton,\r\n    MenuItem,\r\n    CircularProgress\r\n} from '@mui/material';\r\n\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Switch } from '@mui/material';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Icon } from '@iconify/react';\r\nimport { addNft } from 'redux/nftManagement/actions';\r\nimport { fData } from 'utils/formatNumber';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport QuantitySelector from './quantitySelector';\r\nimport fileFill from '@iconify-icons/eva/file-fill';\r\nimport closeFill from '@iconify-icons/eva/close-fill';\r\nimport UploadImage from 'assets/images/icons/image-upload.svg';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport clsx from 'clsx';\r\nimport { DataArraySharp } from '@mui/icons-material';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nconst typeArray = [\r\n    {\r\n        value: 'USDT',\r\n        label: 'USDT'\r\n    }\r\n];\r\n\r\nexport default function AddNft({ open, setOpen, data, search, page, limit, nftType }) {\r\n    const dispatch = useDispatch();\r\n    const user = useSelector((state) => state.auth.user);\r\n    const [mintType, setMintType] = useState('directMint');\r\n\r\n    const [uploadedImages, setUploadedImages] = useState([]);\r\n\r\n    const [fieldDataArray, setFieldDataArray] = useState([]);\r\n    const [type, setType] = useState('USDT');\r\n    const [loader, setLoader] = useState(false);\r\n    const [fileDataArray, setFileDataArray] = useState([]);\r\n    const [isDirectTransfer, setIsDirectTransfer] = useState(false);\r\n    const handleType = (event) => {\r\n        setType(event.target.value);\r\n    };\r\n    const [checked, setChecked] = useState(false);\r\n \r\n\r\n    const handleError = (fieldDataArray, fileDataArray, values) => {\r\n        console.log('im in handle error');\r\n        let isValid = true;\r\n        console.log('fieldDataArray', fieldDataArray);\r\n        console.log('fileDataArray', fileDataArray);\r\n        console.log('values', values);\r\n\r\n        if (fieldDataArray.length == 0) {\r\n            isValid = false;\r\n            toast.error('Metadata is required');\r\n        }\r\n\r\n        // else  (fieldDataArray.length > 0) {\r\n\r\n        fieldDataArray.map((array) => {\r\n            if (array.fieldName == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata name cannot be empty`);\r\n            } else if (array.fieldValue == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata value cannot be empty`);\r\n            }\r\n        });\r\n        // }\r\n        if (fileDataArray.length == 0) {\r\n            isValid = false;\r\n            toast.error('Proof of Authenticity is required');\r\n        }\r\n\r\n        //    else (fileDataArray.length > 0) {\r\n        console.log('im here 2');\r\n        fileDataArray.map((array) => {\r\n            if (array.fieldName == '') {\r\n                isValid = false;\r\n                toast.error(`File name field is mandatory`);\r\n            } else if (array.fieldValue == null) {\r\n                isValid = false;\r\n                toast.error(`Attach proof of authenticity`);\r\n            } else if (array.fieldValue?.size / 1000000 > 5) {\r\n                isValid = false;\r\n                toast.error(`Please attach a less than 5 mb proof of authenticity`);\r\n            }\r\n        });\r\n        // }\r\n\r\n        if (values.images.length == 0) {\r\n            toast.error('Please upload a NFT Image');\r\n            isValid = false;\r\n        } else if (values.images[0].image.size / 1000000 > 5) {\r\n            toast.error('Please upload a image less than 5 mb');\r\n            isValid = false;\r\n        } else if (values.images[0].image.name.split('.').pop() !== 'jpg' && values.images[0].image.name.split('.').pop() !== 'png') {\r\n            toast.error('Upload the files with these extensions: jpg, png, gif');\r\n            isValid = false;\r\n        } else if (parseInt(values.images[0].quantity) <= 0) {\r\n            toast.error('NFT Quantity should be atleast one');\r\n            isValid = false;\r\n        }\r\n        console.log(values.images, 'values.images.length');\r\n\r\n        return isValid;\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        nftName: Yup.string().required('NFT Name is required!').max(60, 'NFT Name can not exceed 60 characters'),\r\n        // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT name'),\r\n        nftDescription: Yup.string()\r\n            .required('NFT Description is required!')\r\n            .max(1000, 'Invalid NFT description can not exceed 1000 characters'),\r\n        directBuyerAddress: Yup.string()\r\n            // .required('NFT Description is required!')\r\n            // .max(1000, 'Invalid NFT description can not exceed 1000 characters'),\r\n            .min(26, 'Minimum length 26 character ')\r\n            .max(42, 'Must be exactly 42 characters'),\r\n        // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT description'),\r\n        nftPrice: Yup.number()\r\n            .min(0.000000001, 'Price should be greater than zero')\r\n            .required('NFT Price is required')\r\n            .typeError('Invalid Price')\r\n        // image: Yup.mixed()\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            nftName: '',\r\n            nftDescription: '',\r\n            directBuyerAddress: '',\r\n            nftPrice: 0,\r\n            images: []\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            console.log('values', values);\r\n\r\n            let fileArray = fileDataArray.map((data) => {\r\n                return data.fieldValue;\r\n            });\r\n            let fileNameArray = fileDataArray.map((data) => {\r\n                return data.fieldName;\r\n            });\r\n\r\n            let isValid = handleError(fieldDataArray, fileDataArray, values);\r\n            console.log('isValid', isValid);\r\n\r\n            if (isValid == true) {\r\n                var WAValidator = require('wallet-address-validator');\r\n\r\n                var valid = WAValidator.validate(values.directBuyerAddress, 'ETH');\r\n                if (valid || values.directBuyerAddress == '') {\r\n                    //  toast.success(``);\r\n\r\n                    console.log('This is a valid wallet address');\r\n\r\n                    setLoader(true);\r\n                    dispatch(\r\n                        addNft({\r\n                            categoryId: data.CategoryId,\r\n                            mintType: mintType,\r\n                            metaDataArray: fieldDataArray,\r\n                            fileNameArray: fileNameArray,\r\n                            fileArray: fileArray,\r\n                            name: values.nftName,\r\n                            price: values.nftPrice,\r\n                            description: values.nftDescription,\r\n                            directBuyerAddress: values.directBuyerAddress ? values.directBuyerAddress : '',\r\n                            currencyType: type,\r\n                            quantity: values.images[0].quantity,\r\n                            asset: values.images[0].image,\r\n                            type: nftType,\r\n                            page: page,\r\n                            limit: limit,\r\n                            search: search,\r\n                            categoryId: data.CategoryId,\r\n                            requesterAddress: user.walletAddress,\r\n                            contractAddress: data.contractAddress,\r\n                            handleClose: handleClose,\r\n                            brandId: user.BrandId,\r\n                            isDirectTransfer: values.directBuyerAddress == '' ? false : true\r\n                        })\r\n                    );\r\n                } else toast.error(`Wallet Address invalid !`);\r\n                // console.log('Address INVALID');\r\n            }\r\n        }\r\n    });\r\n\r\n    const hasFile = formik.values.images.length > 0;\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n        setMintType('directMint');\r\n        setType('USDT');\r\n        setUploadedImages([]);\r\n        setFieldDataArray([]);\r\n        setLoader(false);\r\n        setFileDataArray([]);\r\n    };\r\n    const handleDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            let newUploadedImages = [...uploadedImages];\r\n            acceptedFiles.map(async (acceptedFile) => {\r\n                let data = { image: acceptedFile, quantity: 1 };\r\n                newUploadedImages = [...newUploadedImages, data];\r\n            });\r\n            formik.setFieldValue('images', newUploadedImages);\r\n            setUploadedImages(newUploadedImages);\r\n        },\r\n\r\n        [formik.setFieldValue, uploadedImages]\r\n    );\r\n    const handleRemoveFile = (file, index) => {\r\n        const newFiles = [...formik.values.images];\r\n        newFiles.splice(index, 1);\r\n        setUploadedImages(newFiles);\r\n        formik.setFieldValue('images', newFiles);\r\n    };\r\n\r\n    const { getRootProps, getInputProps, isDragActive, isDragReject, isDragAccept } = useDropzone({\r\n        accept: '.jpeg,.png,.jpg,.gif',\r\n        onDrop: handleDrop\r\n    });\r\n\r\n    const handleFieldNameChange = (value, index) => {\r\n        let array = [...fieldDataArray];\r\n        array[index].fieldName = value;\r\n        setFieldDataArray(array);\r\n    };\r\n    const handleFieldValueChange = (value, index) => {\r\n        let array = [...fieldDataArray];\r\n        array[index].fieldValue = value;\r\n        setFieldDataArray(array);\r\n    };\r\n \r\n    const handleChange = (event, index) => {\r\n        // setChecked(event.target.checked);\r\n        let array = [...fieldDataArray];\r\n        array[index].isEditable = event.target?.checked;\r\n        setFieldDataArray(array);\r\n        // let array = [...fieldDataArray];\r\n        // [...checked] = value;\r\n        // setFieldDataArray(array);\r\n        // console.log(event.target.checked,'value==============?')\r\n    };\r\n    // console.log(\"arrayyyyyyyyyyyyyy\",fieldDataArray);\r\n\r\n    const handleRemoveField = (index) => {\r\n        let array = [...fieldDataArray];\r\n        array.splice(index, 1);\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleFileFieldNameChange = (value, index) => {\r\n        let array = [...fileDataArray];\r\n        array[index].fieldName = value;\r\n        setFileDataArray(array);\r\n    };\r\n    const handleFileFieldValueChange = (value, index) => {\r\n        let array = [...fileDataArray];\r\n        array[index].fieldValue = value;\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    const handleFileRemoveField = (index) => {\r\n        let array = [...fileDataArray];\r\n        array.splice(index, 1);\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog Nftdialog \"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\" className=\"adminname\">\r\n                    Add NFT\r\n                </DialogTitle>\r\n                <Divider />\r\n                <Grid container>\r\n                    <DialogActions>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                variant={mintType == 'directMint' ? 'contained' : 'outlined'}\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setMintType('directMint');\r\n                                }}\r\n                            >\r\n                                Direct minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant={mintType == 'lazyMint' ? 'contained' : 'outlined'}\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={() => {\r\n                                    setMintType('lazyMint');\r\n                                }}\r\n                            >\r\n                                Lazy minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </DialogActions>\r\n                </Grid>\r\n\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid container mt={1}>\r\n                            <Grid xs={4} md={5} lg={5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftName\"\r\n                                    name=\"nftName\"\r\n                                    label=\"NFT Name\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftName && Boolean(formik.errors.nftName)}\r\n                                    helperText={formik.touched.nftName && formik.errors.nftName}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} md={2} lg={2}></Grid>\r\n                            <Grid xs={4} md={5} lg={5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftPrice\"\r\n                                    name=\"nftPrice\"\r\n                                    label=\"NFT Price\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftPrice}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftPrice && Boolean(formik.errors.nftPrice)}\r\n                                    helperText={formik.touched.nftPrice && formik.errors.nftPrice}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid xs={12} md={12} lg={12} mt={2}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    variant=\"filled\"\r\n                                    id=\"outlined-select-budget\"\r\n                                    select\r\n                                    fullWidth\r\n                                    value={type}\r\n                                    onChange={handleType}\r\n                                >\r\n                                    {typeArray.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Grid>\r\n                            <Grid xs={12} mt={1}>\r\n                                <TextField\r\n                                    multiline\r\n                                    rows={2}\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftDescription\"\r\n                                    name=\"nftDescription\"\r\n                                    label=\"NFT Description\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftDescription}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftDescription && Boolean(formik.errors.nftDescription)}\r\n                                    helperText={formik.touched.nftDescription && formik.errors.nftDescription}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            {mintType == 'directMint' && (\r\n                                <Grid xs={12} mt={1}>\r\n                                    <TextField\r\n                                        multiline\r\n                                        rows={2}\r\n                                        type=\"number\"\r\n                                        className=\"textfieldStyle\"\r\n                                        id=\"directBuyerAddress\"\r\n                                        name=\"directBuyerAddress\"\r\n                                        label=\"Wallet Address\"\r\n                                        placeholder=\"wallet Address\"\r\n                                        fullWidth\r\n                                        value={formik.values.directBuyerAddress}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.directBuyerAddress && Boolean(formik.errors.directBuyerAddress)}\r\n                                        helperText={formik.touched.directBuyerAddress && formik.errors.directBuyerAddress}\r\n                                        autoComplete=\"\"\r\n                                        variant=\"standard\"\r\n                                        InputProps={{ inputProps: { min: 0 } }}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                            <Grid xs={12} mt={2}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'left', padding: { md: ' 6px 38px', lg: '6px 38px' } }}\r\n                                    onClick={() => {\r\n                                        setFieldDataArray([\r\n                                            ...fieldDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: '',\r\n                                                isEditable: false\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add Metadata\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {fieldDataArray.length != 0 && (\r\n                            <>\r\n                                <Grid container spacing={4} sx={{ mt: 1 }}>\r\n                                    {fieldDataArray.map((data, index) => (\r\n                                        <>\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    id=\"field_name\"\r\n                                                    className=\"textfieldStyle\"\r\n                                                    name=\"field_name\"\r\n                                                    label=\"Metadata Name\"\r\n                                                    value={data.fieldName}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldNameChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    className=\"textfieldStyle\"\r\n                                                    id=\"field_value\"\r\n                                                    name=\"field_value\"\r\n                                                    label=\"Metadata Value\"\r\n                                                    value={data.fieldValue}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldValueChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2}>\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        handleRemoveField(index);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                                <Switch\r\n                                                value={data.isEditable}\r\n                                                    checked={data.isEditable}\r\n                                                    onChange={(e)=> handleChange(e,index)}\r\n                                                    // inputProps={{ 'aria-label': 'controlled' }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </>\r\n                                    ))}\r\n                                </Grid>\r\n                            </>\r\n                        )}\r\n                        <Grid container>\r\n                            <Grid xs={12} mt={2}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'left' }}\r\n                                    onClick={() => {\r\n                                        setFileDataArray([\r\n                                            ...fileDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: null\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add Authenticity Files\r\n                                </Button>\r\n                            </Grid>\r\n                            {fileDataArray.length != 0 && (\r\n                                <>\r\n                                    <Grid container spacing={2} mt={2}>\r\n                                        {fileDataArray.map((data, index) => (\r\n                                            <>\r\n                                                <Grid item xs={5}>\r\n                                                    <TextField\r\n                                                        id=\"field_name\"\r\n                                                        name=\"field_name\"\r\n                                                        label=\"File Name\"\r\n                                                        value={data.fieldName}\r\n                                                        onChange={(e) => {\r\n                                                            handleFileFieldNameChange(e.target.value, index);\r\n                                                        }}\r\n                                                        variant=\"standard\"\r\n                                                        fullWidth\r\n                                                    />\r\n                                                </Grid>\r\n\r\n                                                <Grid item mt={3} xs={5}>\r\n                                                    <input\r\n                                                        type=\"file\"\r\n                                                        id=\"avatar\"\r\n                                                        name=\"avatar\"\r\n                                                        accept=\"image/*,.pdf\"\r\n                                                        onChange={(event) => {\r\n                                                            handleFileFieldValueChange(event.currentTarget.files[0], index);\r\n                                                        }}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} mt={2}>\r\n                                                    <IconButton\r\n                                                        color=\"error\"\r\n                                                        edge=\"end\"\r\n                                                        size=\"small\"\r\n                                                        onClick={() => {\r\n                                                            handleFileRemoveField(index);\r\n                                                        }}\r\n                                                    >\r\n                                                        <Icon icon={closeFill} width={28} height={28} />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                            </>\r\n                                        ))}\r\n                                    </Grid>\r\n                                </>\r\n                            )}\r\n                        </Grid>\r\n\r\n                        {uploadedImages.length !== 1 && (\r\n                            <Grid\r\n                                sx={{ background: '#c5cbe9', borderRadius: '5px', paddingBottom: '2rem', paddingTop: '2rem' }}\r\n                                item\r\n                                lg={12}\r\n                                mt={10}\r\n                            >\r\n                                <div className={clsx('dropZoneContainer', 'xyz')}>\r\n                                    <div\r\n                                        className={clsx('dropZone', {\r\n                                            isDragActive: isDragActive,\r\n                                            isDragAccept: isDragAccept,\r\n                                            isDragReject: isDragReject\r\n                                        })}\r\n                                        {...getRootProps()}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n\r\n                                        <Grid container direction=\"column\">\r\n                                            <Box\r\n                                                textAlign=\"center\"\r\n                                                component=\"img\"\r\n                                                alt=\"Select File\"\r\n                                                src={UploadImage}\r\n                                                sx={{ height: 60 }}\r\n                                            />\r\n\r\n                                            <Box mt={4} textAlign=\"center\" sx={{ ml: { md: 0 } }}>\r\n                                                <Typography variant=\"subtitle\" sx={{ color: 'grey', textAlign: 'center' }}>\r\n                                                    Drop your image or&nbsp;\r\n                                                    <Link underline=\"always\">browse</Link>.&nbsp;\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </div>\r\n                            </Grid>\r\n                        )}\r\n\r\n                        <Grid item lg={12} mt={3}>\r\n                            <List disablePadding className={clsx({ list: hasFile })} sx={{ mt: 3 }}>\r\n                                <AnimatePresence>\r\n                                    {formik.values.images &&\r\n                                        formik.values.images.map((file, index) => (\r\n                                            <ListItem key={file.image.name} component={motion.div} className=\"listItem\">\r\n                                                <ListItemIcon>\r\n                                                    <Icon icon={fileFill} width={32} height={32} />\r\n                                                </ListItemIcon>\r\n                                                <ListItemText\r\n                                                    primary={file.image.name ? file.image.name : ''}\r\n                                                    primaryTypographyProps={{\r\n                                                        variant: 'h3'\r\n                                                    }}\r\n                                                />\r\n                                                {mintType == 'directMint' && (\r\n                                                    <QuantitySelector formik={formik} fileArray={formik.values.images} index={index} />\r\n                                                )}\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => handleRemoveFile(file.image, index)}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                            </ListItem>\r\n                                        ))}\r\n                                </AnimatePresence>\r\n                            </List>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n                <Divider />\r\n                <Grid container>\r\n                    <DialogActions>\r\n                        {loader ? (\r\n                            <DialogActions sx={{ display: 'block', margin: '10px 5px 0px 5px' }}>\r\n                                <Grid container justifyContent=\"center\" sx={{ width: '50%', m: '15px auto ' }}>\r\n                                    <Grid item>\r\n                                        <CircularProgress disableShrink size={'4rem'} />\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                                <Button\r\n                                    className=\"buttons\"\r\n                                    variant=\"Text\"\r\n                                    sx={{ width: '100%', margin: '0px 0px 10px 0px', color: '#2196f3' }}\r\n                                    size=\"large\"\r\n                                >\r\n                                    NFT is being Created...\r\n                                </Button>\r\n                            </DialogActions>\r\n                        ) : (\r\n                            <>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                        onClick={() => {\r\n                                            formik.handleSubmit();\r\n                                        }}\r\n                                        className=\"buttons\"\r\n                                        size=\"large\"\r\n                                        disableElevation\r\n                                    >\r\n                                        Add\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        className=\"buttons\"\r\n                                        size=\"large\"\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                        onClick={handleClose}\r\n                                        color=\"error\"\r\n                                        disableElevation\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </>\r\n                        )}\r\n                    </DialogActions>\r\n                </Grid>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.mode === 'dark' ? theme.palette.background.default\r\n                     : \r\n                    theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow\r\n                            ? shadow ||\r\n                              (theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' :\r\n                               '0 2px 14px 0 rgb(32 40 45 / 8%)')\r\n                            : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} \r\n                    action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","import { forwardRef, useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    TextField,\r\n    Divider,\r\n    Box,\r\n    Link,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    IconButton,\r\n    MenuItem\r\n} from '@mui/material';\r\nimport { Switch } from '@mui/material';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Icon } from '@iconify/react';\r\nimport { editNft } from 'redux/nftManagement/actions';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport fileFill from '@iconify-icons/eva/file-fill';\r\nimport closeFill from '@iconify-icons/eva/close-fill';\r\nimport QuantitySelector from './quantitySelector';\r\nimport UploadImage from 'assets/images/icons/image-upload.svg';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport clsx from 'clsx';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nconst currencyTypeArray = [\r\n    {\r\n        value: 'USDT',\r\n        label: 'USDT'\r\n    }\r\n];\r\n\r\nexport default function EditNftDialog({ nftInfo, categoryId, type, search, page, limit, loader, setLoader, open, setOpen }) {\r\n    const dispatch = useDispatch();\r\n    const [mintType, setMintType] = useState('directMint');\r\n    const [currencyType, setCurrencyType] = useState('USDT');\r\n    const [fieldDataArray, setFieldDataArray] = useState([]);\r\n    const [fileDataArray, setFileDataArray] = useState([]);\r\n    const [uploadedImages, setUploadedImages] = useState([]);\r\n    const user = useSelector((state) => state.auth.user);\r\n    const handleCurrencyType = (event) => {\r\n        setCurrencyType(event.target.value);\r\n    };\r\n    const [checked, setChecked] = useState(true);\r\n    const handleChange = (event) => {\r\n        setChecked(event.target.checked);\r\n      };\r\n\r\n    const handleError = (fieldDataArray, fileDataArray, values) => {\r\n        console.log('im in handle error');\r\n        let isValid = true;\r\n        console.log('fieldDataArray', fieldDataArray);\r\n        console.log('fileDataArray', fileDataArray);\r\n        console.log('values', values);\r\n\r\n        if (fieldDataArray.length == 0) {\r\n            isValid = false;\r\n            toast.error('Metadata is required');\r\n        } \r\n\r\n        // else  (fieldDataArray.length > 0) {\r\n            \r\n            fieldDataArray.map((array) => {\r\n                if (array.fieldName == '') {\r\n                    isValid = false;\r\n                    toast.error(`Metadata name cannot be empty`);\r\n                }\r\n                else if (array.fieldValue == '') {\r\n                    isValid = false;\r\n                    toast.error(`Metadata value cannot be empty`);\r\n                }\r\n            });\r\n        // }\r\n         if (fileDataArray.length == 0) {\r\n            isValid = false;\r\n            toast.error('Proof of Authenticity is required');\r\n        }\r\n\r\n    //    else (fileDataArray.length > 0) {\r\n        console.log('im here 2');\r\n            fileDataArray.map((array) => {\r\n                if (array.fieldName == '') {\r\n                    isValid = false;\r\n                    toast.error(`File name field is mandatory`);\r\n                }\r\n                else if (array.fieldValue == null) {\r\n                    isValid = false;\r\n                    toast.error(`Attach proof of authenticity`);\r\n                }\r\n                else if (array.fieldValue?.size/1000000>5) {\r\n                    isValid = false;\r\n                    toast.error(`Please attach a less than 5 mb proof of authenticity`);\r\n                }\r\n            });\r\n        // }\r\n\r\n         if (values.images.length == 0) {\r\n            toast.error('Please upload a NFT Image');\r\n            isValid = false;\r\n        } else if (values.images[0].image.size / 1000000 > 5) {\r\n            toast.error('Please upload a image less than 5 mb');\r\n            isValid = false;\r\n        } else if (values.images[0].image.name.split('.').pop() !== 'jpg' && values.images[0].image.name.split('.').pop() !== 'png') {\r\n            toast.error('Upload the files with these extensions: jpg, png, gif');\r\n            isValid = false;\r\n        }else if (parseInt(values.images[0].quantity) <=0) {\r\n            toast.error('NFT Quantity should be atleast one');\r\n            isValid = false;\r\n        }\r\n\r\n\r\n        return isValid;\r\n    };\r\n\r\n\r\n    const validationSchema = Yup.object({\r\n        nftName: Yup.string()\r\n            .required('NFT Name is required!')\r\n            .max(60, 'NFT Name can not exceed 60 characters'),\r\n            // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT name'),\r\n        nftDescription: Yup.string()\r\n            .required('NFT Description is required!')\r\n            .max(1000, 'Invalid NFT description can not exceed 1000 characters'),\r\n        // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT description'),\r\n        nftPrice: Yup.number()\r\n            .min(0.000001, 'Price should not less than zero')\r\n            .required('NFT Price is required')\r\n            .typeError('Invalid Price'),\r\n        images: Yup.mixed()\r\n        // .when(['isUpdate'], {\r\n        //     is: true,\r\n        //     then: Yup.mixed(),\r\n        //     otherwise: Yup.mixed().required('Image is required')\r\n        // })\r\n\r\n        // .test('image size',\r\n        //  'this image is too large', (value) => !value || (value && value.size <= 1_000_000))\r\n\r\n    });\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: nftInfo,\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            let file = values.images[0].image;\r\n            let isFile = file instanceof File;\r\n\r\n            let perviousUploadedItems = fileDataArray.filter((data) => {\r\n                if (typeof data.fieldValue === 'string') return data;\r\n            });\r\n\r\n            let newUploadedItems = fileDataArray.filter((data) => {\r\n                if (typeof data.fieldValue !== 'string') return data;\r\n            });\r\n\r\n            let fileArray = newUploadedItems.map((data) => {\r\n                return data.fieldValue;\r\n            });\r\n            let fileNameArray = newUploadedItems.map((data) => {\r\n                return data.fieldName;\r\n            });\r\n\r\n            let isValid = handleError(fieldDataArray, fileDataArray, values, isFile);\r\n\r\n            if (isValid) {\r\n                dispatch(\r\n                    editNft({\r\n                        id: nftInfo.id,\r\n                        name: values.nftName,\r\n                        price: values.nftPrice,\r\n                        description: values.nftDescription,\r\n                        quantity: values.images[0].quantity,\r\n                        asset: isFile ? values.images[0].image : null,\r\n                        isFile: isFile,\r\n                        currencyType: currencyType,\r\n                        mintType: mintType,\r\n                        metaDataArray: fieldDataArray,\r\n                        fileNameArray: fileNameArray,\r\n                        fileArray: fileArray,\r\n                        perviousUploadedItems: perviousUploadedItems,\r\n                        type: type,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        categoryId: categoryId,\r\n                        brandId: nftInfo.brandId,\r\n                        handleClose: handleClose\r\n                        // brandId: user.BrandId\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n\r\n    const hasFile = formik.values.images.length > 0;\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n    const handleDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            let newUploadedImages = [...uploadedImages];\r\n            acceptedFiles.map(async (acceptedFile) => {\r\n                let data = { image: acceptedFile, quantity: 1 };\r\n                newUploadedImages = [...newUploadedImages, data];\r\n            });\r\n            formik.setFieldValue('images', newUploadedImages);\r\n            setUploadedImages(newUploadedImages);\r\n        },\r\n\r\n        [formik.setFieldValue, uploadedImages]\r\n    );\r\n    const handleRemoveFile = (index) => {\r\n        const newFiles = [...formik.values.images];\r\n        newFiles.splice(index, 1);\r\n        setUploadedImages(newFiles);\r\n        formik.setFieldValue('images', newFiles);\r\n    };\r\n\r\n    const { getRootProps, getInputProps, isDragActive, isDragReject, isDragAccept } = useDropzone({\r\n        accept: '.jpeg,.png,.jpg,.gif',\r\n        onDrop: handleDrop\r\n    });\r\n\r\n    const handleFieldNameChange = (value, index) => {\r\n        let array = structuredClone(fieldDataArray);\r\n        array[index].fieldName = value;\r\n        setFieldDataArray(array);\r\n    };\r\n    const handleFieldValueChange = (value, index) => {\r\n        let array = structuredClone(fieldDataArray);\r\n        array[index].fieldValue = value;\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleRemoveField = (index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array.splice(index, 1);\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleFileFieldNameChange = (value, index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array[index].fieldName = value;\r\n        setFileDataArray(array);\r\n    };\r\n    const handleFileFieldValueChange = (value, index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array[index].fieldValue = value;\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    const handleFileRemoveField = (index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array.splice(index, 1);\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setFieldDataArray(nftInfo.fieldDataArray);\r\n        setFileDataArray(nftInfo.fileDataArray);\r\n        setMintType(nftInfo.mintType);\r\n        setCurrencyType(nftInfo.currencyType);\r\n        setUploadedImages(nftInfo.images);\r\n    }, [nftInfo]);\r\n\r\n    useEffect(() => {}, [fileDataArray]);\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog Nftdialog\"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1 \" className=\"adminname\">\r\n                    Edit NFT\r\n                </DialogTitle>\r\n                <Divider />\r\n                <Grid container>\r\n                    {/* <DialogActions>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                variant={mintType == 'directMint' ? 'contained' : 'outlined'}\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setMintType('directMint');\r\n                                }}\r\n                            >\r\n                                Direct minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant={mintType == 'lazyMint' ? 'contained' : 'outlined'}\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={() => {\r\n                                    setMintType('lazyMint');\r\n                                }}\r\n                            >\r\n                                Lazy minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </DialogActions> */}\r\n                </Grid>\r\n\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid container mt={1}>\r\n                            <Grid xs={4} md={5} lg={5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftName\"\r\n                                    name=\"nftName\"\r\n                                    label=\"NFT Name\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftName && Boolean(formik.errors.nftName)}\r\n                                    helperText={formik.touched.nftName && formik.errors.nftName}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} md={2} lg={2}></Grid>\r\n                            <Grid xs={4} md={5} lg={5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftPrice\"\r\n                                    name=\"nftPrice\"\r\n                                    label=\"NFT Price\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftPrice}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftPrice && Boolean(formik.errors.nftPrice)}\r\n                                    helperText={formik.touched.nftPrice && formik.errors.nftPrice}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} md={12} lg={12} mt={2}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"outlined-select-budget\"\r\n                                    select\r\n                                    fullWidth\r\n                                    variant=\"filled\"\r\n                                    value={currencyType}\r\n                                    onChange={handleCurrencyType}\r\n                                >\r\n                                    {currencyTypeArray.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Grid>\r\n                            <Grid xs={12} md={12} lg={12} mt={2}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    multiline\r\n                                    rows={2}\r\n                                    id=\"nftDescription\"\r\n                                    name=\"nftDescription\"\r\n                                    label=\"NFT Description\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftDescription}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftDescription && Boolean(formik.errors.nftDescription)}\r\n                                    helperText={formik.touched.nftDescription && formik.errors.nftDescription}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} mt={2}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'left', padding: { md: ' 6px 38px', lg: '6px 38px' } }}\r\n                                    onClick={() => {\r\n                                        setFieldDataArray([\r\n                                            ...fieldDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: ''\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add more fields\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {fieldDataArray.length != 0 && (\r\n                            <>\r\n                                <Grid container spacing={4} mt={1}>\r\n                                    {fieldDataArray.map((data, index) => (\r\n                                        <>\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    className=\"textfieldStyle\"\r\n                                                    id=\"field_name\"\r\n                                                    name=\"field_name\"\r\n                                                    label=\"Metadata Name\"\r\n                                                    value={data.fieldName}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldNameChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    className=\"textfieldStyle\"\r\n                                                    id=\"field_value\"\r\n                                                    name=\"field_value\"\r\n                                                    label=\"Metadata Value\"\r\n                                                    value={data.fieldValue}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldValueChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2}>\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        handleRemoveField(index);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                                <Switch\r\n                                                    checked={checked}\r\n                                                    onChange={handleChange}\r\n                                                    inputProps={{ 'aria-label': 'controlled' }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </>\r\n                                    ))}\r\n                                </Grid>\r\n                            </>\r\n                        )}\r\n                        <Grid container>\r\n                            <Grid xs={12} mt={2} pr={3}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'left' }}\r\n                                    onClick={() => {\r\n                                        setFileDataArray([\r\n                                            ...fileDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: null\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add Authenticity Files\r\n                                </Button>\r\n                            </Grid>\r\n                            {fileDataArray?.length != 0 && (\r\n                                <>\r\n                                    <Grid container spacing={2} mt={1}>\r\n                                        {fileDataArray?.map((data, index) => (\r\n                                            <>\r\n                                                <Grid item xs={5}>\r\n                                                      <TextField\r\n                                                        id=\"field_name\"\r\n                                                        name=\"field_name\"\r\n                                                        label=\"File Name\"\r\n                                                        value={data.fieldName}\r\n                                                        onChange={(e) => {\r\n                                                            handleFileFieldNameChange(e.target.value, index);\r\n                                                        }}\r\n                                                        variant=\"standard\"\r\n                                                        fullWidth\r\n                                                    />\r\n                                                </Grid>\r\n\r\n                                         \r\n                                                \r\n\r\n                                                <Grid item xs={5} mt={3}>\r\n                                                <span style={{marginBottom:\"10%\"}}>\r\n                                                    <a target=\"_blank\" href={data?.fieldValue} style={{color:\"white\"}}>\r\n                                                        {data.fieldValue.length > 1\r\n                                                        ?\r\n                                                        <>\r\n                                                        {data?.fieldValue?.slice(61)}\r\n                                                        \r\n                                                        </>\r\n                                                        :\r\n                                                        <>\r\n                                                        \r\n                                                        </>\r\n                                                        \r\n                                                        }\r\n                                                    </a>\r\n                                                    <input\r\n                                                    style={{display:\"inlineBlock\"}}\r\n                                                    type=\"file\"\r\n                                                    id=\"avatar\"\r\n                                                    name=\"avatar\"\r\n                                                    accept=\"image/*,.pdf\"\r\n                                                    onChange={(event) => {\r\n                                                        handleFileFieldValueChange(event.currentTarget.files[0], index);\r\n                                                    }}\r\n                                                />\r\n                                                </span>\r\n\r\n                                                \r\n                                                </Grid>\r\n                                                {/* <div style={{marginTop:\"3%\", marginLeft:\"2%\"}}><b>Previous file: </b><a target=\"_blank\" href={data.fieldValue}>{data.fieldValue}</a></div> */}\r\n                                                <Grid item xs={2} mt={2}>\r\n                                                    <IconButton\r\n                                                        color=\"error\"\r\n                                                        edge=\"end\"\r\n                                                        size=\"small\"\r\n                                                        onClick={() => {\r\n                                                            handleFileRemoveField(index);\r\n                                                        }}\r\n                                                    >\r\n                                                        <Icon icon={closeFill} width={28} height={28} />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                            </>\r\n                                        ))}\r\n                                    </Grid>\r\n                                </>\r\n                            )}\r\n                        </Grid>\r\n\r\n                        {uploadedImages.length !== 1 && (\r\n                            <Grid\r\n                                sx={{ background: '#c5cbe9', borderRadius: '5px', paddingBottom: '2rem', paddingTop: '2rem' }}\r\n                                item\r\n                                lg={12}\r\n                                mt={10}\r\n                            >\r\n                                <div className={clsx('dropZoneContainer', 'xyz')}>\r\n                                    <div\r\n                                        className={clsx('dropZone', {\r\n                                            isDragActive: isDragActive,\r\n                                            isDragAccept: isDragAccept,\r\n                                            isDragReject: isDragReject\r\n                                        })}\r\n                                        {...getRootProps()}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n\r\n                                        <Grid container direction=\"column\">\r\n                                            <Box\r\n                                                textAlign=\"center\"\r\n                                                component=\"img\"\r\n                                                alt=\"Select File\"\r\n                                                src={UploadImage}\r\n                                                sx={{ height: 60 }}\r\n                                            />\r\n\r\n                                            <Box mt={4} textAlign=\"center\" sx={{ ml: { md: 0 } }}>\r\n                                                <Typography variant=\"subtitle\" sx={{ color: 'grey', textAlign: 'center' }}>\r\n                                                    Drop your image or&nbsp;\r\n                                                    <Link underline=\"always\">browse</Link>.&nbsp;\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </div>\r\n                            </Grid>\r\n                        )}\r\n\r\n                        <List disablePadding className={clsx({ list: hasFile })} sx={{ mt: 3 }}>\r\n                            <AnimatePresence>\r\n                                {formik.values.images &&\r\n                                    formik.values.images.map((file, index) => (\r\n                                        <ListItem key={file.image.name} component={motion.div} className=\"listItem\">\r\n                                            <ListItemIcon>\r\n                                                <Icon icon={fileFill} width={32} height={32} />\r\n                                            </ListItemIcon>\r\n\r\n                                            <ListItemText\r\n                                                className=\"encap\"\r\n                                                primary={file.image.name ? file.image.name : ''}\r\n                                                // secondary={fData(file.image.size) ? fData(file.image.size) : ''}\r\n                                                // primaryTypographyProps={{\r\n                                                //     variant: 'body2'\r\n                                                // }}\r\n                                            />\r\n                                            {mintType == 'directMint' && (\r\n                                                <QuantitySelector formik={formik} fileArray={formik.values.images} index={index} />\r\n                                            )}\r\n\r\n                                            <IconButton\r\n                                                color=\"error\"\r\n                                                edge=\"end\"\r\n                                                size=\"small\"\r\n                                                onClick={() => handleRemoveFile(file.image, index)}\r\n                                            >\r\n                                                <Icon icon={closeFill} width={28} height={28} />\r\n                                            </IconButton>\r\n                                        </ListItem>\r\n                                    ))}\r\n                            </AnimatePresence>\r\n                        </List>\r\n                    </form>\r\n                </DialogContent>\r\n                <Divider />\r\n                <Grid container>\r\n                    <DialogActions>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={() => {\r\n                                    \r\n                                    formik.handleSubmit();\r\n                                }}\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                disableElevation\r\n                            >\r\n                                Edit\r\n                            </Button>\r\n                        </AnimateButton>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={handleClose}\r\n                                color=\"error\"\r\n                                disableElevation\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </DialogActions>\r\n                </Grid>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    DialogContentText,\r\n    Typography,\r\n    CircularProgress\r\n} from '@mui/material';\r\nimport { requestNftForMinting } from 'redux/nftManagement/actions';\r\nimport Erc20 from '../../../../../contractAbi/Erc20.json';\r\nimport { ethers, utils } from 'ethers';\r\nimport BLOCKCHAIN from '../../../../../constants';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { SNACKBAR_OPEN } from 'store/actions';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function RequestForMintDialog({ open, setOpen, page, limit, search, type, nftData, categoryId }) {\r\n    const theme = useTheme();\r\n    const [loader, setLoader] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setLoader(false);\r\n    };\r\n    const user = useSelector((state) => state.auth.user);\r\n    // console.log('nftData', nftData.Category.BrandCategories[0].contractAddress);\r\n\r\n    const checkWallet = async () => {\r\n        const response = await window?.ethereum?.request({ method: 'eth_requestAccounts' });\r\n        let connectWallet = await ethereum._metamask.isUnlocked();\r\n\r\n        if ((window.ethereum && connectWallet) == false) {\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'No crypto wallet found. Please connect one',\r\n                variant: 'alert',\r\n                alertSeverity: 'info'\r\n            });\r\n            console.log('No crypto wallet found. Please install it.');\r\n            // toast.error('No crypto wallet found. Please install it.');\r\n            setOpen(false);\r\n            setLoader(false);\r\n        }\r\n        \r\n        // else if (window?.ethereum?.networkVersion !== '5') {\r\n        //     dispatch({\r\n        //         type: SNACKBAR_OPEN,\r\n        //         open: true,\r\n        //         message: 'Please change your Chain ID to Goerli',\r\n        //         variant: 'alert',\r\n        //         alertSeverity: 'info'\r\n        //     });\r\n        //     console.log('Please change your Chain ID to Goerli');\r\n        //     setOpen(false);\r\n        //     setLoader(false);\r\n        // }\r\n        \r\n        else if (utils?.getAddress(response[0]) !== user.walletAddress) {\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'Please connect your registered Wallet Address',\r\n                variant: 'alert',\r\n                alertSeverity: 'info'\r\n            });\r\n            console.log('Please connect your registered Wallet Address');\r\n            setOpen(false);\r\n            setLoader(false);\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const handleMintRequest = async () => {\r\n        if (await checkWallet()) {\r\n            try {\r\n                setLoader(true);\r\n                let erc20Address = BLOCKCHAIN.ERC20;\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                const signer = provider.getSigner();\r\n\r\n                const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n\r\n                let data = await (await token.approve(nftData.Category.BrandCategories[0].contractAddress,\"100000000000000000000000000000000000000\")).wait();\r\n\r\n                await dispatch(\r\n                    requestNftForMinting({\r\n                        id: nftData.id,\r\n                        categoryId: categoryId,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        type: type,\r\n                        brandId: user.BrandId,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n                setLoader(false);\r\n                toast.success(\"Please wait for confirmation Notification !\");\r\n            } catch (error) {\r\n                console.log('error', error);\r\n                toast.error(error.reason);\r\n                setOpen(false);\r\n                setLoader(false);\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Request Admin for mint</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to request Admin to mint this NFT?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    {loader ? (\r\n                        <CircularProgress />\r\n                    ) : (\r\n                        <>\r\n                            <Button\r\n                                sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                                onClick={handleClose}\r\n                                color=\"secondary\"\r\n                            >\r\n                                No\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    handleMintRequest();\r\n                                }}\r\n                            >\r\n                                Yes\r\n                            </Button>\r\n                        </>\r\n                    )}\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteNft } from 'redux/nftManagement/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteNFTDialog({ nftInfo, categoryId, type, search, page, limit, loader, setLoader, open, setOpen }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const user = useSelector((state) => state.auth.user);\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\" className=\"statusHeading\">Delete Brand Admin</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\" className=\"statustypo\">\r\n                            Are you sure you want to delete this Admin?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                        className='buttonSize' size='large'\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        className='buttonSize' size='large'\r\n                     \r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteNft({\r\n                                    id: nftInfo.id,\r\n                                    categoryId: categoryId,\r\n                                    type: type,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    brandId: user.BrandId,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef, useState } from 'react';\r\n\r\n// material-ui\r\nimport { AppBar,DialogActions, Button, Dialog, CardMedia,Divider,Grid, IconButton, ListItemText, ListItemButton, List, Slide, Toolbar, Typography } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// assets\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\n// slide animation\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\n// ===============================|| UI DIALOG - FULL SCREEN ||=============================== //\r\n\r\nexport default function DetailsDialog({ open, setOpen, nftData }) {\r\n    const theme = useTheme();\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const status = [\r\n        {\r\n            name: 'Name:',\r\n            value: nftData?.name\r\n        },\r\n        {\r\n            name: 'Status:',\r\n            value: nftData?.status\r\n        },\r\n        {\r\n            name: 'Description:',\r\n            value: nftData?.description\r\n        },\r\n        {\r\n            name: 'Price:',\r\n            value: nftData?.price\r\n        },\r\n        {\r\n            name: 'Mint Type:',\r\n            value: nftData?.mintType\r\n        },\r\n        {\r\n            name: 'Brand:',\r\n            value: nftData?.Brand.name\r\n        },\r\n        {\r\n            name: 'Token URL:',\r\n            value: 'Null'\r\n        }\r\n    ];\r\n    return (\r\n        <div>\r\n           \r\n            <Dialog fullScreen open={open} \r\n            onClose={handleClose} \r\n            TransitionComponent={Transition}>\r\n             {/*    <IconButton float=\"left\" color=\"inherit\" onClick={handleClose} aria-label=\"close\" size=\"large\">\r\n                    <CloseIcon />\r\n                </IconButton> */}\r\n                <DialogActions sx={{ pr: 2.5, pt: 2.5 }}>\r\n                <Button  className='buttonSize' size='large' sx={{ color: theme.palette.error.dark }} onClick={handleClose} color=\"secondary\">\r\n                <CloseIcon />\r\n                </Button>\r\n            </DialogActions>\r\n            <Grid container   sx={{ pr: 2.5,  pl: 2.5, pt: 2.5 }}>\r\n            <Grid item xs={12} md={8} lg={8}  sx={{ pr: 2.5 }}>\r\n                <List>\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail'>Name</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail' sx={{textTransform:'capitalize'}}>{nftData?.name}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail'>Status</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail'>{nftData?.status}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail'>Description</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail' sx={{textTransform:'capitalize'}}>{nftData?.description}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail' >Price</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail'  sx={{textTransform:'capitalize'}}>{nftData?.price}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail' >Mint Type</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail'  sx={{textTransform:'capitalize'}}>{ nftData?.mintType}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail' >Brand Name</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail'  sx={{textTransform:'capitalize'}}>{nftData?.Brand.name}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                </List>\r\n                </Grid>\r\n                <Grid item  xs={12} md={4} lg={4}>\r\n                <CardMedia\r\n                            \r\n                component=\"img\"\r\n                image={nftData?.asset}\r\n                \r\n                sx={{ minheight: 'auto', maxHeight:'570px',\r\n                 overflow: 'hidden', cursor: 'Pointer' }}\r\n            />\r\n               </Grid></Grid>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Button, CardContent, CardMedia, Grid, Stack, Typography, CardActionArea, Card , Tooltip} from '@mui/material';\r\nimport MainCard from './mainCard';\r\nimport EditNftDialog from './editNftDialog';\r\nimport RequestForMintDialog from './requestForMintDialog';\r\nimport DeleteNFTDialog from './deleteNftDialog';\r\nimport DetailsDialog from './details';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { useEffect } from 'react';\r\nconst NftCard = ({ nftData, categoryId, search, page, limit, type }) => {\r\n    const dispatch = useDispatch();\r\n    const [loader, setLoader] = useState(false);\r\n    const theme = useTheme();\r\n\r\n    const [openRequestMint, setOpenRequestMint] = useState(false);\r\n    const [editNftOpen, setEditNftOpen] = useState(false);\r\n    const [deleteNftOpen, setDeleteNftOpen] = useState(false);\r\n    const [DetailsNftOpen, setDetailsNftOpen] = useState(false);\r\n    const [image, setImage] = useState([]);\r\n    const [nftInfo, setNftInfo] = useState({\r\n        id: null,\r\n        brandId: null,\r\n        nftName: '',\r\n        nftDescription: '',\r\n        nftPrice: 0,\r\n        mintType: 'directMint',\r\n        currencyType: 'USDT',\r\n        fieldDataArray: [],\r\n        fileDataArray: [],\r\n        images: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        const length = nftData.asset.split('/').length;\r\n        setImage([\r\n            {\r\n                image: { name: nftData.asset.split('/')[length - 1] },\r\n                quantity: nftData.NFTTokens.length\r\n            }\r\n        ]);\r\n    }, [nftData]);\r\n    return (\r\n        <>\r\n            <DeleteNFTDialog\r\n                nftInfo={nftInfo}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={deleteNftOpen}\r\n                setOpen={setDeleteNftOpen}\r\n            />\r\n            <EditNftDialog\r\n                nftInfo={nftInfo}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={editNftOpen}\r\n                setOpen={setEditNftOpen}\r\n            />\r\n            <RequestForMintDialog\r\n                nftData={nftData}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={openRequestMint}\r\n                setOpen={setOpenRequestMint}\r\n            />\r\n            <DetailsDialog open={DetailsNftOpen} \r\n            setOpen={setDetailsNftOpen} \r\n            nftData={nftData} />\r\n            <MainCard\r\n                content={false}\r\n                className='tableShadow'\r\n                boxShadow\r\n                sx={{\r\n                    position: 'relative',\r\n                    '&:hover': {\r\n                        transform: 'scale3d(1.02, 1.02, 1)',\r\n                        transition: 'all .4s ease-in-out'\r\n                    }\r\n                }}\r\n            >\r\n            <Card        \r\n              sx={{ maxWidth: 345,\r\n                color: theme.palette.mode === 'dark' ? 'white' : '#404040',\r\n                background: theme.palette.mode === 'dark' ? '#181C1F' : 'white',\r\n                // maxWidth: nfts && nfts?.length > 3? 0 : 365,\r\n                width:'100%',\r\n                maxHeight:'410px',\r\n                // boxShadow: '1px 2px 6px #d3d3d3',\r\n                borderRadius: '3px',\r\n                marginBottom: '10px',\r\n                maxWidth:{xl:'100%'},\r\n            }} >\r\n            <CardActionArea>\r\n            <CardMedia component=\"img\" height=\"220\" sx={{objectFit:'scale-down'}} image={nftData.asset} />\r\n           \r\n            \r\n              \r\n                <CardContent sx={{ p: 2 }}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={9}>\r\n                        <Tooltip placement=\"left\" title= {nftData.name}>\r\n                            <Typography variant=\"subtitle1\" className='fontstyling encap-nft'\r\n                             sx={{ textDecoration: 'none', textTransform: 'capitalize' }}>\r\n                                {nftData.name}\r\n                            </Typography>\r\n                            </Tooltip>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} mt={-1.5}>\r\n                        <Tooltip placement=\"left\" title= {nftData?.description}>\r\n                        <Typography\r\n                            className='fontstyling encap-nft'\r\n                                variant=\"body1\"\r\n                                sx={{\r\n                                    overflow: 'hidden',\r\n                                    height: 16,\r\n                                    textTransform: 'capitalize'\r\n                                }}\r\n                            >\r\n                                {nftData.description}\r\n                            </Typography>\r\n                            </Tooltip>   \r\n                        </Grid>\r\n\r\n                        <Grid item xs={6}>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\" className='fontstyling'>\r\n                                    {nftData.price} {nftData.currencyType}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\" className='fontstyling'>{nftData.NFTTokens.length} Items</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                          \r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                                sx={{\r\n                                    marginRight: '10px',\r\n                                    float: 'right',\r\n                                    ':hover': {\r\n                                        boxShadow: 'none'\r\n                                    },\r\n                                    color: '#2F5AFF',\r\n                                    background: '#B9DDFF',\r\n                                    \r\n                                }}\r\n                                \r\n                                onClick={() => {\r\n                                    setDetailsNftOpen(true);\r\n                                }}\r\n                            >\r\n                                Details\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\">\r\n                            {\r\n                                (nftData.status !== 'MINTED' &&  nftData.status !== 'REQUESTED') && (\r\n                                    <>\r\n                                        <Button\r\n                                        className='fontstyling'\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            sx={{ marginRight: '5px' }}\r\n                                            onClick={() => {\r\n                                                setEditNftOpen(true);\r\n                                                setNftInfo({\r\n                                                    id: nftData.id,\r\n                                                    brandId: nftData.Brand.id,\r\n                                                    nftName: nftData.name,\r\n                                                    nftDescription: nftData.description,\r\n                                                    nftPrice: nftData.price,\r\n                                                    mintType: nftData.mintType,\r\n                                                    currencyType: nftData.currencyType,\r\n                                                    fieldDataArray: nftData.NFTMetaData,\r\n                                                    fileDataArray: nftData.NFTMetaFiles,\r\n                                                    images: image\r\n                                                });\r\n                                            }}\r\n                                        >\r\n                                            Edit\r\n                                        </Button>\r\n                                        <Button\r\n                                        className='fontstyling'\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            sx={{ marginRight: '5px' }}\r\n                                            onClick={() => {\r\n                                                setDeleteNftOpen(true);\r\n                                                setNftInfo({\r\n                                                    id: nftData.id,\r\n                                                    nftName: nftData.name,\r\n                                                    nftDescription: nftData.description,\r\n                                                    nftPrice: nftData.price,\r\n                                                    mintType: nftData.mintType,\r\n                                                    currencyType: nftData.currencyType,\r\n                                                    fieldDataArray: nftData.NFTMetaData,\r\n                                                    images: image\r\n                                                });\r\n                                            }}\r\n                                        >\r\n                                            Delete\r\n                                        </Button>\r\n                                    </>\r\n                                )\r\n                             }   \r\n                          \r\n\r\n                                {(nftData.status == 'DRAFT' || nftData.status == 'REJECTED') && (\r\n                                    <Button\r\n                                    className='fontstyling'\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        sx={{ marginRight: '5px' }}\r\n                                        onClick={() => {\r\n                                            setOpenRequestMint(true);\r\n                                        }}\r\n                                    >\r\n                                        Request\r\n                                    </Button>\r\n                                )}\r\n                            </Stack>\r\n                            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\"></Stack>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n                </CardActionArea></Card>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NftCard;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Grid, Typography, Pagination, Menu, MenuItem, TextField, Box } from '@mui/material';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AddNft from './component/addNft';\r\nimport { getAllNft } from '../../../../redux/nftManagement/actions';\r\nimport NftCard from './component/nftcard';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nconst typeArray = [\r\n    {\r\n        value: 'all',\r\n        label: \"All NFT'S\"\r\n    },\r\n    {\r\n        value: 'directMint',\r\n        label: 'Minted NFTS'\r\n    },\r\n    {\r\n        value: 'lazyMint',\r\n        label: \"Lazy Minted NFT'S\"\r\n    },\r\n    {\r\n        value: 'waiting',\r\n        label: 'Waiting For approval'\r\n    },\r\n    {\r\n        value: 'draft',\r\n        label: 'Draft NFTS'\r\n    },\r\n    {\r\n        value: 'rejected',\r\n        label: 'Rejected NFTS'\r\n    }\r\n];\r\n\r\nconst NftManagement = () => {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n\r\n    const user = useSelector((state) => state.auth.user);\r\n    const [type, setType] = useState('all');\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(12);\r\n    const [addNftOpen, setAddNftOpen] = useState(false);\r\n    const [loader, setLoader] = useState(true);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n        setLoader(false);\r\n    };\r\n    const handleType = (event) => {\r\n        setType(event.target.value);\r\n        setLimit(12);\r\n        setSearch('');\r\n        setPage(1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllNft({\r\n                categoryId: location.state.data.CategoryId,\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                type: type,\r\n                brandId: user.BrandId,\r\n                handleClose: handleClose\r\n            })\r\n        );\r\n    }, [search, page, limit, type]);\r\n\r\n    const nftList = useSelector((state) => state.nftReducer.nftList);\r\n    \r\n    return (\r\n        <>\r\n            <AddNft\r\n                open={addNftOpen}\r\n                setOpen={setAddNftOpen}\r\n                data={location?.state?.data}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                nftType={type}\r\n            />\r\n            <MainCard\r\n                className=\"Adminheading\"\r\n                \r\n                title={\r\n                <Grid container sx={{display:'flex'}}>\r\n                    <Grid item md={8} xs={12}>\r\n                        <Typography\r\n                        variant=\"h1\"\r\n                        component=\"h2\"\r\n                        className=\"headingcard\"\r\n                        sx={{   fontWeight: 600, color:  theme.palette.mode === 'dark' ? '#fff' : '#000' ,\r\n                         marginLeft: { lg: '-20px', md: '-20px' },  }}\r\n                    >\r\n                        Categories\r\n                    </Typography>\r\n                    </Grid>\r\n                    <Grid item md={4} xs={12}>\r\n                    <Button\r\n                        className=\"buttonSize\"\r\n                        sx={{float:{xs:'left' , md:'right'}, marginTop:{xs:\"10px\",md:\"0px\"} }}\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            navigate('/categories');\r\n                        }}\r\n                    >\r\n                        Back\r\n                    </Button>\r\n                        </Grid>\r\n                        </Grid>\r\n                   \r\n                }\r\n              \r\n                content={false}\r\n            ></MainCard>\r\n            <MainCard\r\n                className=\"yellow tableShadow\"\r\n                title={\r\n                    <Grid container spacing={4}>\r\n                        <Grid item xs={12} lg={8}>\r\n                            <Typography className=\"mainheading\" variant=\"h1\" component=\"h2\" \r\n                            sx={{ marginLeft: { lg: '48px', md: '48px' },marginTop:{md:\"6px\"} }}>\r\n                                NFT Management  \r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6} lg={2}>\r\n                            <TextField\r\n                                className=\"selectField selectstyle\"\r\n                                id=\"outlined-select-budget\"\r\n                                select\r\n                                fullWidth\r\n                                value={type}\r\n                                onChange={handleType}\r\n                                variant=\"standard\"\r\n                            >\r\n                                {typeArray.map((option, index) => (\r\n                                    <MenuItem  key={index} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={6} lg={2} textAlign=\"start\">\r\n                            <Button\r\n                                className=\"buttonSize\"\r\n                                sx={{ marginLeft: { lg: '-16px', md: '-16px' } }}\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddNftOpen(true);\r\n                                }}\r\n                            >\r\n                                Add NFT\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                <Grid container>\r\n                    {(nftList && nftList.nfts && nftList.nfts.rows && nftList.nfts.rows != undefined) ? (\r\n                        <>\r\n                       { nftList.nfts.rows.length > 0?(\r\n                        <>\r\n                            {' '}\r\n                            <Grid container spacing={gridSpacing} mt={2}\r\n                             sx={{ padding:\"0px 16px\" }}>\r\n                                {nftList.nfts.rows &&\r\n                                    nftList.nfts.rows.map((nft, index) => {\r\n                                        return (\r\n                                            <Grid key={index} item xs={12} sm={6} md={4} lg={3}>\r\n                                                <NftCard\r\n                                                    className=\"tableShadow\"\r\n                                                    nftData={nft}\r\n                                                    categoryId={location.state.data.CategoryId}\r\n                                                    search={search}\r\n                                                    page={page}\r\n                                                    limit={limit}\r\n                                                    type={type}\r\n                                                />\r\n                                            </Grid>\r\n                                        );\r\n                                    })}\r\n                            </Grid>\r\n                            <Grid item xs={12} sx={{ p: 3 }}>\r\n                                <Grid container justifyContent=\"center\" spacing={gridSpacing}>\r\n                                    <Grid item>\r\n                                        <Pagination\r\n                                            page={page}\r\n                                            color=\"primary\"\r\n                                            showFirstButton\r\n                                            showLastButton\r\n                                            count={nftList && nftList.pages}\r\n                                            onChange={(event, newPage) => {\r\n                                                setPage(newPage);\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            </>\r\n                       )\r\n                       :\r\n                       (\r\n                        <Grid item>\r\n                        <Typography className=\"statustypo\" style={{  padding: '20px 20px 20px 70px', fontWeight: '500' }}>\r\n                         No Data Available</Typography>\r\n                    </Grid>\r\n                       )}\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                        <Grid container justifyContent=\"center\" sx={{ width: '80%', m: '15px auto '}}>\r\n                                <Grid item>\r\n                            <CircularProgress disableShrink size={'4rem'} />\r\n                        </Grid>\r\n                                </Grid>\r\n                        </>\r\n                  \r\n                    )}\r\n                </Grid>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NftManagement;\r\n","const BLOCKCHAIN = \r\n{\r\n    WALLET_ADDRESS: '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651',\r\n    ERC20: '0x44405b9819dd99b331A317f5c76667EcCcf19072'\r\n}\r\n\r\nexport default BLOCKCHAIN\r\n","export default __webpack_public_path__ + \"static/media/image-upload.54137b05.svg\";"],"sourceRoot":""}