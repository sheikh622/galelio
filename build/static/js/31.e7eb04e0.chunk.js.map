{"version":3,"sources":["views/pages/user/productDetails/component/productView.js","views/pages/landing/ProductDetails/SimilarProducts.js","views/pages/landing/ProductDetails/Activity.js","views/pages/landing/ProductDetails/Properties.js","views/pages/user/productDetails/index.js","ui-component/extended/Avatar.js","shared/Card/HeadingCard.js","ui-component/cards/SubCard.js"],"names":["PropertiesView","nft","dispatch","useDispatch","useState","resell","setResell","bought","setBought","redeem","setRedeem","loader","setLoader","navigate","useNavigate","user","useSelector","state","auth","age","setAge","theme","useTheme","React","open","setOpen","rprice","ResellDialog","handleClose","Grid","style","width","Button","sx","float","md","className","variant","size","onClick","mintType","handleResellNft","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","fullWidth","onChange","e","target","value","DialogActions","buyNftResolve","redeemNftResolve","resellNftResolve","handleBuyNft","console","log","erc20Address","BLOCKCHAIN","ERC20","tokenId","parseInt","NFTTokens","contractAddress","Category","BrandCategories","price","ethers","utils","parseEther","toString","provider","providers","Web3Provider","window","ethereum","signer","getSigner","address","getAddress","marketplace","Contract","MarketplaceAddress","MarketplaceAbi","abi","token","Erc20","allowance","approvalAmount","approvePrice","approve","wait","purchaseItem","then","data","buyNft","nftId","id","nftToken","buyerAddress","from","catch","error","toast","message","signers","signerAddress","signature","nfts","NFTAbi","prices","tokenPrice","voucher","uri","tokenUri","mintedNFT","events","args","changeTokenId","resellItem","resellNft","success","makeItem","handleRedeemNft","redeemNft","addDeliveryNft","status","TokenId","WalletAddress","NftId","UserId","buyerNft","nftReducer","nftBuyer","useEffect","getNftBuyer","walletAddress","NFTTokenId","spacing","gridSpacing","item","xs","container","justifyContent","textAlign","sm","component","RouterLink","to","CardMedia","height","image","asset","watch1","alt","mt","ml","alignItems","Avatar","src","Brand","objectFit","zeroMinWidth","textDecoration","Typography","align","fontWeight","name","color","palette","mode","description","Box","borderRadius","FormControl","InputLabel","Select","labelId","event","NFTMetaFiles","map","option","MenuItem","fieldValue","fieldName","mb","paddingLeft","currencyType","isSold","JSON","stringify","founded","display","Alert","severity","CircularProgress","SimilarProducts","similarProductNfts","marketplaceReducer","search","page","limit","click","setClick","getAllSimilarProducts","categoryId","CategoryId","lg","textTransform","rows","lenght","Card","background","maxWidth","boxShadow","CardActionArea","CardContent","padding","fontSize","marginTop","Divider","pt","pl","Activity","MainCard","title","content","TableContainer","Table","TableHead","TableRow","TableCell","days","TableBody","Properties","NFTMetaData","length","SubCard","ProductDetails","location","useLocation","marketplaceNfts","outline","others","colorSX","paper","bgcolor","outlineSX","border","borderColor","sizeSX","HeadingCard","forwardRef","role","setValue","options","marginLeft","undefined","select","ref","children","contentClass","darkTitle","secondary","contentSX","dark","light","primary","p","action","opacity","defaultProps"],"mappings":"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","file":"static/js/31.e7eb04e0.chunk.js","sourcesContent":["// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { CardMedia, Grid, Typography, Button, Alert,  InputLabel,\r\n    Select,\r\n   \r\n    FormControl, AlertTitle, Stack, Box, MenuItem } from '@mui/material';\r\n\r\nimport React, { useEffect } from 'react';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\nimport { ethers } from 'ethers';\r\nimport NFTAbi from '../../../../../contractAbi/NFT.json';\r\nimport MarketplaceAbi from '../../../../../contractAbi/Marketplace.json';\r\nimport MarketplaceAddress from '../../../../../contractAbi/Marketplace-address.json';\r\nimport Erc20 from '../../../../../contractAbi/Erc20.json';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { buyNft, resellNft, redeemNft, getNftBuyer, addDeliveryNft, changeTokenId } from 'redux/nftManagement/actions';\r\n// import ResellDialog from \"./resellDialog\"\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Grid2 from '@mui/material/Unstable_Grid2/Grid2';\r\nimport BLOCKCHAIN from '../../../../../constants';\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport Accordion from '@mui/material/Accordion';\r\nimport AccordionSummary from '@mui/material/AccordionSummary';\r\nimport AccordionDetails from '@mui/material/AccordionDetails';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\n// =============================|| LANDING - FEATURE PAGE ||============================= //\r\n\r\nconst PropertiesView = ({ nft }) => {\r\n    const dispatch = useDispatch();\r\n    const [resell, setResell] = useState(false);\r\n    const [bought, setBought] = useState(false);\r\n    const [redeem, setRedeem] = useState(false);\r\n    const [loader, setLoader] = useState(false);\r\n    const navigate = useNavigate();\r\n    const user = useSelector((state) => state.auth.user);\r\n\r\n    const [age, setAge] = useState('');\r\n\r\n    const handleChange = (event) => {\r\n        setAge(event.target.value);\r\n    };\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState('PROOF OF AUTHENTICITY');\r\n\r\n    const status = [\r\n        {\r\n            value: 'PROOF OF AUTHENTICITY',\r\n            label: 'PROOF OF AUTHENTICITY'\r\n        },\r\n        {\r\n            value: 'gia certificate',\r\n            label: 'gia certificate'\r\n        },\r\n        {\r\n            value: 'LCX Certificate',\r\n            label: 'LCX Certificate'\r\n        }\r\n    ];\r\n\r\n    // console.log('nft from product view', nft);\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    let rprice = 0;\r\n    const ResellDialog = () => {\r\n        const handleClickOpen = () => {\r\n            setOpen(true);\r\n        };\r\n\r\n        const handleClose = () => {\r\n            setOpen(false);\r\n        };\r\n\r\n        return (\r\n            <Grid style={{ width: '100%' }}>\r\n                <Button\r\n                    sx={{ float: { md: 'right' } }}\r\n                    className=\"buy\"\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    onClick={() => {\r\n                        if (nft.mintType == 'directMint') {\r\n                            setOpen(true);\r\n                        } else if (nft.mintType == 'lazyMint') {\r\n                            handleResellNft();\r\n                        }\r\n                    }}\r\n                >\r\n                    Resell\r\n                </Button>\r\n                <Dialog open={open} onClose={handleClose}>\r\n                    <DialogTitle>NFT Resell Price</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>Please enter the price for the NFT</DialogContentText>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Price \"\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                            // value={rprice}\r\n                            onChange={(e) => {\r\n                                rprice = e.target.value;\r\n                            }}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose}>Cancel</Button>\r\n                        <Button\r\n                            onClick={() => {\r\n                                handleResellNft();\r\n                            }}\r\n                        >\r\n                            Resell\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                <Grid></Grid>\r\n            </Grid>\r\n        );\r\n    };\r\n\r\n    const buyNftResolve = () => {\r\n        setBought(true);\r\n        setLoader(false);\r\n    };\r\n\r\n    const redeemNftResolve = () => {\r\n        setRedeem(true);\r\n        setLoader(false);\r\n    };\r\n\r\n    const resellNftResolve = () => {\r\n        setResell(true);\r\n        setLoader(false);\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleBuyNft = async () => {\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else if (nft.mintType == 'directMint') {\r\n            setLoader(true);\r\n            console.log('Im in by now direct mint');\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n            let price = ethers.utils.parseEther(nft.price.toString());\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const address = signer.getAddress();\r\n\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n            const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n            // await (await token.approve(MarketplaceAddress.address, price)).wait();\r\n\r\n            // -------------\r\n            let approvalAmount = await token.allowance(address, MarketplaceAddress.address);\r\n            console.log('Approval Amount: ', approvalAmount.toString());\r\n            let approvePrice = ethers.utils.parseEther('10000');\r\n            if (approvalAmount.toString() < nft.price.toString()) {\r\n                await (await token.approve(MarketplaceAddress.address, approvePrice)).wait();\r\n            }\r\n            // ---------------\r\n\r\n            await (await marketplace.purchaseItem(tokenId, contractAddress, price))\r\n                .wait()\r\n                .then((data) => {\r\n                    dispatch(\r\n                        buyNft({\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress,\r\n                            buyNftResolve: buyNftResolve\r\n                        })\r\n                    );\r\n\r\n                    console.log('NFT buy success', data);\r\n                })\r\n                .catch((error) => {\r\n                    // console.log('error', error.message);\r\n                    toast.error(error.message);\r\n                });\r\n            setBought(true);\r\n        } else if (nft.mintType == 'lazyMint') {\r\n            setLoader(true);\r\n            console.log('Im in buy now lazy mint');\r\n            setLoader(true);\r\n            console.log('im in buy now lazy mint else if');\r\n            let signers = nft.signerAddress;\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let signature = nft.NFTTokens[0].signature;\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n            // let contractAddress = \"0x6e9550E5fee2bE7BdB208214e9cE2B47131a5Ca0\";\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const address = signer.getAddress();\r\n            const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n            console.log(nfts);\r\n            console.log(signers);\r\n            console.log(contractAddress);\r\n            console.log(signature);\r\n            let prices = ethers.utils.parseEther(nft.tokenPrice);\r\n\r\n            let voucher = {\r\n                uri: nft.tokenUri,\r\n                price: prices,\r\n                token: erc20Address\r\n            };\r\n\r\n            console.log('Marketplace: ', MarketplaceAddress.address);\r\n            let validatorAddress = '0x6f3b51bd5b67f3e5bca2fb32796215a796b79651';\r\n            const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n\r\n            let approvalAmount = await token.allowance(address, contractAddress);\r\n            console.log('Approval Amount: ', approvalAmount.toString());\r\n            let approvePrice = ethers.utils.parseEther('10000');\r\n            if (approvalAmount.toString() < nft.price.toString()) {\r\n                await (await token.approve(contractAddress, approvePrice)).wait();\r\n            }\r\n            // await (await token.approve(contractAddress, prices)).wait();\r\n\r\n            //\r\n            try {\r\n                let mintedNFT = await (await nfts.buyNft(voucher, signature, MarketplaceAddress.address)).wait();\r\n                const id = parseInt(mintedNFT.events[0].args[2]);\r\n                console.log('Data: ', mintedNFT, id);\r\n\r\n                dispatch(\r\n                    changeTokenId({\r\n                        id: nft.NFTTokens[0].id,\r\n                        tokenId: id.toString()\r\n                    })\r\n                );\r\n\r\n                dispatch(\r\n                    buyNft({\r\n                        nftId: nft.id,\r\n                        nftToken: nft.NFTTokens[0].id,\r\n                        buyerAddress: mintedNFT.from,\r\n                        contractAddress: contractAddress\r\n                    })\r\n                );\r\n            } catch (error) {\r\n                toast.error(error.message);\r\n            }\r\n            setBought(true);\r\n            setLoader(false);\r\n        }\r\n    };\r\n\r\n    const handleResellNft = async () => {\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else if (nft.mintType == 'directMint') {\r\n            console.log('im in directmint resell');\r\n            setLoader(true);\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n\r\n            rprice = ethers.utils.parseEther(rprice.toString());\r\n            console.log('erc20Address', erc20Address);\r\n            console.log('tokenId', tokenId);\r\n            console.log('contractAddress', contractAddress);\r\n\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            console.log('signer', signer);\r\n            console.log('MarketplaceAbi.abi', MarketplaceAbi.abi);\r\n            const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n            console.log(marketplace);\r\n            console.log(tokenId);\r\n            console.log(contractAddress);\r\n            await (await nfts.approve(MarketplaceAddress.address, tokenId)).wait();\r\n            await (await marketplace.resellItem(tokenId, contractAddress, rprice))\r\n                .wait()\r\n                .then((data) => {\r\n                    dispatch(\r\n                        resellNft({\r\n                            rprice: rprice,\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress,\r\n                            resellNftResolve: resellNftResolve\r\n                        })\r\n                    );\r\n                    toast.success('NFT is Resold');\r\n                })\r\n                .catch((error) => {\r\n                    toast.error(error.message);\r\n                });\r\n        } else if (nft.mintType == 'lazyMint') {\r\n            console.log('im in lazymint resell');\r\n\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n\r\n            rprice = ethers.utils.parseEther(rprice.toString());\r\n            console.log('erc20Address', erc20Address);\r\n            console.log('tokenId', tokenId);\r\n            console.log('contractAddress', contractAddress);\r\n\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            console.log('signer', signer);\r\n            console.log('MarketplaceAbi.abi', MarketplaceAbi.abi);\r\n            const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n            console.log(marketplace);\r\n            console.log(tokenId);\r\n            console.log(contractAddress);\r\n            // await (await nfts.approve(MarketplaceAddress.address, tokenId)).wait();\r\n            await (await marketplace.makeItem(erc20Address, tokenId, contractAddress, nft.price))\r\n                .wait()\r\n                .then((data) => {\r\n                    dispatch(\r\n                        resellNft({\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress\r\n                        })\r\n                    );\r\n\r\n                    toast.success('NFT is Resold');\r\n                })\r\n                .catch((error) => {\r\n                    toast.error(error.message);\r\n                });\r\n            setResell(true);\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleRedeemNft = async () => {\r\n        console.log('handleRedeemNft', handleRedeemNft);\r\n\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else if (nft.mintType == 'directMint') {\r\n            console.log('im in directmint redeem');\r\n            setLoader(true);\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n\r\n            await (await marketplace.redeemNft(tokenId, contractAddress))\r\n                .wait()\r\n                .then((data) => {\r\n                    dispatch(\r\n                        redeemNft({\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress\r\n                        })\r\n                    );\r\n                    dispatch(\r\n                        addDeliveryNft({\r\n                            status: 'Pending',\r\n                            TokenId: nft.NFTTokens[0].id,\r\n                            WalletAddress: data.from,\r\n                            NftId: nft.id,\r\n                            UserId: user.id,\r\n                            redeemNftResolve: redeemNftResolve\r\n                        })\r\n                    );\r\n\r\n                    toast.success('NFT Redeem successfully');\r\n                })\r\n                .catch((error) => {\r\n                    toast.error(error.message);\r\n                });\r\n        } else if (nft.mintType == 'lazyMint') {\r\n            console.log('im in redeem lazymint');\r\n            setLoader(true);\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n\r\n            await (await marketplace.redeem(erc20Address, tokenId, contractAddress, nft.price))\r\n                .wait()\r\n                .then((data) => {\r\n                    dispatch(\r\n                        redeemNft({\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress\r\n                        })\r\n                    );\r\n                    dispatch(\r\n                        addDeliveryNft({\r\n                            status: 'Pending',\r\n                            TokenId: nft.NFTTokens[0].id,\r\n                            WalletAddress: data.from,\r\n                            NftId: nft.id,\r\n                            UserId: user.id,\r\n                            redeemNftResolve: redeemNftResolve\r\n                        })\r\n                    );\r\n\r\n                    toast.success('NFT Redeem successfully');\r\n                })\r\n                .catch((error) => {\r\n                    toast.error(error.message);\r\n                });\r\n        }\r\n    };\r\n\r\n    const buyerNft = useSelector((state) => state.nftReducer.nftBuyer);\r\n    useEffect(() => {\r\n        console.log('useffect ran');\r\n        if (user) {\r\n            dispatch(\r\n                getNftBuyer({\r\n                    walletAddress: user?.walletAddress,\r\n                    NFTTokenId: nft.NFTTokens[0].id,\r\n                    NftId: nft.id\r\n                })\r\n            );\r\n        }\r\n    }, [useSelector, dispatch, resell, bought, redeem]);\r\n    console.log('buyerNft', buyerNft);\r\n\r\n    useEffect(() => {\r\n        console.log('nft to watch', nft);\r\n    }, []);\r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n        <Grid item xs={12}>\r\n            <Grid container justifyContent=\"center\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n                <Grid item md={6} sm={12} component={RouterLink} to=\"/companyPage\">\r\n                    <CardMedia component=\"img\" sx={{ height: '592px' }} image={nft?.asset ? nft?.asset : watch1} alt=\"green iguana\" />\r\n                </Grid>\r\n\r\n                <Grid item md={6} sm={12}>\r\n                    <Grid item xs={12}>\r\n                        <Grid container>\r\n                            <Grid item md={12} sm={12}>\r\n                                <Grid container spacing={2}>\r\n                                    <Grid mt={4} ml={2} item xs={12}>\r\n                                        <Grid container spacing={2} alignItems=\"center\">\r\n                                            <Grid item>\r\n                                                <Avatar\r\n                                                    alt=\"User 1\"\r\n                                                    src={nft?.Brand?.image}\r\n                                                    sx={{ width: 56, height: 56, objectFit: 'fill' }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid\r\n                                                item\r\n                                                xs\r\n                                                zeroMinWidth\r\n                                                component={RouterLink}\r\n                                                sx={{ textDecoration: 'none' }}\r\n                                                to=\"/companyPage\"\r\n                                            >\r\n                                                <Typography align=\"left\" fontWeight={600} variant=\"h2\" className=\"brand\">\r\n                                                    {nft?.Brand?.name}\r\n                                                </Typography>\r\n                                                <Typography align=\"left\" variant=\"h3\" className=\"creator\">\r\n                                                    Creator\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                    <Grid item mt={2} xs={12}>\r\n                                        <Typography\r\n                                            className=\"Lux\"\r\n                                            color={theme.palette.mode === 'dark' ? 'white' : 'black'}\r\n                                            variant=\"h3\"\r\n                                        >\r\n                                            {nft?.name ? nft?.name : 'Luxury Stainless Watch'}{' '}\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <Typography className=\"productdescription\" variant=\"body2\">\r\n                                            {nft?.description} , Lobortis facilisis tortor, ut molestie. In rhoncus aliquam dui, vitae\r\n                                            sollicitudin justo, cursus maecenas. Lorem ipsum dolor sit amet, consectetur adipiscing\r\n                                            elit. Lobortis facilisis tortor, ut molestie. In rhoncus aliquam dui, vitae sollicitudin\r\n                                            justo, cursus maecenas. In rhoncus aliquam dui, vitae sollicitudin justo, cursus maecenas.\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <Box sx={{ borderRadius: '4px', width: '95%', margin: '0 auto' }}>\r\n                                            <FormControl fullWidth>\r\n                                                <InputLabel id=\"demo-simple-select-label\">PROOF OF AUTHENTICITY</InputLabel>\r\n                                                <Select\r\n                                                    labelId=\"demo-simple-select-label\"\r\n                                                    id=\"demo-simple-select\"\r\n                                                    value={age}\r\n                                                    onChange={handleChange}\r\n                                                >\r\n                                                    {nft?.NFTMetaFiles.map((option) => (\r\n                                                        <MenuItem key={option.fieldValue} value={option.fieldValue}>\r\n                                                            {option.fieldName}\r\n                                                        </MenuItem>\r\n                                                    ))}\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                        </Box>\r\n                                        {/*     // <TextField\r\n                                        //     sx={{ borderRadius: '4px' }}\r\n                                        //     className=\"select\"\r\n                                        //     fullWidth\r\n                                        //     id=\"standard-select-currency\"\r\n                                        //     select\r\n                                        //     lable='PROOF OF AUTHENTICITY'\r\n                                        //     value={fieldValue}\r\n                                        //     onChange={(e) => setFieldValue(e.target.value)}\r\n                                        // >\r\n                                        \r\n                                        //     {nft?.NFTMetaFiles.map((option) => (\r\n                                        //         <MenuItem key={option.fieldValue} value={option.fieldValue}>\r\n                                        //             {option.fieldName}\r\n                                        //         </MenuItem>\r\n                                        //     ))}\r\n                                        // </TextField> */}\r\n                                    </Grid>\r\n                                    <Grid item mt={2} mb={2} className=\"timer\" xs={12}>\r\n                                        <Grid className=\"auction\" container>\r\n                                            <Grid item md={6} xs={12} sm={12}>\r\n                                                <Typography color=\"black\" variant=\"body\">\r\n                                                    Auction Time{' '}\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid item md={6} xs={12} sm={12}>\r\n                                                <Typography color=\"black\" variant=\"body\">\r\n                                                    {' '}\r\n                                                    2h : 40m : 03s\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item mt={0}  xs={12}>\r\n                                        <Grid container>\r\n                                            <Grid mt={-1} item md={2} xs={12} sm={12}>\r\n                                                <Grid item xs={12}>\r\n                                                    <Typography\r\n                                                        color={theme.palette.mode === 'dark' ? 'white' : '#404040'}\r\n                                                        sx={{ paddingLeft: { md: '22px' }, textAlign: { md: 'left' } }}\r\n                                                        className=\"price\"\r\n                                                        variant=\"body2\"\r\n                                                    >\r\n                                                        Price\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    <Typography\r\n                                                        color={theme.palette.mode === 'dark' ? 'white' : '#262626'}\r\n                                                        sx={{ paddingLeft: { md: '22px' }, textAlign: { md: 'left' } }}\r\n                                                        className=\"ETH\"\r\n                                                        variant=\"h3\"\r\n                                                    >\r\n                                                        {nft.price} {nft.currencyType}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                   {/*      {buyerNft?.founded && (\r\n                                            <>\r\n                                                <Grid item xs={12} md={12} mt={1}>\r\n                                                    {(nft?.transactionHash !== '' || nft?.transactionHash) && (\r\n                                                        <>\r\n                                                            <Accordion sx={{ margin: '10px', border: '2px solid', borderRadius: '4px' }}>\r\n                                                                <AccordionSummary\r\n                                                                    expandIcon={<ExpandMoreIcon />}\r\n                                                                    aria-controls=\"panel1a-content\"\r\n                                                                    id=\"panel1a-header\"\r\n                                                                >\r\n                                                                    <Typography>Transaction hash</Typography>\r\n                                                                </AccordionSummary>\r\n                                                                <AccordionDetails>\r\n                                                                    <a target=\"_blank\" href={nft?.transactionHash}>\r\n                                                                        {nft?.transactionHash}\r\n                                                                    </a>\r\n                                                                </AccordionDetails>\r\n                                                            </Accordion>\r\n                                                        </>\r\n                                                    )}\r\n                                                </Grid>\r\n                                                <Grid item xs={12} md={12}>\r\n                                                    <Accordion sx={{ margin: '10px', border: '2px solid', borderRadius: '4px' }}>\r\n                                                        <AccordionSummary\r\n                                                            expandIcon={<ExpandMoreIcon />}\r\n                                                            aria-controls=\"panel2a-content\"\r\n                                                            id=\"panel2a-header\"\r\n                                                        >\r\n                                                            <Typography>Contract address</Typography>\r\n                                                        </AccordionSummary>\r\n                                                        <AccordionDetails>\r\n                                                            <Typography>{nft?.Category?.BrandCategories[0].contractAddress}</Typography>\r\n                                                        </AccordionDetails>\r\n                                                    </Accordion>\r\n                                                </Grid>\r\n                                            </>\r\n                                        )} */}\r\n                                    \r\n\r\n                                                <>\r\n                                                    {(bought == true || nft?.isSold == true) && \r\n                                                        JSON.stringify(buyerNft) === '{}' ? (\r\n                                                        <>\r\n                                                            <Grid item md={8} xs={12} sm={12} textAlign=\"center\">\r\n                                                                <Alert severity=\"error\">\r\n                                                                    <b>This item is sold already!</b>\r\n                                                                </Alert>\r\n                                                            </Grid>\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <>\r\n                                                            {buyerNft?.founded ? (\r\n                                                                <>\r\n                                                                    <>\r\n                                                                    <Grid item md={12}  sx={{ mt: 1 ,  display:'flex' }}>\r\n                                                                        <Grid item md={6} xs={12} sm={12} >\r\n                                                                            {buyerNft?.status == 'Redeem' || redeem ? (\r\n                                                                                <>\r\n                                                                                    <Alert severity=\"success\">\r\n                                                                                        <b>This item is Redeemed</b>\r\n                                                                                    </Alert>\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    {buyerNft?.status !== 'Resell' && redeem !== true && (\r\n                                                                                        <>\r\n                                                                                            <Button\r\n                                                                                                sx={{ float: { md: 'right' } }}\r\n                                                                                                className=\"buy\"\r\n                                                                                                variant=\"contained\"\r\n                                                                                                size=\"large\"\r\n                                                                                                onClick={() => {\r\n                                                                                                    handleRedeemNft();\r\n                                                                                                }}\r\n                                                                                            >\r\n                                                                                                {loader ? (\r\n                                                                                                    <CircularProgress\r\n                                                                                                        sx={{ color: 'white' }}\r\n                                                                                                    />\r\n                                                                                                ) : (\r\n                                                                                                    <span> Redeem</span>\r\n                                                                                                )}\r\n                                                                                            </Button>\r\n                                                                                        </>\r\n                                                                                    )}\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                        </Grid>\r\n                                                                        <Grid  item md={6} xs={12} sm={12}>\r\n                                                                            {buyerNft?.status == 'Resell' || resell == true ? (\r\n                                                                                <>\r\n                                                                                    <Alert severity=\"info\">\r\n                                                                                        <b>This item is resold.</b>\r\n                                                                                    </Alert>\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    {buyerNft?.status !== 'Redeem' && redeem == false && (\r\n                                                                                        <>\r\n                                                                                            {loader ? (\r\n                                                                                                <CircularProgress sx={{ color: 'white' }} />\r\n                                                                                            ) : (\r\n                                                                                                <ResellDialog />\r\n                                                                                            )}\r\n                                                                                        </>\r\n                                                                                    )}\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                        </Grid>\r\n                                                                        </Grid>\r\n                                                                    </>\r\n                                                                </>\r\n                                                            ) : (\r\n                                                                <>\r\n                                                                    {(bought || redeem || resell) !== true && (\r\n                                                                        <Grid mt={-1} item md={10} xs={12} sm={12} textAlign=\"center\">\r\n                                                                        <Button\r\n                                                                            sx={{ float: { md: 'right' } }}\r\n                                                                            className=\"buy\"\r\n                                                                            variant=\"contained\"\r\n                                                                            size=\"large\"\r\n                                                                            onClick={() => {\r\n                                                                                handleBuyNft();\r\n                                                                            }}\r\n                                                                        >\r\n                                                                        {loader ? (\r\n                                                                            <CircularProgress className='circul'\r\n                                                                            />\r\n                                                                       \r\n                                                                        ) : (\r\n                                                                            <span>Buy Now</span>\r\n                                                                        )}\r\n                                                                        </Button>\r\n                                                                    </Grid>\r\n                                                                    )}\r\n                                                                </>\r\n                                                            )}\r\n                                                        </>\r\n                                                    )}\r\n                                                </>\r\n                                            </Grid>\r\n                                            {/* \r\n                                            <Button onClick={()=>{\r\n                                                setBought(true)\r\n                                            }}>Set Bought True</Button>\r\n                                            <Button onClick={()=>{\r\n                                                setBought(false)\r\n                                            }}>Set Bought False</Button> */}\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item md={1} sm={12}></Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n        \r\n    );\r\n};\r\n\r\nexport default PropertiesView;\r\n","// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Container, Card, Grid, Typography, CardActionArea, CardContent, Divider } from '@mui/material';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport {getAllSimilarProducts} from '../../../../redux/marketplace/actions'\r\nconst SimilarProducts = ({nft}) => {\r\n    const theme = useTheme();\r\n    const itemData = [\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Cars',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Shoes',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1522770179533-24471fcdba45',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Real Estate',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Goods',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Cars',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Shoes',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1522770179533-24471fcdba45',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Real Estate',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Goods',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        }\r\n    ];\r\n\r\n    const dispatch = useDispatch();\r\n    const similarProductNfts = useSelector((state) => state.marketplaceReducer.similarProductNfts);\r\n    console.log('similarProductNfts', similarProductNfts);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(12);\r\n    const [click, setClick] = useState(false);\r\n    useEffect(() => {\r\n        console.log('useeffect from similar products ran');\r\n        dispatch(\r\n            getAllSimilarProducts({\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                categoryId: nft.CategoryId,\r\n                nftId:nft.id\r\n            })\r\n        );\r\n        setClick(false)\r\n    }, [click, search, page, limit]);\r\n\r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12} lg={12} md={12}>\r\n                <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                    <Grid item xs={12}>\r\n                        <Typography\r\n                            variant=\"h2\"\r\n                            mt={4}\r\n                            component=\"div\"\r\n                            sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' }, textTransform: 'capitalize' }}\r\n                        >\r\n                            Similar Products\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n{similarProductNfts?.nfts?.rows.lenght > 0 ? (\r\n    <Grid item xs={12}>\r\n    <Grid container justifyContent=\"left\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n \r\n    {similarProductNfts?.nfts?.rows.map((data) => (\r\n            <Grid item md={2} sm={6}>\r\n            <Card\r\n            sx={{\r\n                color: theme.palette.mode === 'dark' ? 'white' : '#404040',\r\n                background: theme.palette.mode === 'dark' ? '#181C1F' : 'white',\r\n                maxWidth: 365,\r\n                width: '105%',\r\n                boxShadow: '1px 2px 6px #d3d3d3',\r\n                borderRadius: '7px'\r\n            }}\r\n        >\r\n            <CardActionArea>\r\n                <CardMedia component=\"img\" height=\"200\" image={data.asset} />\r\n                <CardContent style={{ padding: '6%' }}>\r\n                    <Grid container>\r\n                        <Grid item xs={8} sx={{ textAlign: 'left' }}>\r\n                            <span style={{ fontWeight: '550', fontSize: '130%' }}>\r\n                            {data.Brand.name}\r\n                            </span>\r\n                            <div className='overflow' style={{ marginTop: '5%' }}>\r\n                            {data.name}\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={4}  sx={{ background: '' }}>\r\n                            <span style={{ fontWeight: '50 !important ', fontSize: '110%', float: 'right' }}>\r\n                            Creator\r\n                            </span>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Divider sx={{ mt: 2, mb: 2 }} />\r\n                    <Grid container sx={{ background: '' }}>\r\n                        <Grid item md={6} xs={12} className='overflow' sx={{ pt: 1, }}>\r\n                            <span\r\n                                style={{\r\n                                    background: theme.palette.mode === 'dark' ? 'black' : '#d9d9d9',\r\n                                    padding: '3% 4%',\r\n                                    borderRadius: '10%',\r\n                                    color: 'white',\r\n                                    fontSize: '80%'\r\n                                }}\r\n                            >\r\n                                02h\r\n                            </span>{' '}\r\n                            :{' '}\r\n                            <span\r\n                                style={{\r\n                                    background: theme.palette.mode === 'dark' ? 'black' : '#d9d9d9',\r\n                                    padding: '3% 4%',\r\n                                    borderRadius: '10%',\r\n                                    color: 'white',\r\n                                    fontSize: '80%'\r\n                                }}\r\n                            >\r\n                                25m\r\n                            </span>{' '}\r\n                            :{' '}\r\n                            <span\r\n                                style={{\r\n                                    background: theme.palette.mode === 'dark' ? 'black' : '#d9d9d9',\r\n                                    padding: '3% 4%  ',\r\n                                    borderRadius: '10%',\r\n                                    color: 'white',\r\n                                    fontSize: '80%'\r\n                                }}\r\n                            >\r\n                                04s\r\n                            </span>\r\n                        </Grid>\r\n                        <Grid item md={6} xs={12} className='overflow' sx={{ pl: 1, marginTop:{xs:'10px', md:'0'} , \r\n                          }}>\r\n                            Current Bid\r\n                            <div style={{ marginTop: '5%', fontSize: '110%' }}>\r\n                            {data.currencyType + ' ' + data.price}\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </CardActionArea>\r\n        </Card>\r\n            </Grid>\r\n        ))}\r\n        \r\n    </Grid>\r\n</Grid>\r\n) : (\r\n    <Grid item xs={12}>\r\n    <Typography\r\n        variant=\"h3\"\r\n        mt={1}\r\n        component=\"div\"\r\n        sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' , color:'gray' }, textTransform: 'capitalize' }}\r\n    >\r\n    No similar product found..!\r\n    </Typography>\r\n</Grid>\r\n)}\r\n           \r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SimilarProducts;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport AutorenewIcon from '@mui/icons-material/Autorenew';\r\nimport {\r\n    Button,\r\n    Typography,\r\n    Grid,\r\n    Select,\r\n    InputLabel,\r\n    FormControl,\r\n    MenuItem,\r\n    Menu,\r\n    Pagination,\r\n    OutlinedInput,\r\n    InputAdornment,\r\n    Divider\r\n} from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { IconButton, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip } from '@mui/material';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport HeadingCard from 'shared/Card/HeadingCard';\r\nconst Activity = () => {\r\n    const theme = useTheme();\r\n    const itemData = [\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Vlad556 ',\r\n            to: 'Vlad556 ',\r\n            days: '9 Days ago '\r\n        },\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Vlad556 ',\r\n            to: 'Vlad556 ',\r\n            days: '9 Days ago '\r\n        },\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Vlad556 ',\r\n            to: 'Vlad556 ',\r\n            days: '9 Days ago '\r\n        },\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Vlad556 ',\r\n            to: 'Vlad556 ',\r\n            days: '9 Days ago '\r\n        }\r\n    ];\r\n    const [search, setSearch] = useState('');\r\n\r\n    return (\r\n        <>\r\n            <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n                <Grid item xs={12} lg={12} md={12}>\r\n                    <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                        <Grid item xs={12}>\r\n                            <Typography\r\n                                variant=\"h2\"\r\n                                mt={4}\r\n                                component=\"div\"\r\n                                sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' }, \r\n                                textTransform: 'capitalize' }}\r\n                            >\r\n                                Activity\r\n                                <AutorenewIcon />\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <Grid item md={12} sm={12}>\r\n                        <MainCard\r\n                         className='tableShadow'\r\n                            sx={{ background: theme.palette.mode === 'dark' ? '#181C1F' : '#fff' }}\r\n                            title={\r\n                                <Grid container spacing={gridSpacing}>\r\n                                    <Grid item xs={12}>\r\n                                        <FormControl fullWidth>\r\n                                            <InputLabel id=\"age-select\">Filter</InputLabel>\r\n                                            <Select\r\n                                                fullWidth\r\n                                                labelId=\"age-select\"\r\n                                                id=\"age\"\r\n                                                name=\"age\"\r\n                                                // defaultValue={formik.values.age}\r\n                                                // onChange={formik.handleChange}\r\n                                                label=\"Age\"\r\n                                            >\r\n                                                <MenuItem value=\"\">\r\n                                                    <em>Filter</em>\r\n                                                </MenuItem>\r\n                                                <MenuItem value={10}>Ten</MenuItem>\r\n                                                <MenuItem value={20}>Twenty</MenuItem>\r\n                                                <MenuItem value={30}>Thirty</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            }\r\n                            content={false}\r\n                        >\r\n                            <Divider />\r\n                            <TableContainer>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">Event </TableCell>\r\n                                            <TableCell align=\"center\">Price </TableCell>\r\n                                            <TableCell align=\"center\">From</TableCell>\r\n                                            <TableCell align=\"center\">To </TableCell>\r\n                                            <TableCell align=\"center\">Date</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    {itemData.map((item) => (\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell align=\"center\">{item.title}</TableCell>\r\n                                                <TableCell align=\"center\">{item.price}</TableCell>\r\n                                                <TableCell sx={{ color: '#2194FF' }} align=\"center\">\r\n                                                    {item.from}\r\n                                                </TableCell>\r\n                                                <TableCell sx={{ color: '#2194FF' }} align=\"center\">\r\n                                                    {item.to}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"center\">{item.days}</TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    ))}\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </MainCard>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Activity;\r\n","// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Container, Grid, Typography } from '@mui/material';\r\n\r\n// project imports\r\n\r\nimport SubCard from 'ui-component/cards/SubCard';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// =============================|| LANDING - FEATURE PAGE ||============================= //\r\n\r\nconst Properties = ({nft}) => {\r\n    \r\n    console.log(nft, 'nft product data');\r\n    const theme = useTheme();\r\n    const property = [\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        }\r\n    ];\r\n    return (\r\n\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12} lg={12} md={12}>\r\n                <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                    <Grid item xs={12}>\r\n                        <Typography\r\n                            variant=\"h2\"\r\n                            mt={4}\r\n                            component=\"div\"\r\n                            sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' }, \r\n                            textTransform: 'capitalize' }}\r\n                        >\r\n                            Properties\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            {nft.NFTMetaData?.length > 0 ? (\r\n                <>\r\n            <Grid item xs={12}>\r\n                <Grid container justifyContent=\"left\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n                {nft?.NFTMetaData.map((item) => (\r\n                        <Grid item md={2} sm={6}>\r\n                            <SubCard className=\"property tableShadow\" sx={{ background: theme.palette.mode === 'dark' ? '#181C1F' : '#fff' }}>\r\n                                <Grid container justifyContent=\"center\" spacing={2}>\r\n                                    <Grid item xs={12}>\r\n                                        <Typography className=\"pbackground\" variant=\"body\">\r\n                                        {item.fieldName}\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <Typography variant=\"h3\">{item.fieldValue}  </Typography>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <Typography\r\n                                            color={theme.palette.mode === 'dark' ? 'white' : 'black'}\r\n                                            className=\"plight\"\r\n                                            variant=\"body2\"\r\n                                        >\r\n                                        94% Have this trait\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </SubCard>\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n            </Grid>\r\n            </>\r\n            ) : (\r\n                <>\r\n                <Grid container spacing={2} >\r\n                <Grid item xs={12}>\r\n                    <Typography\r\n                        variant=\"h3\"\r\n                        mt={2}\r\n                        component=\"div\"\r\n                        sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' }, \r\n                        textTransform: 'capitalize' , color:'#9498aa' }}\r\n                    >\r\n                       No  Property Found..!\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n                </>\r\n            )}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Properties;\r\n","import { useLocation } from 'react-router-dom';\r\nimport { useTheme } from '@emotion/react';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Grid } from '@mui/material';\r\n// import Properties from './component/properties';\r\nimport PropertiesView from './component/productView';\r\n// import { getAllMarketplaceNftsByCategory } from 'redux/marketplace/actions';\r\n// import SimilarProducts from '../../user/productDetails/component/similarProducts';\r\n// import Activity from '../../landing/ProductDetails/Activity';\r\n// project imports\r\nimport SimilarProducts from '../../landing/ProductDetails/SimilarProducts';\r\nimport Activity from '../../landing/ProductDetails/Activity';\r\nimport Properties from '../../landing/ProductDetails/Properties';\r\n// import PropertiesView from '../../landing/ProductDetails/ProductView';\r\nconst ProductDetails = () => {\r\n    const theme = useTheme();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n    const marketplaceNfts = useSelector((state) => state.marketplaceReducer.marketplaceNfts);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    // useEffect(() => {\r\n    //     dispatch(\r\n    //         getAllMarketplaceNftsByCategory({\r\n    //             search: search,\r\n    //             page: page,\r\n    //             limit: limit,\r\n    //             categoryId: location?.state.nft?.Category?.id\r\n    //         })\r\n    //     );\r\n    // }, [search, page, limit]);\r\n    return (\r\n        <>\r\n            <Grid\r\n                container-fluid\r\n                md={12}\r\n                lg={11}\r\n                sx={{\r\n                    display: { xs: 'block', sm: 'block', md: 'flex', lg: 'flex' },\r\n                    background: 'tranparent',\r\n                    color: theme.palette.mode === 'dark' ? 'white' : '#404040'\r\n                }}\r\n            >\r\n                <Grid item md={12} xs={12} lg={11}>\r\n                    <Grid container-fluid>\r\n                    <Grid item md={12} xs={12}>\r\n                    <Grid container>\r\n                        <Grid item md={12} xs={12}>\r\n                            <PropertiesView nft={location.state.nft} />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12} >\r\n                            <Properties  nft={location.state.nft}/>\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <Activity  nft={location.state.nft}/>\r\n                        </Grid>\r\n\r\n                        <Grid item md={12} xs={12}>\r\n                            <SimilarProducts nft={location.state.nft}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProductDetails;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { forwardRef } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// constant\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n    \r\n            <Box sx={{ padding: '13px 20px 22px 20px' }}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                    <Grid item>\r\n                        <Typography variant=\"h1\" component=\"h2\" className='headingcard' \r\n                        sx={{ marginTop:'10px' ,  \r\n                        fontWeight: 600, color: '#000' , marginLeft:{lg:'-20px', md:'-20px'} , \r\n                        background: theme.palette.mode === 'dark' ? 'black' : '#f3f3f3',\r\n                        color: theme.palette.mode === 'dark' ? 'white' : '#404040', }}>\r\n                            {title}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {value !== undefined && (\r\n                        <Grid item>\r\n                            {/* {options && (role == 'teacher' || role == 'super_admin') && ( */}\r\n                            <TextField\r\n                                id=\"standard-select-currency\"\r\n                                select\r\n                                value={value}\r\n                                onChange={(e) => setValue(e.target.value)}\r\n                                sx={{ width: '110px', height: '40px' }}\r\n                            >\r\n                                {options.map((option) => (\r\n                                    <MenuItem key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                            {/* )} */}\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n       \r\n    );\r\n});\r\n\r\nexport default HeadingCard;\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// ==============================|| CUSTOM SUB CARD ||============================== //\r\n\r\nconst SubCard = forwardRef(({ children, content, contentClass, darkTitle, secondary, sx = {}, contentSX = {}, title, ...others }, ref) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            ref={ref}\r\n            sx={{\r\n                border: '1px solid',\r\n                borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light,\r\n                ':hover': {\r\n                    boxShadow: theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' : '0 2px 14px 0 rgb(32 40 45 / 8%)'\r\n                },\r\n                ...sx\r\n            }}\r\n            {...others}\r\n        >\r\n            {/* card header and action */}\r\n            {!darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h5\">{title}</Typography>} action={secondary} />}\r\n            {darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h4\">{title}</Typography>} action={secondary} />}\r\n\r\n            {/* content & header divider */}\r\n            {title && (\r\n                <Divider\r\n                    sx={{\r\n                        opacity: 1,\r\n                        borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light\r\n                    }}\r\n                />\r\n            )}\r\n\r\n            {/* card content */}\r\n            {content && (\r\n                <CardContent sx={{ p: 2.5, ...contentSX }} className={contentClass || ''}>\r\n                    {children}\r\n                </CardContent>\r\n            )}\r\n            {!content && children}\r\n        </Card>\r\n    );\r\n});\r\n\r\nSubCard.propTypes = {\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    sx: PropTypes.object,\r\n    contentSX: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nSubCard.defaultProps = {\r\n    content: true\r\n};\r\n\r\nexport default SubCard;\r\n"],"sourceRoot":""}