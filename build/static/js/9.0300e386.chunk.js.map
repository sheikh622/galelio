{"version":3,"sources":["views/pages/superAdmin/brands/brandCategory/component/addUpdateBrandCategory.js","views/pages/superAdmin/brands/brandCategory/component/deleteBrandCategoryDialog.js","views/pages/superAdmin/brands/brandCategory/component/brandCategoryTable.js","views/pages/superAdmin/brands/brandCategory/index.js","ui-component/extended/Avatar.js"],"names":["Transition","forwardRef","props","ref","Slide","direction","AddUpdateBrandCategoryDialog","open","setOpen","brandCategoryData","page","limit","search","dispatch","useDispatch","categoryArray","useSelector","state","brandCategoryReducer","categoriesDropdownList","useState","category","setCategory","isUpdate","setIsUpdate","useEffect","categoryId","handleContractDeployment","a","brandName","brand","name","categories","map","data","value","categoryName","label","contractName","symbol","substring","admin","validator","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","getAddress","minterAddress","factoryAddr","Contract","FactoryAddress","address","FactoryAbi","abi","deployMintingContract","catch","error","toast","message","wait","res","addr","events","args","addBrandCategory","brandId","profitPercentage","formik","values","contractAddress","handleClose","validationSchema","Yup","default","min","max","required","typeError","useFormik","enableReinitialize","initialValues","onSubmit","updateBrandCategory","resetForm","getAllCategoriesDropdown","Dialog","onClose","className","maxWidth","TransitionComponent","keepMounted","DialogTitle","id","Divider","DialogContent","noValidate","handleSubmit","Grid","container","item","xs","pt","pr","TextField","select","fullWidth","onChange","event","target","MenuItem","option","index","handleChange","touched","Boolean","errors","helperText","autoComplete","DialogActions","sx","AnimateButton","Button","variant","my","ml","type","size","disableElevation","onClick","color","DeleteBrandCategoryDialog","theme","useTheme","DialogContentText","Typography","component","palette","dark","borderColor","deleteBrandCategory","BrandCategoryTable","brandCategoriesList","addUpdateOpen","setAddUpdateOpen","setBrandCategoryData","navigate","useNavigate","deleteOpen","setDeleteOpen","detailId","setDetailId","TableContainer","Table","TableHead","TableRow","TableCell","align","undefined","brandCategories","count","TableBody","padding","row","justifyContent","alignItems","spacing","Avatar","alt","src","Category","image","description","Tooltip","placement","title","IconButton","fontSize","style","display","pl","colSpan","md","CategoryId","BrandId","brandData","fontWeight","BrandCategory","location","useLocation","setSearch","setPage","setLimit","anchorEl","setAnchorEl","handleCloseMenu","getAllBrandCategories","MainCard","secondary","content","gridSpacing","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","e","textAlign","p","Pagination","showFirstButton","showLastButton","pages","newPage","grey","endIcon","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","outline","others","colorSX","background","paper","bgcolor","outlineSX","border","sizeSX","width","height"],"mappings":"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","file":"static/js/9.0300e386.chunk.js","sourcesContent":["import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ethers } from 'ethers';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { updateBrandCategory, addBrandCategory, getAllCategoriesDropdown } from 'redux/brandCategory/actions';\r\nimport { MenuItem, Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, Divider, Grid } from '@mui/material';\r\nimport FactoryAbi from '../../../../../../contractAbi/Factory.json';\r\nimport FactoryAddress from '../../../../../../contractAbi/Factory-address.json';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nexport default function AddUpdateBrandCategoryDialog({ open, setOpen, brandCategoryData, page, limit, search }) {\r\n    const dispatch = useDispatch();\r\n    const categoryArray = useSelector((state) => state.brandCategoryReducer.categoriesDropdownList);\r\n    const [category, setCategory] = useState(0);\r\n    const [isUpdate, setIsUpdate] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (brandCategoryData.categoryId == 0) {\r\n            setIsUpdate(false);\r\n        } else {\r\n            setIsUpdate(true);\r\n        }\r\n        setCategory(brandCategoryData.categoryId)\r\n    }, [brandCategoryData]);\r\n\r\n    const handleCategoryChange = (event) => {\r\n        setCategory(event.target.value);\r\n    };\r\n\r\n    const handleContractDeployment = async () => {\r\n        let brandName = brandCategoryData.brand.name;\r\n        let categoryName;\r\n        categoryArray.categories.map((data) => {\r\n            if (data.value == category) {\r\n                categoryName = data.label;\r\n            }\r\n        });\r\n        const contractName = 'Galileo' + ' ' + brandName + ' ' + categoryName;\r\n        const symbol = 'G' + brandName.substring(0, 1) + categoryName.substring(0, 1);\r\n        const admin = '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651';\r\n        const validator = '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651';\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const minterAddress = await signer.getAddress();\r\n        const factoryAddr = new ethers.Contract(FactoryAddress.address, FactoryAbi.abi, signer);\r\n        let res = await (\r\n            await factoryAddr.deployMintingContract(contractName, symbol, admin, minterAddress, validator).catch((error) => {\r\n                toast.error(error.message);\r\n            })\r\n        ).wait();\r\n        let addr = res.events[3].args[0];\r\n        dispatch(\r\n            addBrandCategory({\r\n                brandId: brandCategoryData.brandId,\r\n                categoryId: category,\r\n                profitPercentage: formik.values.profitPercentage,\r\n                contractAddress: addr,\r\n                page: page,\r\n                limit: limit,\r\n                search: search,\r\n                handleClose: handleClose\r\n            })\r\n        );\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        isUpdate: Yup.boolean().default(isUpdate),\r\n        profitPercentage: Yup.number()\r\n            .min(1, 'Profit Percentage should not be less than one')\r\n            .max(99, 'Profit Percentage should not exceed 99')\r\n            .required('Profit Percentage is required')\r\n            .typeError('Invalid Profit Percentage')\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: brandCategoryData,\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            if (!isUpdate) {\r\n                handleContractDeployment();\r\n            } else {\r\n                dispatch(\r\n                    updateBrandCategory({\r\n                        brandId: brandCategoryData.brandId,\r\n                        categoryId: brandCategoryData.categoryId,\r\n                        profitPercentage: values.profitPercentage,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllCategoriesDropdown({ brandId: brandCategoryData.brandId }));\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog\"\r\n                maxWidth=\"sm\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">\r\n                    {!isUpdate ? 'Assign Category to brand ' : ' Update Profit percentage of category'}\r\n                </DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <form noValidate onSubmit={formik.handleSubmit} id=\"validation-forms\">\r\n                        <Grid container>\r\n                            <>\r\n                                {!isUpdate && (\r\n                                    <Grid item xs={12} pt={2} pr={4}>\r\n                                        <TextField\r\n                                            className=\"responsiveSelectfield\"\r\n                                            id=\"outlined-select-budget\"\r\n                                            select\r\n                                            fullWidth\r\n                                            label=\"Select Category\"\r\n                                            value={category}\r\n                                            onChange={handleCategoryChange}\r\n                                        >\r\n                                            <MenuItem value={0}>Choose Category</MenuItem>\r\n                                            {categoryArray &&\r\n                                                categoryArray.categories &&\r\n                                                categoryArray.categories.map((option, index) => (\r\n                                                    <MenuItem key={index} value={option.value}>\r\n                                                        {option.label}\r\n                                                    </MenuItem>\r\n                                                ))}\r\n                                        </TextField>\r\n                                    </Grid>\r\n                                )}\r\n\r\n                                <Grid item xs={12} pt={4} pr={4}>\r\n                                    <TextField\r\n                                        id=\"profitPercentage\"\r\n                                        name=\"profitPercentage\"\r\n                                        label=\"Enter Profit Percentage\"\r\n                                        value={formik.values.profitPercentage}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.profitPercentage && Boolean(formik.errors.profitPercentage)}\r\n                                        helperText={formik.touched.profitPercentage && formik.errors.profitPercentage}\r\n                                        fullWidth\r\n                                        autoComplete=\"given-name\"\r\n                                    />\r\n                                </Grid>\r\n                            </>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n\r\n                <DialogActions sx={{ pr: 3 }}>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1 }}\r\n                            type=\"submit\"\r\n                            size=\"large\"\r\n                            disableElevation\r\n                            onClick={() => {\r\n                                formik.handleSubmit();\r\n                            }}\r\n                        >\r\n                            {!isUpdate ? 'Add ' : 'Update '}\r\n                        </Button>\r\n                    </AnimateButton>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1, color: '#fff' }}\r\n                            onClick={handleClose}\r\n                            color=\"secondary\"\r\n                            size=\"large\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </AnimateButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteBrandCategory } from '../../../../../../redux/brandCategory/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteBrandCategoryDialog({ open, setOpen, page, limit, search, brandCategoryData }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Delete Brand Category</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to delete this Category?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteBrandCategory({\r\n                                    categoryId: brandCategoryData.categoryId,\r\n                                    brandId: brandCategoryData.brandId,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n    Divider,\r\n    Typography,\r\n    IconButton,\r\n    Grid,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    Button,\r\n    TableRow,\r\n    Tooltip\r\n} from '@mui/material';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport AddUpdateBrandCategoryDialog from './addUpdateBrandCategory';\r\nimport DeleteBrandCategoryDialog from './deleteBrandCategoryDialog';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\n\r\nconst BrandCategoryTable = ({\r\n    brandCategoriesList,\r\n    search,\r\n    page,\r\n    limit,\r\n    addUpdateOpen,\r\n    setAddUpdateOpen,\r\n    brandCategoryData,\r\n    setBrandCategoryData\r\n}) => {\r\n    const navigate = useNavigate();\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const [detailId, setDetailId] = useState();\r\n    const openDetails = (id) => {\r\n        if (detailId === id) {\r\n            setDetailId(null);\r\n        } else {\r\n            setDetailId(id);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <TableContainer>\r\n            <AddUpdateBrandCategoryDialog\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n                brandCategoryData={brandCategoryData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n\r\n            <DeleteBrandCategoryDialog\r\n                open={deleteOpen}\r\n                setOpen={setDeleteOpen}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n                brandCategoryData={brandCategoryData}\r\n            />\r\n\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\">Category</TableCell>\r\n                        <TableCell align=\"center\">Description</TableCell>\r\n                        <TableCell align=\"center\">Profit percentage</TableCell>\r\n                        <TableCell align=\"center\">Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                {brandCategoriesList.brandCategories != undefined && brandCategoriesList.count > 0 ? (\r\n                    <TableBody sx={{ padding: '10px' }}>\r\n                        {brandCategoriesList.brandCategories != undefined &&\r\n                            brandCategoriesList.brandCategories.map((row, index) => (\r\n                                <>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"center\" justifyContent=\"center\" alignItems=\"center\">\r\n                                            <Grid container spacing={2} justifyContent=\"center\" alignItems=\"center\">\r\n                                                <Grid item>\r\n                                                    <Avatar alt=\"Category Image\" src={row.Category.image} />\r\n                                                </Grid>\r\n                                                <Grid item>\r\n                                                    <Typography variant=\"subtitle1\" component=\"div\">\r\n                                                        {row.Category.name}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </TableCell>\r\n\r\n                                        <TableCell align=\"center\">{row.Category.description}</TableCell>\r\n                                        <TableCell align=\"center\">{row.profitPercentage}</TableCell>\r\n\r\n                                        <TableCell align=\"center\">\r\n                                            <Tooltip placement=\"top\" title=\"View\">\r\n                                                <IconButton\r\n                                                    color=\"primary\"\r\n                                                    aria-label=\"detail\"\r\n                                                    size=\"large\"\r\n                                                    onClick={() => {\r\n                                                        openDetails(row.id);\r\n                                                    }}\r\n                                                >\r\n                                                    <KeyboardArrowDownIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow style={{ display: detailId !== row.id ? 'none' : '' }}>\r\n                                        <TableCell sx={{ pl: 12 }} colSpan={12}>\r\n                                            <div>\r\n                                                <Grid container spacing={4}>\r\n                                                    <Grid item xs={4} md={4}>\r\n                                                        <Button\r\n                                                            variant=\"outlined\"\r\n                                                            size=\"large\"\r\n                                                            onClick={() => {\r\n                                                                setAddUpdateOpen(true);\r\n                                                                setBrandCategoryData({\r\n                                                                    categoryId: row.CategoryId,\r\n                                                                    brandId: row.BrandId,\r\n                                                                    profitPercentage: row.profitPercentage\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            Edit\r\n                                                        </Button>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={4} md={4}>\r\n                                                        <Button\r\n                                                            variant=\"outlined\"\r\n                                                            size=\"large\"\r\n                                                            onClick={() => {\r\n                                                                setDeleteOpen(true);\r\n                                                                setBrandCategoryData({\r\n                                                                    categoryId: row.CategoryId,\r\n                                                                    brandId: row.BrandId\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            Delete\r\n                                                        </Button>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={4} md={4}>\r\n                                                        <Button\r\n                                                            variant=\"outlined\"\r\n                                                            size=\"large\"\r\n                                                            onClick={() => {\r\n                                                                navigate('/nftManagement', {\r\n                                                                    state: {\r\n                                                                        brandData: row\r\n                                                                    }\r\n                                                                });\r\n                                                            }}\r\n                                                        >\r\n                                                            View NFT'S\r\n                                                        </Button>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </div>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </>\r\n                            ))}\r\n                    </TableBody>\r\n                ) : (\r\n                    <>\r\n                        <Grid item md={12}>\r\n                            <Divider />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography style={{ padding: '20px', fontWeight: '800' }}> No Data Available</Typography>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default BrandCategoryTable;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport BrandCategoryTable from './component/brandCategoryTable';\r\nimport { Button, Typography, Grid, MenuItem, Menu, Pagination, OutlinedInput, InputAdornment } from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { getAllBrandCategories, getAllCategoriesDropdown } from '../../../../../redux/brandCategory/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AddUpdateBrandCategoryDialog from './component/addUpdateBrandCategory';\r\n\r\nconst BrandCategory = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const brandCategoriesList = useSelector((state) => state.brandCategoryReducer.brandCategoriesList);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [brandCategoryData, setBrandCategoryData] = useState({\r\n        brand: location.state.brandData,\r\n        brandId: location.state.brandData.id,\r\n        categoryId: 0,\r\n        profitPercentage: ''\r\n    });\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllBrandCategories({\r\n                brandId: location.state.brandData.id,\r\n                search: search,\r\n                page: page,\r\n                limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n  \r\n    return (\r\n        <>\r\n            <AddUpdateBrandCategoryDialog\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n                brandCategoryData={brandCategoryData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n            <MainCard\r\n                title={\r\n                    <Typography variant=\"h3\" sx={{ fontWeight: 500, color: 'cadetblue' }}>\r\n                        Category Management of : {location.state.brandData.name}\r\n                    </Typography>\r\n                }\r\n                secondary={\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            navigate('/brands');\r\n                        }}\r\n                    >\r\n                        back\r\n                    </Button>\r\n                }\r\n                content={false}\r\n            ></MainCard>\r\n\r\n            <MainCard\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={6}>\r\n                            <OutlinedInput\r\n                                id=\"input-search-list-style1\"\r\n                                placeholder=\"Search\"\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"start\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                                size=\"small\"\r\n                                onChange={(e) => {\r\n                                    setSearch(e.target.value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6} textAlign=\"end\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddUpdateOpen(true);\r\n                                    setBrandCategoryData({\r\n                                        brand: location.state.brandData,\r\n                                        brandId: location.state.brandData.id,\r\n                                        categoryId: 0,\r\n                                        profitPercentage: ''\r\n                                    });\r\n                                    dispatch(getAllCategoriesDropdown({ brandId: location.state.brandData.id }));\r\n                                }}\r\n                            >\r\n                                Add Brand Catgeory\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                <BrandCategoryTable\r\n                    brandCategoriesList={brandCategoriesList}\r\n                    search={search}\r\n                    page={page}\r\n                    limit={limit}\r\n                    addUpdateOpen={addUpdateOpen}\r\n                    setAddUpdateOpen={setAddUpdateOpen}\r\n                    brandCategoryData={brandCategoryData}\r\n                    setBrandCategoryData={setBrandCategoryData}\r\n                />\r\n\r\n                <>\r\n                    <Grid item xs={12} sx={{ p: 3 }}>\r\n                        <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                            <Grid item>\r\n                                <Pagination\r\n                                    color=\"primary\"\r\n                                    showFirstButton\r\n                                    showLastButton\r\n                                    page={page}\r\n                                    count={brandCategoriesList.pages}\r\n                                    onChange={(event, newPage) => {\r\n                                        setPage(newPage);\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    size=\"large\"\r\n                                    sx={{ color: theme.palette.grey[900] }}\r\n                                    color=\"secondary\"\r\n                                    endIcon={<ExpandMoreRoundedIcon />}\r\n                                    onClick={handleClick}\r\n                                >\r\n                                    {limit} Rows\r\n                                </Button>\r\n                                <Menu\r\n                                    id=\"menu-user-list-style1\"\r\n                                    anchorEl={anchorEl}\r\n                                    keepMounted\r\n                                    open={Boolean(anchorEl)}\r\n                                    onClose={handleCloseMenu}\r\n                                    variant=\"selectedMenu\"\r\n                                    anchorOrigin={{\r\n                                        vertical: 'top',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                    transformOrigin={{\r\n                                        vertical: 'bottom',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                >\r\n                                    <MenuItem\r\n                                        value={10}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        10 Rows\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value={25}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        25 Rows\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value={50}\r\n                                        onClick={(e) => {\r\n                                            setLimit(e.target.value);\r\n                                            setPage(1);\r\n                                            handleCloseMenu();\r\n                                        }}\r\n                                    >\r\n                                        {' '}\r\n                                        50 Rows{' '}\r\n                                    </MenuItem>\r\n                                </Menu>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BrandCategory;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n"],"sourceRoot":""}