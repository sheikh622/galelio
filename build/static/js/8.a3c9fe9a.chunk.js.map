{"version":3,"sources":["views/pages/superAdmin/brands/component/deleteBrandDialog.js","views/pages/superAdmin/brands/component/brandTable.js","views/pages/superAdmin/brands/component/addUpdateBrand.js","shared/Card/HeadingCard.js","views/pages/superAdmin/brands/index.js"],"names":["Transition","forwardRef","props","ref","Slide","direction","DeleteBrandDialog","deleteOpen","setDeleteOpen","brandId","page","limit","search","theme","useTheme","dispatch","useDispatch","handleClose","Dialog","open","TransitionComponent","keepMounted","onClose","DialogTitle","id","DialogContent","DialogContentText","Typography","variant","component","DialogActions","sx","pr","Button","color","palette","error","dark","borderColor","onClick","size","deleteBrand","BrandTable","setBrandName","setOpen","setAddUpdateOpen","setBrandId","useNavigate","useState","brandsList","useSelector","state","brand","console","log","brands","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","undefined","map","row","index","padding","name","Stack","justifyContent","alignItems","Tooltip","placement","title","IconButton","fontSize","orange","main","background","light","AddUpdateBrandDialog","addUpdateOpen","brandName","validationSchema","Yup","required","max","matches","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","addBrand","updateBrand","resetForm","className","Divider","autoComplete","handleSubmit","TextField","marginTop","label","value","onChange","handleChange","touched","Boolean","errors","helperText","fullWidth","HeadingCard","role","setValue","options","Card","marginBottom","spacing","gridSpacing","primary","default","Box","Grid","container","item","fontWeight","select","e","target","width","height","option","MenuItem","Brands","pages","setSearch","setPage","setLimit","anchorEl","setAnchorEl","handleCloseMenu","useEffect","getAllBrands","MainCard","xs","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","textAlign","content","count","p","Pagination","showFirstButton","showLastButton","totalPages","event","newPage","grey","endIcon","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","md","style"],"mappings":"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","file":"static/js/8.a3c9fe9a.chunk.js","sourcesContent":["import { forwardRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTheme } from '@mui/material/styles';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\nimport { deleteBrand } from '../../../../../redux/brand/actions';\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\nexport default function DeleteBrandDialog({ deleteOpen, setDeleteOpen, brandId, page, limit, search }) {\n    const theme = useTheme();\n    const dispatch = useDispatch();\n    const handleClose = () => {\n        setDeleteOpen(false);\n        \n    };\n    return (\n        <>\n            <Dialog\n                open={deleteOpen}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-slide-title1\"\n                aria-describedby=\"alert-dialog-slide-description1\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title1\">Delete Brand</DialogTitle>\n                \n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\n                        <Typography variant=\"body2\" component=\"span\">\n                            Are you sure you want to delete this Brand?\n                        </Typography>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions sx={{ pr: 2.5 }}>\n                    <Button\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\n                        onClick={handleClose}\n                        color=\"secondary\"\n                    >\n                        No\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        size=\"large\"\n                        onClick={() => {\n                            dispatch(\n                                deleteBrand({\n                                    id: brandId,\n                                    handleClose: handleClose,\n                                    page: page,\n                                    limit: limit,\n                                    search: search\n                                   \n                                })\n                            );\n                        }}\n                    >\n                        Yes\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n","import { useState } from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { IconButton, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip } from '@mui/material';\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\nimport DeleteBrandDialog from './deleteBrandDialog';\nimport VisibilityOutlinedIcon from '@mui/icons-material/VisibilityOutlined';\nimport moment from 'moment';\nimport { useNavigate } from 'react-router-dom';\nconst BrandTable = ({ page, limit, search, setOpen, setBrandName, setAddUpdateOpen, brandId, setBrandId }) => {\n    const theme = useTheme();\n    const navigate = useNavigate();\n    const [deleteOpen, setDeleteOpen] = useState(false);\n    const brandsList = useSelector((state) => state.brand.brandsList);\n    console.log(brandsList.brands, \"========================table==================>\");\n    return (\n        <TableContainer>\n            <DeleteBrandDialog\n                deleteOpen={deleteOpen}\n                setDeleteOpen={setDeleteOpen}\n                brandId={brandId}\n                page={page}\n                limit={limit}\n                search={search}\n            />\n            <Table>\n                <TableHead>\n                    <TableRow>\n\n                        <TableCell align=\"center\">Brand Name</TableCell>\n                        <TableCell align=\"center\">Actions</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n\n                    {brandsList.brands != undefined &&\n                        brandsList.brands.map((row, index) => (\n                            <TableRow>\n\n                                <TableCell align=\"center\" sx={{ padding: '0px' }}>\n                                    {row.name}\n                                </TableCell>\n\n                                <TableCell align=\"center\" sx={{ padding: '0px' }}>\n                                    <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\n                                        <Tooltip placement=\"top\" title=\"Edit\">\n                                            <IconButton\n                                                color=\"primary\"\n                                                aria-label=\"Edit\"\n                                                size=\"large\"\n                                                onClick={() => {\n                                                    setBrandName(row.name);\n                                                    setBrandId(row.id);\n                                                    setAddUpdateOpen(true);\n                                                }}\n                                            >\n                                                <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\n                                            </IconButton>\n                                        </Tooltip>\n                                        <Tooltip placement=\"top\" title=\"Delete\">\n                                            <IconButton\n                                                color=\"primary\"\n                                                sx={{\n                                                    color: theme.palette.orange.dark,\n                                                    borderColor: theme.palette.orange.main,\n                                                    '&:hover ': { background: theme.palette.orange.light }\n                                                }}\n                                                size=\"large\"\n                                                onClick={() => {\n                                                    setDeleteOpen(true);\n                                                    setBrandId(row.id);\n                                                }}\n                                            >\n                                                <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\n                                            </IconButton>\n                                        </Tooltip>\n                                    </Stack>\n                                </TableCell>\n\n\n                            </TableRow>\n                        ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nexport default BrandTable;\n","import { forwardRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { FormattedMessage } from 'react-intl';\nimport { useTheme } from '@mui/material/styles';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, Divider } from '@mui/material';\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\nimport { addBrand, updateBrand } from '../../../../../redux/brand/actions';\n\nexport default function AddUpdateBrandDialog({ addUpdateOpen, setAddUpdateOpen, page, limit, search, brandName, setBrandName, brandId }) {\n    const theme = useTheme();\n    const dispatch = useDispatch();\n    const validationSchema = Yup.object({\n        name: Yup.string()\n            .required('Brand Name is required!')\n            .max(42, 'Brand Name can not exceed 42 characters')\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Brand name')\n    });\n    const formik = useFormik({\n        enableReinitialize: true,\n        initialValues: {\n            name: brandName\n        },\n        validationSchema,\n        onSubmit: (values) => {\n            if (brandName == '') {\n                dispatch(\n                    addBrand({\n                        name: values.name,\n                        search: search,\n                        page: page,\n                        limit: limit,\n                        handleClose: handleClose,\n                        setBrandName: setBrandName\n                    })\n                );\n            } else {\n                dispatch(\n                    updateBrand({\n                        brandId: brandId,\n                        name: values.name,\n                        page: page,\n                        limit: limit,\n                        search: search,\n\n                        handleClose: handleClose,\n                        setBrandName: setBrandName\n                    })\n                );\n            }\n        }\n    });\n    const handleClose = () => {\n        setAddUpdateOpen(false);\n        setBrandName('');\n        formik.resetForm();\n    };\n\n    return (\n        <>\n            <Dialog\n                className=\"responsiveDialog\"\n                open={addUpdateOpen}\n                TransitionComponent={Transition}\n                keepMounted\n                // onClose={handleClose}\n                aria-labelledby=\"alert-dialog-slide-title1\"\n                aria-describedby=\"alert-dialog-slide-description1\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title1\">{brandName == '' ? 'Add Brand' : 'Update Brand'}</DialogTitle>\n                <Divider />\n                <DialogContent>\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\n                        <TextField\n                            sx={{ marginTop: '25px' }}\n                            id=\"name\"\n                            name=\"name\"\n                            label=\"Enter Brand Name\"\n                            value={formik.values.name}\n                            onChange={formik.handleChange}\n                            error={formik.touched.name && Boolean(formik.errors.name)}\n                            helperText={formik.touched.name && formik.errors.name}\n                            fullWidth\n                            autoComplete=\"given-name\"\n                        />\n                    </form>\n                </DialogContent>\n                <Divider />\n                <DialogActions sx={{ pr: 2.5 }}>\n                    <Button\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\n                        onClick={() => {\n                            handleClose();\n                        }}\n                        color=\"secondary\"\n                    >\n                        <FormattedMessage id=\"cancel\" />\n                    </Button>\n\n                    <Button\n                        variant=\"contained\"\n                        size=\"small\"\n                        onClick={() => {\n                            formik.handleSubmit();\n                        }}\n                    >\n                        {brandName == '' ?\n                            'Add'\n                            : 'Update'}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n","import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\nimport { forwardRef } from 'react';\nimport { gridSpacing } from 'store/constant';\n\n// constant\n\n// ==============================|| CUSTOM MAIN CARD ||============================== //\n\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options }) => {\n    const theme = useTheme();\n\n    return (\n        <Card\n            sx={{\n                marginBottom: theme.spacing(gridSpacing),\n\n                borderColor: theme.palette.primary[200] + 75,\n                background: theme.palette.background.default\n            }}\n        >\n            <Box sx={{ padding: '13px 20px 22px 20px' }}>\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\n                    <Grid item>\n                        <Typography variant=\"h3\" sx={{ fontWeight: 500, color: '#000' }}>\n                            {title}\n                        </Typography>\n                    </Grid>\n\n                    {value !== undefined && (\n                        <Grid item>\n                            {/* {options && (role == 'teacher' || role == 'super_admin') && ( */}\n                            <TextField\n                                id=\"standard-select-currency\"\n                                select\n                                value={value}\n                                onChange={(e) => setValue(e.target.value)}\n                                sx={{ width: '110px', height: '40px' }}\n                            >\n                                {options.map((option) => (\n                                    <MenuItem key={option.value} value={option.value}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                            {/* )} */}\n                        </Grid>\n                    )}\n                </Grid>\n            </Box>\n        </Card>\n    );\n});\n\nexport default HeadingCard;\n","import { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { gridSpacing } from 'store/constant';\nimport { useTheme } from '@mui/material/styles';\nimport BrandTable from './component/brandTable';\nimport { Button, Typography, Grid, MenuItem, Menu, Pagination, OutlinedInput, InputAdornment, Divider  } from '@mui/material';\nimport { IconSearch } from '@tabler/icons';\nimport { getAllBrands } from '../../../../redux/brand/actions';\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\nimport AddUpdateBrandDialog from './component/addUpdateBrand';\nimport MainCard from 'ui-component/cards/MainCard';\nimport HeadingCard from 'shared/Card/HeadingCard';\nconst Brands = () => {\n    const theme = useTheme();\n    const dispatch = useDispatch();\n    const [open, setOpen] = useState(false);\n    const brandsList = useSelector((state) => state.brand.brandsList);\n    console.log(brandsList.pages,\"===============brandsList.pages===========================>\");\n   \n    \n    const [search, setSearch] = useState('');\n    const [page, setPage] = useState(1);\n    const [limit, setLimit] = useState(10);\n    const [brandId, setBrandId] = useState();\n    const [brandName, setBrandName] = useState('');\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\n    const [anchorEl, setAnchorEl] = useState(null);\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleCloseMenu = () => {\n        setAnchorEl(null);\n    };\n\n    useEffect(() => {\n        console.log(\"run\")\n        dispatch(\n            getAllBrands({\n                search: search,\n                page: page,\n                limit: limit\n            })\n        );\n    }, [search, page, limit]);\n    return (\n        <>\n            <AddUpdateBrandDialog\n                brandId={brandId}\n                setBrandId={setBrandId}\n                brandName={brandName}\n                setBrandName={setBrandName}\n                page={page}\n                limit={limit}\n                search={search}\n                addUpdateOpen={addUpdateOpen}\n                setAddUpdateOpen={setAddUpdateOpen}\n            />\n            <HeadingCard title=\"Brand Management\" />\n            <MainCard\n                title={\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={6}>\n                            <OutlinedInput\n                                id=\"input-search-list-style1\"\n                                placeholder=\"Search\"\n                                startAdornment={\n                                    <InputAdornment position=\"start\">\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\n                                    </InputAdornment>\n                                }\n                                size=\"small\"\n                                onChange={(e) => {\n                                    setSearch(e.target.value);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={6} textAlign=\"end\">\n                            <Button\n                                variant=\"contained\"\n                                size=\"large\"\n                                onClick={() => {\n                                    setAddUpdateOpen(true);\n\n                                    setBrandName('');\n                                }}\n                            >\n                                Add Brand\n                            </Button>\n                        </Grid>\n                    </Grid>\n                }\n                content={false}\n            >\n            {brandsList.brands != undefined && brandsList.count > 0 ? (\n                    <>\n                        <BrandTable\n                            brandsList={brandsList}\n                            page={page}\n                            limit={limit}\n                            search={search}\n                            setOpen={setOpen}\n                            brandId={brandId}\n                            setBrandId={setBrandId}\n                            setBrandName={setBrandName}\n                            setAddUpdateOpen={setAddUpdateOpen}\n                        />\n                        <Grid item xs={12} sx={{ p: 3 }}>\n                            <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\n                                <Grid item>\n                                    <Pagination\n                                        color=\"primary\"\n                                        showFirstButton\n                                        showLastButton\n                                        page={page}\n                                        count={brandsList.totalPages}\n                                        onChange={(event, newPage) => {\n                                            setPage(newPage);\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        size=\"large\"\n                                        sx={{ color: theme.palette.grey[900] }}\n                                        color=\"secondary\"\n                                        endIcon={<ExpandMoreRoundedIcon />}\n                                        onClick={handleClick}\n                                    >\n                                        {limit} Rows\n                                    </Button>\n                                    <Menu\n                                        id=\"menu-user-list-style1\"\n                                        anchorEl={anchorEl}\n                                        keepMounted\n                                        open={Boolean(anchorEl)}\n                                        onClose={handleCloseMenu}\n                                        variant=\"selectedMenu\"\n                                        anchorOrigin={{\n                                            vertical: 'top',\n                                            horizontal: 'right'\n                                        }}\n                                        transformOrigin={{\n                                            vertical: 'bottom',\n                                            horizontal: 'right'\n                                        }}\n                                    >\n                                        <MenuItem\n                                            value={10}\n                                            onClick={(e) => {\n                                                setLimit(e.target.value);\n                                                setPage(1);\n                                                handleCloseMenu();\n                                            }}\n                                        >\n                                            {' '}\n                                            10 Rows\n                                        </MenuItem>\n                                        <MenuItem\n                                            value={25}\n                                            onClick={(e) => {\n                                                setLimit(e.target.value);\n                                                setPage(1);\n                                                handleCloseMenu();\n                                            }}\n                                        >\n                                            {' '}\n                                            25 Rows\n                                        </MenuItem>\n                                        <MenuItem\n                                            value={50}\n                                            onClick={(e) => {\n                                                setLimit(e.target.value);\n                                                setPage(1);\n                                                handleCloseMenu();\n                                            }}\n                                        >\n                                            {' '}\n                                            50 Rows{' '}\n                                        </MenuItem>\n                                    </Menu>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </>\n                    ) : (\n                        <>\n                            <Grid item md={12}>\n                                <Divider />\n                            </Grid>\n                            <Grid item>\n                                <Typography style={{ padding: '20px', fontWeight: '800' }}> No Data Available</Typography>\n                            </Grid>\n                        </>\n                    )}\n            </MainCard>\n        </>\n    );\n};\n\nexport default Brands;\n"],"sourceRoot":""}