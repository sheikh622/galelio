{"version":3,"sources":["views/pages/brandAdmin/nftManagement/component/quantitySelector.js","views/pages/brandAdmin/nftManagement/component/addNft.js","views/pages/brandAdmin/nftManagement/component/mainCard.js","views/pages/brandAdmin/nftManagement/component/editNftDialog.js","views/pages/brandAdmin/nftManagement/component/requestForMintDialog.js","views/pages/brandAdmin/nftManagement/component/deleteNftDialog.js","views/pages/brandAdmin/nftManagement/component/details.js","views/pages/brandAdmin/nftManagement/component/nftcard.js","views/pages/brandAdmin/nftManagement/index.js","constants.js","assets/images/icons/image-upload.svg"],"names":["QuantitySelector","formik","fileArray","index","style","display","marginRight","Typography","variant","marginTop","TextField","type","className","id","value","quantity","onChange","e","target","setFieldValue","Transition","forwardRef","props","ref","Slide","direction","typeArray","label","AddNft","open","setOpen","data","search","page","limit","nftType","dispatch","useDispatch","user","useSelector","state","auth","useState","mintType","setMintType","uploadedImages","setUploadedImages","fieldDataArray","setFieldDataArray","setType","loader","setLoader","fileDataArray","setFileDataArray","wallettoggle","setWallettoggle","checked","setChecked","validationSchema","Yup","nftName","required","max","nftDescription","directBuyerAddress","min","nftPrice","typeError","useFormik","enableReinitialize","initialValues","images","onSubmit","values","map","fieldValue","fileNameArray","fieldName","isValid","console","log","length","toast","error","array","size","image","name","split","pop","parseInt","handleError","require","validate","addNft","categoryId","CategoryId","metaDataArray","price","description","currencyType","asset","walletAddress","contractAddress","handleClose","BrandId","hasFile","resetForm","handleDrop","useCallback","acceptedFiles","newUploadedImages","acceptedFile","useDropzone","accept","onDrop","getRootProps","getInputProps","isDragActive","isDragReject","isDragAccept","Dialog","maxWidth","TransitionComponent","keepMounted","DialogTitle","Divider","Grid","container","DialogActions","AnimateButton","Button","sx","my","ml","padding","md","lg","onClick","DialogContent","autoComplete","handleSubmit","mt","xs","fullWidth","handleChange","touched","Boolean","errors","helperText","select","event","option","MenuItem","float","Switch","placeholder","isEditable","proofRequired","spacing","item","handleFieldNameChange","handleFieldValueChange","IconButton","color","edge","splice","handleRemoveField","icon","closeFill","width","height","Tooltip","title","placement","arrow","handleproof","handleFileFieldNameChange","handleFileFieldValueChange","currentTarget","files","handleFileRemoveField","background","borderRadius","paddingBottom","paddingTop","clsx","Box","textAlign","component","alt","src","UploadImage","Link","underline","List","disablePadding","list","AnimatePresence","file","ListItem","motion","div","ListItemIcon","fileFill","ListItemText","primary","primaryTypographyProps","newFiles","handleRemoveFile","margin","justifyContent","m","CircularProgress","disableShrink","disableElevation","headerSX","mr","MainCard","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","others","theme","useTheme","Card","borderColor","palette","mode","default","CardHeader","action","CardContent","currencyTypeArray","EditNftDialog","nftInfo","setCurrencyType","isFile","File","perviousUploadedItems","filter","newUploadedItems","editNft","brandId","useEffect","multiline","rows","structuredClone","inputProps","pr","marginBottom","href","slice","RequestForMintDialog","nftData","checkWallet","window","ethereum","request","method","response","_metamask","isUnlocked","connectWallet","SNACKBAR_OPEN","message","alertSeverity","utils","getAddress","handleMintRequest","erc20Address","BLOCKCHAIN","ERC20","provider","ethers","providers","Web3Provider","signer","getSigner","token","Contract","Erc20","approve","Category","BrandCategories","wait","requestNftForMinting","reason","DialogContentText","dark","DeleteNFTDialog","deleteNft","DetailsDialog","status","Brand","fullScreen","onClose","pt","pl","ListItemButton","textTransform","CardMedia","minheight","maxHeight","overflow","cursor","NftCard","openRequestMint","setOpenRequestMint","editNftOpen","setEditNftOpen","deleteNftOpen","setDeleteNftOpen","DetailsNftOpen","setDetailsNftOpen","setImage","setNftInfo","NFTTokens","position","transform","transition","xl","CardActionArea","objectFit","p","textDecoration","Stack","alignItems","NFTMetaData","NFTMetaFiles","NftManagement","navigate","useNavigate","location","useLocation","setSearch","setPage","setLimit","addNftOpen","setAddNftOpen","setAnchorEl","getAllNft","nftList","nftReducer","fontWeight","marginLeft","nfts","undefined","gridSpacing","nft","sm","Pagination","showFirstButton","showLastButton","count","pages","newPage","WALLET_ADDRESS"],"mappings":"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","file":"static/js/39.f7f2b9a0.chunk.js","sourcesContent":["import { Typography, TextField } from '@mui/material';\r\nconst QuantitySelector = ({ formik, fileArray, index }) => {\r\n    const handleChange = (value) => {\r\n        fileArray[index].quantity = value;\r\n        formik.setFieldValue('images', fileArray);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: 'flex', marginRight: '10px', }}>\r\n                <Typography variant='h3' style={{ marginTop: '5px',\r\n                 marginRight: '5px' }}>Quantity  </Typography>\r\n\r\n                <TextField\r\n              \r\n               variant='filled'\r\n                    type=\"number\"\r\n                    className=\"quantityField\"\r\n                    id=\"outlined-select-currency-native\"\r\n                    value={fileArray[index].quantity}\r\n                    onChange={(e) => {\r\n                        handleChange(e.target.value);\r\n                    }}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuantitySelector;\r\n","import { forwardRef, useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Tooltip from '@mui/material/Tooltip';\r\n\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    TextField,\r\n    Divider,\r\n    Box,\r\n    Link,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    IconButton,\r\n    MenuItem,\r\n    CircularProgress\r\n} from '@mui/material';\r\n\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Switch } from '@mui/material';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Icon } from '@iconify/react';\r\nimport { addNft } from 'redux/nftManagement/actions';\r\nimport { fData } from 'utils/formatNumber';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport QuantitySelector from './quantitySelector';\r\nimport fileFill from '@iconify-icons/eva/file-fill';\r\nimport closeFill from '@iconify-icons/eva/close-fill';\r\nimport UploadImage from 'assets/images/icons/image-upload.svg';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport clsx from 'clsx';\r\nimport { DataArraySharp } from '@mui/icons-material';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nconst typeArray = [\r\n    {\r\n        value: 'USDT',\r\n        label: 'USDT'\r\n    }\r\n];\r\n\r\nexport default function AddNft({ open, setOpen, data, search, page, limit, nftType }) {\r\n    const dispatch = useDispatch();\r\n    const user = useSelector((state) => state.auth.user);\r\n    const [mintType, setMintType] = useState('directMint');\r\n\r\n    const [uploadedImages, setUploadedImages] = useState([]);\r\n\r\n    const [fieldDataArray, setFieldDataArray] = useState([]);\r\n    const [type, setType] = useState('USDT');\r\n    const [loader, setLoader] = useState(false);\r\n    const [fileDataArray, setFileDataArray] = useState([]);\r\n    const [isDirectTransfer, setIsDirectTransfer] = useState(false);\r\n    const [wallettoggle, setWallettoggle] = useState(false);\r\n    const handleType = (event) => {\r\n        setType(event.target.value);\r\n    };\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    const handleError = (fieldDataArray, fileDataArray, values) => {\r\n        console.log('im in handle error');\r\n        let isValid = true;\r\n        console.log('fieldDataArray', fieldDataArray);\r\n        console.log('fileDataArray', fileDataArray);\r\n        console.log('values', values);\r\n\r\n        if (fieldDataArray.length == 0) {\r\n            isValid = false;\r\n            toast.error('Metadata is required');\r\n        }\r\n\r\n        // else  (fieldDataArray.length > 0) {\r\n\r\n        fieldDataArray.map((array) => {\r\n            if (array.fieldName == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata name cannot be empty`);\r\n            } else if (array.fieldValue == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata value cannot be empty`);\r\n            }\r\n        });\r\n        // }\r\n        if (fileDataArray.length == 0) {\r\n            isValid = false;\r\n            toast.error('Proof of Authenticity is required');\r\n        }\r\n\r\n        //    else (fileDataArray.length > 0) {\r\n        console.log('im here 2');\r\n        fileDataArray.map((array) => {\r\n            if (array.fieldName == '') {\r\n                isValid = false;\r\n                toast.error(`File name field is mandatory`);\r\n            } else if (array.fieldValue == null) {\r\n                isValid = false;\r\n                toast.error(`Attach proof of authenticity`);\r\n            } else if (array.fieldValue?.size / 1000000 > 5) {\r\n                isValid = false;\r\n                toast.error(`Please attach a less than 5 mb proof of authenticity`);\r\n            }\r\n        });\r\n        // }\r\n\r\n        if (values.images.length == 0) {\r\n            toast.error('Please upload a NFT Image');\r\n            isValid = false;\r\n        } else if (values.images[0].image.size / 1000000 > 5) {\r\n            toast.error('Please upload a image less than 5 mb');\r\n            isValid = false;\r\n        } else if (values.images[0].image.name.split('.').pop() !== 'jpg' && values.images[0].image.name.split('.').pop() !== 'png') {\r\n            toast.error('Upload the files with these extensions: jpg, png, gif');\r\n            isValid = false;\r\n        } else if (parseInt(values.images[0].quantity) <= 0) {\r\n            toast.error('NFT Quantity should be atleast one');\r\n            isValid = false;\r\n        }\r\n        console.log(values.images, 'values.images.length');\r\n\r\n        return isValid;\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        nftName: Yup.string().required('NFT Name is required!').max(60, 'NFT Name can not exceed 60 characters'),\r\n        // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT name'),\r\n        nftDescription: Yup.string()\r\n            .required('NFT Description is required!')\r\n            .max(1000, 'Invalid NFT description can not exceed 1000 characters'),\r\n        directBuyerAddress: Yup.string()\r\n            // .required('NFT Description is required!')\r\n            // .max(1000, 'Invalid NFT description can not exceed 1000 characters'),\r\n            .min(26, 'Minimum length 26 character ')\r\n            .max(42, 'Must be exactly 42 characters'),\r\n        // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT description'),\r\n        nftPrice: Yup.number()\r\n            .min(0.000000001, 'Price should be greater than zero')\r\n            .required('NFT Price is required')\r\n            .typeError('Invalid Price')\r\n        // image: Yup.mixed()\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            nftName: '',\r\n            nftDescription: '',\r\n            directBuyerAddress: '',\r\n            nftPrice: 0,\r\n            images: []\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            // console.log('values', values);\r\n\r\n            let fileArray = fileDataArray.map((data) => {\r\n                return data.fieldValue;\r\n            });\r\n            let fileNameArray = fileDataArray.map((data) => {\r\n                return data.fieldName;\r\n            });\r\n\r\n            let isValid = handleError(fieldDataArray, fileDataArray, values);\r\n            // console.log('isValid', isValid);\r\n\r\n            if (isValid == true) {\r\n                var WAValidator = require('wallet-address-validator');\r\n\r\n                var valid = WAValidator.validate(values.directBuyerAddress, 'ETH');\r\n                if (valid || values.directBuyerAddress == '') {\r\n                    //  toast.success(``);\r\n\r\n                    console.log('This is a valid wallet address');\r\n\r\n                    setLoader(true);\r\n                    dispatch(\r\n                        addNft({\r\n                            categoryId: data.CategoryId,\r\n                            mintType: mintType,\r\n                            metaDataArray: fieldDataArray,\r\n                            fileNameArray: fileNameArray,\r\n                            fileArray: fileArray,\r\n                            name: values.nftName,\r\n                            price: values.nftPrice,\r\n                            description: values.nftDescription,\r\n                            directBuyerAddress: values.directBuyerAddress ? values.directBuyerAddress : '',\r\n                            currencyType: type,\r\n                            quantity: values.images[0].quantity,\r\n                            asset: values.images[0].image,\r\n                            type: nftType,\r\n                            page: page,\r\n                            limit: limit,\r\n                            search: search,\r\n                            categoryId: data.CategoryId,\r\n                            requesterAddress: user.walletAddress,\r\n                            contractAddress: data.contractAddress,\r\n                            handleClose: handleClose,\r\n                            brandId: user.BrandId,\r\n                            isDirectTransfer: values.directBuyerAddress == '' ? false : true\r\n                        })\r\n                    );\r\n                } else toast.error(`Wallet Address invalid !`);\r\n                // console.log('Address INVALID');\r\n            }\r\n        }\r\n    });\r\n\r\n    const hasFile = formik.values.images.length > 0;\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n        setMintType('directMint');\r\n        setType('USDT');\r\n        setUploadedImages([]);\r\n        setFieldDataArray([]);\r\n        setLoader(false);\r\n        setFileDataArray([]);\r\n    };\r\n    const handleDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            let newUploadedImages = [...uploadedImages];\r\n            acceptedFiles.map(async (acceptedFile) => {\r\n                let data = { image: acceptedFile, quantity: 1 };\r\n                newUploadedImages = [...newUploadedImages, data];\r\n            });\r\n            formik.setFieldValue('images', newUploadedImages);\r\n            setUploadedImages(newUploadedImages);\r\n        },\r\n\r\n        [formik.setFieldValue, uploadedImages]\r\n    );\r\n    const handleRemoveFile = (file, index) => {\r\n        const newFiles = [...formik.values.images];\r\n        newFiles.splice(index, 1);\r\n        setUploadedImages(newFiles);\r\n        formik.setFieldValue('images', newFiles);\r\n    };\r\n\r\n    const { getRootProps, getInputProps, isDragActive, isDragReject, isDragAccept } = useDropzone({\r\n        accept: '.jpeg,.png,.jpg,.gif',\r\n        onDrop: handleDrop\r\n    });\r\n\r\n    const handleFieldNameChange = (value, index) => {\r\n        let array = [...fieldDataArray];\r\n        array[index].fieldName = value;\r\n        setFieldDataArray(array);\r\n    };\r\n    const handleFieldValueChange = (value, index) => {\r\n        let array = [...fieldDataArray];\r\n        array[index].fieldValue = value;\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleChange = (event, index) => {\r\n        // setChecked(event.target.checked);\r\n        let array = [...fieldDataArray];\r\n        array[index].isEditable = event.target?.checked;\r\n        setFieldDataArray(array);\r\n        // let array = [...fieldDataArray];\r\n        // [...checked] = value;\r\n        // setFieldDataArray(array);\r\n        // console.log(event.target.checked,'value==============?')\r\n    };\r\n    const handleproof = (event, index) => {\r\n        // setChecked(event.target.checked);\r\n        let array = [...fieldDataArray];\r\n        array[index].proofRequired = event.target?.checked;\r\n        setFieldDataArray(array);\r\n        // let array = [...fieldDataArray];\r\n        // [...checked] = value;\r\n        // setFieldDataArray(array);\r\n        // console.log(event.target.checked,'value==============?')\r\n    };\r\n    // console.log(\"arrayyyyyyyyyyyyyy\",fieldDataArray);\r\n\r\n    const walletadded = (event, index) => {\r\n        setWallettoggle(true);\r\n        setChecked(event.target.checked);\r\n\r\n        // let array = [...fieldDataArray];\r\n        // [...checked] = value;\r\n        // setFieldDataArray(array);\r\n        // console.log(event.target.checked,'value==============?')\r\n    };\r\n    const handleRemoveField = (index) => {\r\n        let array = [...fieldDataArray];\r\n        array.splice(index, 1);\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleFileFieldNameChange = (value, index) => {\r\n        let array = [...fileDataArray];\r\n        array[index].fieldName = value;\r\n        setFileDataArray(array);\r\n    };\r\n    const handleFileFieldValueChange = (value, index) => {\r\n        let array = [...fileDataArray];\r\n        array[index].fieldValue = value;\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    const handleFileRemoveField = (index) => {\r\n        let array = [...fileDataArray];\r\n        array.splice(index, 1);\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog Nftdialog \"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\" className=\"adminname\">\r\n                    Add NFT\r\n                </DialogTitle>\r\n                <Divider />\r\n                <Grid container>\r\n                    <DialogActions>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                variant={mintType == 'directMint' ? 'contained' : 'outlined'}\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setMintType('directMint');\r\n                                }}\r\n                            >\r\n                                Direct minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant={mintType == 'lazyMint' ? 'contained' : 'outlined'}\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={() => {\r\n                                    setMintType('lazyMint');\r\n                                }}\r\n                            >\r\n                                Lazy minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </DialogActions>\r\n                </Grid>\r\n\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid container mt={1}>\r\n                            <Grid xs={4} md={5} lg={5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftName\"\r\n                                    name=\"nftName\"\r\n                                    label=\"NFT Name\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftName && Boolean(formik.errors.nftName)}\r\n                                    helperText={formik.touched.nftName && formik.errors.nftName}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} md={2} lg={2}></Grid>\r\n                            <Grid xs={4} md={5} lg={5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftPrice\"\r\n                                    name=\"nftPrice\"\r\n                                    label=\"NFT Price\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftPrice}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftPrice && Boolean(formik.errors.nftPrice)}\r\n                                    helperText={formik.touched.nftPrice && formik.errors.nftPrice}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid xs={12} md={12} lg={12} mt={2}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    variant=\"filled\"\r\n                                    id=\"outlined-select-budget\"\r\n                                    select\r\n                                    fullWidth\r\n                                    value={type}\r\n                                    onChange={handleType}\r\n                                >\r\n                                    {typeArray.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Grid>\r\n                            <Grid xs={12} mt={1}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftDescription\"\r\n                                    name=\"nftDescription\"\r\n                                    label=\"NFT Description\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftDescription}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftDescription && Boolean(formik.errors.nftDescription)}\r\n                                    helperText={formik.touched.nftDescription && formik.errors.nftDescription}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} mt={2} ml={-1}>\r\n                                <Button className=\"walletbutton\" variant=\"text\" sx={{ float: 'left' }}>\r\n                                    Click to add wallet address.\r\n                                </Button>\r\n                                <Switch\r\n                                    checked={checked}\r\n                                    onChange={(e) => walletadded(e)}\r\n\r\n                                    // inputProps={{ 'aria-label': 'controlled' }}\r\n                                />\r\n                            </Grid>\r\n                            {mintType == 'directMint' && wallettoggle == true && checked == true && (\r\n                                <Grid xs={12} mt={1}>\r\n                                    <TextField\r\n                                        className=\"textfieldStyle\"\r\n                                        id=\"directBuyerAddress\"\r\n                                        name=\"directBuyerAddress\"\r\n                                        label=\"Wallet Address\"\r\n                                        placeholder=\"wallet Address\"\r\n                                        fullWidth\r\n                                        value={formik.values.directBuyerAddress}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.directBuyerAddress && Boolean(formik.errors.directBuyerAddress)}\r\n                                        helperText={formik.touched.directBuyerAddress && formik.errors.directBuyerAddress}\r\n                                        autoComplete=\"\"\r\n                                        variant=\"standard\"\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                            <Grid xs={12} mt={2}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'left', padding: { md: ' 6px 38px', lg: '6px 38px' } }}\r\n                                    onClick={() => {\r\n                                        setFieldDataArray([\r\n                                            ...fieldDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: '',\r\n                                                isEditable: false,\r\n                                                proofRequired: false\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add Metadata\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {fieldDataArray.length != 0 && (\r\n                            <>\r\n                                <Grid container spacing={4} sx={{ mt: 1 }}>\r\n                                    {fieldDataArray.map((data, index) => (\r\n                                        <>\r\n                                            <Grid item xs={5} md={4}>\r\n                                                <TextField\r\n                                                    id=\"field_name\"\r\n                                                    className=\"textfieldStyle\"\r\n                                                    name=\"field_name\"\r\n                                                    label=\"Metadata Name\"\r\n                                                    value={data.fieldName}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldNameChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={5} md={5}>\r\n                                                <TextField\r\n                                                    className=\"textfieldStyle\"\r\n                                                    id=\"field_value\"\r\n                                                    name=\"field_value\"\r\n                                                    label=\"Metadata Value\"\r\n                                                    value={data.fieldValue}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldValueChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2} md={3}>\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        handleRemoveField(index);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                                <Tooltip\r\n                                                className=\"fontsize\"\r\n                                                title=\"Require editable metadata\"\r\n                                                placement=\"top\"\r\n                                                arrow\r\n                                            >\r\n                                                <Switch\r\n                                                    value={data.isEditable}\r\n                                                    checked={data.isEditable}\r\n                                                    onChange={(e) => handleChange(e, index)}\r\n                                                    // inputProps={{ 'aria-label': 'controlled' }}\r\n                                                />\r\n                                                </Tooltip>\r\n                                                <Tooltip\r\n                                                    className=\"fontsize\"\r\n                                                    title=\"Require a proof\"\r\n                                                    placement=\"top\"\r\n                                                    arrow\r\n                                                >\r\n                                                    <Switch\r\n                                                        value={data.proofRequired}\r\n                                                        checked={data.proofRequired}\r\n                                                        onChange={(e) => handleproof(e, index)}\r\n                                                        // inputProps={{ 'aria-label': 'controlled' }}\r\n                                                    />\r\n                                                </Tooltip>\r\n                                            </Grid>\r\n                                        </>\r\n                                    ))}\r\n                                </Grid>\r\n                            </>\r\n                        )}\r\n                        <Grid container>\r\n                            <Grid xs={12} mt={2}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'left' }}\r\n                                    onClick={() => {\r\n                                        setFileDataArray([\r\n                                            ...fileDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: null\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add Authenticity Files\r\n                                </Button>\r\n                            </Grid>\r\n                            {fileDataArray.length != 0 && (\r\n                                <>\r\n                                    <Grid container spacing={2} mt={2}>\r\n                                        {fileDataArray.map((data, index) => (\r\n                                            <>\r\n                                                <Grid item xs={5}>\r\n                                                    <TextField\r\n                                                        id=\"field_name\"\r\n                                                        name=\"field_name\"\r\n                                                        label=\"File Name\"\r\n                                                        value={data.fieldName}\r\n                                                        onChange={(e) => {\r\n                                                            handleFileFieldNameChange(e.target.value, index);\r\n                                                        }}\r\n                                                        variant=\"standard\"\r\n                                                        fullWidth\r\n                                                    />\r\n                                                </Grid>\r\n\r\n                                                <Grid item mt={3} xs={5}>\r\n                                                    <input\r\n                                                        type=\"file\"\r\n                                                        id=\"avatar\"\r\n                                                        name=\"avatar\"\r\n                                                        accept=\"image/*,.pdf\"\r\n                                                        onChange={(event) => {\r\n                                                            handleFileFieldValueChange(event.currentTarget.files[0], index);\r\n                                                        }}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} mt={2}>\r\n                                                    <IconButton\r\n                                                        color=\"error\"\r\n                                                        edge=\"end\"\r\n                                                        size=\"small\"\r\n                                                        onClick={() => {\r\n                                                            handleFileRemoveField(index);\r\n                                                        }}\r\n                                                    >\r\n                                                        <Icon icon={closeFill} width={28} height={28} />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                            </>\r\n                                        ))}\r\n                                    </Grid>\r\n                                </>\r\n                            )}\r\n                        </Grid>\r\n\r\n                        {uploadedImages.length !== 1 && (\r\n                            <Grid\r\n                                sx={{ background: '#c5cbe9', borderRadius: '5px', paddingBottom: '2rem', paddingTop: '2rem' }}\r\n                                item\r\n                                lg={12}\r\n                                mt={10}\r\n                            >\r\n                                <div className={clsx('dropZoneContainer', 'xyz')}>\r\n                                    <div\r\n                                        className={clsx('dropZone', {\r\n                                            isDragActive: isDragActive,\r\n                                            isDragAccept: isDragAccept,\r\n                                            isDragReject: isDragReject\r\n                                        })}\r\n                                        {...getRootProps()}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n\r\n                                        <Grid container direction=\"column\">\r\n                                            <Box\r\n                                                textAlign=\"center\"\r\n                                                component=\"img\"\r\n                                                alt=\"Select File\"\r\n                                                src={UploadImage}\r\n                                                sx={{ height: 60 }}\r\n                                            />\r\n\r\n                                            <Box mt={4} textAlign=\"center\" sx={{ ml: { md: 0 } }}>\r\n                                                <Typography variant=\"subtitle\" sx={{ color: 'grey', textAlign: 'center' }}>\r\n                                                    Drop your image or&nbsp;\r\n                                                    <Link underline=\"always\">browse</Link>.&nbsp;\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </div>\r\n                            </Grid>\r\n                        )}\r\n\r\n                        <Grid item lg={12} mt={3}>\r\n                            <List disablePadding className={clsx({ list: hasFile })} sx={{ mt: 3 }}>\r\n                                <AnimatePresence>\r\n                                    {formik.values.images &&\r\n                                        formik.values.images.map((file, index) => (\r\n                                            <ListItem key={file.image.name} component={motion.div} className=\"listItem\">\r\n                                                <ListItemIcon>\r\n                                                    <Icon icon={fileFill} width={32} height={32} />\r\n                                                </ListItemIcon>\r\n                                                <ListItemText\r\n                                                    primary={file.image.name ? file.image.name : ''}\r\n                                                    primaryTypographyProps={{\r\n                                                        variant: 'h3'\r\n                                                    }}\r\n                                                />\r\n                                                {mintType == 'directMint' && (\r\n                                                    <QuantitySelector formik={formik} fileArray={formik.values.images} index={index} />\r\n                                                )}\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => handleRemoveFile(file.image, index)}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                            </ListItem>\r\n                                        ))}\r\n                                </AnimatePresence>\r\n                            </List>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n                <Divider />\r\n                <Grid container>\r\n                    <DialogActions>\r\n                        {loader ? (\r\n                            <DialogActions sx={{ display: 'block', margin: '10px 5px 0px 5px' }}>\r\n                                <Grid container justifyContent=\"center\" sx={{ width: '50%', m: '15px auto ' }}>\r\n                                    <Grid item>\r\n                                        <CircularProgress disableShrink size={'4rem'} />\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                                <Button\r\n                                    className=\"buttons\"\r\n                                    variant=\"Text\"\r\n                                    sx={{ width: '100%', margin: '0px 0px 10px 0px', color: '#2196f3' }}\r\n                                    size=\"large\"\r\n                                >\r\n                                    NFT is being Created...\r\n                                </Button>\r\n                            </DialogActions>\r\n                        ) : (\r\n                            <>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                        onClick={() => {\r\n                                            formik.handleSubmit();\r\n                                        }}\r\n                                        className=\"buttons\"\r\n                                        size=\"large\"\r\n                                        disableElevation\r\n                                    >\r\n                                        Add\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        className=\"buttons\"\r\n                                        size=\"large\"\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                        onClick={handleClose}\r\n                                        color=\"error\"\r\n                                        disableElevation\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </>\r\n                        )}\r\n                    </DialogActions>\r\n                </Grid>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.mode === 'dark' ? theme.palette.background.default\r\n                     : \r\n                    theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow\r\n                            ? shadow ||\r\n                              (theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' :\r\n                               '0 2px 14px 0 rgb(32 40 45 / 8%)')\r\n                            : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} \r\n                    action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","import { forwardRef, useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    TextField,\r\n    Divider,\r\n    Box,\r\n    Link,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    IconButton,\r\n    MenuItem\r\n} from '@mui/material';\r\nimport { Switch } from '@mui/material';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Icon } from '@iconify/react';\r\nimport { editNft } from 'redux/nftManagement/actions';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport fileFill from '@iconify-icons/eva/file-fill';\r\nimport closeFill from '@iconify-icons/eva/close-fill';\r\nimport QuantitySelector from './quantitySelector';\r\nimport UploadImage from 'assets/images/icons/image-upload.svg';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport clsx from 'clsx';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nconst currencyTypeArray = [\r\n    {\r\n        value: 'USDT',\r\n        label: 'USDT'\r\n    }\r\n];\r\n\r\nexport default function EditNftDialog({ nftInfo, categoryId, type, search, page, limit, loader, setLoader, open, setOpen }) {\r\n    const dispatch = useDispatch();\r\n    const [mintType, setMintType] = useState('directMint');\r\n    const [currencyType, setCurrencyType] = useState('USDT');\r\n    const [fieldDataArray, setFieldDataArray] = useState([]);\r\n    const [fileDataArray, setFileDataArray] = useState([]);\r\n    const [uploadedImages, setUploadedImages] = useState([]);\r\n    const user = useSelector((state) => state.auth.user);\r\n    const handleCurrencyType = (event) => {\r\n        setCurrencyType(event.target.value);\r\n    };\r\n    const [checked, setChecked] = useState(true);\r\n    const handleChange = (event) => {\r\n        setChecked(event.target.checked);\r\n      };\r\n\r\n    const handleError = (fieldDataArray, fileDataArray, values) => {\r\n        console.log('im in handle error');\r\n        let isValid = true;\r\n        console.log('fieldDataArray', fieldDataArray);\r\n        console.log('fileDataArray', fileDataArray);\r\n        console.log('values', values);\r\n\r\n        if (fieldDataArray.length == 0) {\r\n            isValid = false;\r\n            toast.error('Metadata is required');\r\n        } \r\n\r\n        // else  (fieldDataArray.length > 0) {\r\n            \r\n            fieldDataArray.map((array) => {\r\n                if (array.fieldName == '') {\r\n                    isValid = false;\r\n                    toast.error(`Metadata name cannot be empty`);\r\n                }\r\n                else if (array.fieldValue == '') {\r\n                    isValid = false;\r\n                    toast.error(`Metadata value cannot be empty`);\r\n                }\r\n            });\r\n        // }\r\n         if (fileDataArray.length == 0) {\r\n            isValid = false;\r\n            toast.error('Proof of Authenticity is required');\r\n        }\r\n\r\n    //    else (fileDataArray.length > 0) {\r\n        console.log('im here 2');\r\n            fileDataArray.map((array) => {\r\n                if (array.fieldName == '') {\r\n                    isValid = false;\r\n                    toast.error(`File name field is mandatory`);\r\n                }\r\n                else if (array.fieldValue == null) {\r\n                    isValid = false;\r\n                    toast.error(`Attach proof of authenticity`);\r\n                }\r\n                else if (array.fieldValue?.size/1000000>5) {\r\n                    isValid = false;\r\n                    toast.error(`Please attach a less than 5 mb proof of authenticity`);\r\n                }\r\n            });\r\n        // }\r\n\r\n         if (values.images.length == 0) {\r\n            toast.error('Please upload a NFT Image');\r\n            isValid = false;\r\n        } else if (values.images[0].image.size / 1000000 > 5) {\r\n            toast.error('Please upload a image less than 5 mb');\r\n            isValid = false;\r\n        } else if (values.images[0].image.name.split('.').pop() !== 'jpg' && values.images[0].image.name.split('.').pop() !== 'png') {\r\n            toast.error('Upload the files with these extensions: jpg, png, gif');\r\n            isValid = false;\r\n        }else if (parseInt(values.images[0].quantity) <=0) {\r\n            toast.error('NFT Quantity should be atleast one');\r\n            isValid = false;\r\n        }\r\n\r\n\r\n        return isValid;\r\n    };\r\n\r\n\r\n    const validationSchema = Yup.object({\r\n        nftName: Yup.string()\r\n            .required('NFT Name is required!')\r\n            .max(60, 'NFT Name can not exceed 60 characters'),\r\n            // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT name'),\r\n        nftDescription: Yup.string()\r\n            .required('NFT Description is required!')\r\n            .max(1000, 'Invalid NFT description can not exceed 1000 characters'),\r\n        // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT description'),\r\n        nftPrice: Yup.number()\r\n            .min(0.000001, 'Price should not less than zero')\r\n            .required('NFT Price is required')\r\n            .typeError('Invalid Price'),\r\n        images: Yup.mixed()\r\n        // .when(['isUpdate'], {\r\n        //     is: true,\r\n        //     then: Yup.mixed(),\r\n        //     otherwise: Yup.mixed().required('Image is required')\r\n        // })\r\n\r\n        // .test('image size',\r\n        //  'this image is too large', (value) => !value || (value && value.size <= 1_000_000))\r\n\r\n    });\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: nftInfo,\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            let file = values.images[0].image;\r\n            let isFile = file instanceof File;\r\n\r\n            let perviousUploadedItems = fileDataArray.filter((data) => {\r\n                if (typeof data.fieldValue === 'string') return data;\r\n            });\r\n\r\n            let newUploadedItems = fileDataArray.filter((data) => {\r\n                if (typeof data.fieldValue !== 'string') return data;\r\n            });\r\n\r\n            let fileArray = newUploadedItems.map((data) => {\r\n                return data.fieldValue;\r\n            });\r\n            let fileNameArray = newUploadedItems.map((data) => {\r\n                return data.fieldName;\r\n            });\r\n\r\n            let isValid = handleError(fieldDataArray, fileDataArray, values, isFile);\r\n\r\n            if (isValid) {\r\n                dispatch(\r\n                    editNft({\r\n                        id: nftInfo.id,\r\n                        name: values.nftName,\r\n                        price: values.nftPrice,\r\n                        description: values.nftDescription,\r\n                        quantity: values.images[0].quantity,\r\n                        asset: isFile ? values.images[0].image : null,\r\n                        isFile: isFile,\r\n                        currencyType: currencyType,\r\n                        mintType: mintType,\r\n                        metaDataArray: fieldDataArray,\r\n                        fileNameArray: fileNameArray,\r\n                        fileArray: fileArray,\r\n                        perviousUploadedItems: perviousUploadedItems,\r\n                        type: type,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        categoryId: categoryId,\r\n                        brandId: nftInfo.brandId,\r\n                        handleClose: handleClose\r\n                        // brandId: user.BrandId\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n\r\n    const hasFile = formik.values.images.length > 0;\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n    const handleDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            let newUploadedImages = [...uploadedImages];\r\n            acceptedFiles.map(async (acceptedFile) => {\r\n                let data = { image: acceptedFile, quantity: 1 };\r\n                newUploadedImages = [...newUploadedImages, data];\r\n            });\r\n            formik.setFieldValue('images', newUploadedImages);\r\n            setUploadedImages(newUploadedImages);\r\n        },\r\n\r\n        [formik.setFieldValue, uploadedImages]\r\n    );\r\n    const handleRemoveFile = (index) => {\r\n        const newFiles = [...formik.values.images];\r\n        newFiles.splice(index, 1);\r\n        setUploadedImages(newFiles);\r\n        formik.setFieldValue('images', newFiles);\r\n    };\r\n\r\n    const { getRootProps, getInputProps, isDragActive, isDragReject, isDragAccept } = useDropzone({\r\n        accept: '.jpeg,.png,.jpg,.gif',\r\n        onDrop: handleDrop\r\n    });\r\n\r\n    const handleFieldNameChange = (value, index) => {\r\n        let array = structuredClone(fieldDataArray);\r\n        array[index].fieldName = value;\r\n        setFieldDataArray(array);\r\n    };\r\n    const handleFieldValueChange = (value, index) => {\r\n        let array = structuredClone(fieldDataArray);\r\n        array[index].fieldValue = value;\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleRemoveField = (index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array.splice(index, 1);\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleFileFieldNameChange = (value, index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array[index].fieldName = value;\r\n        setFileDataArray(array);\r\n    };\r\n    const handleFileFieldValueChange = (value, index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array[index].fieldValue = value;\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    const handleFileRemoveField = (index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array.splice(index, 1);\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setFieldDataArray(nftInfo.fieldDataArray);\r\n        setFileDataArray(nftInfo.fileDataArray);\r\n        setMintType(nftInfo.mintType);\r\n        setCurrencyType(nftInfo.currencyType);\r\n        setUploadedImages(nftInfo.images);\r\n    }, [nftInfo]);\r\n\r\n    useEffect(() => {}, [fileDataArray]);\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog Nftdialog\"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1 \" className=\"adminname\">\r\n                    Edit NFT\r\n                </DialogTitle>\r\n                <Divider />\r\n                <Grid container>\r\n                    {/* <DialogActions>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                variant={mintType == 'directMint' ? 'contained' : 'outlined'}\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setMintType('directMint');\r\n                                }}\r\n                            >\r\n                                Direct minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant={mintType == 'lazyMint' ? 'contained' : 'outlined'}\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={() => {\r\n                                    setMintType('lazyMint');\r\n                                }}\r\n                            >\r\n                                Lazy minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </DialogActions> */}\r\n                </Grid>\r\n\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid container mt={1}>\r\n                            <Grid xs={4} md={5} lg={5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftName\"\r\n                                    name=\"nftName\"\r\n                                    label=\"NFT Name\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftName && Boolean(formik.errors.nftName)}\r\n                                    helperText={formik.touched.nftName && formik.errors.nftName}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} md={2} lg={2}></Grid>\r\n                            <Grid xs={4} md={5} lg={5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftPrice\"\r\n                                    name=\"nftPrice\"\r\n                                    label=\"NFT Price\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftPrice}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftPrice && Boolean(formik.errors.nftPrice)}\r\n                                    helperText={formik.touched.nftPrice && formik.errors.nftPrice}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} md={12} lg={12} mt={2}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"outlined-select-budget\"\r\n                                    select\r\n                                    fullWidth\r\n                                    variant=\"filled\"\r\n                                    value={currencyType}\r\n                                    onChange={handleCurrencyType}\r\n                                >\r\n                                    {currencyTypeArray.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Grid>\r\n                            <Grid xs={12} md={12} lg={12} mt={2}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    multiline\r\n                                    rows={2}\r\n                                    id=\"nftDescription\"\r\n                                    name=\"nftDescription\"\r\n                                    label=\"NFT Description\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftDescription}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftDescription && Boolean(formik.errors.nftDescription)}\r\n                                    helperText={formik.touched.nftDescription && formik.errors.nftDescription}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} mt={2}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'left', padding: { md: ' 6px 38px', lg: '6px 38px' } }}\r\n                                    onClick={() => {\r\n                                        setFieldDataArray([\r\n                                            ...fieldDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: ''\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add more fields\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {fieldDataArray.length != 0 && (\r\n                            <>\r\n                                <Grid container spacing={4} mt={1}>\r\n                                    {fieldDataArray.map((data, index) => (\r\n                                        <>\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    className=\"textfieldStyle\"\r\n                                                    id=\"field_name\"\r\n                                                    name=\"field_name\"\r\n                                                    label=\"Metadata Name\"\r\n                                                    value={data.fieldName}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldNameChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    className=\"textfieldStyle\"\r\n                                                    id=\"field_value\"\r\n                                                    name=\"field_value\"\r\n                                                    label=\"Metadata Value\"\r\n                                                    value={data.fieldValue}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldValueChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2}>\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        handleRemoveField(index);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                                <Switch\r\n                                                    checked={checked}\r\n                                                    onChange={handleChange}\r\n                                                    inputProps={{ 'aria-label': 'controlled' }}\r\n                                                />\r\n                                            </Grid>\r\n                                        </>\r\n                                    ))}\r\n                                </Grid>\r\n                            </>\r\n                        )}\r\n                        <Grid container>\r\n                            <Grid xs={12} mt={2} pr={3}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'left' }}\r\n                                    onClick={() => {\r\n                                        setFileDataArray([\r\n                                            ...fileDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: null\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add Authenticity Files\r\n                                </Button>\r\n                            </Grid>\r\n                            {fileDataArray?.length != 0 && (\r\n                                <>\r\n                                    <Grid container spacing={2} mt={1}>\r\n                                        {fileDataArray?.map((data, index) => (\r\n                                            <>\r\n                                                <Grid item xs={5}>\r\n                                                      <TextField\r\n                                                        id=\"field_name\"\r\n                                                        name=\"field_name\"\r\n                                                        label=\"File Name\"\r\n                                                        value={data.fieldName}\r\n                                                        onChange={(e) => {\r\n                                                            handleFileFieldNameChange(e.target.value, index);\r\n                                                        }}\r\n                                                        variant=\"standard\"\r\n                                                        fullWidth\r\n                                                    />\r\n                                                </Grid>\r\n\r\n                                         \r\n                                                \r\n\r\n                                                <Grid item xs={5} mt={3}>\r\n                                                <span style={{marginBottom:\"10%\"}}>\r\n                                                    <a target=\"_blank\" href={data?.fieldValue} style={{color:\"white\"}}>\r\n                                                        {data.fieldValue.length > 1\r\n                                                        ?\r\n                                                        <>\r\n                                                        {data?.fieldValue?.slice(61)}\r\n                                                        \r\n                                                        </>\r\n                                                        :\r\n                                                        <>\r\n                                                        \r\n                                                        </>\r\n                                                        \r\n                                                        }\r\n                                                    </a>\r\n                                                    <input\r\n                                                    style={{display:\"inlineBlock\"}}\r\n                                                    type=\"file\"\r\n                                                    id=\"avatar\"\r\n                                                    name=\"avatar\"\r\n                                                    accept=\"image/*,.pdf\"\r\n                                                    onChange={(event) => {\r\n                                                        handleFileFieldValueChange(event.currentTarget.files[0], index);\r\n                                                    }}\r\n                                                />\r\n                                                </span>\r\n\r\n                                                \r\n                                                </Grid>\r\n                                                {/* <div style={{marginTop:\"3%\", marginLeft:\"2%\"}}><b>Previous file: </b><a target=\"_blank\" href={data.fieldValue}>{data.fieldValue}</a></div> */}\r\n                                                <Grid item xs={2} mt={2}>\r\n                                                    <IconButton\r\n                                                        color=\"error\"\r\n                                                        edge=\"end\"\r\n                                                        size=\"small\"\r\n                                                        onClick={() => {\r\n                                                            handleFileRemoveField(index);\r\n                                                        }}\r\n                                                    >\r\n                                                        <Icon icon={closeFill} width={28} height={28} />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                            </>\r\n                                        ))}\r\n                                    </Grid>\r\n                                </>\r\n                            )}\r\n                        </Grid>\r\n\r\n                        {uploadedImages.length !== 1 && (\r\n                            <Grid\r\n                                sx={{ background: '#c5cbe9', borderRadius: '5px', paddingBottom: '2rem', paddingTop: '2rem' }}\r\n                                item\r\n                                lg={12}\r\n                                mt={10}\r\n                            >\r\n                                <div className={clsx('dropZoneContainer', 'xyz')}>\r\n                                    <div\r\n                                        className={clsx('dropZone', {\r\n                                            isDragActive: isDragActive,\r\n                                            isDragAccept: isDragAccept,\r\n                                            isDragReject: isDragReject\r\n                                        })}\r\n                                        {...getRootProps()}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n\r\n                                        <Grid container direction=\"column\">\r\n                                            <Box\r\n                                                textAlign=\"center\"\r\n                                                component=\"img\"\r\n                                                alt=\"Select File\"\r\n                                                src={UploadImage}\r\n                                                sx={{ height: 60 }}\r\n                                            />\r\n\r\n                                            <Box mt={4} textAlign=\"center\" sx={{ ml: { md: 0 } }}>\r\n                                                <Typography variant=\"subtitle\" sx={{ color: 'grey', textAlign: 'center' }}>\r\n                                                    Drop your image or&nbsp;\r\n                                                    <Link underline=\"always\">browse</Link>.&nbsp;\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </div>\r\n                            </Grid>\r\n                        )}\r\n\r\n                        <List disablePadding className={clsx({ list: hasFile })} sx={{ mt: 3 }}>\r\n                            <AnimatePresence>\r\n                                {formik.values.images &&\r\n                                    formik.values.images.map((file, index) => (\r\n                                        <ListItem key={file.image.name} component={motion.div} className=\"listItem\">\r\n                                            <ListItemIcon>\r\n                                                <Icon icon={fileFill} width={32} height={32} />\r\n                                            </ListItemIcon>\r\n\r\n                                            <ListItemText\r\n                                                className=\"encap\"\r\n                                                primary={file.image.name ? file.image.name : ''}\r\n                                                // secondary={fData(file.image.size) ? fData(file.image.size) : ''}\r\n                                                // primaryTypographyProps={{\r\n                                                //     variant: 'body2'\r\n                                                // }}\r\n                                            />\r\n                                            {mintType == 'directMint' && (\r\n                                                <QuantitySelector formik={formik} fileArray={formik.values.images} index={index} />\r\n                                            )}\r\n\r\n                                            <IconButton\r\n                                                color=\"error\"\r\n                                                edge=\"end\"\r\n                                                size=\"small\"\r\n                                                onClick={() => handleRemoveFile(file.image, index)}\r\n                                            >\r\n                                                <Icon icon={closeFill} width={28} height={28} />\r\n                                            </IconButton>\r\n                                        </ListItem>\r\n                                    ))}\r\n                            </AnimatePresence>\r\n                        </List>\r\n                    </form>\r\n                </DialogContent>\r\n                <Divider />\r\n                <Grid container>\r\n                    <DialogActions>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={() => {\r\n                                    \r\n                                    formik.handleSubmit();\r\n                                }}\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                disableElevation\r\n                            >\r\n                                Edit\r\n                            </Button>\r\n                        </AnimateButton>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={handleClose}\r\n                                color=\"error\"\r\n                                disableElevation\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </DialogActions>\r\n                </Grid>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    DialogContentText,\r\n    Typography,\r\n    CircularProgress\r\n} from '@mui/material';\r\nimport { requestNftForMinting } from 'redux/nftManagement/actions';\r\nimport Erc20 from '../../../../../contractAbi/Erc20.json';\r\nimport { ethers, utils } from 'ethers';\r\nimport BLOCKCHAIN from '../../../../../constants';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { SNACKBAR_OPEN } from 'store/actions';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function RequestForMintDialog({ open, setOpen, page, limit, search, type, nftData, categoryId }) {\r\n    const theme = useTheme();\r\n    const [loader, setLoader] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setLoader(false);\r\n    };\r\n    const user = useSelector((state) => state.auth.user);\r\n    // console.log('nftData', nftData.Category.BrandCategories[0].contractAddress);\r\n\r\n    const checkWallet = async () => {\r\n        const response = await window?.ethereum?.request({ method: 'eth_requestAccounts' });\r\n        let connectWallet = await ethereum._metamask.isUnlocked();\r\n\r\n        if ((window.ethereum && connectWallet) == false) {\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'No crypto wallet found. Please connect one',\r\n                variant: 'alert',\r\n                alertSeverity: 'info'\r\n            });\r\n            console.log('No crypto wallet found. Please install it.');\r\n            // toast.error('No crypto wallet found. Please install it.');\r\n            setOpen(false);\r\n            setLoader(false);\r\n        }\r\n        \r\n        // else if (window?.ethereum?.networkVersion !== '5') {\r\n        //     dispatch({\r\n        //         type: SNACKBAR_OPEN,\r\n        //         open: true,\r\n        //         message: 'Please change your Chain ID to Goerli',\r\n        //         variant: 'alert',\r\n        //         alertSeverity: 'info'\r\n        //     });\r\n        //     console.log('Please change your Chain ID to Goerli');\r\n        //     setOpen(false);\r\n        //     setLoader(false);\r\n        // }\r\n        \r\n        else if (utils?.getAddress(response[0]) !== user.walletAddress) {\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'Please connect your registered Wallet Address',\r\n                variant: 'alert',\r\n                alertSeverity: 'info'\r\n            });\r\n            console.log('Please connect your registered Wallet Address');\r\n            setOpen(false);\r\n            setLoader(false);\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const handleMintRequest = async () => {\r\n        if (await checkWallet()) {\r\n            try {\r\n                setLoader(true);\r\n                let erc20Address = BLOCKCHAIN.ERC20;\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                const signer = provider.getSigner();\r\n\r\n                const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n\r\n                let data = await (await token.approve(nftData.Category.BrandCategories[0].contractAddress,\"100000000000000000000000000000000000000\")).wait();\r\n\r\n                await dispatch(\r\n                    requestNftForMinting({\r\n                        id: nftData.id,\r\n                        categoryId: categoryId,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        type: type,\r\n                        brandId: user.BrandId,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n                setLoader(false);\r\n                // toast.success(\"Please wait for confirmation Notification !\");\r\n            } catch (error) {\r\n                console.log('error', error);\r\n                toast.error(error.reason);\r\n                setOpen(false);\r\n                setLoader(false);\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Request Admin for mint</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to request Admin to mint this NFT?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    {loader ? (\r\n                        <CircularProgress />\r\n                    ) : (\r\n                        <>\r\n                            <Button\r\n                                sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                                onClick={handleClose}\r\n                                color=\"secondary\"\r\n                            >\r\n                                No\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    handleMintRequest();\r\n                                }}\r\n                            >\r\n                                Yes\r\n                            </Button>\r\n                        </>\r\n                    )}\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteNft } from 'redux/nftManagement/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteNFTDialog({ nftInfo, categoryId, type, search, page, limit, loader, setLoader, open, setOpen }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const user = useSelector((state) => state.auth.user);\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\" className=\"statusHeading\">Delete Brand Admin</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\" className=\"statustypo\">\r\n                            Are you sure you want to delete this Admin?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                        className='buttonSize' size='large'\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        className='buttonSize' size='large'\r\n                     \r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteNft({\r\n                                    id: nftInfo.id,\r\n                                    categoryId: categoryId,\r\n                                    type: type,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    brandId: user.BrandId,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef, useState } from 'react';\r\n\r\n// material-ui\r\nimport { AppBar,DialogActions, Button, Dialog, CardMedia,Divider,Grid, IconButton, ListItemText, ListItemButton, List, Slide, Toolbar, Typography } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// assets\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\n// slide animation\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\n// ===============================|| UI DIALOG - FULL SCREEN ||=============================== //\r\n\r\nexport default function DetailsDialog({ open, setOpen, nftData }) {\r\n    const theme = useTheme();\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const status = [\r\n        {\r\n            name: 'Name:',\r\n            value: nftData?.name\r\n        },\r\n        {\r\n            name: 'Status:',\r\n            value: nftData?.status\r\n        },\r\n        {\r\n            name: 'Description:',\r\n            value: nftData?.description\r\n        },\r\n        {\r\n            name: 'Price:',\r\n            value: nftData?.price\r\n        },\r\n        {\r\n            name: 'Mint Type:',\r\n            value: nftData?.mintType\r\n        },\r\n        {\r\n            name: 'Brand:',\r\n            value: nftData?.Brand.name\r\n        },\r\n        {\r\n            name: 'Token URL:',\r\n            value: 'Null'\r\n        }\r\n    ];\r\n    return (\r\n        <div>\r\n           \r\n            <Dialog fullScreen open={open} \r\n            onClose={handleClose} \r\n            TransitionComponent={Transition}>\r\n             {/*    <IconButton float=\"left\" color=\"inherit\" onClick={handleClose} aria-label=\"close\" size=\"large\">\r\n                    <CloseIcon />\r\n                </IconButton> */}\r\n                <DialogActions sx={{ pr: 2.5, pt: 2.5 }}>\r\n                <Button  className='buttonSize' size='large' sx={{ color: theme.palette.error.dark }} onClick={handleClose} color=\"secondary\">\r\n                <CloseIcon />\r\n                </Button>\r\n            </DialogActions>\r\n            <Grid container   sx={{ pr: 2.5,  pl: 2.5, pt: 2.5 }}>\r\n            <Grid item xs={12} md={8} lg={8}  sx={{ pr: 2.5 }}>\r\n                <List>\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail'>Name</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail' sx={{textTransform:'capitalize'}}>{nftData?.name}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail'>Status</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail'>{nftData?.status}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail'>Description</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail' sx={{textTransform:'capitalize'}}>{nftData?.description}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail' >Price</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail'  sx={{textTransform:'capitalize'}}>{nftData?.price}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail' >Mint Type</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail'  sx={{textTransform:'capitalize'}}>{ nftData?.mintType}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail' >Brand Name</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail'  sx={{textTransform:'capitalize'}}>{nftData?.Brand.name}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                </List>\r\n                </Grid>\r\n                <Grid item  xs={12} md={4} lg={4}>\r\n                <CardMedia\r\n                            \r\n                component=\"img\"\r\n                image={nftData?.asset}\r\n                \r\n                sx={{ minheight: 'auto', maxHeight:'570px',\r\n                 overflow: 'hidden', cursor: 'Pointer' }}\r\n            />\r\n               </Grid></Grid>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Button, CardContent, CardMedia, Grid, Stack, Typography, CardActionArea, Card , Tooltip} from '@mui/material';\r\nimport MainCard from './mainCard';\r\nimport EditNftDialog from './editNftDialog';\r\nimport RequestForMintDialog from './requestForMintDialog';\r\nimport DeleteNFTDialog from './deleteNftDialog';\r\nimport DetailsDialog from './details';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { useEffect } from 'react';\r\nconst NftCard = ({ nftData, categoryId, search, page, limit, type }) => {\r\n    const dispatch = useDispatch();\r\n    const [loader, setLoader] = useState(false);\r\n    const theme = useTheme();\r\n\r\n    const [openRequestMint, setOpenRequestMint] = useState(false);\r\n    const [editNftOpen, setEditNftOpen] = useState(false);\r\n    const [deleteNftOpen, setDeleteNftOpen] = useState(false);\r\n    const [DetailsNftOpen, setDetailsNftOpen] = useState(false);\r\n    const [image, setImage] = useState([]);\r\n    const [nftInfo, setNftInfo] = useState({\r\n        id: null,\r\n        brandId: null,\r\n        nftName: '',\r\n        nftDescription: '',\r\n        nftPrice: 0,\r\n        mintType: 'directMint',\r\n        currencyType: 'USDT',\r\n        fieldDataArray: [],\r\n        fileDataArray: [],\r\n        images: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        const length = nftData.asset.split('/').length;\r\n        setImage([\r\n            {\r\n                image: { name: nftData.asset.split('/')[length - 1] },\r\n                quantity: nftData.NFTTokens.length\r\n            }\r\n        ]);\r\n    }, [nftData]);\r\n    return (\r\n        <>\r\n            <DeleteNFTDialog\r\n                nftInfo={nftInfo}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={deleteNftOpen}\r\n                setOpen={setDeleteNftOpen}\r\n            />\r\n            <EditNftDialog\r\n                nftInfo={nftInfo}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={editNftOpen}\r\n                setOpen={setEditNftOpen}\r\n            />\r\n            <RequestForMintDialog\r\n                nftData={nftData}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={openRequestMint}\r\n                setOpen={setOpenRequestMint}\r\n            />\r\n            <DetailsDialog open={DetailsNftOpen} \r\n            setOpen={setDetailsNftOpen} \r\n            nftData={nftData} />\r\n            <MainCard\r\n                content={false}\r\n                className='tableShadow'\r\n                boxShadow\r\n                sx={{\r\n                    position: 'relative',\r\n                    '&:hover': {\r\n                        transform: 'scale3d(1.02, 1.02, 1)',\r\n                        transition: 'all .4s ease-in-out'\r\n                    }\r\n                }}\r\n            >\r\n            <Card        \r\n              sx={{ maxWidth: 345,\r\n                color: theme.palette.mode === 'dark' ? 'white' : '#404040',\r\n                background: theme.palette.mode === 'dark' ? '#181C1F' : 'white',\r\n                // maxWidth: nfts && nfts?.length > 3? 0 : 365,\r\n                width:'100%',\r\n                maxHeight:'410px',\r\n                // boxShadow: '1px 2px 6px #d3d3d3',\r\n                borderRadius: '3px',\r\n                marginBottom: '10px',\r\n                maxWidth:{xl:'100%'},\r\n            }} >\r\n            <CardActionArea>\r\n            <CardMedia component=\"img\" height=\"220\" sx={{objectFit:'scale-down'}} image={nftData.asset} />\r\n           \r\n            \r\n              \r\n                <CardContent sx={{ p: 2 }}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={9}>\r\n                        <Tooltip placement=\"left\" title= {nftData.name}>\r\n                            <Typography variant=\"subtitle1\" className='fontstyling encap-nft'\r\n                             sx={{ textDecoration: 'none', textTransform: 'capitalize' }}>\r\n                                {nftData.name}\r\n                            </Typography>\r\n                            </Tooltip>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} mt={-1.5}>\r\n                        <Tooltip placement=\"left\" title= {nftData?.description}>\r\n                        <Typography\r\n                            className='fontstyling encap-nft'\r\n                                variant=\"body1\"\r\n                                sx={{\r\n                                    overflow: 'hidden',\r\n                                    height: 16,\r\n                                    textTransform: 'capitalize'\r\n                                }}\r\n                            >\r\n                                {nftData.description}\r\n                            </Typography>\r\n                            </Tooltip>   \r\n                        </Grid>\r\n\r\n                        <Grid item xs={6}>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\" className='fontstyling'>\r\n                                    {nftData.price} {nftData.currencyType}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\" className='fontstyling'>{nftData.NFTTokens.length} Items</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                          \r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                                sx={{\r\n                                    marginRight: '10px',\r\n                                    float: 'right',\r\n                                    ':hover': {\r\n                                        boxShadow: 'none'\r\n                                    },\r\n                                    color: '#2F5AFF',\r\n                                    background: '#B9DDFF',\r\n                                    \r\n                                }}\r\n                                \r\n                                onClick={() => {\r\n                                    setDetailsNftOpen(true);\r\n                                }}\r\n                            >\r\n                                Details\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\">\r\n                            {\r\n                                (nftData.status !== 'MINTED' &&  nftData.status !== 'REQUESTED') && (\r\n                                    <>\r\n                                        <Button\r\n                                        className='fontstyling'\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            sx={{ marginRight: '5px' }}\r\n                                            onClick={() => {\r\n                                                setEditNftOpen(true);\r\n                                                setNftInfo({\r\n                                                    id: nftData.id,\r\n                                                    brandId: nftData.Brand.id,\r\n                                                    nftName: nftData.name,\r\n                                                    nftDescription: nftData.description,\r\n                                                    nftPrice: nftData.price,\r\n                                                    mintType: nftData.mintType,\r\n                                                    currencyType: nftData.currencyType,\r\n                                                    fieldDataArray: nftData.NFTMetaData,\r\n                                                    fileDataArray: nftData.NFTMetaFiles,\r\n                                                    images: image\r\n                                                });\r\n                                            }}\r\n                                        >\r\n                                            Edit\r\n                                        </Button>\r\n                                        <Button\r\n                                        className='fontstyling'\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            sx={{ marginRight: '5px' }}\r\n                                            onClick={() => {\r\n                                                setDeleteNftOpen(true);\r\n                                                setNftInfo({\r\n                                                    id: nftData.id,\r\n                                                    nftName: nftData.name,\r\n                                                    nftDescription: nftData.description,\r\n                                                    nftPrice: nftData.price,\r\n                                                    mintType: nftData.mintType,\r\n                                                    currencyType: nftData.currencyType,\r\n                                                    fieldDataArray: nftData.NFTMetaData,\r\n                                                    images: image\r\n                                                });\r\n                                            }}\r\n                                        >\r\n                                            Delete\r\n                                        </Button>\r\n                                    </>\r\n                                )\r\n                             }   \r\n                          \r\n\r\n                                {(nftData.status == 'DRAFT' || nftData.status == 'REJECTED') && (\r\n                                    <Button\r\n                                    className='fontstyling'\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        sx={{ marginRight: '5px' }}\r\n                                        onClick={() => {\r\n                                            setOpenRequestMint(true);\r\n                                        }}\r\n                                    >\r\n                                        Request\r\n                                    </Button>\r\n                                )}\r\n                            </Stack>\r\n                            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\"></Stack>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n                </CardActionArea></Card>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NftCard;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Grid, Typography, Pagination, Menu, MenuItem, TextField, Box } from '@mui/material';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AddNft from './component/addNft';\r\nimport { getAllNft } from '../../../../redux/nftManagement/actions';\r\nimport NftCard from './component/nftcard';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nconst typeArray = [\r\n    {\r\n        value: 'all',\r\n        label: \"All NFT'S\"\r\n    },\r\n    {\r\n        value: 'directMint',\r\n        label: 'Minted NFTS'\r\n    },\r\n    {\r\n        value: 'lazyMint',\r\n        label: \"Lazy Minted NFT'S\"\r\n    },\r\n    {\r\n        value: 'waiting',\r\n        label: 'Waiting For approval'\r\n    },\r\n    {\r\n        value: 'draft',\r\n        label: 'Draft NFTS'\r\n    },\r\n    {\r\n        value: 'rejected',\r\n        label: 'Rejected NFTS'\r\n    }\r\n];\r\n\r\nconst NftManagement = () => {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n\r\n    const user = useSelector((state) => state.auth.user);\r\n    const [type, setType] = useState('all');\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(12);\r\n    const [addNftOpen, setAddNftOpen] = useState(false);\r\n    const [loader, setLoader] = useState(true);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n        setLoader(false);\r\n    };\r\n    const handleType = (event) => {\r\n        setType(event.target.value);\r\n        setLimit(12);\r\n        setSearch('');\r\n        setPage(1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllNft({\r\n                categoryId: location.state.data.CategoryId,\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                type: type,\r\n                brandId: user.BrandId,\r\n                handleClose: handleClose\r\n            })\r\n        );\r\n    }, [search, page, limit, type]);\r\n\r\n    const nftList = useSelector((state) => state.nftReducer.nftList);\r\n    \r\n    return (\r\n        <>\r\n            <AddNft\r\n                open={addNftOpen}\r\n                setOpen={setAddNftOpen}\r\n                data={location?.state?.data}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                nftType={type}\r\n            />\r\n            <MainCard\r\n                className=\"Adminheading\"\r\n                \r\n                title={\r\n                <Grid container sx={{display:'flex'}}>\r\n                    <Grid item md={8} xs={12}>\r\n                        <Typography\r\n                        variant=\"h1\"\r\n                        component=\"h2\"\r\n                        className=\"headingcard\"\r\n                        sx={{   fontWeight: 600, color:  theme.palette.mode === 'dark' ? '#fff' : '#000' ,\r\n                         marginLeft: { lg: '-20px', md: '-20px' },  }}\r\n                    >\r\n                        Categories\r\n                    </Typography>\r\n                    </Grid>\r\n                    <Grid item md={4} xs={12}>\r\n                    <Button\r\n                        className=\"buttonSize\"\r\n                        sx={{float:{xs:'left' , md:'right'}, marginTop:{xs:\"10px\",md:\"0px\"} }}\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            navigate('/categories');\r\n                        }}\r\n                    >\r\n                        Back\r\n                    </Button>\r\n                        </Grid>\r\n                        </Grid>\r\n                   \r\n                }\r\n              \r\n                content={false}\r\n            ></MainCard>\r\n            <MainCard\r\n                className=\"yellow tableShadow\"\r\n                title={\r\n                    <Grid container spacing={4}>\r\n                        <Grid item xs={12} lg={8}>\r\n                            <Typography className=\"mainheading\" variant=\"h1\" component=\"h2\" \r\n                            sx={{ marginLeft: { lg: '48px', md: '48px' },marginTop:{md:\"6px\"} }}>\r\n                                NFT Management  \r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6} lg={2}>\r\n                            <TextField\r\n                                className=\"selectField selectstyle\"\r\n                                id=\"outlined-select-budget\"\r\n                                select\r\n                                fullWidth\r\n                                value={type}\r\n                                onChange={handleType}\r\n                                variant=\"standard\"\r\n                            >\r\n                                {typeArray.map((option, index) => (\r\n                                    <MenuItem  key={index} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={6} lg={2} textAlign=\"start\">\r\n                            <Button\r\n                                className=\"buttonSize\"\r\n                                sx={{ marginLeft: { lg: '-16px', md: '-16px' } }}\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddNftOpen(true);\r\n                                }}\r\n                            >\r\n                                Add NFT\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                <Grid container>\r\n                    {(nftList && nftList.nfts && nftList.nfts.rows && nftList.nfts.rows != undefined) ? (\r\n                        <>\r\n                       { nftList.nfts.rows.length > 0?(\r\n                        <>\r\n                            {' '}\r\n                            <Grid container spacing={gridSpacing} mt={2}\r\n                             sx={{ padding:\"0px 16px\" }}>\r\n                                {nftList.nfts.rows &&\r\n                                    nftList.nfts.rows.map((nft, index) => {\r\n                                        return (\r\n                                            <Grid key={index} item xs={12} sm={6} md={4} lg={3}>\r\n                                                <NftCard\r\n                                                    className=\"tableShadow\"\r\n                                                    nftData={nft}\r\n                                                    categoryId={location.state.data.CategoryId}\r\n                                                    search={search}\r\n                                                    page={page}\r\n                                                    limit={limit}\r\n                                                    type={type}\r\n                                                />\r\n                                            </Grid>\r\n                                        );\r\n                                    })}\r\n                            </Grid>\r\n                            <Grid item xs={12} sx={{ p: 3 }}>\r\n                                <Grid container justifyContent=\"center\" spacing={gridSpacing}>\r\n                                    <Grid item>\r\n                                        <Pagination\r\n                                            page={page}\r\n                                            color=\"primary\"\r\n                                            showFirstButton\r\n                                            showLastButton\r\n                                            count={nftList && nftList.pages}\r\n                                            onChange={(event, newPage) => {\r\n                                                setPage(newPage);\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            </>\r\n                       )\r\n                       :\r\n                       (\r\n                        <Grid item>\r\n                        <Typography className=\"statustypo\" style={{  padding: '20px 20px 20px 70px', fontWeight: '500' }}>\r\n                         No Data Available</Typography>\r\n                    </Grid>\r\n                       )}\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                        <Grid container justifyContent=\"center\" sx={{ width: '80%', m: '15px auto '}}>\r\n                                <Grid item>\r\n                            <CircularProgress disableShrink size={'4rem'} />\r\n                        </Grid>\r\n                                </Grid>\r\n                        </>\r\n                  \r\n                    )}\r\n                </Grid>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NftManagement;\r\n","const BLOCKCHAIN = \r\n{\r\n    WALLET_ADDRESS: '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651',\r\n    ERC20: '0x44405b9819dd99b331A317f5c76667EcCcf19072'\r\n}\r\n\r\nexport default BLOCKCHAIN\r\n","export default __webpack_public_path__ + \"static/media/image-upload.54137b05.svg\";"],"sourceRoot":""}