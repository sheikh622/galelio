{"version":3,"sources":["views/pages/user/productDetails/component/productView.js","views/pages/user/productDetails/component/similarProducts.js","views/pages/user/productDetails/component/activity.js","views/pages/user/productDetails/component/editProperties.js","views/pages/user/productDetails/component/properties.js","views/pages/user/productDetails/index.js","ui-component/extended/Avatar.js","constants.js","shared/component/FileInput.js","ui-component/cards/SubCard.js"],"names":["PropertiesView","nft","console","log","dispatch","useDispatch","useState","resell","setResell","bought","setBought","redeem","setRedeem","loader","setLoader","redeemLoader","setRedeemLoader","resellLoader","setResellLoader","lazyTokenId","setLazyTokenId","navigate","useNavigate","user","useSelector","state","auth","age","setAge","theme","useTheme","React","open","setOpen","rprice","ResellDialog","Grid","sx","width","Button","float","md","className","variant","size","onClick","mintType","handleResellNft","Dialog","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","type","margin","label","fullWidth","onChange","e","target","value","InputProps","inputProps","min","DialogActions","buyNftResolve","redeemNftResolve","resellNftResolve","checkWallet","window","ethereum","request","method","response","_metamask","isUnlocked","connectWallet","SNACKBAR_OPEN","message","alertSeverity","utils","getAddress","walletAddress","handleBuyNft","erc20Address","BLOCKCHAIN","ERC20","tokenId","parseInt","NFTTokens","contractAddress","price","ethers","parseEther","toString","provider","providers","Web3Provider","signer","getSigner","marketplace","Contract","MarketplaceAddress","address","MarketplaceAbi","token","Erc20","approve","wait","purchaseItem","then","data","buyNft","nftId","id","nftToken","buyerAddress","from","catch","error","toast","reason","signerAddress","nfts","NFTAbi","abi","nftPrice","prices","voucher","uri","tokenUri","signature","minterAddress","requesterAddress","mintedNFT","events","changeTokenId","rrprice","resellItem","resellNft","success","buyer","buyerNft","makeItem","handleRedeemNft","redeemNft","addDeliveryNft","status","TokenId","WalletAddress","NftId","UserId","fprice","nftReducer","nftBuyer","useEffect","getNftBuyer","NFTTokenId","spacing","gridSpacing","item","xs","container","justifyContent","textAlign","sm","component","RouterLink","to","CardMedia","image","asset","minheight","maxHeight","background","overflow","cursor","mt","ml","alignItems","Avatar","alt","src","Brand","height","objectFit","zeroMinWidth","textDecoration","Typography","align","fontWeight","name","color","palette","mode","description","length","Box","borderRadius","FormControl","padding","Select","labelId","event","displayEmpty","renderValue","selected","join","NFTMetaFiles","map","option","MenuItem","fieldValue","fieldName","paddingLeft","currencyType","isSold","JSON","stringify","founded","display","Alert","severity","CircularProgress","role","marginTop","lg","SimilarProducts","similarProductNfts","marketplaceReducer","search","page","limit","click","setClick","getAllSimilarProducts","categoryId","CategoryId","mb","textTransform","rows","lenght","Card","maxWidth","CardActionArea","CardContent","style","fontSize","Divider","pt","pl","Activity","MenuProps","PaperProps","ITEM_HEIGHT","getStyles","personName","indexOf","typography","fontWeightRegular","fontWeightMedium","setPersonName","MainCard","title","border","split","content","TableContainer","Table","TableHead","TableRow","TableCell","days","TableBody","Transition","forwardRef","props","ref","Slide","direction","Edit","metadata","proofRequired","editable","validationSchema","Yup","firstName","required","max","lastName","file","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","updateProperty","handleClose","setTimeout","singleNft","axios","get","API_URL","nftData","updateUri","resetForm","onClose","TransitionComponent","pr","dark","p","noValidate","handleSubmit","InputLabel","htmlFor","handleChange","touched","Boolean","errors","helperText","pb","FileInput","accept","placeHolder","Properties","propertiesOpen","setPropertiesOpen","setMetadata","setValue","setEditable","setProofRequired","setId","NFTMetaData","SubCard","proof","isEditable","Tooltip","placement","ProductDetails","location","useLocation","marketplaceNfts","outline","others","colorSX","paper","bgcolor","outlineSX","borderColor","sizeSX","WALLET_ADDRESS","fileRef1","useRef","current","hidden","setFieldValue","currentTarget","files","substring","toFixed","children","contentClass","darkTitle","secondary","contentSX","light","primary","boxShadow","action","opacity","defaultProps"],"mappings":"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","file":"static/js/32.12f253e0.chunk.js","sourcesContent":["// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { CardMedia, Grid, Typography, Button, Alert, InputLabel, Select, FormControl, Box, MenuItem } from '@mui/material';\r\n\r\nimport React, { useEffect } from 'react';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\nimport { ethers, utils } from 'ethers';\r\nimport NFTAbi from '../../../../../contractAbi/NFT.json';\r\nimport MarketplaceAbi from '../../../../../contractAbi/Marketplace.json';\r\nimport MarketplaceAddress from '../../../../../contractAbi/Marketplace-address.json';\r\nimport Erc20 from '../../../../../contractAbi/Erc20.json';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { buyNft, resellNft, redeemNft, getNftBuyer, addDeliveryNft, changeTokenId } from 'redux/nftManagement/actions';\r\n// import ResellDialog from \"./resellDialog\"\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport BLOCKCHAIN from '../../../../../constants';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport { SNACKBAR_OPEN } from 'store/actions';\r\nimport { setLoader } from 'redux/auth/actions';\r\n\r\n// =============================|| LANDING - FEATURE PAGE ||============================= //\r\n\r\nconst PropertiesView = ({ nft }) => {\r\n    console.log('nft from product view', nft);\r\n    const dispatch = useDispatch();\r\n    const [resell, setResell] = useState(false);\r\n    const [bought, setBought] = useState(false);\r\n    const [redeem, setRedeem] = useState(false);\r\n    const [loader, setLoader] = useState(false);\r\n    const [redeemLoader, setRedeemLoader] = useState(false);\r\n    const [resellLoader, setResellLoader] = useState(false);\r\n    const [lazyTokenId, setLazyTokenId] = useState(\"\");\r\n\r\n    const navigate = useNavigate();\r\n    const user = useSelector((state) => state.auth.user);\r\n\r\n    const [age, setAge] = useState('');\r\n\r\n    const handleChange = (event) => {\r\n        setAge(event.target.value);\r\n    };\r\n    const theme = useTheme();\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    let rprice = 0;\r\n    const ResellDialog = () => {\r\n        const handleClickOpen = () => {\r\n            setOpen(true);\r\n        };\r\n\r\n        const handleClose = () => {\r\n            setOpen(false);\r\n        };\r\n\r\n        return (\r\n            <Grid sx={{ width: '100%' }}>\r\n                <Button\r\n                    sx={{ float: { md: 'right' } }}\r\n                    className=\"buy\"\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    onClick={() => {\r\n                        if (nft.mintType == 'directMint') {\r\n                            setOpen(true);\r\n                        } else if (nft.mintType == 'lazyMint') {\r\n                            handleResellNft();\r\n                        }\r\n                    }}\r\n                >\r\n                    Resell\r\n                </Button>\r\n                <Dialog\r\n                    open={open}\r\n                    // onClose={handleClose}\r\n                >\r\n                    <DialogTitle>NFT Resell Price</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>Please enter the price for the NFT</DialogContentText>\r\n                        <TextField\r\n                            autoFocus\r\n                            type='number'\r\n                            margin=\"dense\"\r\n                            label=\"Price \"\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                            // value={rprice}\r\n                            onChange={(e) => {\r\n                                rprice = e.target.value;\r\n                            }}\r\n                            InputProps={{ inputProps: { min: 0 } }}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose}>Cancel</Button>\r\n                        <Button\r\n                            onClick={() => {\r\n                                handleResellNft();\r\n                            }}\r\n                        >\r\n                            Resell\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                <Grid></Grid>\r\n            </Grid>\r\n        );\r\n    };\r\n\r\n    const buyNftResolve = () => {\r\n        setBought(true);\r\n        setLoader(false);\r\n    };\r\n\r\n    const redeemNftResolve = () => {\r\n        setRedeem(true);\r\n        setRedeemLoader(false);\r\n    };\r\n\r\n    const resellNftResolve = () => {\r\n        setResell(true);\r\n        setResellLoader(false);\r\n        setOpen(false);\r\n    };\r\n\r\n    const checkWallet = async () => {\r\n        const response = await window?.ethereum?.request({ method: 'eth_requestAccounts' });\r\n        let connectWallet = await ethereum._metamask.isUnlocked();\r\n\r\n        if ((window.ethereum && connectWallet) == false) {\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'No crypto wallet found. Please connect one',\r\n                variant: 'alert',\r\n                alertSeverity: 'info'\r\n            });\r\n            console.log('No crypto wallet found. Please install it.');\r\n            // toast.error('No crypto wallet found. Please install it.');\r\n        }\r\n\r\n        // else if (window?.ethereum?.networkVersion !== '5') {\r\n        //     dispatch({\r\n        //         type: SNACKBAR_OPEN,\r\n        //         open: true,\r\n        //         message: 'Please change your Chain ID to Goerli',\r\n        //         variant: 'alert',\r\n        //         alertSeverity: 'info'\r\n        //     });\r\n        //     console.log('Please change your Chain ID to Goerli');\r\n        // }\r\n        else if (utils?.getAddress(response[0]) !== user.walletAddress) {\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'Please connect your registered Wallet Address',\r\n                variant: 'alert',\r\n                alertSeverity: 'info'\r\n            });\r\n            console.log('Please connect your registered Wallet Address');\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const handleBuyNft = async () => {\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else if (await checkWallet()) {\r\n            if (nft.mintType == 'directMint') {\r\n                console.log('im in handlebuy');\r\n                try {\r\n                    setLoader(true);\r\n\r\n                    let erc20Address = BLOCKCHAIN.ERC20;\r\n                    let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n                    let contractAddress = nft.contractAddress;\r\n                    let price = ethers.utils.parseEther(nft.price.toString());\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                    const signer = provider.getSigner();\r\n                    const address = signer.getAddress();\r\n\r\n                    const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi, signer);\r\n                    console.log('marketplace', marketplace);\r\n\r\n                    const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n                    await (await token.approve(MarketplaceAddress.address, price)).wait();\r\n\r\n                    // -------------\r\n                    // let approvalAmount = await token.allowance(address, MarketplaceAddress.address);\r\n\r\n                    // let approvePrice = ethers.utils.parseEther('10000');\r\n                    // if (approvalAmount.toString() < nft.price.toString()) {\r\n                    //     await (await token.approve(MarketplaceAddress.address, approvePrice)).wait();\r\n                    // }\r\n                    // ---------------\r\n                    console.log('tokenId, contractAddress, price from product view', tokenId, contractAddress, price);\r\n                    await (await marketplace.purchaseItem(tokenId, contractAddress, price))\r\n                        .wait()\r\n                        .then((data) => {\r\n                            dispatch(\r\n                                buyNft({\r\n                                    nftId: nft.id,\r\n                                    nftToken: nft.NFTTokens[0].id,\r\n                                    buyerAddress: data.from,\r\n                                    contractAddress: contractAddress,\r\n                                    buyNftResolve: buyNftResolve\r\n                                })\r\n                            );\r\n                        })\r\n                        .catch((error) => {\r\n                            setLoader(false);\r\n                            toast.error(error.reason);\r\n                        });\r\n                } catch (error) {\r\n                    setLoader(false);\r\n                    toast.error(error.reason);\r\n                }\r\n            } else if (nft.mintType == 'lazyMint') {\r\n                console.log('HY LAZY HERE ');\r\n                try {\r\n                    setLoader(true);\r\n                    let signers = nft.signerAddress;\r\n                    let erc20Address = BLOCKCHAIN.ERC20;\r\n                    // let signature = nft.NFTTokens[0].signature;\r\n                    let contractAddress = nft.contractAddress;\r\n                    // let contractAddress = \"0x2750aE21C32f8De4C3CaE1230efAd2Fb497263b8\"\r\n                    // const SIGNING_DOMAIN = 'Galileo-Protocol';\r\n                    // const SIGNATURE_VERSION = '1';\r\n\r\n                    // const domain = {\r\n                    //     name: SIGNING_DOMAIN,\r\n                    //     version: SIGNATURE_VERSION,\r\n                    //     verifyingContract: contractAddress,\r\n                    //     chainId: 5\r\n                    // };\r\n                    // const types = {\r\n                    //     GalileoVoucher: [\r\n                    //         { name: 'uri', type: 'string' },\r\n                    //         { name: 'price', type: 'uint256' },\r\n                    //         { name: 'token', type: 'address' }\r\n                    //     ]}\r\n                    // let contractAddress = \"0x6e9550E5fee2bE7BdB208214e9cE2B47131a5Ca0\";\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                    const signer = provider.getSigner();\r\n                    const address = signer.getAddress();\r\n\r\n                    console.log('im in 255');\r\n\r\n                    const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n                    console.log('nfts', nfts);\r\n                    let nftPrice = nft.price.toString();\r\n\r\n                    let prices = ethers.utils.parseEther(nftPrice);\r\n\r\n                    let voucher = {\r\n                        uri: nft.tokenUri,\r\n                        price: prices.toString(),\r\n                        token: erc20Address,\r\n                        signature: nft.NFTTokens[0].signature\r\n                    };\r\n                    console.log(voucher, 'voucher');\r\n                    let validatorAddress = '0x6f3b51bd5b67f3e5bca2fb32796215a796b79651';\r\n                    const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n                    // const signature = await signer._signTypedData(domain, types, voucher);\r\n                    // const verifyAddr = ethers.utils.verifyTypedData(domain, types, voucher, signature);\r\n                    //console.log(verifyAddr);\r\n\r\n                    // let approvalAmount = await token.allowance(address, contractAddress);\r\n\r\n                    // let approvePrice = ethers.utils.parseEther('10000');\r\n                    // if (approvalAmount.toString() < nft.price.toString()) {\r\n                    //     await (await token.approve(contractAddress, approvePrice)).wait();\r\n                    // }\r\n                    await (await token.approve(contractAddress, '100000000000000000000000000000000000000')).wait();\r\n                    console.log(voucher, 'voucher');\r\n                    console.log(nft.minterAddress);\r\n                    console.log(erc20Address);\r\n\r\n                    console.log(nft.requesterAddress);\r\n\r\n                    \r\n                    try {\r\n                        let mintedNFT = await (await nfts.buyNft(voucher, nft.minterAddress, nft.requesterAddress)).wait();\r\n                        const id = parseInt(mintedNFT.events[0]?.address);\r\n                        console.log('mintedNFT',mintedNFT);\r\n                        console.log('id', id);\r\n                        setLazyTokenId(id.toString())\r\n                        dispatch(\r\n                            changeTokenId({\r\n                                id: nft.NFTTokens[0].id,\r\n                                tokenId: id.toString()\r\n                            })\r\n                        );\r\n                            console.log('im before lazy dispatch');\r\n                        dispatch(\r\n                            buyNft({\r\n                                nftId: nft.id,\r\n                                nftToken: nft.NFTTokens[0].id,\r\n                                buyerAddress: mintedNFT.from,\r\n                                contractAddress: contractAddress,\r\n                                buyNftResolve: buyNftResolve\r\n                            })\r\n                        );\r\n                    } catch (error) {\r\n                        console.log('error',error);\r\n                        toast.error(error.reason);\r\n                    }\r\n                } catch (error) {\r\n                    setLoader(false);\r\n                    toast.error(error.reason);\r\n                    console.log('error', error);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleResellNft = async () => {\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else if (await checkWallet()) {\r\n            if (nft.mintType == 'directMint') {\r\n                try {\r\n                    setResellLoader(true);\r\n                    let erc20Address = BLOCKCHAIN.ERC20;\r\n                    let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n                    let contractAddress = nft.contractAddress;\r\n\r\n                    let rrprice = ethers.utils.parseEther(rprice.toString());\r\n\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                    const signer = provider.getSigner();\r\n\r\n                    const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n                    const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi, signer);\r\n\r\n                    await (await nfts.approve(MarketplaceAddress.address, tokenId)).wait();\r\n                    await (await marketplace.resellItem(tokenId, contractAddress, rrprice))\r\n                        .wait()\r\n                        .then((data) => {\r\n                            dispatch(\r\n                                resellNft({\r\n                                    rprice: rprice,\r\n                                    nftId: nft.id,\r\n                                    nftToken: nft.NFTTokens[0].id,\r\n                                    buyerAddress: data.from,\r\n                                    contractAddress: contractAddress,\r\n                                    resellNftResolve: resellNftResolve\r\n                                })\r\n                            );\r\n                            toast.success('NFT is Resold');\r\n                        })\r\n                        .catch((error) => {\r\n                            toast.error(error.reason);\r\n                        });\r\n                } catch (error) {\r\n                    setResellLoader(false);\r\n                    toast.error(error.reason);\r\n                    setOpen(false);\r\n                }\r\n            } else if (nft.mintType == 'lazyMint') {\r\n                try {\r\n                    setResellLoader(true);\r\n                    console.log('hy');\r\n                    let erc20Address = BLOCKCHAIN.ERC20;\r\n                    // let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\nlet tokenId;\r\n                     if(lazyTokenId ==\"\"){\r\n                        tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n\r\n                    }\r\n                    else{\r\n\r\n                        tokenId = parseInt(lazyTokenId)\r\n                    }\r\n                    console.log('tokenId from resell', tokenId);\r\n                    let contractAddress = nft.contractAddress;\r\n                    let nftPrice = nft.price.toString();\r\n                    let rrprice = ethers.utils.parseEther(nftPrice);\r\n                    rrprice = rrprice.toString();\r\n                    let buyer = buyerNft?.buyer?.buyerAddress;\r\n\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                    const signer = provider.getSigner();\r\n                    console.log('signer', signer);\r\n                    const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n                    const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi, signer);\r\n                    console.log('MARKETPLACE', marketplace);\r\n                    console.log(\r\n                        'erc20Address, tokenId, contractAddress, rrprice,buyer',\r\n                        erc20Address,\r\n                        tokenId,\r\n                        contractAddress,\r\n                        rrprice,\r\n                        buyer\r\n                    );\r\n                    //await (await nfts.approve(MarketplaceAddress.address, tokenId)).wait();\r\n                    // console.log(\"tokenid\",tokenId)\r\n                    await (await marketplace.makeItem(erc20Address, tokenId, contractAddress, rrprice, buyer))\r\n                        .wait()\r\n                        .then((data) => {\r\n                            dispatch(\r\n                                resellNft({\r\n                                    nftId: nft.id,\r\n                                    nftToken: nft.NFTTokens[0].id,\r\n                                    buyerAddress: data.from,\r\n                                    contractAddress: contractAddress,\r\n                                    resellNftResolve: resellNftResolve\r\n                                })\r\n                            );\r\n\r\n                            toast.success('NFT is Resold');\r\n                        })\r\n                        .catch((error) => {\r\n                            toast.error(error.reason);\r\n                            console.log(error);\r\n                        });\r\n                    setOpen(false);\r\n                } catch (error) {\r\n                    setResellLoader(false);\r\n                    toast.error(error.reason);\r\n                    console.log(error);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleRedeemNft = async () => {\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else if (await checkWallet()) {\r\n            if (nft.mintType == 'directMint') {\r\n                try {                    \r\n                    setRedeemLoader(true);\r\n                    let erc20Address = BLOCKCHAIN.ERC20;\r\n                    let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n                    \r\n                    let contractAddress = nft.contractAddress;\r\n                    console.log('im beneath ca');\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                    const signer = provider.getSigner();\r\n                    console.log('signer', signer);\r\n\r\n                    const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi, signer);\r\n                    console.log('marketplace', marketplace);\r\n\r\n                    console.log('directmint redeem tokenId',tokenId);\r\n\r\n                    await (await marketplace.redeemNft(tokenId, contractAddress))\r\n                        .wait()\r\n                        .then((data) => {\r\n                            dispatch(\r\n                                redeemNft({\r\n                                    nftId: nft.id,\r\n                                    nftToken: nft.NFTTokens[0].id,\r\n                                    buyerAddress: data.from,\r\n                                    contractAddress: contractAddress\r\n                                })\r\n                            );\r\n                            dispatch(\r\n                                addDeliveryNft({\r\n                                    status: 'Pending',\r\n                                    TokenId: nft.NFTTokens[0].id,\r\n                                    WalletAddress: data.from,\r\n                                    NftId: nft.id,\r\n                                    UserId: user.id,\r\n                                    redeemNftResolve: redeemNftResolve\r\n                                })\r\n                            );\r\n\r\n                            toast.success('NFT Redeem successfully');\r\n                        })\r\n                        .catch((error) => {\r\n                            toast.error(error.reason);\r\n                            console.log(error);\r\n                        });\r\n                } catch (error) {\r\n                    setRedeemLoader(false);\r\n                    toast.error(error.reason);\r\n                    console.log(error);\r\n                }\r\n            } else if (nft.mintType == 'lazyMint') {\r\n                console.log('im in lm');\r\n                try {\r\n                    setRedeemLoader(true);\r\n                    let erc20Address = BLOCKCHAIN.ERC20;\r\n                    let tokenId;\r\n                    if(lazyTokenId ==\"\"){\r\n                        tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n\r\n                    }\r\n                    else{\r\n\r\n                        tokenId = parseInt(lazyTokenId)\r\n                    }\r\n                    \r\n\r\n                    console.log('tokenId', tokenId);\r\n                    console.log('lazyTokenId', lazyTokenId);\r\n                    let contractAddress = nft.contractAddress;\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                    const signer = provider.getSigner();\r\n                    // console.log(\"tokenid\",nft.NFTTokens[0].tokenId)\r\n                    // console.log(\"tokenid\",typeof nft.NFTTokens[0].tokenId)\r\n                    const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi, signer);\r\n                    let nftPrice = nft.price.toString();\r\n                    let rrprice = ethers.utils.parseEther(nftPrice);\r\n                    console.log('rrprice.toString()', rrprice.toString());\r\n                    let fprice=rrprice.toString()\r\n                    console.log('erc20Address, tokenId, contractAddress, fprice',erc20Address, tokenId, contractAddress, fprice);\r\n                    await (await marketplace.redeem(erc20Address, tokenId, contractAddress, fprice))\r\n                        .wait()\r\n\r\n                        .then((data) => {\r\n                            dispatch(\r\n                                redeemNft({\r\n                                    nftId: nft.id,\r\n                                    nftToken: nft.NFTTokens[0].id,\r\n                                    buyerAddress: data.from,\r\n                                    contractAddress: contractAddress\r\n                                })\r\n                            );\r\n                            dispatch(\r\n                                addDeliveryNft({\r\n                                    status: 'Pending',\r\n                                    TokenId: nft.NFTTokens[0].id,\r\n                                    WalletAddress: data.from,\r\n                                    NftId: nft.id,\r\n                                    UserId: user.id,\r\n                                    redeemNftResolve: redeemNftResolve\r\n                                })\r\n                            );\r\n\r\n                            toast.success('NFT Redeem successfully');\r\n                        })\r\n                        .catch((error) => {\r\n                            toast.error(error.reason);\r\n                            console.log('error', error);\r\n                        });\r\n                } catch (error) {\r\n                    setRedeemLoader(false);\r\n                    toast.error(error.reason);\r\n                    console.log('error', error);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const buyerNft = useSelector((state) => state.nftReducer.nftBuyer);\r\n    console.log('buyer nft',buyerNft.status );\r\n\r\n    // console.log('buyerNft', buyerNft?.buyer?.buyerAddress);\r\n    useEffect(() => {\r\n        console.log('useEffect Ran');\r\n        if (user) {\r\n            dispatch(\r\n                getNftBuyer({\r\n                    walletAddress: user?.walletAddress,\r\n                    NFTTokenId: nft?.NFTTokens[0]?.id,\r\n                    NftId: nft?.id\r\n                })\r\n            );\r\n        }\r\n    }, [useSelector, dispatch, resell, bought, redeem]);\r\n\r\n    useEffect(() => {}, []);\r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12}>\r\n                <Grid container justifyContent=\"center\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n                    <Grid item md={6} sm={12} component={RouterLink} to=\"/companyPage\">\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            image={nft?.asset}\r\n                            sx={{ minheight: 'auto', maxHeight: '570px', background: 'transparent', overflow: 'hidden', cursor: 'Pointer' }}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item md={6} sm={12}>\r\n                        <Grid item xs={12}>\r\n                            <Grid container>\r\n                                <Grid item md={12} sm={12}>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid mt={4} ml={2} item xs={12}>\r\n                                            <Grid container spacing={2} alignItems=\"center\">\r\n                                                <Grid item>\r\n                                                    <Avatar\r\n                                                        alt=\"User 1\"\r\n                                                        src={nft?.Brand?.image}\r\n                                                        sx={{ width: 56, height: 56, objectFit: 'fill' }}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid\r\n                                                    item\r\n                                                    xs\r\n                                                    zeroMinWidth\r\n                                                    component={RouterLink}\r\n                                                    sx={{ textDecoration: 'none' }}\r\n                                                    to=\"/companyPage\"\r\n                                                >\r\n                                                    <Typography align=\"left\" fontWeight={600} variant=\"h2\" className=\"brand\">\r\n                                                        {nft?.Brand?.name}\r\n                                                    </Typography>\r\n                                                    <Typography align=\"left\" variant=\"h3\" className=\"creator\">\r\n                                                        Brand\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n\r\n                                        <Grid item mt={2} xs={12}>\r\n                                            <Typography\r\n                                                className=\"Lux\"\r\n                                                color={theme.palette.mode === 'dark' ? 'white' : 'black'}\r\n                                                variant=\"h3\"\r\n                                            >\r\n                                                {nft?.name ? nft?.name : 'Luxury Stainless Watch'}{' '}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <Typography className=\"productdescription\" variant=\"body2\">\r\n                                                {nft?.description}{' '}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <Typography className=\"productdescription\" variant=\"body2\">\r\n                                                Total NFTs: {nft?.NFTTokens.length}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <Box sx={{ borderRadius: '4px', width: '95%', margin: '0 auto', textAlign: 'left' }}>\r\n                                                <FormControl\r\n                                                    sx={{\r\n                                                        background: theme.palette.mode === 'dark' ? '#181C1F' : '#d9d9d9',\r\n                                                        color: theme.palette.mode === 'dark' ? '#ffff' : 'black',\r\n                                                        padding: '10px 10px 10px 10px',\r\n                                                        borderRadius: '4px'\r\n                                                    }}\r\n                                                    fullWidth\r\n                                                >\r\n                                                    <Select\r\n                                                        variant=\"standard\"\r\n                                                        labelId=\"demo-simple-select-label\"\r\n                                                        id=\"demo-simple-select\"\r\n                                                        value={age}\r\n                                                        onChange={handleChange}\r\n                                                        fullWidth\r\n                                                        displayEmpty\r\n                                                        renderValue={(selected) => {\r\n                                                            if (selected.length === 0) {\r\n                                                                return <em className=\"fontfamily\">PROOF OF AUTHENTICITY</em>;\r\n                                                            }\r\n\r\n                                                            return selected.join(', ');\r\n                                                        }}\r\n                                                    >\r\n                                                        {/* <MenuItem disabled value=\"\">\r\n                                      <em>aiman</em>\r\n                                    </MenuItem> */}\r\n                                                        {nft?.NFTMetaFiles.map((option) => (\r\n                                                            <MenuItem\r\n                                                                // component={redirect}\r\n                                                                // to={option.fieldValue}\r\n                                                                // key={option.fieldValue}\r\n                                                                // value={option.fieldValue}\r\n                                                                // onClick={useNavigate(option.fieldValue)}\r\n                                                                onClick={() => {\r\n                                                                    // useNavigate(option.fieldValue)\r\n                                                                    window.open(option.fieldValue, '_blank');\r\n                                                                }}\r\n                                                            >\r\n                                                                {option.fieldName}\r\n                                                            </MenuItem>\r\n                                                        ))}\r\n                                                    </Select>\r\n                                                </FormControl>\r\n                                            </Box>\r\n                                            {/*     // <TextField\r\n                                        //     sx={{ borderRadius: '4px' }}\r\n                                        //     className=\"select\"\r\n                                        //     fullWidth\r\n                                        //     id=\"standard-select-currency\"\r\n                                        //     select\r\n                                        //     lable='PROOF OF AUTHENTICITY'\r\n                                        //     value={fieldValue}\r\n                                        //     onChange={(e) => setFieldValue(e.target.value)}\r\n                                        // >\r\n                                        \r\n                                        //     {nft?.NFTMetaFiles.map((option) => (\r\n                                        //         <MenuItem key={option.fieldValue} value={option.fieldValue}>\r\n                                        //             {option.fieldName}\r\n                                        //         </MenuItem>\r\n                                        //     ))}\r\n                                        // </TextField> */}\r\n                                        </Grid>\r\n                                        {/*  <Grid item mt={2} mb={2} className=\"timer\" xs={12}>\r\n                                            <Grid\r\n                                                sx={{ background: theme.palette.mode === 'dark' ? '#181C1F' : '#d9d9d9' }}\r\n                                                className=\"auction\"\r\n                                                container\r\n                                            >\r\n                                                <Grid item md={6} xs={12} sm={12}>\r\n                                                    <Typography color={theme.palette.mode === 'dark' ? 'white' : 'black'} variant=\"body\">\r\n                                                        Auction Time{' '}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={12} sm={12}>\r\n                                                    <Typography color={theme.palette.mode === 'dark' ? 'white' : 'black'} variant=\"body\">\r\n                                                        {' '}\r\n                                                        2h : 40m : 03s\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid> */}\r\n                                        <Grid mt={2} item xs={12}>\r\n                                            <Grid container>\r\n                                                <Grid mt={-2} item md={3} xs={12} sm={12}>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography\r\n                                                            color={theme.palette.mode === 'dark' ? 'white' : '#404040'}\r\n                                                            sx={{ paddingLeft: { md: '22px' }, textAlign: { md: 'left' } }}\r\n                                                            className=\"price\"\r\n                                                            variant=\"body2\"\r\n                                                        >\r\n                                                            Price\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography\r\n                                                            color={theme.palette.mode === 'dark' ? 'white' : '#262626'}\r\n                                                            sx={{ paddingLeft: { md: '22px' }, textAlign: { md: 'left' } }}\r\n                                                            className=\"ETH \"\r\n                                                            variant=\"h3\"\r\n                                                        >\r\n                                                            {nft?.price} {nft?.currencyType}\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                {/*      {buyerNft?.founded && (\r\n                                            <>\r\n                                                <Grid item xs={12} md={12} mt={1}>\r\n                                                    {(nft?.transactionHash !== '' || nft?.transactionHash) && (\r\n                                                        <>\r\n                                                            <Accordion sx={{ margin: '10px', border: '2px solid', borderRadius: '4px' }}>\r\n                                                                <AccordionSummary\r\n                                                                    expandIcon={<ExpandMoreIcon />}\r\n                                                                    aria-controls=\"panel1a-content\"\r\n                                                                    id=\"panel1a-header\"\r\n                                                                >\r\n                                                                    <Typography>Transaction hash</Typography>\r\n                                                                </AccordionSummary>\r\n                                                                <AccordionDetails>\r\n                                                                    <a target=\"_blank\" href={nft?.transactionHash}>\r\n                                                                        {nft?.transactionHash}\r\n                                                                    </a>\r\n                                                                </AccordionDetails>\r\n                                                            </Accordion>\r\n                                                        </>\r\n                                                    )}\r\n                                                </Grid>\r\n                                                <Grid item xs={12} md={12}>\r\n                                                    <Accordion sx={{ margin: '10px', border: '2px solid', borderRadius: '4px' }}>\r\n                                                        <AccordionSummary\r\n                                                            expandIcon={<ExpandMoreIcon />}\r\n                                                            aria-controls=\"panel2a-content\"\r\n                                                            id=\"panel2a-header\"\r\n                                                        >\r\n                                                            <Typography>Contract address</Typography>\r\n                                                        </AccordionSummary>\r\n                                                        <AccordionDetails>\r\n                                                            <Typography>{nft?.Category?.BrandCategories[0].contractAddress}</Typography>\r\n                                                        </AccordionDetails>\r\n                                                    </Accordion>\r\n                                                </Grid>\r\n                                            </>\r\n                                        )} */}\r\n\r\n                                                <>\r\n                                                    {(bought == true || nft?.isSold == true) && JSON.stringify(buyerNft) === '{}' ? (\r\n                                                        <>\r\n                                                            <Grid item md={8} xs={12} sm={12} textAlign=\"center\">\r\n                                                                <Alert severity=\"error\">\r\n                                                                    <b>This item is sold already!</b>\r\n                                                                </Alert>\r\n                                                            </Grid>\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <>\r\n                                                            {buyerNft?.founded ? (\r\n                                                                <>\r\n                                                                    <>\r\n                                                                        <Grid item md={12} sx={{ mt: 1, display: 'flex' }}>\r\n                                                                            <Grid item md={6} xs={12} sm={12}>\r\n                                                                                {buyerNft?.status == 'Redeem' || redeem ? (\r\n                                                                                    <>\r\n                                                                                        <Alert severity=\"success\">\r\n                                                                                            <b>This item is Redeemed</b>\r\n                                                                                        </Alert>\r\n                                                                                    </>\r\n                                                                                ) : (\r\n                                                                                    <>\r\n                                                                                        {buyerNft?.status !== 'Resell' && redeem !== true && (\r\n                                                                                            <>\r\n                                                                                                <Button\r\n                                                                                                    sx={{ float: { md: 'right' } }}\r\n                                                                                                    className=\"buy\"\r\n                                                                                                    variant=\"contained\"\r\n                                                                                                    size=\"large\"\r\n                                                                                                    onClick={() => {\r\n                                                                                                        handleRedeemNft();\r\n                                                                                                    }}\r\n                                                                                                >\r\n                                                                                                    {redeemLoader ? (\r\n                                                                                                        <CircularProgress\r\n                                                                                                            sx={{ color: 'white' }}\r\n                                                                                                        />\r\n                                                                                                    ) : (\r\n                                                                                                        <span> Redeem</span>\r\n                                                                                                    )}\r\n                                                                                                </Button>\r\n                                                                                            </>\r\n                                                                                        )}\r\n                                                                                    </>\r\n                                                                                )}\r\n                                                                            </Grid>\r\n                                                                            {buyerNft?.status == 'Resell' || resell == true ? (\r\n                                                                                <>\r\n                                                                                    <Grid\r\n                                                                                        item\r\n                                                                                        md={12}\r\n                                                                                        xs={12}\r\n                                                                                        sm={12}\r\n                                                                                        textAlign=\"center\"\r\n                                                                                        sx={{}}\r\n                                                                                    >\r\n                                                                                        <Alert severity=\"info\" sx={{ float: 'left' }}>\r\n                                                                                            <b>This item is resold by you!</b>\r\n                                                                                        </Alert>\r\n                                                                                    </Grid>\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    {buyerNft?.status !== 'Redeem' && redeem == false && (\r\n                                                                                        <>\r\n                                                                                            {resellLoader ? (\r\n                                                                                                <CircularProgress\r\n                                                                                                    sx={{ color: 'blue', ml: 3 }}\r\n                                                                                                />\r\n                                                                                            ) : (\r\n                                                                                                <ResellDialog />\r\n                                                                                            )}\r\n                                                                                        </>\r\n                                                                                    )}\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                        </Grid>\r\n                                                                    </>\r\n                                                                </>\r\n                                                            ) : (\r\n                                                                <>\r\n                                                                    {user?.role != 'Super Admin' &&\r\n                                                                        user?.role != 'Admin' &&\r\n                                                                        user?.role != 'Brand Admin' && (\r\n                                                                            <>\r\n                                                                                {bought !== true && (\r\n                                                                                    <Grid\r\n                                                                                        item\r\n                                                                                        md={9}\r\n                                                                                        xs={12}\r\n                                                                                        sm={12}\r\n                                                                                        sx={{ marginTop: { md: '-10px', lg: '-10px' } }}\r\n                                                                                        textAlign=\"center\"\r\n                                                                                    >\r\n                                                                                        <Button\r\n                                                                                            sx={{ float: { md: 'right' } }}\r\n                                                                                            className=\"buy\"\r\n                                                                                            variant=\"contained\"\r\n                                                                                            size=\"large\"\r\n                                                                                            onClick={() => {\r\n                                                                                                handleBuyNft();\r\n                                                                                            }}\r\n                                                                                        >\r\n                                                                                            {loader ? (\r\n                                                                                                <CircularProgress className=\"circul\" />\r\n                                                                                            ) : (\r\n                                                                                                <span>Buy Now</span>\r\n                                                                                            )}\r\n                                                                                        </Button>\r\n                                                                                    </Grid>\r\n                                                                                )}\r\n                                                                            </>\r\n                                                                        )}\r\n                                                                </>\r\n                                                            )}\r\n                                                        </>\r\n                                                    )}\r\n                                                </>\r\n                                            </Grid>\r\n                                            {/* \r\n                                            <Button onClick={()=>{\r\n                                                setBought(true)\r\n                                            }}>Set Bought True</Button>\r\n                                            <Button onClick={()=>{\r\n                                                setBought(false)\r\n                                            }}>Set Bought False</Button> */}\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item md={1} sm={12}></Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default PropertiesView;\r\n","// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Container, Card, Grid, Typography, CardActionArea, CardContent, Divider } from '@mui/material';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport { getAllSimilarProducts } from 'redux/marketplace/actions';\r\nconst SimilarProducts = ({ nft }) => {\r\n    const theme = useTheme();\r\n    const itemData = [\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Cars',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Shoes',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1522770179533-24471fcdba45',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Real Estate',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Goods',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Cars',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Shoes',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1522770179533-24471fcdba45',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Real Estate',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Goods',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        }\r\n    ];\r\n\r\n    const dispatch = useDispatch();\r\n    const similarProductNfts = useSelector((state) => state.marketplaceReducer.similarProductNfts);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(12);\r\n    const [click, setClick] = useState(false);\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllSimilarProducts({\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                categoryId: nft.CategoryId,\r\n                nftId: nft.id\r\n            })\r\n        );\r\n        setClick(false);\r\n    }, [click, search, page, limit]);\r\n\r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12} lg={12} md={12}>\r\n                <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                    <Grid item xs={12}>\r\n                        <Typography\r\n                        color={theme.palette.mode === 'dark' ? '#FFFFFF' : 'black'}\r\n                        className='productfigmastyl'\r\n                            variant=\"h2\"\r\n                            mt={4}\r\n                            component=\"div\"\r\n                            sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' },\r\n                             textTransform: 'capitalize' }}\r\n                        >\r\n                            Similar Products\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            {similarProductNfts?.nfts?.rows.lenght > 0 ? (\r\n                <Grid item xs={12}>\r\n                    <Grid container justifyContent=\"left\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n                        {similarProductNfts?.nfts?.rows.map((data) => (\r\n                            <Grid item md={2} sm={6}>\r\n                                <Card\r\n                                    sx={{\r\n                                        color: theme.palette.mode === 'dark' ? 'white' : '#404040',\r\n                                        background: theme.palette.mode === 'dark' ? '#181C1F' : 'white',\r\n                                        maxWidth: 365,\r\n                                        width: '105%',\r\n                                       \r\n                                        borderRadius: '4px !important'\r\n                                    }}\r\n                                >\r\n                                    <CardActionArea>\r\n                                        <CardMedia component=\"img\" height=\"200\" \r\n                                         sx={{objectFit:'scale-down'}} image={data.asset} />\r\n                                        <CardContent sx={{ padding: '6%' }}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={8} sx={{ textAlign: 'left' }}>\r\n                                                    <span style={{ fontWeight: '550', fontSize: '130%' }}>\r\n                                                    {data.Brand.name}</span>\r\n                                                    <Grid className=\"overflow\" sx={{ marginTop: '5%' }}>\r\n                                                        {data.name}\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid item xs={4} sx={{ background: '' }}>\r\n                                                    <span style={{ fontWeight: '50 !important ', fontSize: '110%', \r\n                                                    float: 'right' }}>\r\n                                                    20 Creators\r\n                                                    </span>\r\n                                                </Grid>\r\n                                            </Grid>\r\n\r\n                                            <Divider sx={{ mt: 2, mb: 2 }} />\r\n                                            <Grid container sx={{ background: '' }}>\r\n                                                <Grid item md={6} xs={12} className=\"overflow\" sx={{ pt: 1 }}>\r\n                                                    <span\r\n                                                        style={{\r\n                                                            background: theme.palette.mode === 'dark' ? 'black' : '#d9d9d9',\r\n                                                            padding: '3% 4%',\r\n                                                            borderRadius: '10%',\r\n                                                            color: 'white',\r\n                                                            fontSize: '80%'\r\n                                                        }}\r\n                                                    >\r\n                                                        02h\r\n                                                    </span>{' '}\r\n                                                    :{' '}\r\n                                                    <span\r\n                                                        style={{\r\n                                                            background: theme.palette.mode === 'dark' ? 'black' : '#d9d9d9',\r\n                                                            padding: '3% 4%',\r\n                                                            borderRadius: '10%',\r\n                                                            color: 'white',\r\n                                                            fontSize: '80%'\r\n                                                        }}\r\n                                                    >\r\n                                                        25m\r\n                                                    </span>{' '}\r\n                                                    :{' '}\r\n                                                    <span\r\n                                                        style={{\r\n                                                            background: theme.palette.mode === 'dark' ? 'black' : '#d9d9d9',\r\n                                                            padding: '3% 4%  ',\r\n                                                            borderRadius: '10%',\r\n                                                            color: 'white',\r\n                                                            fontSize: '80%'\r\n                                                        }}\r\n                                                    >\r\n                                                        04s\r\n                                                    </span>\r\n                                                </Grid>\r\n                                                <Grid\r\n                                                    item\r\n                                                    md={6}\r\n                                                    xs={12}\r\n                                                    className=\"overflow\"\r\n                                                    sx={{ pl: 1, marginTop: { xs: '10px', md: '0' } }}\r\n                                                >\r\n                                                    Current Bid\r\n                                                    <div style={{ marginTop: '5%', fontSize: '110%' }}>\r\n                                                        {data.currencyType + ' ' + data.price}\r\n                                                    </div>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </CardContent>\r\n                                    </CardActionArea>\r\n                                </Card>\r\n                            </Grid>\r\n                        ))}\r\n                    </Grid>\r\n                </Grid>\r\n            ) : (\r\n                <Grid item xs={12}>\r\n                    <Typography\r\n                    className='fontfamily'\r\n                        variant=\"h3\"\r\n                        mt={1}\r\n                        component=\"div\"\r\n                        sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center', color: ' #9498AA' }, textTransform: 'capitalize' }}\r\n                    >\r\n                         Not any similar products found.\r\n                    </Typography>\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SimilarProducts;\r\n","import { useState, useEffect } from 'react';\r\nimport * as React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport '@fontsource/public-sans';\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport AutorenewIcon from '@mui/icons-material/Autorenew';\r\nimport { Typography, Grid, Select, InputLabel, FormControl, MenuItem, Divider } from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { IconButton, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip } from '@mui/material';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nconst Activity = () => {\r\n    const ITEM_HEIGHT = 48;\r\n    const ITEM_PADDING_TOP = 8;\r\n    const MenuProps = {\r\n        PaperProps: {\r\n            style: {\r\n                maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n                width: 250\r\n            }\r\n        }\r\n    };\r\n\r\n    const names = [\r\n        'Oliver Hansen',\r\n        'Van Henry',\r\n        'April Tucker',\r\n        'Ralph Hubbard',\r\n        'Omar Alexander',\r\n        'Carlos Abbott',\r\n        'Miriam Wagner',\r\n        'Bradley Wilkerson',\r\n        'Virginia Andrews',\r\n        'Kelly Snyder'\r\n    ];\r\n\r\n    function getStyles(name, personName) {\r\n        return {\r\n            fontWeight: personName.indexOf(name) === -1 ? theme.typography.fontWeightRegular : theme.typography.fontWeightMedium\r\n        };\r\n    }\r\n    const theme = useTheme();\r\n    const [personName, setPersonName] = React.useState([]);\r\n\r\n    const handleChange = (event) => {\r\n        const {\r\n            target: { value }\r\n        } = event;\r\n        setPersonName(\r\n            // On autofill we get a stringified value.\r\n            typeof value === 'string' ? value.split(',') : value\r\n        );\r\n    };\r\n    const itemData = [\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Vlad556 ',\r\n            to: 'Vlad556 ',\r\n            days: '9 Days ago '\r\n        },\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Alex 67 ',\r\n            to: 'Alex 67 ',\r\n            days: '6 Days ago '\r\n        },\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'cynthia321 ',\r\n            to: 'cynthia321 ',\r\n            days: '60 Days ago '\r\n        },\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Vlad556 ',\r\n            to: 'Vlad556 ',\r\n            days: '79 Days ago '\r\n        }\r\n    ];\r\n    const [search, setSearch] = useState('');\r\n\r\n    return (\r\n        <>\r\n            <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n                <Grid item xs={12} lg={12} md={12}>\r\n                    <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                        <Grid item xs={12}>\r\n                            <Typography\r\n                                color={theme.palette.mode === 'dark' ? '#FFFFFF' : 'black'}\r\n                                className=\"productfigmastyl\"\r\n                                variant=\"h2\"\r\n                                mt={4}\r\n                                component=\"div\"\r\n                                sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' }, textTransform: 'capitalize' }}\r\n                            >\r\n                                Activity\r\n                                <AutorenewIcon />\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <Grid item md={12} sm={12}>\r\n                        <MainCard\r\n                            className=\"tableShadow\"\r\n                            sx={{ background: theme.palette.mode === 'dark' ? '#181C1F' : '#fff' }}\r\n                            title={\r\n                                <Grid container spacing={gridSpacing}>\r\n                                    <Grid item xs={12}>\r\n                                        <div>\r\n                                            <FormControl\r\n                                                sx={{\r\n                                                    background: theme.palette.mode === 'dark' ? '#181C1F' : '#d9d9d9',\r\n                                                    color: theme.palette.mode === 'dark' ? '#ffff' : 'black',\r\n                                                    padding: '10px 10px 10px 10px',\r\n                                                    border: '2px solid #CDCDCD',\r\n                                                    borderRadius: '4px'\r\n                                                }}\r\n                                                fullWidth\r\n                                            >\r\n                                                <Select\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                    displayEmpty\r\n                                                    value={personName}\r\n                                                    onChange={handleChange}\r\n                                                    // input={<OutlinedInput />}\r\n                                                    renderValue={(selected) => {\r\n                                                        if (selected.length === 0) {\r\n                                                            return <em className=\"fontfamily\">filter</em>;\r\n                                                        }\r\n\r\n                                                        return selected.join(', ');\r\n                                                    }}\r\n                                                    MenuProps={MenuProps}\r\n                                                    inputProps={{ 'aria-label': 'Without label' }}\r\n                                                >\r\n                                                    {/* <MenuItem disabled value=\"\">\r\n                                          <em>aiman</em>\r\n                                        </MenuItem> */}\r\n                                                    {names.map((name) => (\r\n                                                        <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\r\n                                                            {name}\r\n                                                        </MenuItem>\r\n                                                    ))}\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                        </div>\r\n                                        {/*    <FormControl  sx={{ background:theme.palette.mode === 'dark' ? '#181C1F'\r\n                                        : '#d9d9d9',color:theme.palette.mode === 'dark' ? '#ffff'\r\n                                        : 'black', border: '2px solid #CDCDCD' , borderRadius:'4px'}} fullWidth>\r\n                                            <InputLabel className='activityTable'  sx={{color:'#CDCDCD'}} id=\"age-select\">Filter</InputLabel>\r\n                                            <Select\r\n                                            variant='standard'\r\n                                                fullWidth\r\n                                                labelId=\"age-select\"\r\n                                                id=\"age\"\r\n                                                name=\"age\"\r\n                                                // defaultValue={formik.values.age}\r\n                                                // onChange={formik.handleChange}\r\n                                                label=\"Age\"\r\n                                            >\r\n                                                <MenuItem value=\"\">\r\n                                                    <em className='activityTable' >Filter</em>\r\n                                                </MenuItem>\r\n                                                <MenuItem value={10}>Ten</MenuItem>\r\n                                                <MenuItem value={20}>Twenty</MenuItem>\r\n                                                <MenuItem value={30}>Thirty</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl> */}\r\n                                    </Grid>\r\n                                </Grid>\r\n                            }\r\n                            content={false}\r\n                        >\r\n                            <Divider />\r\n                            <TableContainer>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell className=\"activityTable\" sx={{ fontSize: '18px !important' }} align=\"center\">\r\n                                                Event{' '}\r\n                                            </TableCell>\r\n                                            <TableCell className=\"activityTable\" sx={{ fontSize: '18px !important' }} align=\"center\">\r\n                                                Price{' '}\r\n                                            </TableCell>\r\n                                            <TableCell className=\"activityTable\" sx={{ fontSize: '18px !important' }} align=\"center\">\r\n                                                From\r\n                                            </TableCell>\r\n                                            <TableCell className=\"activityTable\" sx={{ fontSize: '18px !important' }} align=\"center\">\r\n                                                To{' '}\r\n                                            </TableCell>\r\n                                            <TableCell className=\"activityTable\" sx={{ fontSize: '18px !important' }} align=\"center\">\r\n                                                Date\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    {itemData.map((item) => (\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell className=\"activityTable\" sx={{ fontSize: '15px' }} align=\"center\">\r\n                                                    {item.title}\r\n                                                </TableCell>\r\n                                                <TableCell className=\"activityTable\" sx={{ fontSize: '15px' }} align=\"center\">\r\n                                                    {item.price}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                    className=\"activityTable\"\r\n                                                    sx={{ fontSize: '15px', color: '#2194FF' }}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    {item.from}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                    className=\"activityTable\"\r\n                                                    sx={{ fontSize: '15px', color: '#2194FF' }}\r\n                                                    align=\"center\"\r\n                                                >\r\n                                                    {item.to}\r\n                                                </TableCell>\r\n                                                <TableCell className=\"activityTable\" sx={{ fontSize: '15px' }} align=\"center\">\r\n                                                    {item.days}\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    ))}\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </MainCard>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Activity;\r\n","import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport NFTAbi from '../../../../../contractAbi/NFT.json';\r\nimport { ethers, utils } from 'ethers';\r\nimport FileInput from 'shared/component/FileInput';\r\n\r\n// material-ui\r\nimport {\r\n    AppBar,\r\n    DialogActions,\r\n    Dialog,\r\n    Button,\r\n    InputLabel,\r\n    InputAdornment,\r\n    IconButton,\r\n    Input,\r\n    DialogContent,\r\n    DialogTitle,\r\n    TextField,\r\n    Divider,\r\n    Grid,\r\n    List,\r\n    Slide,\r\n    Toolbar,\r\n    Typography\r\n} from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { updateProperty } from 'redux/brand/actions';\r\n// assets\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { create } from 'ipfs-http-client';\r\nimport { API_URL } from 'utils/axios';\r\nimport axios from 'axios';\r\n\r\n// slide animation\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\n// ===============================|| UI DIALOG - FULL SCREEN ||=============================== //\r\n\r\nexport default function Edit({ open, setOpen, metadata, value, nft, id, editable, proofRequired }) {\r\n    const theme = useTheme();\r\n    const [file, setFile] = useState('');\r\n    // console.log('proofRequired==========??', proofRequired);\r\n    const user = useSelector((state) => state.auth.user);\r\n    const navigate = useNavigate();\r\n\r\n    const dispatch = useDispatch();\r\n    // console.log(metadata, 'metadata', value, 'value');\r\n    const validationSchema = Yup.object({\r\n        // isUpdate: Yup.boolean().default(isUpdate),\r\n        firstName: Yup.string().required('First Name is required!').max(42, 'First Name can not exceed 42 characters'),\r\n        // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid First name'),\r\n        lastName: Yup.string().required('Last Name is required!').max(42, 'Last Name can not exceed 42 characters'),\r\n        // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Last name'),\r\n        file: Yup.mixed().required('File is required!')\r\n        // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Last name'),\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: { firstName: metadata, lastName: value, file: '' },\r\n        // brandAdminData,\r\n        validationSchema,\r\n        onSubmit: async (values) => {\r\n            console.log(values, 'allll data');\r\n\r\n            await dispatch(\r\n                updateProperty({\r\n                    id: id,\r\n                    walletAddress: user?.walletAddress,\r\n                    NFTTokenId: nft.NFTTokens[0].id,\r\n                    NftId: nft.id,\r\n                    fieldName: values.firstName,\r\n                    fieldValue: values.lastName,\r\n                    file: values.file,\r\n                    navigate: navigate,\r\n                    handleClose: handleClose\r\n                })\r\n            );\r\n            setTimeout(() => {\r\n                const singleNft = async () => {\r\n                    await axios\r\n                        .get(API_URL + 'nft/' + nft.id, {})\r\n                        .then(async (data) => {\r\n                            console.log('data from editproperties', data.data.data);\r\n                            let nftData = data.data.data.nft;\r\n\r\n                            console.log('nftData from axios', nftData);\r\n\r\n                            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                            const signer = provider.getSigner();\r\n                            const address = await signer.getAddress();\r\n                            const nft = new ethers.Contract(nftData.contractAddress, NFTAbi.abi, signer);\r\n                            let mintedNFT = await (\r\n                                await nft.updateUri(nftData.NFTTokens[0].tokenId, nftData.tokenUri).catch((error) => {\r\n                                    //  toast.error(error.reason);\r\n                                    //  setLoader(false);\r\n                                    //  setOpen(false);\r\n                                    console.log(error);\r\n                                })\r\n                            ).wait();\r\n                            navigate('/creatorProfile');\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('error', error);\r\n                        });\r\n                };\r\n\r\n                singleNft();\r\n            }, 2000);\r\n        }\r\n    });\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                TransitionComponent={Transition}\r\n                sx={{ width: '80%', margin: '0 auto', maxHeight: '500px' }}\r\n            >\r\n                {/*    <IconButton float=\"left\" color=\"inherit\" onClick={handleClose} aria-label=\"close\" size=\"large\">\r\n                    <CloseIcon />\r\n                </IconButton> */}\r\n\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        className=\"buttonSize\"\r\n                        size=\"large\"\r\n                        sx={{ color: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        <CloseIcon />\r\n                    </Button>\r\n                </DialogActions>\r\n                <Grid container sx={{ pr: 2.5, pl: 2.5 }}>\r\n                    <Grid item xs={12} md={12} lg={12} sx={{ p: 2.5 }}>\r\n                        <form noValidate onSubmit={formik.handleSubmit} id=\"validation-forms\">\r\n                            <Grid container>\r\n                                <Grid item xs={12} md={12} lg={12}>\r\n                                    <InputLabel htmlFor=\"outlined-adornment-password-login\" className=\"textfieldStyle\">\r\n                                        Metadata Name\r\n                                    </InputLabel>\r\n                                    <TextField\r\n                                        className=\"field\"\r\n                                        id=\"firstName\"\r\n                                        name=\"firstName\"\r\n                                        value={formik.values.firstName}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.firstName && Boolean(formik.errors.firstName)}\r\n                                        helperText={formik.touched.firstName && formik.errors.firstName}\r\n                                        fullWidth\r\n                                        variant=\"standard\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} pt={2} pb={2} md={12} lg={12}>\r\n                                    <InputLabel htmlFor=\"outlined-adornment-password-login\" className=\"textfieldStyle\">\r\n                                        Metadata Value\r\n                                    </InputLabel>\r\n                                    <TextField\r\n                                        pt={2}\r\n                                        className=\"field\"\r\n                                        id=\"lastName\"\r\n                                        name=\"lastName\"\r\n                                        value={formik.values.lastName}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.lastName && Boolean(formik.errors.lastName)}\r\n                                        helperText={formik.touched.lastName && formik.errors.lastName}\r\n                                        fullWidth\r\n                                        variant=\"standard\"\r\n                                    />\r\n                                </Grid>\r\n                                {proofRequired == true && (\r\n                                    <Grid item xs={12} pt={1} pb={2} md={12} lg={12}>\r\n                                        <InputLabel htmlFor=\"outlined-adornment-password-login\" className=\"textfieldStyle\">\r\n                                            Add Proof\r\n                                        </InputLabel>\r\n                                        <Grid  ml={-2} item xs={12} md={12} lg={12}>\r\n                                        <FileInput\r\n                                        \r\n                                            className=\"textfieldStyle\"\r\n                                            formik={formik}\r\n                                            accept=\".pdf\"\r\n                                            fieldName=\"file\"\r\n                                            placeHolder=\"Add File\"\r\n                                            variant=\"standard\"\r\n                                        />\r\n                                    </Grid>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </form>\r\n                    </Grid>\r\n                </Grid>\r\n                <DialogActions sx={{mt:-4 , pr: 2.5 }}>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        className=\"buttonSize\"\r\n                        size=\"large\"\r\n                        type=\"submit\"\r\n                        sx={{ color: theme.palette.success.dark }}\r\n                        onClick={() => {\r\n                            formik.handleSubmit();\r\n                        }}\r\n                        color=\"secondary\"\r\n                    >\r\n                        Update\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Container, Grid, Typography, Tooltip } from '@mui/material';\r\nimport ModeEditIcon from '@mui/icons-material/ModeEdit';\r\n// project imports\r\nimport Edit from './editProperties';\r\nimport SubCard from 'ui-component/cards/SubCard';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// =============================|| LANDING - FEATURE PAGE ||============================= //\r\n\r\nconst Properties = ({ nft }) => {\r\n    const theme = useTheme();\r\n    const [propertiesOpen, setPropertiesOpen] = useState(false);\r\n    const [metadata, setMetadata] = useState('');\r\n    const [value, setValue] = useState('');\r\n    const [editable, setEditable] = useState('');\r\n    const [proofRequired, setProofRequired] = useState('');\r\n    const [id, setId] = useState('');\r\n    const buyerNft = useSelector((state) => state.nftReducer.nftBuyer);\r\n    // console.log('nft?.NFTMetaData?', nft?.NFTMetaData );\r\n    const property = [\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <Edit\r\n                open={propertiesOpen}\r\n                id={id}\r\n                setOpen={setPropertiesOpen}\r\n                metadata={metadata}\r\n                value={value}\r\n                nft={nft}\r\n                editable={editable}\r\n                proofRequired={proofRequired}\r\n            />\r\n            <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n                <Grid item xs={12} lg={12} md={12}>\r\n                    <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                        <Grid item xs={12}>\r\n                            <Typography\r\n                                color={theme.palette.mode === 'dark' ? '#FFFFFF' : 'black'}\r\n                                className=\"productfigmastyl\"\r\n                                variant=\"h2\"\r\n                                mt={4}\r\n                                component=\"div\"\r\n                                sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' }, textTransform: 'capitalize' }}\r\n                            >\r\n                                Properties\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                {nft?.NFTMetaData?.length > 0 ? (\r\n                    <>\r\n                        <Grid item xs={12}>\r\n                            <Grid container justifyContent=\"left\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n                                {nft?.NFTMetaData.map((item) => (\r\n                                    <>\r\n                                        <Grid item md={4} lg={2} xs={12} sm={6}>\r\n                                            <SubCard\r\n                                                className=\"property propertyShadow\"\r\n                                                sx={{ background: theme.palette.mode === 'dark' ? '#181C1F' : '#fff' }}\r\n                                            >\r\n                                                <Grid container justifyContent=\"center\" spacing={2}>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography className=\"pbackground\" variant=\"h3\">\r\n                                                            {item.fieldName}\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography\r\n                                                            color={theme.palette.mode === 'dark' ? 'white' : 'black'}\r\n                                                            className=\"centerText encapPropertry\"\r\n                                                            variant=\"h3\"\r\n                                                        >\r\n                                                            {item?.fieldValue}{' '}\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography\r\n                                                            // color={theme.palette.mode === 'dark' ? 'white' : 'black'}\r\n                                                            className=\"plight\"\r\n                                                            variant=\"body2\"\r\n                                                            sx={{ cursor: 'pointer',color:\"blue !important\"}}\r\n                                                            onClick={() => {\r\n                                                                // useNavigate(option.fieldValue)\r\n                                                                window.open(item?.proof, '_blank');\r\n                                                            }}\r\n                                                        >\r\n                                                            <span style={{color:theme.palette.mode === 'dark' ? '#CDCDCD' : 'darkgray'\r\n                                                            ,\r\n                                                             textDecoration:\"underline\"}}>\r\n                                                            {item?.proof ? ' proof of  metadata' : 'no proof'}\r\n                                                            \r\n\r\n\r\n                                                            </span>\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </SubCard>\r\n                                        </Grid>\r\n                                        {buyerNft?.status == 'Redeem' && item?.isEditable == true && (\r\n                                            <Tooltip placement=\"right\" title=\"Edit Properties\">\r\n                                                <ModeEditIcon\r\n                                                    sx={{ color: '#bde2f0 ' }}\r\n                                                    onClick={() => {\r\n                                                        setPropertiesOpen(true);\r\n                                                        setMetadata(item.fieldName);\r\n                                                        setValue(item.fieldValue);\r\n                                                        setEditable(item.isEditable);\r\n                                                        setProofRequired(item.proofRequired);\r\n                                                        setId(item.id);\r\n                                                    }}\r\n                                                />\r\n                                            </Tooltip>\r\n                                        )}\r\n                                    </>\r\n                                ))}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Typography\r\n                                    className=\"fontfamily\"\r\n                                    variant=\"h3\"\r\n                                    mt={2}\r\n                                    component=\"div\"\r\n                                    sx={{\r\n                                        textAlign: { xs: 'center', md: 'left', sm: 'center' },\r\n                                        textTransform: 'capitalize',\r\n                                        color: ' #9498AA'\r\n                                    }}\r\n                                >\r\n                                    No Property Found.\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Properties;\r\n","import { useLocation } from 'react-router-dom';\r\nimport { useTheme } from '@emotion/react';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Grid } from '@mui/material';\r\nimport PropertiesView from './component/productView';\r\nimport SimilarProducts from './component/similarProducts';\r\nimport Activity from './component/activity';\r\nimport Properties from './component/properties';\r\nconst ProductDetails = () => {\r\n    const theme = useTheme();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n    const marketplaceNfts = useSelector((state) => state.marketplaceReducer.marketplaceNfts);\r\n\r\n    return (\r\n        <>\r\n            <Grid\r\n                container-fluid\r\n                md={12}\r\n                lg={12}\r\n                sx={{ ml:{lg:-1},\r\n                    display: { xs: 'block', sm: 'block', md: 'flex', lg: 'flex' },\r\n                    background: 'tranparent',\r\n                    color: theme.palette.mode === 'dark' ? 'white' : '#404040'\r\n                }}\r\n            >\r\n                <Grid item md={12} xs={12} lg={11}>\r\n                    <Grid container-fluid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <Grid container>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <PropertiesView nft={location?.state?.nft} />\r\n                                </Grid>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <Properties nft={location?.state?.nft} />\r\n                                </Grid>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <Activity nft={location?.state?.nft} />\r\n                                </Grid>\r\n\r\n                                <Grid item md={12} xs={12}>\r\n                                    <SimilarProducts nft={location?.state?.nft} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProductDetails;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","const BLOCKCHAIN = \r\n{\r\n    WALLET_ADDRESS: '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651',\r\n    ERC20: '0x44405b9819dd99b331A317f5c76667EcCcf19072'\r\n}\r\n\r\nexport default BLOCKCHAIN\r\n","import PropTypes from 'prop-types';\r\nimport { useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Fragment } from 'react';\r\nimport { Grid, Typography, IconButton, Tooltip, RadioGroup, FormControlLabel, Radio } from '@mui/material';\r\n\r\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined';\r\nimport AddCircleOutlinedIcon from '@mui/icons-material/AddCircleOutlined';\r\n\r\n// Props needed for component formik ,correctOption, setCorrectOption , optionValue , formikFieldName , PlaceHOLDER\r\nconst FileInput = ({ formik, fieldName, placeHolder, accept }) => {\r\n    \r\n    const dispatch = useDispatch();\r\n    const fileRef1 = useRef();\r\n\r\n    return (\r\n        <>\r\n            <Grid item className=\"displayFlex\">\r\n                <Fragment>\r\n                    <Tooltip placement=\"top\" title={accept == 'image/*' ? 'Add Image' : 'Add File'}>\r\n                        <IconButton color=\"primary\" aria-label=\"delete\" size=\"large\" onClick={() => fileRef1.current.click()}>\r\n                            <AddCircleOutlinedIcon sx={{ fontSize: '3.0rem' }} />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <input\r\n                        hidden\r\n                        ref={fileRef1}\r\n                        fullWidth\r\n                        type=\"file\"\r\n                        className=\"chooseFileInput\"\r\n                        accept={accept}\r\n                        onChange={(event) => {\r\n                            \r\n                            formik.setFieldValue(fieldName, event.currentTarget.files[0]);\r\n                        }}\r\n                        error={formik.touched[`${fieldName}`] && Boolean(formik.errors[`${fieldName}`])}\r\n                        helperText={formik.touched[`${fieldName}`] && formik.errors[`${fieldName}`]}\r\n                    />\r\n\r\n                    <Grid className=\"displayFlex\">\r\n                        {formik?.values[`${fieldName}`]?.name?.length < 40 ? (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {formik.values[`${fieldName}`]?.name}\r\n                            </Typography>\r\n                        ) : (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {formik.values[`${fieldName}`]?.name?.substring(0, 40)}\r\n                            </Typography>\r\n                        )}\r\n                        {formik?.values[`${fieldName}`] && (\r\n                            <Typography mt={3.5} variant=\"h5\" ml={2}>\r\n                                {'(' + (formik.values[`${fieldName}`]?.size / 1000000).toFixed(2) + '  mb)'}\r\n                            </Typography>\r\n                        )}\r\n\r\n                            \r\n                        {formik.values[`${fieldName}`] ? (\r\n                            <Tooltip placement=\"top\" title={accept == 'image/*' ? 'Clear Image' : 'Clear Audio'}>\r\n                                <IconButton\r\n                                    style={{ marginTop: '2px' }}\r\n                                    color=\"primary\"\r\n                                    aria-label=\"delete\"\r\n                                    size=\"large\"\r\n                                    onClick={() => {\r\n                                        formik.setFieldValue(fieldName, null);\r\n                                        fileRef1.current.value = null;\r\n                                    }}\r\n                                >\r\n                                    \r\n\r\n                                    <CloseOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                    \r\n                                    \r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        ) : (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {placeHolder}\r\n                            </Typography>\r\n                        )}\r\n                    </Grid>\r\n                </Fragment>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n                <p className={'fileError'}>\r\n                    {formik.touched[`${fieldName}`] && Boolean(formik.errors[`${fieldName}`]) ? formik.errors[`${fieldName}`] : ''}\r\n                </p>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FileInput;\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// ==============================|| CUSTOM SUB CARD ||============================== //\r\n\r\nconst SubCard = forwardRef(({ children, content, contentClass, darkTitle, secondary, sx = {}, contentSX = {}, title, ...others }, ref) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            ref={ref}\r\n            sx={{\r\n                border: '1px solid',\r\n                borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light,\r\n                ':hover': {\r\n                    boxShadow: theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' : '0 2px 14px 0 rgb(32 40 45 / 8%)'\r\n                },\r\n                ...sx\r\n            }}\r\n            {...others}\r\n        >\r\n            {/* card header and action */}\r\n            {!darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h5\">{title}</Typography>} action={secondary} />}\r\n            {darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h4\">{title}</Typography>} action={secondary} />}\r\n\r\n            {/* content & header divider */}\r\n            {title && (\r\n                <Divider\r\n                    sx={{\r\n                        opacity: 1,\r\n                        borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light\r\n                    }}\r\n                />\r\n            )}\r\n\r\n            {/* card content */}\r\n            {content && (\r\n                <CardContent sx={{ p: 2.5, ...contentSX }} className={contentClass || ''}>\r\n                    {children}\r\n                </CardContent>\r\n            )}\r\n            {!content && children}\r\n        </Card>\r\n    );\r\n});\r\n\r\nSubCard.propTypes = {\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    sx: PropTypes.object,\r\n    contentSX: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nSubCard.defaultProps = {\r\n    content: true\r\n};\r\n\r\nexport default SubCard;\r\n"],"sourceRoot":""}