{"version":3,"sources":["views/pages/superAdmin/sbtToken/component/addSbtToken.js","assets/images/bmw1.png","views/pages/superAdmin/sbtToken/component/NftCard.js","views/pages/superAdmin/sbtToken/sbtToken.js","assets/images/icons/image-upload.svg","views/pages/superAdmin/nftManagement/component/mainCard.js","utils/formatNumber.js"],"names":["Transition","forwardRef","props","ref","_jsx","Slide","_objectSpread","direction","addSbtToken","_ref","open","setOpen","_useState","useDispatch","useState","_useState2","_slicedToArray","fieldDataArray","setFieldDataArray","_useState3","_useState4","setLoader","validationSchema","Yup","symbol","required","typeError","Address","max","formik","useFormik","enableReinitialize","initialValues","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","provider","signer","sbt","output","safeMint","tokenId","wrap","_context","prev","next","console","log","unshift","Date","now","toString","ethers","providers","Web3Provider","window","ethereum","getSigner","getAddress","sent","Contract","SBTAddress","address","SBTAbi","abi","map","obj","Object","keys","sort","key","SBTName","catch","error","wait","parseInt","events","args","stop","_x","apply","arguments","handleFieldNameChange","value","index","array","_toConsumableArray","fieldName","handleFieldValueChange","fieldValue","handleRemoveField","splice","_Fragment","children","_jsxs","Dialog","maxWidth","TransitionComponent","keepMounted","DialogTitle","id","className","Divider","DialogContent","autoComplete","handleSubmit","Grid","container","mt","xs","md","lg","TextField","name","label","fullWidth","onChange","handleChange","touched","Boolean","errors","helperText","variant","pl","pr","Button","sx","float","padding","onClick","concat","length","spacing","slice","data","item","e","target","IconButton","color","edge","size","Icon","icon","closeFill","width","height","DialogActions","AnimateButton","type","my","ml","disableElevation","resetForm","NftCard","nftData","categoryId","search","page","limit","theme","useTheme","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","_useState15","brandId","nftName","nftDescription","nftPrice","mintType","currencyType","fileDataArray","images","_useState16","MainCard","content","boxShadow","position","transform","transition","Card","_defineProperty","palette","mode","background","maxHeight","borderRadius","marginBottom","xl","CardActionArea","CardMedia","component","objectFit","image","img","CardContent","p","Tooltip","placement","title","Typography","textDecoration","textTransform","overflow","arrow","marginRight","Switch","sbtToken","useNavigate","_location$state","location","useLocation","useSelector","state","auth","user","setPage","addNftOpen","setAddNftOpen","nftList","nftReducer","Token","nftType","marginLeft","marginTop","textAlign","gridSpacing","sm","Nftcard","justifyContent","Pagination","showFirstButton","showLastButton","count","pages","event","newPage","headerSX","mr","_ref$border","border","_ref$content","_ref$contentClass","contentClass","_ref$contentSX","contentSX","darkTitle","secondary","shadow","_ref$sx","others","_objectWithoutProperties","_excluded","borderColor","default","primary","CardHeader","action"],"mappings":"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","file":"static/js/46.d5151075.chunk.js","sourcesContent":["import { forwardRef, useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Tooltip from '@mui/material/Tooltip';\r\n\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    TextField,\r\n    Divider,\r\n    Box,\r\n    Link,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    IconButton,\r\n    MenuItem,\r\n    CircularProgress\r\n} from '@mui/material';\r\n\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Switch } from '@mui/material';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Icon } from '@iconify/react';\r\n// import { addNft } from 'redux/nftManagement/actions';\r\nimport { fData } from 'utils/formatNumber';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport fileFill from '@iconify-icons/eva/file-fill';\r\nimport closeFill from '@iconify-icons/eva/close-fill';\r\nimport UploadImage from 'assets/images/icons/image-upload.svg';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport clsx from 'clsx';\r\nimport { DataArraySharp } from '@mui/icons-material';\r\n\r\nimport { ethers, utils } from 'ethers';\r\nimport SBTAddress from \"contractAbi/SBT-address.json\";\r\nimport SBTAbi from \"contractAbi/SBT.json\";\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\n\r\nexport default function addSbtToken({ open, setOpen }) {\r\n    const dispatch = useDispatch();\r\n    // const user = useSelector((state) => state.auth.user);\r\n\r\n\r\n    const [fieldDataArray, setFieldDataArray] = useState([\r\n\r\n\r\n\r\n    ]);\r\n    const [loader, setLoader] = useState(false);\r\n\r\n\r\n\r\n    const handleError = (fieldDataArray, values) => {\r\n\r\n        let isValid = true;\r\n\r\n\r\n        if (fieldDataArray.length == 0) {\r\n            isValid = false;\r\n            toast.error('Metadata is required');\r\n        }\r\n\r\n        fieldDataArray.map((array) => {\r\n            if (array.fieldName == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata name cannot be empty`);\r\n            } else if (array.fieldValue == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata value cannot be empty`);\r\n            }\r\n        });\r\n\r\n        console.log('im here');\r\n\r\n\r\n        return isValid;\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        symbol: Yup.string()\r\n            .required('Symbol required')\r\n            .typeError('Invalid Symbol'),\r\n        // image: Yup.mixed(),\r\n        Address: Yup.string()\r\n            .required('Address is required!')\r\n            .max(1000, 'Invalid address can not exceed 1000 characters')\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            symbol: '',\r\n            Address: ''\r\n        },\r\n        validationSchema,\r\n        onSubmit: async (values) => {\r\n\r\n\r\n            console.log(\"values\", values)\r\n\r\n            fieldDataArray.unshift({\r\n                \"fieldName\": \"Validtype\",\r\n                \"fieldValue\": \"true\"\r\n            },\r\n                {\r\n                    \"fieldName\": \"Date\",\r\n                    \"fieldValue\": Date.now().toString()\r\n                }\r\n            )\r\n\r\n            console.log(\"fieldDataArray\", fieldDataArray)\r\n\r\n\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const address = await signer.getAddress();\r\n\r\n            const sbt = new ethers.Contract(SBTAddress.address, SBTAbi.abi, signer);\r\n\r\n            var output = fieldDataArray.map(function(obj) {\r\n                return Object.keys(obj).sort().map(function(key) { \r\n                  return obj[key];\r\n                });\r\n              });\r\n\r\n\r\n            console.log(\"tuple\", values.SBTName, values.symbol, output, values.Address);\r\n            console.log(\"tuple array\",output );\r\n\r\n\r\n          \r\n            let safeMint = await (\r\n                await sbt.safeMint(values.SBTName, values.symbol, output, values.Address).catch((error) => {\r\n                    console.log(error);\r\n                })\r\n            ).wait();\r\n            \r\n            const tokenId = parseInt(safeMint.events[0].args[2])\r\n            console.log(\"tokenId\", tokenId);\r\n            console.log(\"safeMint\", safeMint)\r\n\r\n        }\r\n    });\r\n\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n        setFieldDataArray([]);\r\n        setLoader(false);\r\n    };\r\n\r\n    const handleFieldNameChange = (value, index) => {\r\n        let array = [...fieldDataArray];\r\n        array[index].fieldName = value;\r\n        setFieldDataArray(array);\r\n    };\r\n    const handleFieldValueChange = (value, index) => {\r\n        let array = [...fieldDataArray];\r\n        array[index].fieldValue = value;\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n\r\n\r\n    const handleRemoveField = (index) => {\r\n        let array = [...fieldDataArray];\r\n        array.splice(index, 1);\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                // className=\"brandDialog \"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\" className=\"adminname\">\r\n                    Add Token\r\n                </DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid container mt={1}>\r\n                            <Grid xs={4} md={4} lg={4}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"SBTName\"\r\n                                    name=\"SBTName\"\r\n                                    label=\"SBT Name\"\r\n                                    fullWidth\r\n                                    value={formik.values.SBTName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.SBTName && Boolean(formik.errors.SBTName)}\r\n                                    helperText={formik.touched.SBTName && formik.errors.SBTName}\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid xs={4} md={4} lg={4} pl={2} pr={2}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"symbol\"\r\n                                    name=\"symbol\"\r\n                                    label=\"Symbol\"\r\n                                    fullWidth\r\n                                    value={formik.values.symbol}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.symbol && Boolean(formik.errors.symbol)}\r\n                                    helperText={formik.touched.symbol && formik.errors.symbol}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} mt={1}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"Address\"\r\n                                    name=\"Address\"\r\n                                    label=\"Address\"\r\n                                    fullWidth\r\n                                    value={formik.values.Address}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.Address && Boolean(formik.errors.Address)}\r\n                                    helperText={formik.touched.Address && formik.errors.Address}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid xs={12} mt={2}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'left', padding: { md: ' 6px 38px', lg: '6px 38px' } }}\r\n                                    onClick={() => {\r\n                                        setFieldDataArray([\r\n                                            ...fieldDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue:'',\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add Metadata\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {fieldDataArray.length != 0 && (\r\n                            <>\r\n                                <Grid container spacing={4} sx={{ mt: 1 }}>\r\n                                    {fieldDataArray.length == 1\r\n\r\n                                        &&\r\n                                        <>\r\n\r\n\r\n                                            {fieldDataArray.slice(2).map((data, index) => (\r\n                                                <>\r\n                                                    <Grid item xs={5} md={3}>\r\n                                                        <TextField\r\n                                                            id=\"field_name\"\r\n                                                            className=\"textfieldStyle\"\r\n                                                            name=\"field_name\"\r\n                                                            label=\"Metadata Name\"\r\n                                                            value={data.fieldName}\r\n                                                            onChange={(e) => {\r\n                                                                handleFieldNameChange(e.target.value, index);\r\n                                                            }}\r\n                                                            variant=\"standard\"\r\n                                                            fullWidth\r\n                                                        />\r\n                                                    </Grid>\r\n\r\n                                                    <Grid item xs={5} md={3}>\r\n                                                        <TextField\r\n                                                            className=\"textfieldStyle\"\r\n                                                            id=\"field_value\"\r\n                                                            name=\"field_value\"\r\n                                                            label=\"Metadata Value\"\r\n                                                            value={data.fieldValue}\r\n                                                            onChange={(e) => {\r\n                                                                handleFieldValueChange(e.target.value, index);\r\n                                                            }}\r\n                                                            variant=\"standard\"\r\n                                                            fullWidth\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item xs={2} mt={2} md={3}>\r\n                                                        <IconButton\r\n                                                            color=\"error\"\r\n                                                            edge=\"end\"\r\n                                                            size=\"small\"\r\n                                                            onClick={() => {\r\n                                                                handleRemoveField(index);\r\n                                                            }}\r\n                                                        >\r\n                                                            <Icon icon={closeFill} width={28} height={28} />\r\n                                                        </IconButton>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={2} mt={2} md={3}></Grid>\r\n                                                </>\r\n                                            ))}\r\n                                        </>\r\n                                    }\r\n                                    {fieldDataArray?.map((data, index) => (\r\n                                        <>\r\n                                            <Grid item xs={5} md={3}>\r\n                                                <TextField\r\n                                                    id=\"field_name\"\r\n                                                    className=\"textfieldStyle\"\r\n                                                    name=\"field_name\"\r\n                                                    label=\"Metadata Name\"\r\n                                                    value={data.fieldName}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldNameChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={5} md={3}>\r\n                                                <TextField\r\n                                                    className=\"textfieldStyle\"\r\n                                                    id=\"field_value\"\r\n                                                    name=\"field_value\"\r\n                                                    label=\"Metadata Value\"\r\n                                                    value={data.fieldValue}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldValueChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2} md={3}>\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        handleRemoveField(index);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2} md={3}></Grid>\r\n                                        </>\r\n                                    ))}\r\n\r\n                                </Grid>\r\n                            </>\r\n                        )}\r\n\r\n                    </form>\r\n                    <Grid container>\r\n                        <DialogActions>\r\n                            <>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                        onClick={() => {\r\n                                            formik.handleSubmit();\r\n                                        }}\r\n                                        className=\"buttons\"\r\n                                        size=\"large\"\r\n                                        disableElevation\r\n                                    >\r\n                                        Add\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        className=\"buttons\"\r\n                                        size=\"large\"\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                        onClick={handleClose}\r\n                                        color=\"error\"\r\n                                        disableElevation\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </>\r\n                        </DialogActions>\r\n                    </Grid>\r\n                </DialogContent>\r\n\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/bmw1.fd231971.png\";","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Button, CardContent, CardMedia, Grid, Stack, Typography, CardActionArea, Card, Tooltip } from '@mui/material';\r\nimport MainCard from '../../nftManagement/component/mainCard';\r\n// import DetailsDialog from './details';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport img from \"assets/images/bmw1.png\"\r\nimport { useEffect } from 'react';\r\nimport { Switch } from '@mui/material';\r\n\r\nconst NftCard = ({ nftData, categoryId, search, page, limit, type }) => {\r\n    const dispatch = useDispatch();\r\n    const [loader, setLoader] = useState(false);\r\n    const theme = useTheme();\r\n    // console.log(nftData,'nftData')\r\n\r\n    const [openRequestMint, setOpenRequestMint] = useState(false);\r\n    const [editNftOpen, setEditNftOpen] = useState(false);\r\n    const [editable, seteditable] = useState(false);\r\n    const [deleteNftOpen, setDeleteNftOpen] = useState(false);\r\n    const [DetailsNftOpen, setDetailsNftOpen] = useState(false);\r\n    const [image, setImage] = useState([]);\r\n    const [nftInfo, setNftInfo] = useState({\r\n        id: null,\r\n        brandId: null,\r\n        nftName: '',\r\n        nftDescription: '',\r\n        nftPrice: 0,\r\n        mintType: 'directMint',\r\n        currencyType: 'USDT',\r\n        fieldDataArray: [],\r\n        fileDataArray: [],\r\n        images: []\r\n    });\r\n\r\n    // useEffect(() => {\r\n    //     const length = nftData.asset.split('/').length;\r\n    //     setImage([\r\n    //         {\r\n    //             image: { name: nftData.asset.split('/')[length - 1] },\r\n    //             quantity: nftData.NFTTokens.length\r\n    //         }\r\n    //     ]);\r\n    // }, [nftData]);\r\n    return (\r\n        <>\r\n            {/* <DetailsDialog open={DetailsNftOpen} \r\n            setOpen={setDetailsNftOpen} \r\n            nftData={nftData} /> */}\r\n            <MainCard\r\n                content={false}\r\n                className='tableShadow'\r\n                boxShadow\r\n                sx={{\r\n                    position: 'relative',\r\n                    '&:hover': {\r\n                        transform: 'scale3d(1.02, 1.02, 1)',\r\n                        transition: 'all .4s ease-in-out'\r\n                    }\r\n                }}\r\n            >\r\n                <Card\r\n                    sx={{\r\n                        maxWidth: 345,\r\n                        color: theme.palette.mode === 'dark' ? 'white' : '#404040',\r\n                        background: theme.palette.mode === 'dark' ? '#181C1F' : 'white',\r\n                        // maxWidth: nfts && nfts?.length > 3? 0 : 365,\r\n                        width: '100%',\r\n                        maxHeight: '410px',\r\n                        // boxShadow: '1px 2px 6px #d3d3d3',\r\n                        borderRadius: '3px',\r\n                        marginBottom: '10px',\r\n                        maxWidth: { xl: '100%' },\r\n                    }} >\r\n                    <CardActionArea>\r\n                        <CardMedia component=\"img\" height=\"220\" sx={{ objectFit: 'scale-down' }} image={img} />\r\n                        {/* <img src={img} alt='' height=\"220\" /> */}\r\n                        <CardContent sx={{ p: 2 }}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={9}>\r\n                                    <Tooltip placement=\"left\" title='aaa'>\r\n                                        <Typography variant=\"subtitle1\" className='fontstyling encap-nft'\r\n                                            sx={{ textDecoration: 'none', textTransform: 'capitalize' }}>\r\n                                            arslan\r\n                                            {/* {nftData.name} */}\r\n                                        </Typography>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} mt={-1.5}>\r\n                                    <Tooltip placement=\"left\" title='asss'>\r\n                                        <Typography\r\n                                            className='fontstyling encap-nft'\r\n                                            variant=\"body1\"\r\n                                            sx={{\r\n                                                overflow: 'hidden',\r\n                                                height: 16,\r\n                                                textTransform: 'capitalize'\r\n                                            }}\r\n                                        >\r\n                                            k\r\n                                            {/* {nftData.description} */}\r\n                                        </Typography>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6}>\r\n                                    <Grid item xs={12}>\r\n                                        <Typography variant=\"h6\" className='fontstyling'>\r\n                                            15\r\n                                            {/* {nftData.price} {nftData.currencyType} */}\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    {/* <Grid item xs={12}>\r\n                                <Typography variant=\"h6\" className='fontstyling'>{nftData.NFTTokens.length} Items</Typography>\r\n                            </Grid> */}\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    {/* <Button\r\n\r\n                                        variant=\"contained\"\r\n                                        size=\"small\"\r\n                                        sx={{\r\n                                            marginRight: '10px',\r\n                                            float: 'right',\r\n                                            ':hover': {\r\n                                                boxShadow: 'none'\r\n                                            },\r\n                                            color: '#2F5AFF',\r\n                                            background: '#B9DDFF',\r\n\r\n                                        }}\r\n\r\n                                        onClick={() => {\r\n                                            setDetailsNftOpen(true);\r\n                                        }}\r\n                                    >\r\n                                        Edit\r\n                                    </Button> */}\r\n                                    {/* {data?.isEditable == true && ( */}\r\n                                    <Tooltip\r\n                                        className=\"fontsize\"\r\n                                        title=\"Edit\"\r\n                                        placement=\"top\"\r\n                                        arrow\r\n                                        sx={{\r\n                                            marginRight: '10px',\r\n                                            float: 'right',\r\n                                            ':hover': {\r\n                                                boxShadow: 'none'\r\n                                            },\r\n                                            color: '#2F5AFF',\r\n                                            // background: '#B9DDFF',\r\n\r\n                                        }}\r\n                                    >\r\n                                        <Switch\r\n                                        // value={data.proofRequired}\r\n                                        // checked={data.proofRequired}\r\n                                        // onChange={(e) => handleproof(e, index)}\r\n                                        // inputProps={{ 'aria-label': 'controlled' }}\r\n                                        />\r\n                                    </Tooltip>\r\n                                    {/* )} */}\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </CardContent>\r\n                    </CardActionArea></Card>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NftCard;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Grid, Typography, Pagination, Menu, MenuItem, TextField, Box } from '@mui/material';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport Token from './component/addSbtToken';\r\n// import { getAllNft } from '../../../../redux/nftManagement/actions';\r\nimport Nftcard from './component/NftCard';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nconst typeArray = [\r\n    {\r\n        value: 'all',\r\n        label: \"All NFT'S\"\r\n    },\r\n    {\r\n        value: 'directMint',\r\n        label: 'Minted NFTS'\r\n    },\r\n    {\r\n        value: 'lazyMint',\r\n        label: \"Lazy Minted NFT'S\"\r\n    },\r\n    {\r\n        value: 'waiting',\r\n        label: 'Waiting For approval'\r\n    },\r\n    {\r\n        value: 'draft',\r\n        label: 'Draft NFTS'\r\n    },\r\n    {\r\n        value: 'rejected',\r\n        label: 'Rejected NFTS'\r\n    }\r\n];\r\n\r\nconst sbtToken = () => {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n\r\n    const user = useSelector((state) => state.auth.user);\r\n    const [type, setType] = useState('all');\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(12);\r\n    const [open, setOpen] = useState();\r\n    const [addNftOpen, setAddNftOpen] = useState(false);\r\n    const [loader, setLoader] = useState(true);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n        setLoader(false);\r\n    };\r\n    // const handleType = (event) => {\r\n    //     setType(event.target.value);\r\n    //     setLimit(12);\r\n    //     setSearch('');\r\n    //     setPage(1);\r\n    // };\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(\r\n    //         getAllNft({\r\n    //             categoryId: location.state.data.CategoryId,\r\n    //             search: search,\r\n    //             page: page,\r\n    //             limit: limit,\r\n    //             type: type,\r\n    //             brandId: user.BrandId,\r\n    //             handleClose: handleClose\r\n    //         })\r\n    //     );\r\n    // }, [search, page, limit, type]);\r\n\r\n    const nftList = useSelector((state) => state.nftReducer.nftList);\r\n\r\n    return (\r\n        <>\r\n            <Token\r\n                open={addNftOpen}\r\n                setOpen={setAddNftOpen}\r\n                data={location?.state?.data}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                nftType={type}\r\n            />\r\n            <MainCard\r\n                className=\"Adminheading\"\r\n\r\n                // title={\r\n                //     <Grid container sx={{ display: 'flex' }}>\r\n                //         <Grid item md={8} xs={12}>\r\n                //             <Typography\r\n                //                 variant=\"h1\"\r\n                //                 component=\"h2\"\r\n                //                 className=\"headingcard\"\r\n                //                 sx={{\r\n                //                     fontWeight: 600, color: theme.palette.mode === 'dark' ? '#fff' : '#000',\r\n                //                     marginLeft: { lg: '-20px', md: '-20px' },\r\n                //                 }}\r\n                //             >\r\n                //                Sbt Token\r\n                //             </Typography>\r\n                //         </Grid>\r\n                //         {/* <Grid item md={4} xs={12}>\r\n                //             <Button\r\n                //                 className=\"buttonSize\"\r\n                //                 sx={{ float: { xs: 'left', md: 'right' }, marginTop: { xs: \"10px\", md: \"0px\" } }}\r\n                //                 variant=\"contained\"\r\n                //                 size=\"large\"\r\n                //                 onClick={() => {\r\n                //                     navigate('/categories');\r\n                //                 }}\r\n                //             >\r\n                //                 Back\r\n                //             </Button>\r\n                //         </Grid> */}\r\n                //     </Grid>\r\n\r\n                // }\r\n\r\n                content={false}\r\n            ></MainCard>\r\n            <MainCard\r\n                className=\"yellow tableShadow\"\r\n                title={\r\n                    <Grid container spacing={4}>\r\n                        <Grid item xs={12} lg={8}>\r\n                            <Typography className=\"mainheading\" variant=\"h1\" component=\"h2\"\r\n                                sx={{ marginLeft: { lg: '48px', md: '48px' }, marginTop: { md: \"6px\" } }}>\r\n                                Sbt Token\r\n                            </Typography>\r\n                        </Grid>\r\n                        {/* <Grid item xs={6} lg={2}>\r\n                            <TextField\r\n                                className=\"selectField selectstyle\"\r\n                                id=\"outlined-select-budget\"\r\n                                select\r\n                                fullWidth\r\n                                value={type}\r\n                                onChange={handleType}\r\n                                variant=\"standard\"\r\n                            >\r\n                                {typeArray.map((option, index) => (\r\n                                    <MenuItem key={index} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        </Grid> */}\r\n                        <Grid item xs={6} lg={2} textAlign=\"end\">\r\n                            <Button\r\n                                className=\"buttonSize\"\r\n                                sx={{ marginLeft: { lg: '-16px', md: '-16px' } }}\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddNftOpen(true);\r\n                                }}\r\n                            >\r\n                                Add Token\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                <Grid container>\r\n                    {/* {(nftList && nftList.nfts && nftList.nfts.rows && nftList.nfts.rows != undefined) ? (\r\n                        <> */}\r\n                    {/* { nftList.nfts.rows.length > 0?(\r\n                        <> */}\r\n                    {' '}\r\n                    <Grid container spacing={gridSpacing} mt={2}\r\n                        sx={{ padding: \"0px 16px\" }}>\r\n                        {/* {nftList.nfts.rows &&\r\n                            nftList.nfts.rows.map((nft, index) => {\r\n                                return ( */}\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <Nftcard\r\n                                className=\"tableShadow\"\r\n                                // nftData={nft}\r\n                                // categoryId={location.state.data.CategoryId}\r\n                                // search={search}\r\n                                // page={page}\r\n                                // limit={limit}\r\n                                // type={type}\r\n                            />\r\n                        </Grid>\r\n                        {/* );\r\n                            })} */}\r\n                    </Grid>\r\n                    <Grid item xs={12} sx={{ p: 3 }}>\r\n                        <Grid container justifyContent=\"center\" spacing={gridSpacing}>\r\n                            <Grid item>\r\n                                <Pagination\r\n                                    page={page}\r\n                                    color=\"primary\"\r\n                                    showFirstButton\r\n                                    showLastButton\r\n                                    count={nftList && nftList.pages}\r\n                                    onChange={(event, newPage) => {\r\n                                        setPage(newPage);\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    {/* </>\r\n                       )\r\n                       :\r\n                       (\r\n                        <Grid item>\r\n                        <Typography className=\"statustypo\" style={{  padding: '20px 20px 20px 70px', fontWeight: '500' }}>\r\n                         No Data Available</Typography>\r\n                    </Grid>\r\n                       )}\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                        <Grid container justifyContent=\"center\" sx={{ width: '80%', m: '15px auto '}}>\r\n                                <Grid item>\r\n                            <CircularProgress disableShrink size={'4rem'} />\r\n                        </Grid>\r\n                                </Grid>\r\n                        </>\r\n                  \r\n                    )} */}\r\n                </Grid>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default sbtToken;\r\n","export default __webpack_public_path__ + \"static/media/image-upload.54137b05.svg\";","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.mode === 'dark' ? theme.palette.background.default : theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow\r\n                            ? shadow ||\r\n                              (theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' : '0 2px 14px 0 rgb(32 40 45 / 8%)')\r\n                            : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","import { replace } from 'lodash';\r\nimport numeral from 'numeral';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function fCurrency(number) {\r\n  return numeral(number).format(Number.isInteger(number) ? '$0,0' : '$0,0.00');\r\n}\r\n\r\nexport function fPercent(number) {\r\n  return numeral(number / 100).format('0.0%');\r\n}\r\n\r\nexport function fNumber(number) {\r\n  return numeral(number).format();\r\n}\r\n\r\nexport function fShortenNumber(number) {\r\n  return replace(numeral(number).format('0.00a'), '.00', '');\r\n}\r\n\r\nexport function fData(number) {\r\n  return numeral(number).format('0.0 b');\r\n}\r\n"],"sourceRoot":""}