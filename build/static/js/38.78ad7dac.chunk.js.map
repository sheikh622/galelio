{"version":3,"sources":["../node_modules/numeral/numeral.js","views/pages/brandAdmin/nftManagement/component/quantitySelector.js","views/pages/brandAdmin/nftManagement/component/addNft.js","views/pages/brandAdmin/nftManagement/component/mainCard.js","views/pages/brandAdmin/nftManagement/component/editNftDialog.js","views/pages/brandAdmin/nftManagement/component/requestForMintDialog.js","views/pages/brandAdmin/nftManagement/component/deleteNftDialog.js","views/pages/brandAdmin/nftManagement/component/details.js","views/pages/brandAdmin/nftManagement/component/nftcard.js","views/pages/brandAdmin/nftManagement/index.js","constants.js","assets/images/icons/image-upload.svg"],"names":["define","numeral","_","VERSION","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","this","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","length","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","leadingCount","abbr","trillion","billion","million","thousand","decimal","neg","Math","includes","indexOf","RegExp","abbreviations","toString","split","toFixed","delimiters","slice","String","i","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","start","reduce","array","callback","TypeError","t","Object","len","k","arguments","multiplier","x","parts","correctionFactor","Array","prototype","call","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","Error","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","cback","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","binary","unformatRegex","concat","filter","item","bytes","suffix","bytesMultiplier","symbols","before","after","toExponential","hours","floor","minutes","seconds","timeArray","QuantitySelector","formik","fileArray","index","style","display","marginRight","Typography","variant","marginTop","TextField","className","id","quantity","onChange","target","setFieldValue","Transition","forwardRef","props","ref","Slide","direction","typeArray","label","AddNft","open","setOpen","data","page","limit","nftType","dispatch","useDispatch","user","useSelector","state","auth","useState","mintType","setMintType","uploadedImages","setUploadedImages","fieldDataArray","setFieldDataArray","setType","loader","setLoader","fileDataArray","setFileDataArray","validationSchema","Yup","nftName","required","nftDescription","nftPrice","typeError","useFormik","enableReinitialize","initialValues","images","onSubmit","values","log","map","fieldValue","fileNameArray","fieldName","isValid","toast","error","size","image","pop","parseInt","handleError","addNft","categoryId","CategoryId","metaDataArray","price","description","currencyType","asset","walletAddress","contractAddress","handleClose","BrandId","hasFile","resetForm","handleDrop","useCallback","acceptedFiles","newUploadedImages","acceptedFile","useDropzone","accept","onDrop","getRootProps","getInputProps","isDragActive","isDragReject","isDragAccept","Dialog","maxWidth","TransitionComponent","keepMounted","DialogTitle","Divider","Grid","container","DialogActions","AnimateButton","Button","sx","my","ml","padding","md","lg","onClick","DialogContent","autoComplete","handleSubmit","mt","xs","fullWidth","handleChange","touched","Boolean","errors","helperText","select","event","option","MenuItem","multiline","rows","float","spacing","handleFieldNameChange","handleFieldValueChange","IconButton","color","edge","handleRemoveField","icon","closeFill","width","height","handleFileFieldNameChange","handleFileFieldValueChange","currentTarget","files","handleFileRemoveField","background","borderRadius","paddingBottom","paddingTop","clsx","Box","textAlign","component","alt","src","UploadImage","Link","underline","List","disablePadding","list","AnimatePresence","file","ListItem","motion","div","ListItemIcon","fileFill","ListItemText","primary","primaryTypographyProps","newFiles","handleRemoveFile","margin","justifyContent","m","CircularProgress","disableShrink","disableElevation","headerSX","mr","MainCard","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","title","others","theme","useTheme","Card","borderColor","palette","mode","default","CardHeader","action","CardContent","currencyTypeArray","EditNftDialog","nftInfo","setCurrencyType","isFile","File","perviousUploadedItems","newUploadedItems","editNft","brandId","useEffect","structuredClone","pr","marginBottom","href","RequestForMintDialog","nftData","checkWallet","window","ethereum","request","method","response","_metamask","isUnlocked","connectWallet","SNACKBAR_OPEN","message","alertSeverity","utils","getAddress","handleMintRequest","erc20Address","BLOCKCHAIN","ERC20","provider","ethers","providers","Web3Provider","signer","getSigner","token","Contract","Erc20","approve","Category","BrandCategories","wait","requestNftForMinting","success","reason","DialogContentText","dark","DeleteNFTDialog","deleteNft","DetailsDialog","status","Brand","fullScreen","onClose","pt","pl","ListItemButton","textTransform","CardMedia","minheight","maxHeight","overflow","cursor","NftCard","openRequestMint","setOpenRequestMint","editNftOpen","setEditNftOpen","deleteNftOpen","setDeleteNftOpen","DetailsNftOpen","setDetailsNftOpen","setImage","setNftInfo","NFTTokens","position","transform","transition","xl","CardActionArea","objectFit","p","Tooltip","placement","textDecoration","Stack","alignItems","NFTMetaData","NFTMetaFiles","NftManagement","navigate","useNavigate","location","useLocation","setSearch","setPage","setLimit","addNftOpen","setAddNftOpen","setAnchorEl","getAllNft","nftList","nftReducer","fontWeight","marginLeft","nfts","undefined","gridSpacing","nft","sm","Pagination","showFirstButton","showLastButton","count","pages","newPage","WALLET_ADDRESS"],"mappings":"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","file":"static/js/38.78ad7dac.chunk.js","sourcesContent":["/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n","import { Typography, TextField } from '@mui/material';\r\nconst QuantitySelector = ({ formik, fileArray, index }) => {\r\n    const handleChange = (value) => {\r\n        fileArray[index].quantity = value;\r\n        formik.setFieldValue('images', fileArray);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: 'flex', marginRight: '10px', }}>\r\n                <Typography variant='h3' style={{ marginTop: '5px', marginRight: '5px' }}>Quantity  </Typography>\r\n\r\n                <TextField\r\n              \r\n               variant='filled'\r\n                    type=\"number\"\r\n                    className=\"quantityField\"\r\n                    id=\"outlined-select-currency-native\"\r\n                    value={fileArray[index].quantity}\r\n                    onChange={(e) => {\r\n                        handleChange(e.target.value);\r\n                    }}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuantitySelector;\r\n","import { forwardRef, useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    TextField,\r\n    Divider,\r\n    Box,\r\n    Link,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    IconButton,\r\n    MenuItem,\r\n    CircularProgress\r\n} from '@mui/material';\r\n\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Icon } from '@iconify/react';\r\nimport { addNft } from 'redux/nftManagement/actions';\r\nimport { fData } from 'utils/formatNumber';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport QuantitySelector from './quantitySelector';\r\nimport fileFill from '@iconify-icons/eva/file-fill';\r\nimport closeFill from '@iconify-icons/eva/close-fill';\r\nimport UploadImage from 'assets/images/icons/image-upload.svg';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport clsx from 'clsx';\r\nimport { DataArraySharp } from '@mui/icons-material';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nconst typeArray = [\r\n    {\r\n        value: 'USDT',\r\n        label: 'USDT'\r\n    }\r\n];\r\n\r\nexport default function AddNft({ open, setOpen, data, search, page, limit, nftType }) {\r\n    const dispatch = useDispatch();\r\n    const user = useSelector((state) => state.auth.user);\r\n    const [mintType, setMintType] = useState('directMint');\r\n    const [uploadedImages, setUploadedImages] = useState([]);\r\n    const [fieldDataArray, setFieldDataArray] = useState([]);\r\n    const [type, setType] = useState('USDT');\r\n    const [loader, setLoader] = useState(false);\r\n    const [fileDataArray, setFileDataArray] = useState([]);\r\n    const handleType = (event) => {\r\n        setType(event.target.value);\r\n    };\r\n\r\n    const handleError = (fieldDataArray, fileDataArray, values) => {\r\n        console.log('im in handle error');\r\n        let isValid = true;\r\n        console.log('fieldDataArray', fieldDataArray);\r\n        console.log('fileDataArray', fileDataArray);\r\n        console.log('values', values);\r\n\r\n        if (fieldDataArray.length == 0) {\r\n            isValid = false;\r\n            toast.error('Metadata is required');\r\n        } \r\n\r\n        // else  (fieldDataArray.length > 0) {\r\n            \r\n            fieldDataArray.map((array) => {\r\n                if (array.fieldName == '') {\r\n                    isValid = false;\r\n                    toast.error(`Metadata name cannot be empty`);\r\n                }\r\n                else if (array.fieldValue == '') {\r\n                    isValid = false;\r\n                    toast.error(`Metadata value cannot be empty`);\r\n                }\r\n            });\r\n        // }\r\n         if (fileDataArray.length == 0) {\r\n            isValid = false;\r\n            toast.error('Proof of Authenticity is required');\r\n        }\r\n\r\n    //    else (fileDataArray.length > 0) {\r\n        console.log('im here 2');\r\n            fileDataArray.map((array) => {\r\n                if (array.fieldName == '') {\r\n                    isValid = false;\r\n                    toast.error(`File name field is mandatory`);\r\n                }\r\n                else if (array.fieldValue == null) {\r\n                    isValid = false;\r\n                    toast.error(`Attach proof of authenticity`);\r\n                }\r\n                else if (array.fieldValue?.size/1000000>5) {\r\n                    isValid = false;\r\n                    toast.error(`Please attach a less than 5 mb proof of authenticity`);\r\n                }\r\n            });\r\n        // }\r\n\r\n         if (values.images.length == 0) {\r\n            toast.error('Please upload a NFT Image');\r\n            isValid = false;\r\n        } else if (values.images[0].image.size / 1000000 > 5) {\r\n            toast.error('Please upload a image less than 5 mb');\r\n            isValid = false;\r\n        } else if (values.images[0].image.name.split('.').pop() !== 'jpg' && \r\n        values.images[0].image.name.split('.').pop() !== 'png')\r\n         {\r\n            toast.error('Upload the files with these extensions: jpg, png, gif');\r\n            isValid = false;\r\n        }else if (parseInt(values.images[0].quantity) <=0) {\r\n            toast.error('NFT Quantity should be atleast one');\r\n            isValid = false;\r\n        }\r\nconsole.log(values.images, 'values.images.length')\r\n\r\n        return isValid;\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        nftName: Yup.string().required('NFT Name is required!').max(60, 'NFT Name can not exceed 60 characters'),\r\n        // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT name'),\r\n        nftDescription: Yup.string()\r\n            .required('NFT Description is required!')\r\n            .max(1000, 'Invalid NFT description can not exceed 1000 characters'),\r\n        // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT description'),\r\n        nftPrice: Yup.number()\r\n            .min(0.000000001, 'Price should be greater than zero')\r\n            .required('NFT Price is required')\r\n            .typeError('Invalid Price')\r\n        // image: Yup.mixed()\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            nftName: '',\r\n            nftDescription: '',\r\n            nftPrice: 0,\r\n            images: []\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            console.log('values', values);\r\n\r\n            let fileArray = fileDataArray.map((data) => {\r\n                return data.fieldValue;\r\n            });\r\n            let fileNameArray = fileDataArray.map((data) => {\r\n                return data.fieldName;\r\n            });\r\n\r\n            let isValid = handleError(fieldDataArray, fileDataArray, values);\r\n            console.log('isValid', isValid);\r\n     \r\n\r\n            if (isValid==true) {\r\n                setLoader(true);\r\n                dispatch(\r\n                    addNft({\r\n                        categoryId: data.CategoryId,\r\n                        mintType: mintType,\r\n                        metaDataArray: fieldDataArray,\r\n                        fileNameArray: fileNameArray,\r\n                        fileArray: fileArray,\r\n                        name: values.nftName,\r\n                        price: values.nftPrice,\r\n                        description: values.nftDescription,\r\n                        currencyType: type,\r\n                        quantity: values.images[0].quantity,\r\n                        asset: values.images[0].image,\r\n                        type: nftType,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        categoryId: data.CategoryId,\r\n                        requesterAddress: user.walletAddress,\r\n                        contractAddress: data.contractAddress,\r\n                        handleClose: handleClose,\r\n                        brandId: user.BrandId\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n\r\n    const hasFile = formik.values.images.length > 0;\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n        setMintType('directMint');\r\n        setType('USDT');\r\n        setUploadedImages([]);\r\n        setFieldDataArray([]);\r\n        setLoader(false);\r\n        setFileDataArray([]);\r\n    };\r\n    const handleDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            let newUploadedImages = [...uploadedImages];\r\n            acceptedFiles.map(async (acceptedFile) => {\r\n                let data = { image: acceptedFile, quantity: 1 };\r\n                newUploadedImages = [...newUploadedImages, data];\r\n            });\r\n            formik.setFieldValue('images', newUploadedImages);\r\n            setUploadedImages(newUploadedImages);\r\n        },\r\n\r\n        [formik.setFieldValue, uploadedImages]\r\n    );\r\n    const handleRemoveFile = (file, index) => {\r\n        const newFiles = [...formik.values.images];\r\n        newFiles.splice(index, 1);\r\n        setUploadedImages(newFiles);\r\n        formik.setFieldValue('images', newFiles);\r\n    };\r\n\r\n    const { getRootProps, getInputProps, isDragActive, isDragReject, isDragAccept } = useDropzone({\r\n        accept: '.jpeg,.png,.jpg,.gif',\r\n        onDrop: handleDrop\r\n    });\r\n\r\n    const handleFieldNameChange = (value, index) => {\r\n        let array = [...fieldDataArray];\r\n        array[index].fieldName = value;\r\n        setFieldDataArray(array);\r\n    };\r\n    const handleFieldValueChange = (value, index) => {\r\n        let array = [...fieldDataArray];\r\n        array[index].fieldValue = value;\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleRemoveField = (index) => {\r\n        let array = [...fieldDataArray];\r\n        array.splice(index, 1);\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleFileFieldNameChange = (value, index) => {\r\n        let array = [...fileDataArray];\r\n        array[index].fieldName = value;\r\n        setFileDataArray(array);\r\n    };\r\n    const handleFileFieldValueChange = (value, index) => {\r\n        let array = [...fileDataArray];\r\n        array[index].fieldValue = value;\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    const handleFileRemoveField = (index) => {\r\n        let array = [...fileDataArray];\r\n        array.splice(index, 1);\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog Nftdialog \"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\" className=\"adminname\">\r\n                    Add NFT\r\n                </DialogTitle>\r\n                <Divider />\r\n                <Grid container>\r\n                    <DialogActions>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                variant={mintType == 'directMint' ? 'contained' : 'outlined'}\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setMintType('directMint');\r\n                                }}\r\n                            >\r\n                                Direct minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant={mintType == 'lazyMint' ? 'contained' : 'outlined'}\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={() => {\r\n                                    setMintType('lazyMint');\r\n                                }}\r\n                            >\r\n                                Lazy minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </DialogActions>\r\n                </Grid>\r\n\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid container mt={1}>\r\n                            <Grid xs={4} md={5} lg={5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftName\"\r\n                                    name=\"nftName\"\r\n                                    label=\"NFT Name\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftName && Boolean(formik.errors.nftName)}\r\n                                    helperText={formik.touched.nftName && formik.errors.nftName}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} md={2} lg={2}></Grid>\r\n                            <Grid xs={4} md={5} lg={5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftPrice\"\r\n                                    name=\"nftPrice\"\r\n                                    label=\"NFT Price\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftPrice}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftPrice && Boolean(formik.errors.nftPrice)}\r\n                                    helperText={formik.touched.nftPrice && formik.errors.nftPrice}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid xs={12} md={12} lg={12} mt={2}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    variant=\"filled\"\r\n                                    id=\"outlined-select-budget\"\r\n                                    select\r\n                                    fullWidth\r\n                                    value={type}\r\n                                    onChange={handleType}\r\n                                >\r\n                                    {typeArray.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Grid>\r\n                            <Grid xs={12} mt={1}>\r\n                                <TextField\r\n                                    multiline\r\n                                    rows={2}\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftDescription\"\r\n                                    name=\"nftDescription\"\r\n                                    label=\"NFT Description\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftDescription}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftDescription && Boolean(formik.errors.nftDescription)}\r\n                                    helperText={formik.touched.nftDescription && formik.errors.nftDescription}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} mt={2}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'left', padding: { md: ' 6px 38px', lg: '6px 38px' } }}\r\n                                    onClick={() => {\r\n                                        setFieldDataArray([\r\n                                            ...fieldDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: ''\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add Metadata\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {fieldDataArray.length != 0 && (\r\n                            <>\r\n                                <Grid container spacing={4} sx={{mt:1}}>\r\n                                    {fieldDataArray.map((data, index) => (\r\n                                        <>\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    id=\"field_name\"\r\n                                                    className=\"textfieldStyle\"\r\n                                                    name=\"field_name\"\r\n                                                    label=\"Metadata Name\"\r\n                                                    value={data.fieldName}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldNameChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    className=\"textfieldStyle\"\r\n                                                    id=\"field_value\"\r\n                                                    name=\"field_value\"\r\n                                                    label=\"Metadata Value\"\r\n                                                    value={data.fieldValue}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldValueChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2}>\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        handleRemoveField(index);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                            </Grid>\r\n                                        </>\r\n                                    ))}\r\n                                </Grid>\r\n                            </>\r\n                        )}\r\n                        <Grid container>\r\n                            <Grid xs={12} mt={2}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'left' }}\r\n                                    onClick={() => {\r\n                                        setFileDataArray([\r\n                                            ...fileDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: null\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add Authenticity Files\r\n                                </Button>\r\n                            </Grid>\r\n                            {fileDataArray.length != 0 && (\r\n                                <>\r\n                                    <Grid container spacing={2} mt={2}>\r\n                                        {fileDataArray.map((data, index) => (\r\n                                            <>\r\n                                                <Grid item xs={5}>\r\n                                                    <TextField\r\n                                                        id=\"field_name\"\r\n                                                        name=\"field_name\"\r\n                                                        label=\"File Name\"\r\n                                                        value={data.fieldName}\r\n                                                        onChange={(e) => {\r\n                                                            handleFileFieldNameChange(e.target.value, index);\r\n                                                        }}\r\n                                                        variant=\"standard\"\r\n                                                        fullWidth\r\n                                                    />\r\n                                                </Grid>\r\n\r\n                                                <Grid item mt={3} xs={5}>\r\n                                                    <input\r\n                                                        type=\"file\"\r\n                                                        id=\"avatar\"\r\n                                                        name=\"avatar\"\r\n                                                        accept=\"image/*,.pdf\"\r\n                                                        onChange={(event) => {\r\n                                                            handleFileFieldValueChange(event.currentTarget.files[0], index);\r\n                                                        }}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} mt={2}>\r\n                                                    <IconButton\r\n                                                        color=\"error\"\r\n                                                        edge=\"end\"\r\n                                                        size=\"small\"\r\n                                                        onClick={() => {\r\n                                                            handleFileRemoveField(index);\r\n                                                        }}\r\n                                                    >\r\n                                                        <Icon icon={closeFill} width={28} height={28} />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                            </>\r\n                                        ))}\r\n                                    </Grid>\r\n                                </>\r\n                            )}\r\n                        </Grid>\r\n\r\n                        {uploadedImages.length !== 1 && (\r\n                            <Grid\r\n                                sx={{ background: '#c5cbe9', borderRadius: '5px', paddingBottom: '2rem', paddingTop: '2rem' }}\r\n                                item\r\n                                lg={12}\r\n                                mt={10}\r\n                            >\r\n                                <div className={clsx('dropZoneContainer', 'xyz')}>\r\n                                    <div\r\n                                        className={clsx('dropZone', {\r\n                                            isDragActive: isDragActive,\r\n                                            isDragAccept: isDragAccept,\r\n                                            isDragReject: isDragReject\r\n                                        })}\r\n                                        {...getRootProps()}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n\r\n                                        <Grid container direction=\"column\">\r\n                                            <Box\r\n                                                textAlign=\"center\"\r\n                                                component=\"img\"\r\n                                                alt=\"Select File\"\r\n                                                src={UploadImage}\r\n                                                sx={{ height: 60 }}\r\n                                            />\r\n\r\n                                            <Box mt={4} textAlign=\"center\" sx={{ ml: { md: 0 } }}>\r\n                                                <Typography variant=\"subtitle\" sx={{ color: 'grey', textAlign: 'center' }}>\r\n                                                    Drop your image or&nbsp;\r\n                                                    <Link underline=\"always\">browse</Link>.&nbsp;\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </div>\r\n                            </Grid>\r\n                        )}\r\n\r\n                        <Grid item lg={12} mt={3}>\r\n                            <List disablePadding className={clsx({ list: hasFile })} sx={{ mt: 3 }}>\r\n                                <AnimatePresence>\r\n                                    {formik.values.images &&\r\n                                        formik.values.images.map((file, index) => (\r\n                                            <ListItem key={file.image.name} component={motion.div} className=\"listItem\">\r\n                                                <ListItemIcon>\r\n                                                    <Icon icon={fileFill} width={32} height={32} />\r\n                                                </ListItemIcon>\r\n                                                <ListItemText\r\n                                                    primary={file.image.name ? file.image.name : ''}\r\n                                                    primaryTypographyProps={{\r\n                                                        variant: 'h3'\r\n                                                    }}\r\n                                                />\r\n                                                {mintType == 'directMint' && (\r\n                                                    <QuantitySelector formik={formik} fileArray={formik.values.images} index={index} />\r\n                                                )}\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => handleRemoveFile(file.image, index)}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                            </ListItem>\r\n                                        ))}\r\n                                </AnimatePresence>\r\n                            </List>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n                <Divider />\r\n                <Grid container>\r\n                    <DialogActions>\r\n                        {loader ? (\r\n                            <DialogActions sx={{ display: 'block', margin: '10px 5px 0px 5px' }}>\r\n                                <Grid container justifyContent=\"center\" sx={{ width: '50%', m: '15px auto ' }}>\r\n                                    <Grid item>\r\n                                        <CircularProgress disableShrink size={'4rem'} />\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                                <Button\r\n                                    className=\"buttons\"\r\n                                    variant=\"Text\"\r\n                                    sx={{ width: '100%', margin: '0px 0px 10px 0px', color: '#2196f3' }}\r\n                                    size=\"large\"\r\n                                >\r\n                                    NFT is being Created...\r\n                                </Button>\r\n                            </DialogActions>\r\n                        ) : (\r\n                            <>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                        onClick={() => {\r\n                                            formik.handleSubmit();\r\n                                        }}\r\n                                        className=\"buttons\"\r\n                                        size=\"large\"\r\n                                        disableElevation\r\n                                    >\r\n                                        Add\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        className=\"buttons\"\r\n                                        size=\"large\"\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                        onClick={handleClose}\r\n                                        color=\"error\"\r\n                                        disableElevation\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </>\r\n                        )}\r\n                    </DialogActions>\r\n                </Grid>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.mode === 'dark' ? theme.palette.background.default\r\n                     : \r\n                    theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow\r\n                            ? shadow ||\r\n                              (theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' :\r\n                               '0 2px 14px 0 rgb(32 40 45 / 8%)')\r\n                            : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} \r\n                    action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","import { forwardRef, useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    TextField,\r\n    Divider,\r\n    Box,\r\n    Link,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    IconButton,\r\n    MenuItem\r\n} from '@mui/material';\r\n\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Icon } from '@iconify/react';\r\nimport { editNft } from 'redux/nftManagement/actions';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport fileFill from '@iconify-icons/eva/file-fill';\r\nimport closeFill from '@iconify-icons/eva/close-fill';\r\nimport QuantitySelector from './quantitySelector';\r\nimport UploadImage from 'assets/images/icons/image-upload.svg';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport clsx from 'clsx';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nconst currencyTypeArray = [\r\n    {\r\n        value: 'USDT',\r\n        label: 'USDT'\r\n    }\r\n];\r\n\r\nexport default function EditNftDialog({ nftInfo, categoryId, type, search, page, limit, loader, setLoader, open, setOpen }) {\r\n    const dispatch = useDispatch();\r\n    const [mintType, setMintType] = useState('directMint');\r\n    const [currencyType, setCurrencyType] = useState('USDT');\r\n    const [fieldDataArray, setFieldDataArray] = useState([]);\r\n    const [fileDataArray, setFileDataArray] = useState([]);\r\n    const [uploadedImages, setUploadedImages] = useState([]);\r\n    const user = useSelector((state) => state.auth.user);\r\n    const handleCurrencyType = (event) => {\r\n        setCurrencyType(event.target.value);\r\n    };\r\n\r\n    const handleError = (fieldDataArray, fileDataArray, values) => {\r\n        console.log('im in handle error');\r\n        let isValid = true;\r\n        console.log('fieldDataArray', fieldDataArray);\r\n        console.log('fileDataArray', fileDataArray);\r\n        console.log('values', values);\r\n\r\n        if (fieldDataArray.length == 0) {\r\n            isValid = false;\r\n            toast.error('Metadata is required');\r\n        } \r\n\r\n        // else  (fieldDataArray.length > 0) {\r\n            \r\n            fieldDataArray.map((array) => {\r\n                if (array.fieldName == '') {\r\n                    isValid = false;\r\n                    toast.error(`Metadata name cannot be empty`);\r\n                }\r\n                else if (array.fieldValue == '') {\r\n                    isValid = false;\r\n                    toast.error(`Metadata value cannot be empty`);\r\n                }\r\n            });\r\n        // }\r\n         if (fileDataArray.length == 0) {\r\n            isValid = false;\r\n            toast.error('Proof of Authenticity is required');\r\n        }\r\n\r\n    //    else (fileDataArray.length > 0) {\r\n        console.log('im here 2');\r\n            fileDataArray.map((array) => {\r\n                if (array.fieldName == '') {\r\n                    isValid = false;\r\n                    toast.error(`File name field is mandatory`);\r\n                }\r\n                else if (array.fieldValue == null) {\r\n                    isValid = false;\r\n                    toast.error(`Attach proof of authenticity`);\r\n                }\r\n                else if (array.fieldValue?.size/1000000>5) {\r\n                    isValid = false;\r\n                    toast.error(`Please attach a less than 5 mb proof of authenticity`);\r\n                }\r\n            });\r\n        // }\r\n\r\n         if (values.images.length == 0) {\r\n            toast.error('Please upload a NFT Image');\r\n            isValid = false;\r\n        } else if (values.images[0].image.size / 1000000 > 5) {\r\n            toast.error('Please upload a image less than 5 mb');\r\n            isValid = false;\r\n        } else if (values.images[0].image.name.split('.').pop() !== 'jpg' && values.images[0].image.name.split('.').pop() !== 'png') {\r\n            toast.error('Upload the files with these extensions: jpg, png, gif');\r\n            isValid = false;\r\n        }else if (parseInt(values.images[0].quantity) <=0) {\r\n            toast.error('NFT Quantity should be atleast one');\r\n            isValid = false;\r\n        }\r\n\r\n\r\n        return isValid;\r\n    };\r\n\r\n\r\n    const validationSchema = Yup.object({\r\n        nftName: Yup.string()\r\n            .required('NFT Name is required!')\r\n            .max(60, 'NFT Name can not exceed 60 characters'),\r\n            // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT name'),\r\n        nftDescription: Yup.string()\r\n            .required('NFT Description is required!')\r\n            .max(1000, 'Invalid NFT description can not exceed 1000 characters'),\r\n        // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT description'),\r\n        nftPrice: Yup.number()\r\n            .min(0.000001, 'Price should not less than zero')\r\n            .required('NFT Price is required')\r\n            .typeError('Invalid Price'),\r\n        images: Yup.mixed()\r\n        // .when(['isUpdate'], {\r\n        //     is: true,\r\n        //     then: Yup.mixed(),\r\n        //     otherwise: Yup.mixed().required('Image is required')\r\n        // })\r\n\r\n        // .test('image size',\r\n        //  'this image is too large', (value) => !value || (value && value.size <= 1_000_000))\r\n\r\n    });\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: nftInfo,\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            let file = values.images[0].image;\r\n            let isFile = file instanceof File;\r\n\r\n            let perviousUploadedItems = fileDataArray.filter((data) => {\r\n                if (typeof data.fieldValue === 'string') return data;\r\n            });\r\n\r\n            let newUploadedItems = fileDataArray.filter((data) => {\r\n                if (typeof data.fieldValue !== 'string') return data;\r\n            });\r\n\r\n            let fileArray = newUploadedItems.map((data) => {\r\n                return data.fieldValue;\r\n            });\r\n            let fileNameArray = newUploadedItems.map((data) => {\r\n                return data.fieldName;\r\n            });\r\n\r\n            let isValid = handleError(fieldDataArray, fileDataArray, values, isFile);\r\n\r\n            if (isValid) {\r\n                dispatch(\r\n                    editNft({\r\n                        id: nftInfo.id,\r\n                        name: values.nftName,\r\n                        price: values.nftPrice,\r\n                        description: values.nftDescription,\r\n                        quantity: values.images[0].quantity,\r\n                        asset: isFile ? values.images[0].image : null,\r\n                        isFile: isFile,\r\n                        currencyType: currencyType,\r\n                        mintType: mintType,\r\n                        metaDataArray: fieldDataArray,\r\n                        fileNameArray: fileNameArray,\r\n                        fileArray: fileArray,\r\n                        perviousUploadedItems: perviousUploadedItems,\r\n                        type: type,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        categoryId: categoryId,\r\n                        brandId: nftInfo.brandId,\r\n                        handleClose: handleClose\r\n                        // brandId: user.BrandId\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n\r\n    const hasFile = formik.values.images.length > 0;\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n    const handleDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            let newUploadedImages = [...uploadedImages];\r\n            acceptedFiles.map(async (acceptedFile) => {\r\n                let data = { image: acceptedFile, quantity: 1 };\r\n                newUploadedImages = [...newUploadedImages, data];\r\n            });\r\n            formik.setFieldValue('images', newUploadedImages);\r\n            setUploadedImages(newUploadedImages);\r\n        },\r\n\r\n        [formik.setFieldValue, uploadedImages]\r\n    );\r\n    const handleRemoveFile = (index) => {\r\n        const newFiles = [...formik.values.images];\r\n        newFiles.splice(index, 1);\r\n        setUploadedImages(newFiles);\r\n        formik.setFieldValue('images', newFiles);\r\n    };\r\n\r\n    const { getRootProps, getInputProps, isDragActive, isDragReject, isDragAccept } = useDropzone({\r\n        accept: '.jpeg,.png,.jpg,.gif',\r\n        onDrop: handleDrop\r\n    });\r\n\r\n    const handleFieldNameChange = (value, index) => {\r\n        let array = structuredClone(fieldDataArray);\r\n        array[index].fieldName = value;\r\n        setFieldDataArray(array);\r\n    };\r\n    const handleFieldValueChange = (value, index) => {\r\n        let array = structuredClone(fieldDataArray);\r\n        array[index].fieldValue = value;\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleRemoveField = (index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array.splice(index, 1);\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleFileFieldNameChange = (value, index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array[index].fieldName = value;\r\n        setFileDataArray(array);\r\n    };\r\n    const handleFileFieldValueChange = (value, index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array[index].fieldValue = value;\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    const handleFileRemoveField = (index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array.splice(index, 1);\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setFieldDataArray(nftInfo.fieldDataArray);\r\n        setFileDataArray(nftInfo.fileDataArray);\r\n        setMintType(nftInfo.mintType);\r\n        setCurrencyType(nftInfo.currencyType);\r\n        setUploadedImages(nftInfo.images);\r\n    }, [nftInfo]);\r\n\r\n    useEffect(() => {}, [fileDataArray]);\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog Nftdialog\"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1 \" className=\"adminname\">\r\n                    Edit NFT\r\n                </DialogTitle>\r\n                <Divider />\r\n                <Grid container>\r\n                    {/* <DialogActions>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                variant={mintType == 'directMint' ? 'contained' : 'outlined'}\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setMintType('directMint');\r\n                                }}\r\n                            >\r\n                                Direct minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant={mintType == 'lazyMint' ? 'contained' : 'outlined'}\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={() => {\r\n                                    setMintType('lazyMint');\r\n                                }}\r\n                            >\r\n                                Lazy minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </DialogActions> */}\r\n                </Grid>\r\n\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid container mt={1}>\r\n                            <Grid xs={4} md={5} lg={5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftName\"\r\n                                    name=\"nftName\"\r\n                                    label=\"NFT Name\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftName && Boolean(formik.errors.nftName)}\r\n                                    helperText={formik.touched.nftName && formik.errors.nftName}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} md={2} lg={2}></Grid>\r\n                            <Grid xs={4} md={5} lg={5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftPrice\"\r\n                                    name=\"nftPrice\"\r\n                                    label=\"NFT Price\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftPrice}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftPrice && Boolean(formik.errors.nftPrice)}\r\n                                    helperText={formik.touched.nftPrice && formik.errors.nftPrice}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} md={12} lg={12} mt={2}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"outlined-select-budget\"\r\n                                    select\r\n                                    fullWidth\r\n                                    variant=\"filled\"\r\n                                    value={currencyType}\r\n                                    onChange={handleCurrencyType}\r\n                                >\r\n                                    {currencyTypeArray.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Grid>\r\n                            <Grid xs={12} md={12} lg={12} mt={2}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    multiline\r\n                                    rows={2}\r\n                                    id=\"nftDescription\"\r\n                                    name=\"nftDescription\"\r\n                                    label=\"NFT Description\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftDescription}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftDescription && Boolean(formik.errors.nftDescription)}\r\n                                    helperText={formik.touched.nftDescription && formik.errors.nftDescription}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} mt={2}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'left', padding: { md: ' 6px 38px', lg: '6px 38px' } }}\r\n                                    onClick={() => {\r\n                                        setFieldDataArray([\r\n                                            ...fieldDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: ''\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add more fields\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {fieldDataArray.length != 0 && (\r\n                            <>\r\n                                <Grid container spacing={4} mt={1}>\r\n                                    {fieldDataArray.map((data, index) => (\r\n                                        <>\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    className=\"textfieldStyle\"\r\n                                                    id=\"field_name\"\r\n                                                    name=\"field_name\"\r\n                                                    label=\"Metadata Name\"\r\n                                                    value={data.fieldName}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldNameChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    className=\"textfieldStyle\"\r\n                                                    id=\"field_value\"\r\n                                                    name=\"field_value\"\r\n                                                    label=\"Metadata Value\"\r\n                                                    value={data.fieldValue}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldValueChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2}>\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        handleRemoveField(index);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                            </Grid>\r\n                                        </>\r\n                                    ))}\r\n                                </Grid>\r\n                            </>\r\n                        )}\r\n                        <Grid container>\r\n                            <Grid xs={12} mt={2} pr={3}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'left' }}\r\n                                    onClick={() => {\r\n                                        setFileDataArray([\r\n                                            ...fileDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: null\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add Authenticity Files\r\n                                </Button>\r\n                            </Grid>\r\n                            {fileDataArray?.length != 0 && (\r\n                                <>\r\n                                    <Grid container spacing={2} mt={1}>\r\n                                        {fileDataArray?.map((data, index) => (\r\n                                            <>\r\n                                                <Grid item xs={5}>\r\n                                                      <TextField\r\n                                                        id=\"field_name\"\r\n                                                        name=\"field_name\"\r\n                                                        label=\"File Name\"\r\n                                                        value={data.fieldName}\r\n                                                        onChange={(e) => {\r\n                                                            handleFileFieldNameChange(e.target.value, index);\r\n                                                        }}\r\n                                                        variant=\"standard\"\r\n                                                        fullWidth\r\n                                                    />\r\n                                                </Grid>\r\n\r\n                                         \r\n                                                \r\n\r\n                                                <Grid item xs={5} mt={3}>\r\n                                                <span style={{marginBottom:\"10%\"}}>\r\n                                                    <a target=\"_blank\" href={data?.fieldValue} style={{color:\"white\"}}>\r\n                                                        {data.fieldValue.length > 1\r\n                                                        ?\r\n                                                        <>\r\n                                                        {data?.fieldValue?.slice(61)}\r\n                                                        \r\n                                                        </>\r\n                                                        :\r\n                                                        <>\r\n                                                        \r\n                                                        </>\r\n                                                        \r\n                                                        }\r\n                                                    </a>\r\n                                                    <input\r\n                                                    style={{display:\"inlineBlock\"}}\r\n                                                    type=\"file\"\r\n                                                    id=\"avatar\"\r\n                                                    name=\"avatar\"\r\n                                                    accept=\"image/*,.pdf\"\r\n                                                    onChange={(event) => {\r\n                                                        handleFileFieldValueChange(event.currentTarget.files[0], index);\r\n                                                    }}\r\n                                                />\r\n                                                </span>\r\n\r\n                                                \r\n                                                </Grid>\r\n                                                {/* <div style={{marginTop:\"3%\", marginLeft:\"2%\"}}><b>Previous file: </b><a target=\"_blank\" href={data.fieldValue}>{data.fieldValue}</a></div> */}\r\n                                                <Grid item xs={2} mt={2}>\r\n                                                    <IconButton\r\n                                                        color=\"error\"\r\n                                                        edge=\"end\"\r\n                                                        size=\"small\"\r\n                                                        onClick={() => {\r\n                                                            handleFileRemoveField(index);\r\n                                                        }}\r\n                                                    >\r\n                                                        <Icon icon={closeFill} width={28} height={28} />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                            </>\r\n                                        ))}\r\n                                    </Grid>\r\n                                </>\r\n                            )}\r\n                        </Grid>\r\n\r\n                        {uploadedImages.length !== 1 && (\r\n                            <Grid\r\n                                sx={{ background: '#c5cbe9', borderRadius: '5px', paddingBottom: '2rem', paddingTop: '2rem' }}\r\n                                item\r\n                                lg={12}\r\n                                mt={10}\r\n                            >\r\n                                <div className={clsx('dropZoneContainer', 'xyz')}>\r\n                                    <div\r\n                                        className={clsx('dropZone', {\r\n                                            isDragActive: isDragActive,\r\n                                            isDragAccept: isDragAccept,\r\n                                            isDragReject: isDragReject\r\n                                        })}\r\n                                        {...getRootProps()}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n\r\n                                        <Grid container direction=\"column\">\r\n                                            <Box\r\n                                                textAlign=\"center\"\r\n                                                component=\"img\"\r\n                                                alt=\"Select File\"\r\n                                                src={UploadImage}\r\n                                                sx={{ height: 60 }}\r\n                                            />\r\n\r\n                                            <Box mt={4} textAlign=\"center\" sx={{ ml: { md: 0 } }}>\r\n                                                <Typography variant=\"subtitle\" sx={{ color: 'grey', textAlign: 'center' }}>\r\n                                                    Drop your image or&nbsp;\r\n                                                    <Link underline=\"always\">browse</Link>.&nbsp;\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </div>\r\n                            </Grid>\r\n                        )}\r\n\r\n                        <List disablePadding className={clsx({ list: hasFile })} sx={{ mt: 3 }}>\r\n                            <AnimatePresence>\r\n                                {formik.values.images &&\r\n                                    formik.values.images.map((file, index) => (\r\n                                        <ListItem key={file.image.name} component={motion.div} className=\"listItem\">\r\n                                            <ListItemIcon>\r\n                                                <Icon icon={fileFill} width={32} height={32} />\r\n                                            </ListItemIcon>\r\n\r\n                                            <ListItemText\r\n                                                className=\"encap\"\r\n                                                primary={file.image.name ? file.image.name : ''}\r\n                                                // secondary={fData(file.image.size) ? fData(file.image.size) : ''}\r\n                                                // primaryTypographyProps={{\r\n                                                //     variant: 'body2'\r\n                                                // }}\r\n                                            />\r\n                                            {mintType == 'directMint' && (\r\n                                                <QuantitySelector formik={formik} fileArray={formik.values.images} index={index} />\r\n                                            )}\r\n\r\n                                            <IconButton\r\n                                                color=\"error\"\r\n                                                edge=\"end\"\r\n                                                size=\"small\"\r\n                                                onClick={() => handleRemoveFile(file.image, index)}\r\n                                            >\r\n                                                <Icon icon={closeFill} width={28} height={28} />\r\n                                            </IconButton>\r\n                                        </ListItem>\r\n                                    ))}\r\n                            </AnimatePresence>\r\n                        </List>\r\n                    </form>\r\n                </DialogContent>\r\n                <Divider />\r\n                <Grid container>\r\n                    <DialogActions>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={() => {\r\n                                    \r\n                                    formik.handleSubmit();\r\n                                }}\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                disableElevation\r\n                            >\r\n                                Edit\r\n                            </Button>\r\n                        </AnimateButton>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={handleClose}\r\n                                color=\"error\"\r\n                                disableElevation\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </DialogActions>\r\n                </Grid>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    DialogContentText,\r\n    Typography,\r\n    CircularProgress\r\n} from '@mui/material';\r\nimport { requestNftForMinting } from 'redux/nftManagement/actions';\r\nimport Erc20 from '../../../../../contractAbi/Erc20.json';\r\nimport { ethers, utils } from 'ethers';\r\nimport BLOCKCHAIN from '../../../../../constants';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { SNACKBAR_OPEN } from 'store/actions';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function RequestForMintDialog({ open, setOpen, page, limit, search, type, nftData, categoryId }) {\r\n    const theme = useTheme();\r\n    const [loader, setLoader] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setLoader(false);\r\n    };\r\n    const user = useSelector((state) => state.auth.user);\r\n    // console.log('nftData', nftData.Category.BrandCategories[0].contractAddress);\r\n\r\n    const checkWallet = async () => {\r\n        const response = await window?.ethereum?.request({ method: 'eth_requestAccounts' });\r\n        let connectWallet = await ethereum._metamask.isUnlocked();\r\n\r\n        if ((window.ethereum && connectWallet) == false) {\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'No crypto wallet found. Please connect one',\r\n                variant: 'alert',\r\n                alertSeverity: 'info'\r\n            });\r\n            console.log('No crypto wallet found. Please install it.');\r\n            // toast.error('No crypto wallet found. Please install it.');\r\n            setOpen(false);\r\n            setLoader(false);\r\n        }\r\n        \r\n        // else if (window?.ethereum?.networkVersion !== '5') {\r\n        //     dispatch({\r\n        //         type: SNACKBAR_OPEN,\r\n        //         open: true,\r\n        //         message: 'Please change your Chain ID to Goerli',\r\n        //         variant: 'alert',\r\n        //         alertSeverity: 'info'\r\n        //     });\r\n        //     console.log('Please change your Chain ID to Goerli');\r\n        //     setOpen(false);\r\n        //     setLoader(false);\r\n        // }\r\n        \r\n        else if (utils?.getAddress(response[0]) !== user.walletAddress) {\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'Please connect your registered Wallet Address',\r\n                variant: 'alert',\r\n                alertSeverity: 'info'\r\n            });\r\n            console.log('Please connect your registered Wallet Address');\r\n            setOpen(false);\r\n            setLoader(false);\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const handleMintRequest = async () => {\r\n        if (await checkWallet()) {\r\n            try {\r\n                setLoader(true);\r\n                let erc20Address = BLOCKCHAIN.ERC20;\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                const signer = provider.getSigner();\r\n\r\n                const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n\r\n                let data = await (await token.approve(nftData.Category.BrandCategories[0].contractAddress,\"100000000000000000000000000000000000000\")).wait();\r\n\r\n                await dispatch(\r\n                    requestNftForMinting({\r\n                        id: nftData.id,\r\n                        categoryId: categoryId,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        type: type,\r\n                        brandId: user.BrandId,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n                setLoader(false);\r\n                toast.success(\"Please wait for confirmation Notification !\");\r\n            } catch (error) {\r\n                console.log('error', error);\r\n                toast.error(error.reason);\r\n                setOpen(false);\r\n                setLoader(false);\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Request Admin for mint</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to request Admin to mint this NFT?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    {loader ? (\r\n                        <CircularProgress />\r\n                    ) : (\r\n                        <>\r\n                            <Button\r\n                                sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                                onClick={handleClose}\r\n                                color=\"secondary\"\r\n                            >\r\n                                No\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    handleMintRequest();\r\n                                }}\r\n                            >\r\n                                Yes\r\n                            </Button>\r\n                        </>\r\n                    )}\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteNft } from 'redux/nftManagement/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteNFTDialog({ nftInfo, categoryId, type, search, page, limit, loader, setLoader, open, setOpen }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const user = useSelector((state) => state.auth.user);\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\" className=\"statusHeading\">Delete Brand Admin</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\" className=\"statustypo\">\r\n                            Are you sure you want to delete this Admin?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                        className='buttonSize' size='large'\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        className='buttonSize' size='large'\r\n                     \r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteNft({\r\n                                    id: nftInfo.id,\r\n                                    categoryId: categoryId,\r\n                                    type: type,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    brandId: user.BrandId,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef, useState } from 'react';\r\n\r\n// material-ui\r\nimport { AppBar,DialogActions, Button, Dialog, CardMedia,Divider,Grid, IconButton, ListItemText, ListItemButton, List, Slide, Toolbar, Typography } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// assets\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\n// slide animation\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\n// ===============================|| UI DIALOG - FULL SCREEN ||=============================== //\r\n\r\nexport default function DetailsDialog({ open, setOpen, nftData }) {\r\n    const theme = useTheme();\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const status = [\r\n        {\r\n            name: 'Name:',\r\n            value: nftData?.name\r\n        },\r\n        {\r\n            name: 'Status:',\r\n            value: nftData?.status\r\n        },\r\n        {\r\n            name: 'Description:',\r\n            value: nftData?.description\r\n        },\r\n        {\r\n            name: 'Price:',\r\n            value: nftData?.price\r\n        },\r\n        {\r\n            name: 'Mint Type:',\r\n            value: nftData?.mintType\r\n        },\r\n        {\r\n            name: 'Brand:',\r\n            value: nftData?.Brand.name\r\n        },\r\n        {\r\n            name: 'Token URL:',\r\n            value: 'Null'\r\n        }\r\n    ];\r\n    return (\r\n        <div>\r\n           \r\n            <Dialog fullScreen open={open} \r\n            onClose={handleClose} \r\n            TransitionComponent={Transition}>\r\n             {/*    <IconButton float=\"left\" color=\"inherit\" onClick={handleClose} aria-label=\"close\" size=\"large\">\r\n                    <CloseIcon />\r\n                </IconButton> */}\r\n                <DialogActions sx={{ pr: 2.5, pt: 2.5 }}>\r\n                <Button  className='buttonSize' size='large' sx={{ color: theme.palette.error.dark }} onClick={handleClose} color=\"secondary\">\r\n                <CloseIcon />\r\n                </Button>\r\n            </DialogActions>\r\n            <Grid container   sx={{ pr: 2.5,  pl: 2.5, pt: 2.5 }}>\r\n            <Grid item xs={12} md={8} lg={8}  sx={{ pr: 2.5 }}>\r\n                <List>\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail'>Name</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail' sx={{textTransform:'capitalize'}}>{nftData?.name}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail'>Status</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail'>{nftData?.status}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail'>Description</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail' sx={{textTransform:'capitalize'}}>{nftData?.description}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail' >Price</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail'  sx={{textTransform:'capitalize'}}>{nftData?.price}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail' >Mint Type</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail'  sx={{textTransform:'capitalize'}}>{ nftData?.mintType}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider />\r\n                    <ListItemButton>\r\n                        <ListItemText\r\n                            primary={<Typography variant=\"subtitle1\" className='font-in-detail' >Brand Name</Typography>}\r\n                            secondary={<Typography variant=\"caption\" className='font-in-detail'  sx={{textTransform:'capitalize'}}>{nftData?.Brand.name}</Typography>}\r\n                        />\r\n                    </ListItemButton>\r\n                </List>\r\n                </Grid>\r\n                <Grid item  xs={12} md={4} lg={4}>\r\n                <CardMedia\r\n                            \r\n                component=\"img\"\r\n                image={nftData?.asset}\r\n                \r\n                sx={{ minheight: 'auto', maxHeight:'570px',\r\n                 overflow: 'hidden', cursor: 'Pointer' }}\r\n            />\r\n               </Grid></Grid>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Button, CardContent, CardMedia, Grid, Stack, Typography, CardActionArea, Card , Tooltip} from '@mui/material';\r\nimport MainCard from './mainCard';\r\nimport EditNftDialog from './editNftDialog';\r\nimport RequestForMintDialog from './requestForMintDialog';\r\nimport DeleteNFTDialog from './deleteNftDialog';\r\nimport DetailsDialog from './details';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { useEffect } from 'react';\r\nconst NftCard = ({ nftData, categoryId, search, page, limit, type }) => {\r\n    const dispatch = useDispatch();\r\n    const [loader, setLoader] = useState(false);\r\n    const theme = useTheme();\r\n\r\n    const [openRequestMint, setOpenRequestMint] = useState(false);\r\n    const [editNftOpen, setEditNftOpen] = useState(false);\r\n    const [deleteNftOpen, setDeleteNftOpen] = useState(false);\r\n    const [DetailsNftOpen, setDetailsNftOpen] = useState(false);\r\n    const [image, setImage] = useState([]);\r\n    const [nftInfo, setNftInfo] = useState({\r\n        id: null,\r\n        brandId: null,\r\n        nftName: '',\r\n        nftDescription: '',\r\n        nftPrice: 0,\r\n        mintType: 'directMint',\r\n        currencyType: 'USDT',\r\n        fieldDataArray: [],\r\n        fileDataArray: [],\r\n        images: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        const length = nftData.asset.split('/').length;\r\n        setImage([\r\n            {\r\n                image: { name: nftData.asset.split('/')[length - 1] },\r\n                quantity: nftData.NFTTokens.length\r\n            }\r\n        ]);\r\n    }, [nftData]);\r\n    return (\r\n        <>\r\n            <DeleteNFTDialog\r\n                nftInfo={nftInfo}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={deleteNftOpen}\r\n                setOpen={setDeleteNftOpen}\r\n            />\r\n            <EditNftDialog\r\n                nftInfo={nftInfo}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={editNftOpen}\r\n                setOpen={setEditNftOpen}\r\n            />\r\n            <RequestForMintDialog\r\n                nftData={nftData}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={openRequestMint}\r\n                setOpen={setOpenRequestMint}\r\n            />\r\n            <DetailsDialog open={DetailsNftOpen} \r\n            setOpen={setDetailsNftOpen} \r\n            nftData={nftData} />\r\n            <MainCard\r\n                content={false}\r\n                className='tableShadow'\r\n                boxShadow\r\n                sx={{\r\n                    position: 'relative',\r\n                    '&:hover': {\r\n                        transform: 'scale3d(1.02, 1.02, 1)',\r\n                        transition: 'all .4s ease-in-out'\r\n                    }\r\n                }}\r\n            >\r\n            <Card          sx={{ maxWidth: 345,\r\n                color: theme.palette.mode === 'dark' ? 'white' : '#404040',\r\n                background: theme.palette.mode === 'dark' ? '#181C1F' : 'white',\r\n                // maxWidth: nfts && nfts?.length > 3? 0 : 365,\r\n                width:'100%',\r\n                maxHeight:'410px',\r\n                // boxShadow: '1px 2px 6px #d3d3d3',\r\n                borderRadius: '3px',\r\n                marginBottom: '10px',\r\n                maxWidth:{xl:'100%'},\r\n            }} >\r\n            <CardActionArea>\r\n            <CardMedia component=\"img\" height=\"220\" sx={{objectFit:'scale-down'}} image={nftData.asset} />\r\n           \r\n            \r\n              \r\n                <CardContent sx={{ p: 2 }}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={9}>\r\n                        <Tooltip placement=\"left\" title= {nftData.name}>\r\n                            <Typography variant=\"subtitle1\" className='fontstyling encap-nft'\r\n                             sx={{ textDecoration: 'none', textTransform: 'capitalize' }}>\r\n                                {nftData.name}\r\n                            </Typography>\r\n                            </Tooltip>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} mt={-1.5}>\r\n                        <Tooltip placement=\"left\" title= {nftData?.description}>\r\n                        <Typography\r\n                            className='fontstyling encap-nft'\r\n                                variant=\"body1\"\r\n                                sx={{\r\n                                    overflow: 'hidden',\r\n                                    height: 16,\r\n                                    textTransform: 'capitalize'\r\n                                }}\r\n                            >\r\n                                {nftData.description}\r\n                            </Typography>\r\n                            </Tooltip>   \r\n                        </Grid>\r\n\r\n                        <Grid item xs={6}>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\" className='fontstyling'>\r\n                                    {nftData.price} {nftData.currencyType}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\" className='fontstyling'>{nftData.NFTTokens.length} Items</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                          \r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                                sx={{\r\n                                    marginRight: '10px',\r\n                                    float: 'right',\r\n                                    ':hover': {\r\n                                        boxShadow: 'none'\r\n                                    },\r\n                                    color: '#2F5AFF',\r\n                                    background: '#B9DDFF',\r\n                                    \r\n                                }}\r\n                                \r\n                                onClick={() => {\r\n                                    setDetailsNftOpen(true);\r\n                                }}\r\n                            >\r\n                                Details\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\">\r\n                            {\r\n                                (nftData.status !== 'MINTED' &&  nftData.status !== 'REQUESTED') && (\r\n                                    <>\r\n                                        <Button\r\n                                        className='fontstyling'\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            sx={{ marginRight: '5px' }}\r\n                                            onClick={() => {\r\n                                                setEditNftOpen(true);\r\n                                                setNftInfo({\r\n                                                    id: nftData.id,\r\n                                                    brandId: nftData.Brand.id,\r\n                                                    nftName: nftData.name,\r\n                                                    nftDescription: nftData.description,\r\n                                                    nftPrice: nftData.price,\r\n                                                    mintType: nftData.mintType,\r\n                                                    currencyType: nftData.currencyType,\r\n                                                    fieldDataArray: nftData.NFTMetaData,\r\n                                                    fileDataArray: nftData.NFTMetaFiles,\r\n                                                    images: image\r\n                                                });\r\n                                            }}\r\n                                        >\r\n                                            Edit\r\n                                        </Button>\r\n                                        <Button\r\n                                        className='fontstyling'\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            sx={{ marginRight: '5px' }}\r\n                                            onClick={() => {\r\n                                                setDeleteNftOpen(true);\r\n                                                setNftInfo({\r\n                                                    id: nftData.id,\r\n                                                    nftName: nftData.name,\r\n                                                    nftDescription: nftData.description,\r\n                                                    nftPrice: nftData.price,\r\n                                                    mintType: nftData.mintType,\r\n                                                    currencyType: nftData.currencyType,\r\n                                                    fieldDataArray: nftData.NFTMetaData,\r\n                                                    images: image\r\n                                                });\r\n                                            }}\r\n                                        >\r\n                                            Delete\r\n                                        </Button>\r\n                                    </>\r\n                                )\r\n                             }   \r\n                          \r\n\r\n                                {(nftData.status == 'DRAFT' || nftData.status == 'REJECTED') && (\r\n                                    <Button\r\n                                    className='fontstyling'\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        sx={{ marginRight: '5px' }}\r\n                                        onClick={() => {\r\n                                            setOpenRequestMint(true);\r\n                                        }}\r\n                                    >\r\n                                        Request\r\n                                    </Button>\r\n                                )}\r\n                            </Stack>\r\n                            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\"></Stack>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n                </CardActionArea></Card>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NftCard;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Grid, Typography, Pagination, Menu, MenuItem, TextField, Box } from '@mui/material';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AddNft from './component/addNft';\r\nimport { getAllNft } from '../../../../redux/nftManagement/actions';\r\nimport NftCard from './component/nftcard';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nconst typeArray = [\r\n    {\r\n        value: 'all',\r\n        label: \"All NFT'S\"\r\n    },\r\n    {\r\n        value: 'directMint',\r\n        label: 'Minted NFTS'\r\n    },\r\n    {\r\n        value: 'lazyMint',\r\n        label: \"Lazy Minted NFT'S\"\r\n    },\r\n    {\r\n        value: 'waiting',\r\n        label: 'Waiting For approval'\r\n    },\r\n    {\r\n        value: 'draft',\r\n        label: 'Draft NFTS'\r\n    },\r\n    {\r\n        value: 'rejected',\r\n        label: 'Rejected NFTS'\r\n    }\r\n];\r\n\r\nconst NftManagement = () => {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n\r\n    const user = useSelector((state) => state.auth.user);\r\n    const [type, setType] = useState('all');\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(12);\r\n    const [addNftOpen, setAddNftOpen] = useState(false);\r\n    const [loader, setLoader] = useState(true);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n        setLoader(false);\r\n    };\r\n    const handleType = (event) => {\r\n        setType(event.target.value);\r\n        setLimit(12);\r\n        setSearch('');\r\n        setPage(1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllNft({\r\n                categoryId: location.state.data.CategoryId,\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                type: type,\r\n                brandId: user.BrandId,\r\n                handleClose: handleClose\r\n            })\r\n        );\r\n    }, [search, page, limit, type]);\r\n\r\n    const nftList = useSelector((state) => state.nftReducer.nftList);\r\n    \r\n    return (\r\n        <>\r\n            <AddNft\r\n                open={addNftOpen}\r\n                setOpen={setAddNftOpen}\r\n                data={location?.state?.data}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                nftType={type}\r\n            />\r\n            <MainCard\r\n                className=\"Adminheading\"\r\n                \r\n                title={\r\n                <Grid container sx={{display:'flex'}}>\r\n                    <Grid item md={8} xs={12}>\r\n                        <Typography\r\n                        variant=\"h1\"\r\n                        component=\"h2\"\r\n                        className=\"headingcard\"\r\n                        sx={{   fontWeight: 600, color:  theme.palette.mode === 'dark' ? '#fff' : '#000' ,\r\n                         marginLeft: { lg: '-20px', md: '-20px' },  }}\r\n                    >\r\n                        Categories\r\n                    </Typography>\r\n                    </Grid>\r\n                    <Grid item md={4} xs={12}>\r\n                    <Button\r\n                        className=\"buttonSize\"\r\n                        sx={{float:{xs:'left' , md:'right'}, marginTop:{xs:\"10px\",md:\"0px\"} }}\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            navigate('/categories');\r\n                        }}\r\n                    >\r\n                        Back\r\n                    </Button>\r\n                        </Grid>\r\n                        </Grid>\r\n                   \r\n                }\r\n              \r\n                content={false}\r\n            ></MainCard>\r\n            <MainCard\r\n                className=\"yellow tableShadow\"\r\n                title={\r\n                    <Grid container spacing={4}>\r\n                        <Grid item xs={12} lg={8}>\r\n                            <Typography className=\"mainheading\" variant=\"h1\" component=\"h2\" \r\n                            sx={{ marginLeft: { lg: '48px', md: '48px' } }}>\r\n                                NFT Management  \r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6} lg={2}>\r\n                            <TextField\r\n                                className=\"selectField selectstyle\"\r\n                                id=\"outlined-select-budget\"\r\n                                select\r\n                                fullWidth\r\n                                value={type}\r\n                                onChange={handleType}\r\n                                variant=\"standard\"\r\n                            >\r\n                                {typeArray.map((option, index) => (\r\n                                    <MenuItem  key={index} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={6} lg={2} textAlign=\"start\">\r\n                            <Button\r\n                                className=\"buttonSize\"\r\n                                sx={{ marginLeft: { lg: '-16px', md: '-16px' } }}\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddNftOpen(true);\r\n                                }}\r\n                            >\r\n                                Add NFT\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                <Grid container>\r\n                    {(nftList && nftList.nfts && nftList.nfts.rows && nftList.nfts.rows != undefined) ? (\r\n                        <>\r\n                       { nftList.nfts.rows.length > 0?(\r\n                        <>\r\n                            {' '}\r\n                            <Grid container spacing={gridSpacing} mt={2}\r\n                             sx={{ marginLeft: { lg: '5px', md: '5px' } , marginRight: { lg: '25px', md: '25px' } }}>\r\n                                {nftList.nfts.rows &&\r\n                                    nftList.nfts.rows.map((nft, index) => {\r\n                                        return (\r\n                                            <Grid key={index} item xs={12} sm={6} md={4} lg={3}>\r\n                                                <NftCard\r\n                                                    className=\"tableShadow\"\r\n                                                    nftData={nft}\r\n                                                    categoryId={location.state.data.CategoryId}\r\n                                                    search={search}\r\n                                                    page={page}\r\n                                                    limit={limit}\r\n                                                    type={type}\r\n                                                />\r\n                                            </Grid>\r\n                                        );\r\n                                    })}\r\n                            </Grid>\r\n                            <Grid item xs={12} sx={{ p: 3 }}>\r\n                                <Grid container justifyContent=\"center\" spacing={gridSpacing}>\r\n                                    <Grid item>\r\n                                        <Pagination\r\n                                            page={page}\r\n                                            color=\"primary\"\r\n                                            showFirstButton\r\n                                            showLastButton\r\n                                            count={nftList && nftList.pages}\r\n                                            onChange={(event, newPage) => {\r\n                                                setPage(newPage);\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            </>\r\n                       )\r\n                       :\r\n                       (\r\n                        <Grid item>\r\n                        <Typography className=\"statustypo\" style={{  padding: '20px 20px 20px 70px', fontWeight: '500' }}>\r\n                         No Data Available</Typography>\r\n                    </Grid>\r\n                       )}\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                        <Grid container justifyContent=\"center\" sx={{ width: '80%', m: '15px auto '}}>\r\n                                <Grid item>\r\n                            <CircularProgress disableShrink size={'4rem'} />\r\n                        </Grid>\r\n                                </Grid>\r\n                        </>\r\n                  \r\n                    )}\r\n                </Grid>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NftManagement;\r\n","const BLOCKCHAIN = \r\n{\r\n    WALLET_ADDRESS: '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651',\r\n    ERC20: '0x44405b9819dd99b331A317f5c76667EcCcf19072'\r\n}\r\n\r\nexport default BLOCKCHAIN\r\n","export default __webpack_public_path__ + \"static/media/image-upload.54137b05.svg\";"],"sourceRoot":""}