{"version":3,"sources":["views/pages/superAdmin/brands/brandCategory/component/addUpdateBrandCategory.js","views/pages/superAdmin/brands/brandCategory/component/deleteBrandCategoryDialog.js","views/pages/superAdmin/brands/brandCategory/component/brandCategoryTable.js","views/pages/superAdmin/brands/brandCategory/index.js","ui-component/extended/Avatar.js","constants.js"],"names":["Transition","forwardRef","props","ref","Slide","direction","AddUpdateBrandCategoryDialog","open","setOpen","brandCategoryData","page","limit","search","dispatch","useDispatch","categoryArray","useSelector","state","brandCategoryReducer","categoriesDropdownList","useState","category","setCategory","isUpdate","setIsUpdate","useEffect","categoryId","handleContractDeployment","console","log","window","ethereum","_metamask","isUnlocked","connectWallet","type","SNACKBAR_OPEN","message","variant","alertSeverity","brandName","brand","name","categories","map","data","value","categoryName","label","contractName","symbol","substring","provider","ethers","providers","Web3Provider","signer","getSigner","factoryAddr","Contract","FactoryAddress","address","FactoryAbi","abi","deployMintingContract","catch","error","toast","wait","res","addr","events","args","addBrandCategory","brandId","profitPercentage","formik","values","contractAddress","handleClose","validationSchema","Yup","default","min","max","required","typeError","useFormik","enableReinitialize","initialValues","onSubmit","updateBrandCategory","resetForm","getAllCategoriesDropdown","Dialog","onClose","className","maxWidth","TransitionComponent","keepMounted","DialogTitle","id","Divider","DialogContent","noValidate","handleSubmit","Grid","container","item","xs","pt","TextField","select","fullWidth","onChange","event","target","MenuItem","option","index","handleChange","touched","Boolean","errors","helperText","autoComplete","DialogActions","sx","display","AnimateButton","Button","my","ml","md","lg","size","disableElevation","onClick","padding","color","DeleteBrandCategoryDialog","theme","useTheme","DialogContentText","Typography","component","pr","palette","dark","borderColor","deleteBrandCategory","BrandCategoryTable","brandCategoriesList","addUpdateOpen","setAddUpdateOpen","setBrandCategoryData","navigate","useNavigate","deleteOpen","setDeleteOpen","TableContainer","undefined","brandCategories","count","Table","TableHead","TableRow","TableCell","align","borderBottom","TableBody","row","textTransform","Avatar","alt","src","Category","image","moment","createdAt","format","updatedAt","Stack","Tooltip","placement","title","IconButton","brandData","fontSize","CategoryId","BrandId","orange","main","background","light","style","fontWeight","BrandCategory","location","useLocation","setSearch","setPage","getAllBrandCategories","MainCard","marginTop","marginLeft","secondary","float","content","spacing","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","e","textAlign","p","justifyContent","gridSpacing","Pagination","showFirstButton","showLastButton","pages","newPage","outline","others","colorSX","paper","bgcolor","outlineSX","border","sizeSX","width","height","BLOCKCHAIN","WALLET_ADDRESS","ERC20"],"mappings":"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","file":"static/js/13.c24106af.chunk.js","sourcesContent":["import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ethers } from 'ethers';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport { updateBrandCategory, addBrandCategory, getAllCategoriesDropdown } from 'redux/brandCategory/actions';\r\nimport { MenuItem, Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, Divider, Grid } from '@mui/material';\r\nimport FactoryAbi from '../../../../../../contractAbi/Factory.json';\r\nimport FactoryAddress from '../../../../../../contractAbi/Factory-address.json';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport BLOCKCHAIN from '../../../../../../constants';\r\nimport { SNACKBAR_OPEN } from 'store/actions';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nexport default function AddUpdateBrandCategoryDialog({ open, setOpen, brandCategoryData, page, limit, search }) {\r\n    const dispatch = useDispatch();\r\n    const categoryArray = useSelector((state) => state.brandCategoryReducer.categoriesDropdownList);\r\n    const [category, setCategory] = useState(0);\r\n    const [isUpdate, setIsUpdate] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (brandCategoryData.categoryId == 0) {\r\n            setIsUpdate(false);\r\n        } else {\r\n            setIsUpdate(true);\r\n        }\r\n        setCategory(brandCategoryData.categoryId);\r\n    }, [brandCategoryData]);\r\n\r\n    const handleCategoryChange = (event) => {\r\n        setCategory(event.target.value);\r\n    };\r\n\r\n    const handleContractDeployment = async () => {\r\n        console.log('window.ethereum', typeof window.ethereum);\r\n        let connectWallet = await ethereum._metamask.isUnlocked();\r\n        console.log('connectWallet', connectWallet);\r\n        if ((window.ethereum && connectWallet) == false) {\r\n            console.log('meta mask not connected');\r\n\r\n            dispatch({\r\n                type: SNACKBAR_OPEN,\r\n                open: true,\r\n                message: 'No crypto wallet found. Please connect one',\r\n                variant: 'alert',\r\n                alertSeverity: 'info'\r\n            });\r\n            console.log('No crypto wallet found. Please install it.');\r\n            // toast.error('No crypto wallet found. Please install it.');\r\n        } else {\r\n            let brandName = brandCategoryData.brand.name;\r\n            let categoryName;\r\n            categoryArray.categories.map((data) => {\r\n                if (data.value == category) {\r\n                    categoryName = data.label;\r\n                }\r\n            });\r\n            const contractName = 'Galileo' + ' ' + brandName + ' ' + categoryName;\r\n            const symbol = 'G' + brandName.substring(0, 1) + categoryName.substring(0, 1);\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const factoryAddr = new ethers.Contract(FactoryAddress.address, FactoryAbi.abi, signer);\r\n\r\n            let res = await (\r\n                await factoryAddr.deployMintingContract(contractName, symbol).catch((error) => {\r\n                    toast.error(error.message);\r\n                })\r\n            ).wait();\r\n\r\n            console.log('res', res);\r\n            let addr = res?.events[2]?.args[0];\r\n            if (res) {\r\n                dispatch(\r\n                    addBrandCategory({\r\n                        brandId: brandCategoryData.brandId,\r\n                        categoryId: category,\r\n                        profitPercentage: formik.values.profitPercentage,\r\n                        contractAddress: addr,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        isUpdate: Yup.boolean().default(isUpdate),\r\n        profitPercentage: Yup.number()\r\n            .min(1, 'Profit Percentage should not be less than one')\r\n            .max(99, 'Profit Percentage should not exceed 99')\r\n            .required('Profit Percentage is required')\r\n            .typeError('Invalid Profit Percentage')\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: brandCategoryData,\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            if (!isUpdate) {\r\n                handleContractDeployment();\r\n            } else {\r\n                dispatch(\r\n                    updateBrandCategory({\r\n                        brandId: brandCategoryData.brandId,\r\n                        categoryId: brandCategoryData.categoryId,\r\n                        profitPercentage: values.profitPercentage,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllCategoriesDropdown({ brandId: brandCategoryData.brandId }));\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog dialog\"\r\n                maxWidth=\"sm\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\" className=\"assignheading\">\r\n                    {!isUpdate ? 'Assign Category ' : ' Update Profit percentage '}\r\n                </DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <form noValidate onSubmit={formik.handleSubmit} id=\"validation-forms\">\r\n                        <Grid container>\r\n                            <>\r\n                                {!isUpdate && (\r\n                                    <Grid item xs={12} pt={2}>\r\n                                        <TextField\r\n                                            className=\"responsiveSelectfield textfieldStyle\"\r\n                                            id=\"outlined-select-budget\"\r\n                                            select\r\n                                            fullWidth\r\n                                            label=\"Select Category\"\r\n                                            value={category}\r\n                                            onChange={handleCategoryChange}\r\n                                            variant=\"standard\"\r\n                                        >\r\n                                            <MenuItem value={0}>Choose Category</MenuItem>\r\n                                            {categoryArray &&\r\n                                                categoryArray.categories &&\r\n                                                categoryArray.categories.map((option, index) => (\r\n                                                    <MenuItem key={index} value={option.value}>\r\n                                                        {option.label}\r\n                                                    </MenuItem>\r\n                                                ))}\r\n                                        </TextField>\r\n                                    </Grid>\r\n                                )}\r\n\r\n                                <Grid item xs={12} pt={2}>\r\n                                    <TextField\r\n                                        className=\"textfieldStyle\"\r\n                                        variant=\"standard\"\r\n                                        id=\"profitPercentage\"\r\n                                        name=\"profitPercentage\"\r\n                                        label=\"Enter Profit Percentage\"\r\n                                        value={formik.values.profitPercentage}\r\n                                        onChange={formik.handleChange}\r\n                                        error={formik.touched.profitPercentage && Boolean(formik.errors.profitPercentage)}\r\n                                        helperText={formik.touched.profitPercentage && formik.errors.profitPercentage}\r\n                                        fullWidth\r\n                                        autoComplete=\"given-name\"\r\n                                    />\r\n                                </Grid>\r\n                            </>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n\r\n                <DialogActions sx={{ display: 'block' }}>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            className=\"buttons\"\r\n                            sx={{ my: 3, ml: 1, my: 1, ml: 2, padding: { md: '6px 140px', lg: '6px 140px' } }}\r\n                            type=\"submit\"\r\n                            size=\"large\"\r\n                            disableElevation\r\n                            onClick={() => {\r\n                                formik.handleSubmit();\r\n                            }}\r\n                        >\r\n                            {!isUpdate ? 'Create ' : 'Update '}\r\n                        </Button>\r\n                    </AnimateButton>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            className=\"buttons\"\r\n                            variant=\"contained\"\r\n                            sx={{ my: 1, ml: 1, padding: { md: '6px 140px', lg: '6px 140px' }, color: '#fff' }}\r\n                            onClick={handleClose}\r\n                            color=\"secondary\"\r\n                            size=\"large\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </AnimateButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteBrandCategory } from '../../../../../../redux/brandCategory/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteBrandCategoryDialog({ open, setOpen, page, limit, search, brandCategoryData }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\"  className=\"assignheading\">Delete Brand Category</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\" className=\"statustypo\" >\r\n                            Are you sure you want to delete this Category?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"  className='buttonSize' size='large' \r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        className='buttonSize' size='large' \r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteBrandCategory({\r\n                                    categoryId: brandCategoryData.categoryId,\r\n                                    brandId: brandCategoryData.brandId,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n    Divider,\r\n    Typography,\r\n    IconButton,\r\n    Grid,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    Button,\r\n    TableRow,\r\n    Tooltip,\r\n    Stack\r\n} from '@mui/material';\r\n\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport AddUpdateBrandCategoryDialog from './addUpdateBrandCategory';\r\nimport DeleteBrandCategoryDialog from './deleteBrandCategoryDialog';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport RemoveRedEyeIcon from '@mui/icons-material/RemoveRedEye';\r\nimport moment from 'moment';\r\n\r\nconst BrandCategoryTable = ({\r\n    brandCategoriesList,\r\n    search,\r\n    page,\r\n    limit,\r\n    addUpdateOpen,\r\n    setAddUpdateOpen,\r\n    brandCategoryData,\r\n    setBrandCategoryData\r\n}) => {\r\n    const navigate = useNavigate();\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const [detailId, setDetailId] = useState();\r\n    const theme = useTheme();\r\n\r\n    const openDetails = (id) => {\r\n        if (detailId === id) {\r\n            setDetailId(null);\r\n        } else {\r\n            setDetailId(id);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <TableContainer>\r\n            <AddUpdateBrandCategoryDialog\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n                brandCategoryData={brandCategoryData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n\r\n            <DeleteBrandCategoryDialog\r\n                open={deleteOpen}\r\n                setOpen={setDeleteOpen}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n                brandCategoryData={brandCategoryData}\r\n            />\r\n            {brandCategoriesList.brandCategories != undefined && brandCategoriesList.count > 0 ? (\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\" sx={{ borderBottom: 'none' }}></TableCell>\r\n                        <TableCell align=\"left \" className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                            Category name{' '}\r\n                        </TableCell>\r\n                          <TableCell   className='Tableheading' sx={{borderBottom:'none'}}>Profit Percentage</TableCell>\r\n                    {/* <TableCell   className='Tableheading' sx={{borderBottom:'none'}}>Description</TableCell> */}\r\n\r\n                        <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                            Created At\r\n                        </TableCell>\r\n                        <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                            Updated At\r\n                        </TableCell>\r\n                        <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\r\n                            Actions\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                    <TableBody sx={{ padding: '10px' }}>\r\n                        {brandCategoriesList.brandCategories != undefined &&\r\n                            brandCategoriesList.brandCategories.map((row, index) => (\r\n                                <>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"right\" sx={{ borderBottom: 'none' }}></TableCell>\r\n                                        <TableCell\r\n                                            sx={{\r\n                                                display: 'flex',\r\n                                                borderBottom: 'none',\r\n                                                textTransform: 'capitalize',\r\n                                                borderBottom: 'none'\r\n                                            }}\r\n                                        >\r\n                                            <Grid item lg={6}>\r\n                                                <Avatar alt=\"Brand Image\" src={row.Category.image} sx={{}} />\r\n                                            </Grid>\r\n                                            <Grid item lg={6} className=\"tableName\">\r\n                                                {row.Category.name}\r\n                                            </Grid>\r\n                                        </TableCell>\r\n\r\n                                        <TableCell className=\"tablecell\" sx={{ borderBottom: 'none' }}>\r\n                                            {row.profitPercentage}%\r\n                                        </TableCell>\r\n                                        <TableCell className=\"tablecell\" sx={{ borderBottom: 'none' }}>\r\n                                            {moment(row.createdAt).format('DD-MMM-YYYY')}\r\n                                        </TableCell>\r\n                                        <TableCell className=\"tablecell\" sx={{ borderBottom: 'none' }}>\r\n                                            {moment(row.updatedAt).format('DD-MMM-YYYY')}\r\n                                        </TableCell>\r\n\r\n                                        <TableCell align=\"left\" sx={{ padding: '0px', borderBottom: 'none' }}>\r\n                                            <Stack direction=\"row\">\r\n                                                <Tooltip placement=\"top\" title=\" View NFT'S\">\r\n                                                    <IconButton\r\n                                                        color=\"primary\"\r\n                                                        aria-label=\"detail\"\r\n                                                        size=\"medium\"\r\n                                                        onClick={() => {\r\n                                                            navigate('/nftManagement', {\r\n                                                                state: {\r\n                                                                    brandData: row\r\n                                                                }\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        <RemoveRedEyeIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n\r\n                                                <Tooltip placement=\"top\" title=\"Edit\">\r\n                                                    <IconButton\r\n                                                        sx={{ color: '#008b04' }}\r\n                                                        aria-label=\"Edit\"\r\n                                                        size=\"large\"\r\n                                                        onClick={() => {\r\n                                                            setAddUpdateOpen(true);\r\n                                                            setBrandCategoryData({\r\n                                                                categoryId: row.CategoryId,\r\n                                                                brandId: row.BrandId,\r\n                                                                profitPercentage: row.profitPercentage\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                                <Tooltip placement=\"top\" title=\"Delete\">\r\n                                                    <IconButton\r\n                                                        color=\"primary\"\r\n                                                        sx={{\r\n                                                            color: theme.palette.orange.dark,\r\n                                                            borderColor: theme.palette.orange.main,\r\n                                                            '&:hover ': { background: theme.palette.orange.light }\r\n                                                        }}\r\n                                                        size=\"large\"\r\n                                                        onClick={() => {\r\n                                                            setDeleteOpen(true);\r\n                                                            setBrandCategoryData({\r\n                                                                categoryId: row.CategoryId,\r\n                                                                brandId: row.BrandId\r\n                                                            });\r\n                                                        }}\r\n                                                    >\r\n                                                        <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </>\r\n                            ))}\r\n                    </TableBody>\r\n          \r\n            </Table>\r\n           ) : (\r\n                <>\r\n                  \r\n                    <Grid item>\r\n                        <Typography className=\"statustypo\" style={{     padding: '20px 20px 20px 70px', fontWeight: '500' }}> No Data Available</Typography>\r\n                    </Grid>\r\n                </>\r\n            )}\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default BrandCategoryTable;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport BrandCategoryTable from './component/brandCategoryTable';\r\nimport { Button, Typography, Grid, MenuItem, Menu, Pagination, OutlinedInput, InputAdornment } from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { getAllBrandCategories, getAllCategoriesDropdown } from '../../../../../redux/brandCategory/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AddUpdateBrandCategoryDialog from './component/addUpdateBrandCategory';\r\n\r\nconst BrandCategory = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const brandCategoriesList = useSelector((state) => state.brandCategoryReducer.brandCategoriesList);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [brandCategoryData, setBrandCategoryData] = useState({\r\n        brand: location?.state?.brandData,\r\n        brandId: location?.state?.brandData.id,\r\n        categoryId: 0,\r\n        profitPercentage: ''\r\n    });\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllBrandCategories({\r\n                brandId: location?.state?.brandData?.id,\r\n                search: search,\r\n                page: page,\r\n                limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n  \r\n    return (\r\n        <>\r\n            <AddUpdateBrandCategoryDialog\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n                brandCategoryData={brandCategoryData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n            <MainCard\r\n            className='Adminheading'\r\n\r\n                title={\r\n                    <Typography variant=\"h1\" component=\"h2\" className='headingcard' sx={{ marginTop:'10px' ,  \r\n                        fontWeight: 600, color: '#000' , marginLeft:{lg:'-20px', md:'-20px'} }}>\r\n                           \r\n                        Brand Management\r\n                    </Typography>\r\n                }\r\n                secondary={\r\n                    <Button className='buttonSize' sx={{float:'right'}}\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    onClick={() => {\r\n                        navigate('/brands');\r\n                    }}\r\n                >\r\n                    Back\r\n                </Button>\r\n                }\r\n                content={false}\r\n            ></MainCard>\r\n\r\n            <MainCard\r\n            className='tableShadow'\r\n            title={\r\n                <Grid container spacing={4} >\r\n                <Grid item xs={6} lg={8} >\r\n                <Typography className='mainheading' variant=\"h1\" component=\"h2\"\r\n                 sx={{marginLeft:{lg:'48px', md:'48px'}}}>\r\n                 Category Management of : {location?.state?.brandData?.name}\r\n              </Typography>\r\n                </Grid>\r\n                    <Grid item xs={3} lg={2} >\r\n                   \r\n                    <OutlinedInput\r\n                    id=\"input-search-list-style1\"\r\n                    placeholder=\"Search\"\r\n                    startAdornment={\r\n                        <InputAdornment position=\"start\">\r\n                            <IconSearch stroke={1.5} size=\"1rem\" />\r\n                        </InputAdornment>\r\n                    }\r\n                    size=\"small\"\r\n                    onChange={(e) => {\r\n                        setSearch(e.target.value);\r\n                    }}\r\n                />\r\n                    </Grid>\r\n                    <Grid item xs={3} lg={2} textAlign=\"start\">\r\n                        <Button className='buttonSize' sx={{marginLeft:{lg:'-16px', md:'-16px'}}}\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                            onClick={() => {\r\n                                setAddUpdateOpen(true);\r\n                                setBrandCategoryData({\r\n                                    brand: location.state.brandData,\r\n                                    brandId: location.state.brandData.id,\r\n                                    categoryId: 0,\r\n                                    profitPercentage: ''\r\n                                });\r\n                                dispatch(getAllCategoriesDropdown({ brandId: location.state.brandData.id }));\r\n                            }}\r\n                        >\r\n                        Create\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid> }\r\n                content={false}\r\n            >\r\n                <BrandCategoryTable\r\n                    brandCategoriesList={brandCategoriesList}\r\n                    search={search}\r\n                    page={page}\r\n                    limit={limit}\r\n                    addUpdateOpen={addUpdateOpen}\r\n                    setAddUpdateOpen={setAddUpdateOpen}\r\n                    brandCategoryData={brandCategoryData}\r\n                    setBrandCategoryData={setBrandCategoryData}\r\n                />\r\n\r\n                <>\r\n                    <Grid item xs={12} sx={{ p: 3 }}>\r\n                        <Grid container justifyContent=\"center\" spacing={gridSpacing}>\r\n                            <Grid item>\r\n                                <Pagination\r\n                                    color=\"primary\"\r\n                                    showFirstButton\r\n                                    showLastButton\r\n                                    page={page}\r\n                                    count={brandCategoriesList.pages}\r\n                                    onChange={(event, newPage) => {\r\n                                        setPage(newPage);\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                          \r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BrandCategory;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","const BLOCKCHAIN = \r\n    {\r\n        WALLET_ADDRESS: '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651',\r\n        ERC20: '0x943b645e4dEE17D102745f5b1B40B775f06C0366'\r\n    }\r\n    \r\n\r\n\r\nexport default BLOCKCHAIN\r\n"],"sourceRoot":""}