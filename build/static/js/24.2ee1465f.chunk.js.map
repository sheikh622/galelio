{"version":3,"sources":["views/pages/user/productDetails/component/productView.js","views/pages/user/productDetails/component/similarProducts.js","views/pages/user/productDetails/component/activity.js","views/pages/user/productDetails/component/properties.js","views/pages/user/productDetails/index.js","ui-component/extended/Avatar.js","constants.js","ui-component/cards/SubCard.js"],"names":["PropertiesView","nft","dispatch","useDispatch","useState","resell","setResell","bought","setBought","redeem","setRedeem","loader","setLoader","redeemLoader","setRedeemLoader","resellLoader","setResellLoader","navigate","useNavigate","user","useSelector","state","auth","age","setAge","theme","useTheme","React","open","setOpen","rprice","ResellDialog","handleClose","Grid","sx","width","Button","float","md","className","variant","size","onClick","mintType","handleResellNft","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","fullWidth","onChange","e","target","value","DialogActions","buyNftResolve","redeemNftResolve","resellNftResolve","handleBuyNft","erc20Address","BLOCKCHAIN","ERC20","tokenId","parseInt","NFTTokens","contractAddress","Category","BrandCategories","price","ethers","utils","parseEther","toString","provider","providers","Web3Provider","window","ethereum","signer","getSigner","address","getAddress","marketplace","Contract","MarketplaceAddress","MarketplaceAbi","abi","token","Erc20","allowance","approvalAmount","approvePrice","approve","wait","purchaseItem","then","data","buyNft","nftId","id","nftToken","buyerAddress","from","catch","error","toast","message","signerAddress","signature","nfts","NFTAbi","prices","voucher","uri","tokenUri","mintedNFT","events","args","changeTokenId","rrprice","resellItem","resellNft","success","makeItem","handleRedeemNft","redeemNft","addDeliveryNft","status","TokenId","WalletAddress","NftId","UserId","buyerNft","nftReducer","nftBuyer","useEffect","getNftBuyer","walletAddress","NFTTokenId","spacing","gridSpacing","item","xs","container","justifyContent","textAlign","sm","component","RouterLink","to","CardMedia","height","image","asset","watch1","alt","mt","ml","alignItems","Avatar","src","Brand","objectFit","zeroMinWidth","textDecoration","Typography","align","fontWeight","name","color","palette","mode","description","Box","borderRadius","FormControl","InputLabel","Select","labelId","event","NFTMetaFiles","map","option","MenuItem","fieldValue","fieldName","mb","paddingLeft","currencyType","isSold","JSON","stringify","founded","display","Alert","severity","CircularProgress","marginTop","lg","SimilarProducts","similarProductNfts","marketplaceReducer","search","page","limit","click","setClick","getAllSimilarProducts","categoryId","CategoryId","textTransform","rows","lenght","Card","background","maxWidth","boxShadow","CardActionArea","CardContent","style","padding","fontSize","Divider","pt","pl","Activity","MainCard","title","content","TableContainer","Table","TableHead","TableRow","TableCell","days","TableBody","Properties","NFTMetaData","length","SubCard","ProductDetails","location","useLocation","marketplaceNfts","outline","others","colorSX","paper","bgcolor","outlineSX","border","borderColor","sizeSX","WALLET_ADDRESS","forwardRef","ref","children","contentClass","darkTitle","secondary","contentSX","dark","light","primary","p","action","opacity","defaultProps"],"mappings":"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","file":"static/js/24.2ee1465f.chunk.js","sourcesContent":["// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { CardMedia, Grid, Typography, Button, Alert, InputLabel, Select, FormControl, Box, MenuItem } from '@mui/material';\r\n\r\nimport React, { useEffect } from 'react';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\nimport { ethers } from 'ethers';\r\nimport NFTAbi from '../../../../../contractAbi/NFT.json';\r\nimport MarketplaceAbi from '../../../../../contractAbi/Marketplace.json';\r\nimport MarketplaceAddress from '../../../../../contractAbi/Marketplace-address.json';\r\nimport Erc20 from '../../../../../contractAbi/Erc20.json';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { buyNft, resellNft, redeemNft, getNftBuyer, addDeliveryNft, changeTokenId } from 'redux/nftManagement/actions';\r\n// import ResellDialog from \"./resellDialog\"\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport BLOCKCHAIN from '../../../../../constants';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\n// =============================|| LANDING - FEATURE PAGE ||============================= //\r\n\r\nconst PropertiesView = ({ nft }) => {\r\n    const dispatch = useDispatch();\r\n    const [resell, setResell] = useState(false);\r\n    const [bought, setBought] = useState(false);\r\n    const [redeem, setRedeem] = useState(false);\r\n    const [loader, setLoader] = useState(false);\r\n    const [redeemLoader, setRedeemLoader] = useState(false);\r\n    const [resellLoader, setResellLoader] = useState(false);\r\n    const navigate = useNavigate();\r\n    const user = useSelector((state) => state.auth.user);\r\n\r\n    const [age, setAge] = useState('');\r\n\r\n    const handleChange = (event) => {\r\n        setAge(event.target.value);\r\n    };\r\n    const theme = useTheme();\r\n  \r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    let rprice = 0;\r\n    const ResellDialog = () => {\r\n        const handleClickOpen = () => {\r\n            setOpen(true);\r\n        };\r\n\r\n        const handleClose = () => {\r\n            setOpen(false);\r\n        };\r\n\r\n        return (\r\n            <Grid sx={{ width: '100%' }}>\r\n                <Button\r\n                    sx={{ float: { md: 'right' } }}\r\n                    className=\"buy\"\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    onClick={() => {\r\n                        if (nft.mintType == 'directMint') {\r\n                            setOpen(true);\r\n                        } else if (nft.mintType == 'lazyMint') {\r\n                            handleResellNft();\r\n                        }\r\n                    }}\r\n                >\r\n                    Resell\r\n                </Button>\r\n                <Dialog open={open} onClose={handleClose}>\r\n                    <DialogTitle>NFT Resell Price</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>Please enter the price for the NFT</DialogContentText>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Price \"\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                            // value={rprice}\r\n                            onChange={(e) => {\r\n                                rprice = e.target.value;\r\n                            }}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose}>Cancel</Button>\r\n                        <Button\r\n                            onClick={() => {\r\n                                handleResellNft();\r\n                            }}\r\n                        >\r\n                            Resell\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                <Grid></Grid>\r\n            </Grid>\r\n        );\r\n    };\r\n\r\n    const buyNftResolve = () => {\r\n        setBought(true);\r\n        setLoader(false);\r\n    };\r\n\r\n    const redeemNftResolve = () => {\r\n        setRedeem(true);\r\n        setRedeemLoader(false);\r\n    };\r\n\r\n    const resellNftResolve = () => {\r\n        setResell(true);\r\n        setResellLoader(false);\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleBuyNft = async () => {\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else if (nft.mintType == 'directMint') {\r\n            setLoader(true);\r\n\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n            let price = ethers.utils.parseEther(nft.price.toString());\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const address = signer.getAddress();\r\n\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n            const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n            // await (await token.approve(MarketplaceAddress.address, price)).wait();\r\n\r\n            // -------------\r\n            let approvalAmount = await token.allowance(address, MarketplaceAddress.address);\r\n\r\n            let approvePrice = ethers.utils.parseEther('10000');\r\n            if (approvalAmount.toString() < nft.price.toString()) {\r\n                await (await token.approve(MarketplaceAddress.address, approvePrice)).wait();\r\n            }\r\n            // ---------------\r\n\r\n            await (await marketplace.purchaseItem(tokenId, contractAddress, price))\r\n                .wait()\r\n                .then((data) => {\r\n                    dispatch(\r\n                        buyNft({\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress,\r\n                            buyNftResolve: buyNftResolve\r\n                        })\r\n                    );\r\n                })\r\n                .catch((error) => {\r\n                    toast.error(error.message);\r\n                });\r\n        } else if (nft.mintType == 'lazyMint') {\r\n            setLoader(true);\r\n\r\n            let signers = nft.signerAddress;\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let signature = nft.NFTTokens[0].signature;\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n            // let contractAddress = \"0x6e9550E5fee2bE7BdB208214e9cE2B47131a5Ca0\";\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const address = signer.getAddress();\r\n            const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n\r\n            let prices = ethers.utils.parseEther(nft.price.toString());\r\n\r\n            let voucher = {\r\n                uri: nft.tokenUri,\r\n                price: prices,\r\n                token: erc20Address\r\n            };\r\n\r\n            let validatorAddress = '0x6f3b51bd5b67f3e5bca2fb32796215a796b79651';\r\n            const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n            //const signature = await signer._signTypedData(domain, types, voucher);\r\n            // const verifyAddr = ethers.utils.verifyTypedData(domain, types, voucher, signature);\r\n\r\n            let approvalAmount = await token.allowance(address, contractAddress);\r\n\r\n            let approvePrice = ethers.utils.parseEther('10000');\r\n            if (approvalAmount.toString() < nft.price.toString()) {\r\n                await (await token.approve(contractAddress, approvePrice)).wait();\r\n            }\r\n            // await (await token.approve(contractAddress, prices)).wait();\r\n\r\n            //\r\n            try {\r\n                let mintedNFT = await (await nfts.buyNft(voucher, signature, MarketplaceAddress.address)).wait();\r\n                const id = parseInt(mintedNFT.events[0].args[2]);\r\n\r\n                dispatch(\r\n                    changeTokenId({\r\n                        id: nft.NFTTokens[0].id,\r\n                        tokenId: id.toString()\r\n                    })\r\n                );\r\n\r\n                dispatch(\r\n                    buyNft({\r\n                        nftId: nft.id,\r\n                        nftToken: nft.NFTTokens[0].id,\r\n                        buyerAddress: mintedNFT.from,\r\n                        contractAddress: contractAddress,\r\n                        buyNftResolve: buyNftResolve\r\n                    })\r\n                );\r\n            } catch (error) {\r\n                toast.error(error.message);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleResellNft = async () => {\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else if (nft.mintType == 'directMint') {\r\n            setResellLoader(true);\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n\r\n            let rrprice = ethers.utils.parseEther(rprice.toString());\r\n\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n\r\n            await (await nfts.approve(MarketplaceAddress.address, tokenId)).wait();\r\n            await (await marketplace.resellItem(tokenId, contractAddress, rrprice))\r\n                .wait()\r\n                .then((data) => {\r\n                    dispatch(\r\n                        resellNft({\r\n                            rprice: rprice,\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress,\r\n                            resellNftResolve: resellNftResolve\r\n                        })\r\n                    );\r\n                    toast.success('NFT is Resold');\r\n                })\r\n                .catch((error) => {\r\n                    toast.error(error.message);\r\n                });\r\n        } else if (nft.mintType == 'lazyMint') {\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n\r\n            let rrprice = ethers.utils.parseEther(nft.price.toString());\r\n\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n\r\n            // await (await nfts.approve(MarketplaceAddress.address, tokenId)).wait();\r\n            await (await marketplace.makeItem(erc20Address, tokenId, contractAddress, rrprice))\r\n                .wait()\r\n                .then((data) => {\r\n                    dispatch(\r\n                        resellNft({\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress,\r\n                            resellNftResolve: resellNftResolve\r\n                        })\r\n                    );\r\n\r\n                    toast.success('NFT is Resold');\r\n                })\r\n                .catch((error) => {\r\n                    toast.error(error.message);\r\n                });\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleRedeemNft = async () => {\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else if (nft.mintType == 'directMint') {\r\n            setRedeemLoader(true);\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n\r\n            await (await marketplace.redeemNft(tokenId, contractAddress))\r\n                .wait()\r\n                .then((data) => {\r\n                    dispatch(\r\n                        redeemNft({\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress\r\n                        })\r\n                    );\r\n                    dispatch(\r\n                        addDeliveryNft({\r\n                            status: 'Pending',\r\n                            TokenId: nft.NFTTokens[0].id,\r\n                            WalletAddress: data.from,\r\n                            NftId: nft.id,\r\n                            UserId: user.id,\r\n                            redeemNftResolve: redeemNftResolve\r\n                        })\r\n                    );\r\n\r\n                    toast.success('NFT Redeem successfully');\r\n                })\r\n                .catch((error) => {\r\n                    toast.error(error.message);\r\n                });\r\n        } else if (nft.mintType == 'lazyMint') {\r\n            setRedeemLoader(true);\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n            let rrprice = ethers.utils.parseEther(nft.price.toString());\r\n\r\n            await (await marketplace.redeem(erc20Address, tokenId, contractAddress, rrprice))\r\n                .wait()\r\n                .then((data) => {\r\n                    dispatch(\r\n                        redeemNft({\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress\r\n                        })\r\n                    );\r\n                    dispatch(\r\n                        addDeliveryNft({\r\n                            status: 'Pending',\r\n                            TokenId: nft.NFTTokens[0].id,\r\n                            WalletAddress: data.from,\r\n                            NftId: nft.id,\r\n                            UserId: user.id,\r\n                            redeemNftResolve: redeemNftResolve\r\n                        })\r\n                    );\r\n\r\n                    toast.success('NFT Redeem successfully');\r\n                })\r\n                .catch((error) => {\r\n                    toast.error(error.message);\r\n                });\r\n        }\r\n    };\r\n\r\n    const buyerNft = useSelector((state) => state.nftReducer.nftBuyer);\r\n    useEffect(() => {\r\n        if (user) {\r\n            dispatch(\r\n                getNftBuyer({\r\n                    walletAddress: user?.walletAddress,\r\n                    NFTTokenId: nft.NFTTokens[0].id,\r\n                    NftId: nft.id\r\n                })\r\n            );\r\n        }\r\n    }, [useSelector, dispatch, resell, bought, redeem]);\r\n\r\n    useEffect(() => {}, []);\r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12}>\r\n                <Grid container justifyContent=\"center\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n                    <Grid item md={6} sm={12} component={RouterLink} to=\"/companyPage\">\r\n                        <CardMedia component=\"img\" \r\n                        sx={{ height: '592px' }} image={nft?.asset ? nft?.asset : watch1} alt=\"green iguana\" />\r\n                    </Grid>\r\n\r\n                    <Grid item md={6} sm={12}>\r\n                        <Grid item xs={12}>\r\n                            <Grid container>\r\n                                <Grid item md={12} sm={12}>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid mt={4} ml={2} item xs={12}>\r\n                                            <Grid container spacing={2} alignItems=\"center\">\r\n                                                <Grid item>\r\n                                                    <Avatar\r\n                                                        alt=\"User 1\"\r\n                                                        src={nft?.Brand?.image}\r\n                                                        sx={{ width: 56, height: 56, objectFit: 'fill' }}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid\r\n                                                    item\r\n                                                    xs\r\n                                                    zeroMinWidth\r\n                                                    component={RouterLink}\r\n                                                    sx={{ textDecoration: 'none' }}\r\n                                                    to=\"/companyPage\"\r\n                                                >\r\n                                                    <Typography align=\"left\" fontWeight={600} variant=\"h2\" className=\"brand\">\r\n                                                        {nft?.Brand?.name}\r\n                                                    </Typography>\r\n                                                    <Typography align=\"left\" variant=\"h3\" className=\"creator\">\r\n                                                        Creator\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n\r\n                                        <Grid item mt={2} xs={12}>\r\n                                            <Typography\r\n                                                className=\"Lux\"\r\n                                                color={theme.palette.mode === 'dark' ? 'white' : 'black'}\r\n                                                variant=\"h3\"\r\n                                            >\r\n                                                {nft?.name ? nft?.name : 'Luxury Stainless Watch'}{' '}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <Typography className=\"productdescription\" variant=\"body2\">\r\n                                                {nft?.description}{' '}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <Box sx={{ borderRadius: '4px', width: '95%', margin: '0 auto' }}>\r\n                                                <FormControl fullWidth>\r\n                                                    <InputLabel id=\"demo-simple-select-label\">PROOF OF AUTHENTICITY</InputLabel>\r\n                                                    <Select\r\n                                                        labelId=\"demo-simple-select-label\"\r\n                                                        id=\"demo-simple-select\"\r\n                                                        value={age}\r\n                                                        onChange={handleChange}\r\n                                                    >\r\n                                                        {nft?.NFTMetaFiles.map((option) => (\r\n                                                            <MenuItem\r\n                                                                component={RouterLink}\r\n                                                                to={option.fieldValue}\r\n                                                                key={option.fieldValue}\r\n                                                                value={option.fieldValue}\r\n                                                            >\r\n                                                                {option.fieldName}\r\n                                                            </MenuItem>\r\n                                                        ))}\r\n                                                    </Select>\r\n                                                </FormControl>\r\n                                            </Box>\r\n                                            {/*     // <TextField\r\n                                        //     sx={{ borderRadius: '4px' }}\r\n                                        //     className=\"select\"\r\n                                        //     fullWidth\r\n                                        //     id=\"standard-select-currency\"\r\n                                        //     select\r\n                                        //     lable='PROOF OF AUTHENTICITY'\r\n                                        //     value={fieldValue}\r\n                                        //     onChange={(e) => setFieldValue(e.target.value)}\r\n                                        // >\r\n                                        \r\n                                        //     {nft?.NFTMetaFiles.map((option) => (\r\n                                        //         <MenuItem key={option.fieldValue} value={option.fieldValue}>\r\n                                        //             {option.fieldName}\r\n                                        //         </MenuItem>\r\n                                        //     ))}\r\n                                        // </TextField> */}\r\n                                        </Grid>\r\n                                        <Grid item mt={2} mb={2} className=\"timer\" xs={12}>\r\n                                            <Grid className=\"auction\" container>\r\n                                                <Grid item md={6} xs={12} sm={12}>\r\n                                                    <Typography color=\"black\" variant=\"body\">\r\n                                                        Auction Time{' '}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={12} sm={12}>\r\n                                                    <Typography color=\"black\" variant=\"body\">\r\n                                                        {' '}\r\n                                                        2h : 40m : 03s\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <Grid container>\r\n                                                <Grid mt={-2} item md={3} xs={12} sm={12}>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography\r\n                                                            color={theme.palette.mode === 'dark' ? 'white' : '#404040'}\r\n                                                            sx={{ paddingLeft: { md: '22px' }, textAlign: { md: 'left' } }}\r\n                                                            className=\"price\"\r\n                                                            variant=\"body2\"\r\n                                                        >\r\n                                                            Price\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography\r\n                                                            color={theme.palette.mode === 'dark' ? 'white' : '#262626'}\r\n                                                            sx={{ paddingLeft: { md: '22px' }, textAlign: { md: 'left' } }}\r\n                                                            className=\"ETH \"\r\n                                                            variant=\"h3\"\r\n                                                        >\r\n                                                            {nft.price} {nft.currencyType}\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                {/*      {buyerNft?.founded && (\r\n                                            <>\r\n                                                <Grid item xs={12} md={12} mt={1}>\r\n                                                    {(nft?.transactionHash !== '' || nft?.transactionHash) && (\r\n                                                        <>\r\n                                                            <Accordion sx={{ margin: '10px', border: '2px solid', borderRadius: '4px' }}>\r\n                                                                <AccordionSummary\r\n                                                                    expandIcon={<ExpandMoreIcon />}\r\n                                                                    aria-controls=\"panel1a-content\"\r\n                                                                    id=\"panel1a-header\"\r\n                                                                >\r\n                                                                    <Typography>Transaction hash</Typography>\r\n                                                                </AccordionSummary>\r\n                                                                <AccordionDetails>\r\n                                                                    <a target=\"_blank\" href={nft?.transactionHash}>\r\n                                                                        {nft?.transactionHash}\r\n                                                                    </a>\r\n                                                                </AccordionDetails>\r\n                                                            </Accordion>\r\n                                                        </>\r\n                                                    )}\r\n                                                </Grid>\r\n                                                <Grid item xs={12} md={12}>\r\n                                                    <Accordion sx={{ margin: '10px', border: '2px solid', borderRadius: '4px' }}>\r\n                                                        <AccordionSummary\r\n                                                            expandIcon={<ExpandMoreIcon />}\r\n                                                            aria-controls=\"panel2a-content\"\r\n                                                            id=\"panel2a-header\"\r\n                                                        >\r\n                                                            <Typography>Contract address</Typography>\r\n                                                        </AccordionSummary>\r\n                                                        <AccordionDetails>\r\n                                                            <Typography>{nft?.Category?.BrandCategories[0].contractAddress}</Typography>\r\n                                                        </AccordionDetails>\r\n                                                    </Accordion>\r\n                                                </Grid>\r\n                                            </>\r\n                                        )} */}\r\n\r\n                                                <>\r\n                                                    {(bought == true || nft?.isSold == true) && JSON.stringify(buyerNft) === '{}' ? (\r\n                                                        <>\r\n                                                            <Grid item md={8} xs={12} sm={12} textAlign=\"center\">\r\n                                                                <Alert severity=\"error\">\r\n                                                                    <b>This item is sold already!</b>\r\n                                                                </Alert>\r\n                                                            </Grid>\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <>\r\n                                                            {buyerNft?.founded ? (\r\n                                                                <>\r\n                                                                    <>\r\n                                                                        <Grid item md={12} sx={{ mt: 1, display: 'flex' }}>\r\n                                                                            <Grid item md={6} xs={12} sm={12}>\r\n                                                                                {buyerNft?.status == 'Redeem' || redeem ? (\r\n                                                                                    <>\r\n                                                                                        <Alert severity=\"success\">\r\n                                                                                            <b>This item is Redeemed</b>\r\n                                                                                        </Alert>\r\n                                                                                    </>\r\n                                                                                ) : (\r\n                                                                                    <>\r\n                                                                                        {buyerNft?.status !== 'Resell' && redeem !== true && (\r\n                                                                                            <>\r\n                                                                                                <Button\r\n                                                                                                    sx={{ float: { md: 'right' } }}\r\n                                                                                                    className=\"buy\"\r\n                                                                                                    variant=\"contained\"\r\n                                                                                                    size=\"large\"\r\n                                                                                                    onClick={() => {\r\n                                                                                                        handleRedeemNft();\r\n                                                                                                    }}\r\n                                                                                                >\r\n                                                                                                    {redeemLoader ? (\r\n                                                                                                        <CircularProgress\r\n                                                                                                            sx={{ color: 'white' }}\r\n                                                                                                        />\r\n                                                                                                    ) : (\r\n                                                                                                        <span> Redeem</span>\r\n                                                                                                    )}\r\n                                                                                                </Button>\r\n                                                                                            </>\r\n                                                                                        )}\r\n                                                                                    </>\r\n                                                                                )}\r\n                                                                            </Grid>\r\n                                                                            {buyerNft?.status == 'Resell' || resell == true ? (\r\n                                                                                <>\r\n                                                                                    <Grid\r\n                                                                                        item\r\n                                                                                        md={12}\r\n                                                                                        xs={12}\r\n                                                                                        sm={12}\r\n                                                                                        textAlign=\"center\"\r\n                                                                                        sx={{}}\r\n                                                                                    >\r\n                                                                                        <Alert severity=\"info\" sx={{ float: 'left' }}>\r\n                                                                                            <b>This item is resold by you!</b>\r\n                                                                                        </Alert>\r\n                                                                                    </Grid>\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    {buyerNft?.status !== 'Redeem' && redeem == false && (\r\n                                                                                        <>\r\n                                                                                            {resellLoader ? (\r\n                                                                                                <CircularProgress sx={{ color: 'white' }} />\r\n                                                                                            ) : (\r\n                                                                                                <ResellDialog />\r\n                                                                                            )}\r\n                                                                                        </>\r\n                                                                                    )}\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                        </Grid>\r\n                                                                    </>\r\n                                                                </>\r\n                                                            ) : (\r\n                                                                <>\r\n                                                                    {bought !== true && (\r\n                                                                        <Grid\r\n                                                                            item\r\n                                                                            md={9}\r\n                                                                            xs={12}\r\n                                                                            sm={12}\r\n                                                                            sx={{ marginTop: { md: '-10px', lg: '-10px' } }}\r\n                                                                            textAlign=\"center\"\r\n                                                                        >\r\n                                                                            <Button\r\n                                                                                sx={{ float: { md: 'right' } }}\r\n                                                                                className=\"buy\"\r\n                                                                                variant=\"contained\"\r\n                                                                                size=\"large\"\r\n                                                                                onClick={() => {\r\n                                                                                    handleBuyNft();\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                {loader ? (\r\n                                                                                    <CircularProgress className=\"circul\" />\r\n                                                                                ) : (\r\n                                                                                    <span>Buy Now</span>\r\n                                                                                )}\r\n                                                                            </Button>\r\n                                                                        </Grid>\r\n                                                                    )}\r\n                                                                </>\r\n                                                            )}\r\n                                                        </>\r\n                                                    )}\r\n                                                </>\r\n                                            </Grid>\r\n                                            {/* \r\n                                            <Button onClick={()=>{\r\n                                                setBought(true)\r\n                                            }}>Set Bought True</Button>\r\n                                            <Button onClick={()=>{\r\n                                                setBought(false)\r\n                                            }}>Set Bought False</Button> */}\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item md={1} sm={12}></Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default PropertiesView;\r\n","// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Container, Card, Grid, Typography, CardActionArea, CardContent, Divider } from '@mui/material';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport { getAllSimilarProducts } from 'redux/marketplace/actions';\r\nconst SimilarProducts = ({ nft }) => {\r\n    const theme = useTheme();\r\n    const itemData = [\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Cars',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Shoes',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1522770179533-24471fcdba45',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Real Estate',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Goods',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Cars',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Shoes',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1522770179533-24471fcdba45',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Real Estate',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Goods',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        }\r\n    ];\r\n\r\n    const dispatch = useDispatch();\r\n    const similarProductNfts = useSelector((state) => state.marketplaceReducer.similarProductNfts);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(12);\r\n    const [click, setClick] = useState(false);\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllSimilarProducts({\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                categoryId: nft.CategoryId,\r\n                nftId: nft.id\r\n            })\r\n        );\r\n        setClick(false);\r\n    }, [click, search, page, limit]);\r\n\r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12} lg={12} md={12}>\r\n                <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                    <Grid item xs={12}>\r\n                        <Typography\r\n                            variant=\"h2\"\r\n                            mt={4}\r\n                            component=\"div\"\r\n                            sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' }, textTransform: 'capitalize' }}\r\n                        >\r\n                            Similar Products\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            {similarProductNfts?.nfts?.rows.lenght > 0 ? (\r\n                <Grid item xs={12}>\r\n                    <Grid container justifyContent=\"left\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n                        {similarProductNfts?.nfts?.rows.map((data) => (\r\n                            <Grid item md={2} sm={6}>\r\n                                <Card\r\n                                    sx={{\r\n                                        color: theme.palette.mode === 'dark' ? 'white' : '#404040',\r\n                                        background: theme.palette.mode === 'dark' ? '#181C1F' : 'white',\r\n                                        maxWidth: 365,\r\n                                        width: '105%',\r\n                                        boxShadow: '1px 2px 6px #d3d3d3',\r\n                                        borderRadius: '7px'\r\n                                    }}\r\n                                >\r\n                                    <CardActionArea>\r\n                                        <CardMedia component=\"img\" height=\"200\" image={data.asset} />\r\n                                        <CardContent style={{ padding: '6%' }}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={8} sx={{ textAlign: 'left' }}>\r\n                                                    <span style={{ fontWeight: '550', fontSize: '130%' }}>{data.Brand.name}</span>\r\n                                                    <div className=\"overflow\" style={{ marginTop: '5%' }}>\r\n                                                        {data.name}\r\n                                                    </div>\r\n                                                </Grid>\r\n                                                <Grid item xs={4} sx={{ background: '' }}>\r\n                                                    <span style={{ fontWeight: '50 !important ', fontSize: '110%', \r\n                                                    float: 'right' }}>\r\n                                                        Creator\r\n                                                    </span>\r\n                                                </Grid>\r\n                                            </Grid>\r\n\r\n                                            <Divider sx={{ mt: 2, mb: 2 }} />\r\n                                            <Grid container sx={{ background: '' }}>\r\n                                                <Grid item md={6} xs={12} className=\"overflow\" sx={{ pt: 1 }}>\r\n                                                    <span\r\n                                                        style={{\r\n                                                            background: theme.palette.mode === 'dark' ? 'black' : '#d9d9d9',\r\n                                                            padding: '3% 4%',\r\n                                                            borderRadius: '10%',\r\n                                                            color: 'white',\r\n                                                            fontSize: '80%'\r\n                                                        }}\r\n                                                    >\r\n                                                        02h\r\n                                                    </span>{' '}\r\n                                                    :{' '}\r\n                                                    <span\r\n                                                        style={{\r\n                                                            background: theme.palette.mode === 'dark' ? 'black' : '#d9d9d9',\r\n                                                            padding: '3% 4%',\r\n                                                            borderRadius: '10%',\r\n                                                            color: 'white',\r\n                                                            fontSize: '80%'\r\n                                                        }}\r\n                                                    >\r\n                                                        25m\r\n                                                    </span>{' '}\r\n                                                    :{' '}\r\n                                                    <span\r\n                                                        style={{\r\n                                                            background: theme.palette.mode === 'dark' ? 'black' : '#d9d9d9',\r\n                                                            padding: '3% 4%  ',\r\n                                                            borderRadius: '10%',\r\n                                                            color: 'white',\r\n                                                            fontSize: '80%'\r\n                                                        }}\r\n                                                    >\r\n                                                        04s\r\n                                                    </span>\r\n                                                </Grid>\r\n                                                <Grid\r\n                                                    item\r\n                                                    md={6}\r\n                                                    xs={12}\r\n                                                    className=\"overflow\"\r\n                                                    sx={{ pl: 1, marginTop: { xs: '10px', md: '0' } }}\r\n                                                >\r\n                                                    Current Bid\r\n                                                    <div style={{ marginTop: '5%', fontSize: '110%' }}>\r\n                                                        {data.currencyType + ' ' + data.price}\r\n                                                    </div>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </CardContent>\r\n                                    </CardActionArea>\r\n                                </Card>\r\n                            </Grid>\r\n                        ))}\r\n                    </Grid>\r\n                </Grid>\r\n            ) : (\r\n                <Grid item xs={12}>\r\n                    <Typography\r\n                        variant=\"h3\"\r\n                        mt={1}\r\n                        component=\"div\"\r\n                        sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center', color: 'gray' }, textTransform: 'capitalize' }}\r\n                    >\r\n                        No similar product found..!\r\n                    </Typography>\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SimilarProducts;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport AutorenewIcon from '@mui/icons-material/Autorenew';\r\nimport {\r\n    Typography,\r\n    Grid,\r\n    Select,\r\n    InputLabel,\r\n    FormControl,\r\n    MenuItem,\r\n   \r\n    Divider\r\n} from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { IconButton, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip } from '@mui/material';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nconst Activity = () => {\r\n    const theme = useTheme();\r\n    const itemData = [\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Vlad556 ',\r\n            to: 'Vlad556 ',\r\n            days: '9 Days ago '\r\n        },\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Vlad556 ',\r\n            to: 'Vlad556 ',\r\n            days: '9 Days ago '\r\n        },\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Vlad556 ',\r\n            to: 'Vlad556 ',\r\n            days: '9 Days ago '\r\n        },\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Vlad556 ',\r\n            to: 'Vlad556 ',\r\n            days: '9 Days ago '\r\n        }\r\n    ];\r\n    const [search, setSearch] = useState('');\r\n\r\n    return (\r\n        <>\r\n            <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n                <Grid item xs={12} lg={12} md={12}>\r\n                    <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                        <Grid item xs={12}>\r\n                            <Typography\r\n                                variant=\"h2\"\r\n                                mt={4}\r\n                                component=\"div\"\r\n                                sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' }, \r\n                                textTransform: 'capitalize' }}\r\n                            >\r\n                                Activity\r\n                                <AutorenewIcon />\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <Grid item md={12} sm={12}>\r\n                        <MainCard\r\n                         className='tableShadow'\r\n                            sx={{ background: theme.palette.mode === 'dark' ? '#181C1F' : '#fff' }}\r\n                            title={\r\n                                <Grid container spacing={gridSpacing}>\r\n                                    <Grid item xs={12}>\r\n                                        <FormControl fullWidth>\r\n                                            <InputLabel id=\"age-select\">Filter</InputLabel>\r\n                                            <Select\r\n                                                fullWidth\r\n                                                labelId=\"age-select\"\r\n                                                id=\"age\"\r\n                                                name=\"age\"\r\n                                                // defaultValue={formik.values.age}\r\n                                                // onChange={formik.handleChange}\r\n                                                label=\"Age\"\r\n                                            >\r\n                                                <MenuItem value=\"\">\r\n                                                    <em>Filter</em>\r\n                                                </MenuItem>\r\n                                                <MenuItem value={10}>Ten</MenuItem>\r\n                                                <MenuItem value={20}>Twenty</MenuItem>\r\n                                                <MenuItem value={30}>Thirty</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            }\r\n                            content={false}\r\n                        >\r\n                            <Divider />\r\n                            <TableContainer>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">Event </TableCell>\r\n                                            <TableCell align=\"center\">Price </TableCell>\r\n                                            <TableCell align=\"center\">From</TableCell>\r\n                                            <TableCell align=\"center\">To </TableCell>\r\n                                            <TableCell align=\"center\">Date</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    {itemData.map((item) => (\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell align=\"center\">{item.title}</TableCell>\r\n                                                <TableCell align=\"center\">{item.price}</TableCell>\r\n                                                <TableCell sx={{ color: '#2194FF' }} align=\"center\">\r\n                                                    {item.from}\r\n                                                </TableCell>\r\n                                                <TableCell sx={{ color: '#2194FF' }} align=\"center\">\r\n                                                    {item.to}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"center\">{item.days}</TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    ))}\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </MainCard>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Activity;\r\n","// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Container, Grid, Typography } from '@mui/material';\r\n\r\n// project imports\r\n\r\nimport SubCard from 'ui-component/cards/SubCard';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// =============================|| LANDING - FEATURE PAGE ||============================= //\r\n\r\nconst Properties = ({ nft }) => {\r\n    const theme = useTheme();\r\n    const property = [\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        },\r\n        {\r\n            heading: 'Background',\r\n            title: 'Red Light ',\r\n            title2: '94% Have this trait'\r\n        }\r\n    ];\r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12} lg={12} md={12}>\r\n                <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                    <Grid item xs={12}>\r\n                        <Typography\r\n                            variant=\"h2\"\r\n                            mt={4}\r\n                            component=\"div\"\r\n                            sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' }, textTransform: 'capitalize' }}\r\n                        >\r\n                            Properties\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            {nft.NFTMetaData?.length > 0 ? (\r\n                <>\r\n                    <Grid item xs={12}>\r\n                        <Grid container justifyContent=\"left\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n                            {nft?.NFTMetaData.map((item) => (\r\n                                <Grid item md={2} sm={6}>\r\n                                    <SubCard\r\n                                        className=\"property propertyShadow\"\r\n                                        sx={{ background: theme.palette.mode === 'dark' ? '#181C1F' : '#fff' }}\r\n                                    >\r\n                                        <Grid container justifyContent=\"center\" spacing={2}>\r\n                                            <Grid item xs={12}>\r\n                                                <Typography className=\"pbackground\" variant=\"h3\">\r\n                                                    {item.fieldName}\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={12}>\r\n                                                <Typography className=\"encapPropertry\" variant=\"h3\">\r\n                                                    {item.fieldValue}{' '}\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={12}>\r\n                                                <Typography\r\n                                                    color={theme.palette.mode === 'dark' ? 'white' : 'black'}\r\n                                                    className=\"plight\"\r\n                                                    variant=\"body2\"\r\n                                                >\r\n                                                    94% Have this trait\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </SubCard>\r\n                                </Grid>\r\n                            ))}\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Typography\r\n                                variant=\"h3\"\r\n                                mt={2}\r\n                                component=\"div\"\r\n                                sx={{\r\n                                    textAlign: { xs: 'center', md: 'left', sm: 'center' },\r\n                                    textTransform: 'capitalize',\r\n                                    color: '#9498aa'\r\n                                }}\r\n                            >\r\n                                No Property Found..!\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            )}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Properties;\r\n","import { useLocation } from 'react-router-dom';\r\nimport { useTheme } from '@emotion/react';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Grid } from '@mui/material';\r\nimport PropertiesView from './component/productView';\r\nimport SimilarProducts from './component/similarProducts';\r\nimport Activity from './component/activity';\r\nimport Properties from './component/properties';\r\nconst ProductDetails = () => {\r\n    const theme = useTheme();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n    const marketplaceNfts = useSelector((state) => state.marketplaceReducer.marketplaceNfts);\r\n\r\n    return (\r\n        <>\r\n            <Grid\r\n                container-fluid\r\n                md={12}\r\n                lg={11}\r\n                sx={{\r\n                    display: { xs: 'block', sm: 'block', md: 'flex', lg: 'flex' },\r\n                    background: 'tranparent',\r\n                    color: theme.palette.mode === 'dark' ? 'white' : '#404040'\r\n                }}\r\n            >\r\n                <Grid item md={12} xs={12} lg={11}>\r\n                    <Grid container-fluid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <Grid container>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <PropertiesView nft={location.state.nft} />\r\n                                </Grid>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <Properties nft={location.state.nft} />\r\n                                </Grid>\r\n                                <Grid item md={12} xs={12}>\r\n                                    <Activity nft={location.state.nft} />\r\n                                </Grid>\r\n\r\n                                <Grid item md={12} xs={12}>\r\n                                    <SimilarProducts nft={location.state.nft} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProductDetails;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","const BLOCKCHAIN = \r\n    {\r\n        WALLET_ADDRESS: '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651',\r\n        ERC20: '0x943b645e4dEE17D102745f5b1B40B775f06C0366'\r\n    }\r\n    \r\n\r\n\r\nexport default BLOCKCHAIN\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// ==============================|| CUSTOM SUB CARD ||============================== //\r\n\r\nconst SubCard = forwardRef(({ children, content, contentClass, darkTitle, secondary, sx = {}, contentSX = {}, title, ...others }, ref) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            ref={ref}\r\n            sx={{\r\n                border: '1px solid',\r\n                borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light,\r\n                ':hover': {\r\n                    boxShadow: theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' : '0 2px 14px 0 rgb(32 40 45 / 8%)'\r\n                },\r\n                ...sx\r\n            }}\r\n            {...others}\r\n        >\r\n            {/* card header and action */}\r\n            {!darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h5\">{title}</Typography>} action={secondary} />}\r\n            {darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h4\">{title}</Typography>} action={secondary} />}\r\n\r\n            {/* content & header divider */}\r\n            {title && (\r\n                <Divider\r\n                    sx={{\r\n                        opacity: 1,\r\n                        borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light\r\n                    }}\r\n                />\r\n            )}\r\n\r\n            {/* card content */}\r\n            {content && (\r\n                <CardContent sx={{ p: 2.5, ...contentSX }} className={contentClass || ''}>\r\n                    {children}\r\n                </CardContent>\r\n            )}\r\n            {!content && children}\r\n        </Card>\r\n    );\r\n});\r\n\r\nSubCard.propTypes = {\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    sx: PropTypes.object,\r\n    contentSX: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nSubCard.defaultProps = {\r\n    content: true\r\n};\r\n\r\nexport default SubCard;\r\n"],"sourceRoot":""}