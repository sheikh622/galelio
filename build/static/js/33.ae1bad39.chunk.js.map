{"version":3,"sources":["views/pages/brandAdmin/nftManagement/component/quantitySelector.js","assets/images/icons/image-upload.svg","views/pages/brandAdmin/nftManagement/component/addNft.js","views/pages/brandAdmin/nftManagement/component/mainCard.js","views/pages/brandAdmin/nftManagement/component/editNftDialog.js","views/pages/brandAdmin/nftManagement/component/requestForMintDialog.js","views/pages/brandAdmin/nftManagement/component/deleteNftDialog.js","views/pages/brandAdmin/nftManagement/component/details.js","views/pages/brandAdmin/nftManagement/component/nftcard.js","views/pages/brandAdmin/nftManagement/index.js","constants.js"],"names":["QuantitySelector","formik","fileArray","index","style","display","marginRight","Typography","marginTop","TextField","type","className","id","value","quantity","onChange","e","target","setFieldValue","Transition","forwardRef","props","ref","Slide","direction","typeArray","label","AddNft","open","setOpen","data","search","page","limit","nftType","dispatch","useDispatch","user","useSelector","state","auth","useState","mintType","setMintType","uploadedImages","setUploadedImages","fieldDataArray","setFieldDataArray","setType","setLoader","fileDataArray","setFileDataArray","validationSchema","Yup","nftName","required","max","matches","nftDescription","nftPrice","min","typeError","images","useFormik","enableReinitialize","initialValues","onSubmit","values","console","log","map","fieldValue","fileNameArray","fieldName","isValid","parseInt","toast","error","image","name","split","pop","forEach","array","handleError","addNft","categoryId","CategoryId","metaDataArray","price","description","currencyType","asset","handleClose","BrandId","hasFile","length","resetForm","handleDrop","useCallback","acceptedFiles","newUploadedImages","acceptedFile","useDropzone","accept","onDrop","getRootProps","getInputProps","isDragActive","isDragReject","isDragAccept","Dialog","onClose","maxWidth","TransitionComponent","keepMounted","DialogTitle","Divider","Grid","container","DialogActions","AnimateButton","Button","sx","my","ml","padding","md","lg","variant","size","onClick","DialogContent","autoComplete","handleSubmit","mt","xs","fullWidth","handleChange","touched","Boolean","errors","helperText","select","event","option","MenuItem","multiline","rows","float","spacing","item","handleFieldNameChange","handleFieldValueChange","IconButton","color","edge","splice","handleRemoveField","icon","closeFill","width","height","background","borderRadius","paddingBottom","paddingTop","clsx","Box","textAlign","component","alt","src","UploadImage","Link","underline","List","disablePadding","list","AnimatePresence","file","ListItem","motion","div","ListItemIcon","fileFill","ListItemText","primary","primaryTypographyProps","newFiles","handleRemoveFile","pr","handleFileFieldNameChange","handleFileFieldValueChange","currentTarget","files","handleFileRemoveField","disableElevation","headerSX","mr","MainCard","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","title","others","theme","useTheme","Card","borderColor","palette","mode","default","CardHeader","action","CardContent","currencyTypeArray","EditNftDialog","nftInfo","loader","setCurrencyType","isFile","File","perviousUploadedItems","filter","newUploadedItems","editNft","brandId","useEffect","structuredClone","RequestForMintDialog","nftData","handleMintRequest","profitPercentage","Category","BrandCategories","quant","NFTTokens","amount","prices","ethers","utils","parseEther","toString","erc20Address","BLOCKCHAIN","ERC20","provider","providers","Web3Provider","window","ethereum","signer","getSigner","token","Contract","Erc20","transfer","wait","requestNftForMinting","DialogContentText","dark","DeleteNFTDialog","deleteNft","DetailsDialog","status","Brand","scroll","descriptionElementRef","useRef","descriptionElement","current","focus","dividers","gridSpacing","margin","justifyContent","sm","pt","NftCard","openRequestMint","setOpenRequestMint","editNftOpen","setEditNftOpen","deleteNftOpen","setDeleteNftOpen","DetailsNftOpen","setDetailsNftOpen","setImage","setNftInfo","position","transform","transition","CardMedia","p","textDecoration","textTransform","overflow","Stack","alignItems","NFTMetaData","NFTMetaFiles","NftManagement","navigate","useNavigate","location","useLocation","setSearch","setPage","setLimit","addNftOpen","setAddNftOpen","setAnchorEl","getAllNft","nftList","nftReducer","fontWeight","marginLeft","nfts","nft","Pagination","showFirstButton","showLastButton","count","pages","newPage","m","CircularProgress","disableShrink","WALLET_ADDRESS"],"mappings":"2eA0BeA,EAzBU,SAAH,GAAsC,IAAhCC,EAAM,EAANA,OAAQC,EAAS,EAATA,UAAWC,EAAK,EAALA,MAM3C,OACI,mCACI,sBAAKC,MAAO,CAAEC,QAAS,OAAQC,YAAa,QAAS,UACjD,cAACC,EAAA,EAAU,CAACH,MAAO,CAAEI,UAAW,OAAQF,YAAa,OAAQ,yBAE7D,cAACG,EAAA,EAAS,CACNC,KAAK,SACLC,UAAU,gBACVC,GAAG,kCACHC,MAAOX,EAAUC,GAAOW,SACxBC,SAAU,SAACC,GAfN,IAACH,IAgBWG,EAAEC,OAAOJ,MAftCX,EAAUC,GAAOW,SAAWD,EAC5BZ,EAAOiB,cAAc,SAAUhB,EAenB,QAKpB,E,kBCxBe,MAA0B,yC,iBCyCnCiB,EAAaC,sBAAW,SAACC,EAAOC,GAAG,OAAK,cAACC,EAAA,EAAK,aAACC,UAAU,KAAKF,IAAKA,GAASD,GAAS,IAErFI,EAAY,CACd,CACIZ,MAAO,OACPa,MAAO,SAIA,SAASC,EAAO,GAAwD,IAAtDC,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QAASC,EAAI,EAAJA,KAAMC,EAAM,EAANA,OAAQC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAAOC,EAAO,EAAPA,QACjEC,EAAWC,cACXC,EAAOC,aAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKH,IAAI,IACnD,EAAgCI,mBAAS,cAAa,mBAA/CC,GAAQ,KAAEC,GAAW,KAC5B,GAA4CF,mBAAS,IAAG,qBAAjDG,GAAc,MAAEC,GAAiB,MACxC,GAA4CJ,mBAAS,IAAG,qBAAjDK,GAAc,MAAEC,GAAiB,MACxC,GAAwBN,mBAAS,QAAO,qBAAjC/B,GAAI,MAAEsC,GAAO,MACpB,GAA4BP,oBAAS,GAAM,qBAA5BQ,IAAF,MAAW,OACxB,GAA0CR,mBAAS,IAAG,qBAA/CS,GAAa,MAAEC,GAAgB,MA0ChCC,GAAmBC,IAAW,CAChCC,QAASD,MACJE,SAAS,yBACTC,IAAI,GAAI,yCACRC,QAAQ,2CAA4C,oBACzDC,eAAgBL,MACXE,SAAS,gCACTC,IAAI,IAAM,0DAEfG,SAAUN,MACLO,IAAI,KAAU,mCACdL,SAAS,yBACTM,UAAU,iBACfC,OAAQT,QAENpD,GAAS8D,YAAU,CACrBC,oBAAoB,EACpBC,cAAe,CACXX,QAAS,GACTI,eAAgB,GAChBC,SAAU,EACVG,OAAQ,IAEZV,oBACAc,SAAU,SAACC,GACPC,QAAQC,IAAI,gBAAiBnB,IAC7B,IAAIhD,EAAYgD,GAAcoB,KAAI,SAACxC,GAE/B,OADAsC,QAAQC,IAAI,OAAQvC,GACbA,EAAKyC,UAChB,IACIC,EAAgBtB,GAAcoB,KAAI,SAACxC,GAEnC,OADAsC,QAAQC,IAAI,OAAQvC,GACbA,EAAK2C,SAChB,IAEAL,QAAQC,IAAI,YAAanE,GACzBkE,QAAQC,IAAI,gBAAiBG,GAC7B,IACa,EADTE,EA1EQ,SAAC5B,EAAgBI,EAAeiB,GAChD,IAAIO,GAAU,EAiCd,OAhCIC,SAASR,EAAOL,OAAO,GAAGhD,UAAY,IACtC8D,IAAMC,MAAM,0CACZH,GAAU,GAEsC,OAAhDP,EAAOL,OAAO,GAAGgB,MAAMC,KAAKC,MAAM,KAAKC,OAAkE,OAAhDd,EAAOL,OAAO,GAAGgB,MAAMC,KAAKC,MAAM,KAAKC,QAEhGL,IAAMC,MAAM,yDACZH,GAAU,GAGd5B,EAAeoC,SAAQ,SAACC,GACG,IAAnBA,EAAMV,YACNC,GAAU,EACVE,IAAMC,MAAM,uCAEQ,IAApBM,EAAMZ,aACNG,GAAU,EACVE,IAAMC,MAAM,uCAEpB,IAEA3B,EAAcgC,SAAQ,SAACC,GACI,IAAnBA,EAAMV,YACNC,GAAU,EACVE,IAAMC,MAAM,mCAEQ,MAApBM,EAAMZ,aACNG,GAAU,EACVE,IAAMC,MAAM,mCAEpB,IAEOH,CACX,CAuCsBU,CAAYtC,GAAgBI,GAAeiB,GACrDO,IACAzB,IAAU,GACVd,EACIkD,aAAM,GACFC,WAAYxD,EAAKyD,WACjB7C,SAAUA,GACV8C,cAAe1C,GACf0B,cAAeA,EACftE,UAAWA,EACX6E,KAAMZ,EAAOb,QACbmC,MAAOtB,EAAOR,SACd+B,YAAavB,EAAOT,eACpBiC,aAAcjF,GACdI,SAAUqD,EAAOL,OAAO,GAAGhD,SAC3B8E,MAAOzB,EAAOL,OAAO,GAAGgB,MACxBpE,KAAMwB,EACNF,KAAMA,EACNC,MAAOA,EACPF,OAAQA,GAAM,2BACFD,EAAKyD,YAAU,4BACdM,IAAW,wBACfxD,EAAKyD,SAAO,KAIrC,IAGEC,GAAU9F,GAAOkE,OAAOL,OAAOkC,OAAS,EAExCH,GAAc,WAChBhE,GAAQ,GACR5B,GAAOgG,YACPtD,GAAY,cACZK,GAAQ,QACRH,GAAkB,IAClBE,GAAkB,IAClBE,IAAU,GACVE,GAAiB,GACrB,EACM+C,GAAaC,uBACf,SAACC,GACG,IAAIC,EAAiB,YAAOzD,IAC5BwD,EAAc9B,IAAG,iDAAC,WAAOgC,GAAY,iFAC7BxE,EAAO,CAAEgD,MAAOwB,EAAcxF,SAAU,GAC5CuF,EAAiB,sBAAOA,GAAiB,CAAEvE,IAAM,2CACpD,mDAHgB,IAIjB7B,GAAOiB,cAAc,SAAUmF,GAC/BxD,GAAkBwD,EACtB,GAEA,CAACpG,GAAOiB,cAAe0B,KAS3B,GAAkF2D,YAAY,CAC1FC,OAAQ,uBACRC,OAAQP,KAFJQ,GAAY,GAAZA,aAAcC,GAAa,GAAbA,cAAeC,GAAY,GAAZA,aAAcC,GAAY,GAAZA,aAAcC,GAAY,GAAZA,aAuCjE,OACI,mCACI,eAACC,EAAA,EAAM,CACHnF,KAAMA,EACNoF,QAASnB,GACT,kBAAgB,oBAChBlF,UAAU,yBACVsG,SAAS,KACTC,oBAAqB/F,EACrBgG,aAAW,EACX,mBAAiB,kCAAiC,UAElD,cAACC,EAAA,EAAW,CAACxG,GAAG,4BAA4BD,UAAU,YAAW,qBAGjE,cAAC0G,EAAA,EAAO,IACR,cAACC,EAAA,EAAI,CAACC,WAAS,WACX,eAACC,EAAA,EAAa,WACV,cAACC,EAAA,EAAa,UACV,cAACC,EAAA,EAAM,CACHhH,KAAK,SAELiH,GAAI,CAAEC,GAAI,EAAGC,GAAI,EAAGC,QAAS,CAAEC,GAAI,WAAYC,GAAI,aACnDC,QAAqB,cAAZvF,GAA2B,YAAc,WAClD/B,UAAU,UACVuH,KAAK,QAELC,QAAS,WACLxF,GAAY,aAChB,EAAE,8BAKV,cAAC8E,EAAA,EAAa,UACV,cAACC,EAAA,EAAM,CACH/G,UAAU,UACVuH,KAAK,QACLxH,KAAK,SACLuH,QAAqB,YAAZvF,GAAyB,YAAc,WAChDiF,GAAI,CAAEC,GAAI,EAAGC,GAAI,EAAGC,QAAS,CAAEC,GAAI,WAAYC,GAAI,aAGnDG,QAAS,WACLxF,GAAY,WAChB,EAAE,iCASlB,eAACyF,EAAA,EAAa,WACV,uBAAMC,aAAa,MAAMnE,SAAUjE,GAAOqI,aAAa,UACnD,eAAChB,EAAA,EAAI,CAACC,WAAS,EAACgB,GAAI,EAAE,UAClB,cAACjB,EAAA,EAAI,CAACkB,GAAI,EAAGT,GAAI,EAAGC,GAAI,EAAE,SACtB,cAACvH,EAAA,EAAS,CACNE,UAAU,iBACVC,GAAG,UACHmE,KAAK,UACLrD,MAAM,WACN+G,WAAS,EACT5H,MAAOZ,GAAOkE,OAAOb,QACrBvC,SAAUd,GAAOyI,aACjB7D,MAAO5E,GAAO0I,QAAQrF,SAAWsF,QAAQ3I,GAAO4I,OAAOvF,SACvDwF,WAAY7I,GAAO0I,QAAQrF,SAAWrD,GAAO4I,OAAOvF,QACpD+E,aAAa,aACbJ,QAAQ,eAGhB,cAACX,EAAA,EAAI,CAACkB,GAAI,GAAIT,GAAI,EAAGC,GAAI,IACzB,cAACV,EAAA,EAAI,CAACkB,GAAI,EAAGT,GAAI,EAAGC,GAAI,EAAE,SACtB,cAACvH,EAAA,EAAS,CACNE,UAAU,iBACVC,GAAG,WACHmE,KAAK,WACLrD,MAAM,YACN+G,WAAS,EACT5H,MAAOZ,GAAOkE,OAAOR,SACrB5C,SAAUd,GAAOyI,aACjB7D,MAAO5E,GAAO0I,QAAQhF,UAAYiF,QAAQ3I,GAAO4I,OAAOlF,UACxDmF,WAAY7I,GAAO0I,QAAQhF,UAAY1D,GAAO4I,OAAOlF,SACrD0E,aAAa,aACbJ,QAAQ,eAIhB,cAACX,EAAA,EAAI,CAACkB,GAAI,GAAIT,GAAI,GAAIC,GAAI,GAAIO,GAAI,EAAE,SAChC,cAAC9H,EAAA,EAAS,CACNE,UAAU,iBACVsH,QAAQ,SACRrH,GAAG,yBACHmI,QAAM,EACNN,WAAS,EACT5H,MAAOH,GACPK,SAnRb,SAACiI,GAChBhG,GAAQgG,EAAM/H,OAAOJ,MACzB,EAiRqD,SAEpBY,EAAU6C,KAAI,SAAC2E,EAAQ9I,GAAK,OACzB,cAAC+I,EAAA,EAAQ,CAAarI,MAAOoI,EAAOpI,MAAM,SACrCoI,EAAOvH,OADGvB,EAEJ,QAIvB,cAACmH,EAAA,EAAI,CAACkB,GAAI,GAAID,GAAI,EAAE,SAChB,cAAC9H,EAAA,EAAS,CACN0I,WAAS,EACTC,KAAM,EACNzI,UAAU,iBACVC,GAAG,iBACHmE,KAAK,iBACLrD,MAAM,kBACN+G,WAAS,EACT5H,MAAOZ,GAAOkE,OAAOT,eACrB3C,SAAUd,GAAOyI,aACjB7D,MAAO5E,GAAO0I,QAAQjF,gBAAkBkF,QAAQ3I,GAAO4I,OAAOnF,gBAC9DoF,WAAY7I,GAAO0I,QAAQjF,gBAAkBzD,GAAO4I,OAAOnF,eAC3D2E,aAAa,aACbJ,QAAQ,eAGhB,cAACX,EAAA,EAAI,CAACkB,GAAI,GAAID,GAAI,EAAE,SAChB,cAACb,EAAA,EAAM,CACH/G,UAAU,cACVsH,QAAQ,YACRN,GAAI,CAAE0B,MAAO,SACblB,QAAS,WACLpF,GAAkB,GAAD,mBACVD,IAAc,CACjB,CACI2B,UAAW,GACXF,WAAY,MAGxB,EAAE,kCAOY,GAAzBzB,GAAekD,QACZ,mCACI,cAACsB,EAAA,EAAI,CAACC,WAAS,EAAC+B,QAAS,EAAE,SACtBxG,GAAewB,KAAI,SAACxC,EAAM3B,GAAK,OAC5B,qCACI,cAACmH,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,EAAE,SACb,cAAC/H,EAAA,EAAS,CACNG,GAAG,aACHD,UAAU,iBACVoE,KAAK,aACLrD,MAAM,gBACNb,MAAOiB,EAAK2C,UACZ1D,SAAU,SAACC,IA7L7B,SAACH,EAAOV,GAClC,IAAIgF,EAAK,YAAOrC,IAChBqC,EAAMhF,GAAOsE,UAAY5D,EACzBkC,GAAkBoC,EACtB,CA0LoDqE,CAAsBxI,EAAEC,OAAOJ,MAAOV,EAC1C,EACA8H,QAAQ,WACRQ,WAAS,MAIjB,cAACnB,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,EAAE,SACb,cAAC/H,EAAA,EAAS,CACNE,UAAU,iBACVC,GAAG,cACHmE,KAAK,cACLrD,MAAM,iBACNb,MAAOiB,EAAKyC,WACZxD,SAAU,SAACC,IAvM5B,SAACH,EAAOV,GACnC,IAAIgF,EAAK,YAAOrC,IAChBqC,EAAMhF,GAAOoE,WAAa1D,EAC1BkC,GAAkBoC,EACtB,CAoMoDsE,CAAuBzI,EAAEC,OAAOJ,MAAOV,EAC3C,EACA8H,QAAQ,WACRQ,WAAS,MAGjB,cAACnB,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,EAAGD,GAAI,EAAE,SACpB,cAACmB,EAAA,EAAU,CACPC,MAAM,QACNC,KAAK,MACL1B,KAAK,QACLC,QAAS,YA7M/B,SAAChI,GACvB,IAAIgF,EAAK,YAAOrC,IAChBqC,EAAM0E,OAAO1J,EAAO,GACpB4C,GAAkBoC,EACtB,CA0MoD2E,CAAkB3J,EACtB,EAAE,SAEF,cAAC,IAAI,CAAC4J,KAAMC,IAAWC,MAAO,GAAIC,OAAQ,WAGnD,QAMQ,IAA1BtH,GAAeoD,QACZ,cAACsB,EAAA,EAAI,CACDK,GAAI,CAAEwC,WAAY,UAAWC,aAAc,MAAOC,cAAe,OAAQC,WAAY,QACrFf,MAAI,EACJvB,GAAI,GACJO,GAAI,EAAE,SAEN,qBAAK5H,UAAW4J,YAAK,oBAAqB,OAAO,SAC7C,8CACI5J,UAAW4J,YAAK,WAAY,CACxB3D,aAAcA,GACdE,aAAcA,GACdD,aAAcA,MAEdH,MAAc,cAElB,qCAAWC,OAEX,eAACW,EAAA,EAAI,CAACC,WAAS,EAAC/F,UAAU,SAAQ,UAC9B,cAACgJ,EAAA,EAAG,CACAC,UAAU,SACVC,UAAU,MACVC,IAAI,cACJC,IAAKC,EACLlD,GAAI,CAAEuC,OAAQ,MAGlB,cAACM,EAAA,EAAG,CAACjC,GAAI,EAAGkC,UAAU,SAAS9C,GAAI,CAAEE,GAAI,CAAEE,GAAI,IAAM,SACjD,eAACxH,EAAA,EAAU,CAAC0H,QAAQ,WAAWN,GAAI,CAAEgC,MAAO,OAAQc,UAAW,UAAW,mCAEtE,cAACK,EAAA,EAAI,CAACC,UAAU,SAAQ,oBAAc,wBASlE,cAACzD,EAAA,EAAI,CAACiC,MAAI,EAACvB,GAAI,GAAIO,GAAI,EAAE,SACrB,cAACyC,EAAA,EAAI,CAACC,gBAAc,EAACtK,UAAW4J,YAAK,CAAEW,KAAMnF,KAAY4B,GAAI,CAAEY,GAAI,GAAI,SACnE,cAAC4C,EAAA,EAAe,UACXlL,GAAOkE,OAAOL,QACX7D,GAAOkE,OAAOL,OAAOQ,KAAI,SAAC8G,EAAMjL,GAAK,OACjC,eAACkL,EAAA,EAAQ,CAAwBX,UAAWY,IAAOC,IAAK5K,UAAU,WAAU,UACxE,cAAC6K,EAAA,EAAY,UACT,cAAC,IAAI,CAACzB,KAAM0B,IAAUxB,MAAO,GAAIC,OAAQ,OAE7C,cAACwB,EAAA,EAAY,CACTC,QAEIP,EAAKtG,MAAMC,KAAOqG,EAAKtG,MAAMC,KAAO,GAExC6G,uBAAwB,CACpB3D,QAAS,QAIJ,cAAZvF,IACG,cAAC,EAAgB,CAACzC,OAAQA,GAC1BC,UAAWD,GAAOkE,OAAOL,OAAQ3D,MAAOA,IAE5C,cAACuJ,EAAA,EAAU,CACPC,MAAM,QACNC,KAAK,MACL1B,KAAK,QACLC,QAAS,kBAnThC,SAACiD,EAAMjL,GAC5B,IAAM0L,EAAQ,YAAO5L,GAAOkE,OAAOL,QACnC+H,EAAShC,OAAO1J,EAAO,GACvB0C,GAAkBgJ,GAClB5L,GAAOiB,cAAc,SAAU2K,EACnC,CA8S+DC,CAAiBV,EAAKtG,MAAO3E,EAAM,EAAC,SAEnD,cAAC,IAAI,CAAC4J,KAAMC,IAAWC,MAAO,GAAIC,OAAQ,SAxBlCkB,EAAKtG,MAAMC,KA0BhB,aAOnC,eAACuC,EAAA,EAAI,CAACC,WAAS,YACX,cAACD,EAAA,EAAI,CAACkB,GAAI,GAAID,GAAI,EAAGwD,GAAI,EAAE,SACvB,cAACrE,EAAA,EAAM,CACHO,QAAQ,YACRtH,UAAU,cACVgH,GAAI,CAAE0B,MAAO,SACblB,QAAS,WACLhF,GAAiB,GAAD,mBACTD,IAAa,CAChB,CACIuB,UAAW,GACXF,WAAY,QAGxB,EAAE,yBAKe,GAAxBrB,GAAc8C,QACX,mCACI,cAACsB,EAAA,EAAI,CAACC,WAAS,EAAC+B,QAAS,EAAGf,GAAI,EAAE,SAC7BrF,GAAcoB,KAAI,SAACxC,EAAM3B,GAAK,OAC3B,qCACI,cAACmH,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,EAAE,SACb,cAAC/H,EAAA,EAAS,CACNG,GAAG,aACHmE,KAAK,aACLrD,MAAM,YACNb,MAAOiB,EAAK2C,UACZ1D,SAAU,SAACC,IA/TzB,SAACH,EAAOV,GACtC,IAAIgF,EAAK,YAAOjC,IAChBiC,EAAMhF,GAAOsE,UAAY5D,EACzBsC,GAAiBgC,EACrB,CA4ToD6G,CAA0BhL,EAAEC,OAAOJ,MAAOV,EAC9C,EACA8H,QAAQ,WACRQ,WAAS,MAIjB,cAACnB,EAAA,EAAI,CAACiC,MAAI,EAAChB,GAAI,EAAGC,GAAI,EAAE,SACpB,uBAEI9H,KAAK,OACLE,GAAG,SACHmE,KAAK,SACLyB,OAAO,eACPzF,SAAU,SAACiI,IAzUxB,SAACnI,EAAOV,GACvC,IAAIgF,EAAK,YAAOjC,IAChBiC,EAAMhF,GAAOoE,WAAa1D,EAC1BsC,GAAiBgC,EACrB,CAsUoD8G,CAA2BjD,EAAMkD,cAAcC,MAAM,GAAIhM,EAC7D,MAGR,cAACmH,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,EAAGD,GAAI,EAAE,SACpB,cAACmB,EAAA,EAAU,CACPC,MAAM,QACNC,KAAK,MACL1B,KAAK,QACLC,QAAS,YA7U3B,SAAChI,GAC3B,IAAIgF,EAAK,YAAOjC,IAChBiC,EAAM0E,OAAO1J,EAAO,GACpBgD,GAAiBgC,EACrB,CA0UoDiH,CAAsBjM,EAC1B,EAAE,SAEF,cAAC,IAAI,CAAC4J,KAAMC,IAAWC,MAAO,GAAIC,OAAQ,WAGnD,cAO3B,cAAC7C,EAAA,EAAO,IACR,cAACC,EAAA,EAAI,CAACC,WAAS,WACX,eAACC,EAAA,EAAa,WACV,cAACC,EAAA,EAAa,UACV,cAACC,EAAA,EAAM,CACHhH,KAAK,SACLuH,QAAQ,YACRN,GAAI,CAAEC,GAAI,EAAGC,GAAI,EAAGC,QAAS,CAAEC,GAAI,WAAYC,GAAI,aACnDG,QAAS,WACLlI,GAAOqI,cACX,EACA3H,UAAU,UACVuH,KAAK,QACLmE,kBAAgB,qBAKxB,cAAC5E,EAAA,EAAa,UACV,cAACC,EAAA,EAAM,CACH/G,UAAU,UACVuH,KAAK,QACLxH,KAAK,SACLuH,QAAQ,YACRN,GAAI,CAAEC,GAAI,EAAGC,GAAI,EAAGC,QAAS,CAAEC,GAAI,WAAYC,GAAI,aACnDG,QAAStC,GACT8D,MAAM,QACN0C,kBAAgB,iCAUhD,C,sLCnmBMC,GAAW,CACb,0BAA2B,CAAEC,GAAI,IA+EtBC,GA3EEpL,sBACb,WAeIE,GACE,IAAD,IAdGmL,cAAM,OAAO,EACbC,EAAS,EAATA,UACAC,EAAQ,EAARA,SAAS,EAAD,EACRC,eAAO,OAAO,MACdC,oBAAY,MAAG,GAAE,MACjBC,iBAAS,MAAG,CAAC,EAAC,EACdC,EAAS,EAATA,UACAC,EAAS,EAATA,UACAC,EAAM,EAANA,OAAO,EAAD,EACNtF,UAAE,MAAG,CAAC,EAAC,EACPuF,EAAK,EAALA,MACGC,EAAM,mBAIPC,EAAQC,cAEd,OACI,eAACC,GAAA,EAAI,yBACDhM,IAAKA,GACD6L,GAAM,IACVxF,GAAE,aACE8E,OAAQA,EAAS,YAAc,OAC/Bc,YAAoC,SAAvBH,EAAMI,QAAQC,KAAkBL,EAAMI,QAAQrD,WAAWuD,QAEtEN,EAAMI,QAAQ7B,QAAQ,KAAO,GAC7B,SAAU,CACNe,UAAWA,EACLO,IACwB,SAAvBG,EAAMI,QAAQC,KAAkB,qCAChC,mCACD,YAEP9F,GACL,WAGAoF,GAAaG,GAAS,cAACS,GAAA,EAAU,CAAChG,GAAI2E,GAAUY,MAAOA,EAAOU,OAAQZ,IACvED,GAAaG,GACV,cAACS,GAAA,EAAU,CAAChG,GAAI2E,GAAUY,MAAO,cAAC3M,EAAA,EAAU,CAAC0H,QAAQ,KAAI,SAAEiF,IAC3DU,OAAQZ,IAIXE,GAAS,cAAC7F,EAAA,EAAO,IAGjBuF,GACG,cAACiB,EAAA,EAAW,CAAClG,GAAImF,EAAWnM,UAAWkM,EAAa,SAC/CF,KAGPC,GAAWD,KAGzB,IC5BExL,I,OAAaC,sBAAW,SAACC,EAAOC,GAAG,OAAK,cAACC,EAAA,EAAK,aAACC,UAAU,KAAKF,IAAKA,GAASD,GAAS,KAErFyM,GAAoB,CACtB,CACIjN,MAAO,OACPa,MAAO,SAIA,SAASqM,GAAc,GAAuF,IAArFC,EAAO,EAAPA,QAAS1I,EAAU,EAAVA,WAAY5E,EAAI,EAAJA,KAAMqB,EAAM,EAANA,OAAQC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAA0BL,GAAb,EAANqM,OAAiB,EAAThL,UAAe,EAAJrB,MAAMC,EAAO,EAAPA,QACvGM,EAAWC,cACjB,EAAgCK,mBAAS,cAAa,mBAA/CC,EAAQ,KAAEC,EAAW,KAC5B,EAAwCF,mBAAS,QAAO,oBAAjDkD,GAAY,MAAEuI,GAAe,MACpC,GAA4CzL,mBAAS,IAAG,qBAAjDK,GAAc,MAAEC,GAAiB,MACxC,GAA0CN,mBAAS,IAAG,qBAA/CS,GAAa,MAAEC,GAAgB,MACtC,GAA4CV,mBAAS,IAAG,qBAAjDG,GAAc,MAAEC,GAAiB,MA4ClCO,IA3COd,aAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKH,IAAI,IA2C1BgB,IAAW,CAChCC,QAASD,MACJE,SAAS,yBACTC,IAAI,GAAI,yCACRC,QAAQ,2CAA4C,oBACzDC,eAAgBL,MACXE,SAAS,gCACTC,IAAI,IAAM,0DAEfG,SAAUN,MACLO,IAAI,KAAU,mCACdL,SAAS,yBACTM,UAAU,iBACfC,OAAQT,SAENpD,GAAS8D,YAAU,CACrBC,oBAAoB,EACpBC,cAAe+J,EACf5K,oBACAc,SAAU,SAACC,GACP,IACIgK,EADOhK,EAAOL,OAAO,GAAGgB,iBACCsJ,KAC7BhK,QAAQC,IAAI,gBAAiBnB,IAE7B,IAAImL,EAAwBnL,GAAcoL,QAAO,SAACxM,GAC9C,GAA+B,kBAApBA,EAAKyC,WAAyB,OAAOzC,CACpD,IACAsC,QAAQC,IAAI,wBAAyBgK,GAErC,IAAIE,EAAmBrL,GAAcoL,QAAO,SAACxM,GACzC,GAA+B,kBAApBA,EAAKyC,WAAyB,OAAOzC,CACpD,IAEI5B,EAAYqO,EAAiBjK,KAAI,SAACxC,GAClC,OAAOA,EAAKyC,UAChB,IACIC,EAAgB+J,EAAiBjK,KAAI,SAACxC,GACtC,OAAOA,EAAK2C,SAChB,IAEAL,QAAQC,IAAI,YAAanE,GACzBkE,QAAQC,IAAI,gBAAiBG,GAC7B,IAAIE,EAhFQ,SAAC5B,EAAgBI,EAAeiB,EAAQgK,GACxD,IAAIzJ,GAAU,EAkCd,OAjCIyJ,IACoD,OAAhDhK,EAAOL,OAAO,GAAGgB,MAAMC,KAAKC,MAAM,KAAKC,OAAkE,OAAhDd,EAAOL,OAAO,GAAGgB,MAAMC,KAAKC,MAAM,KAAKC,QAEhGL,IAAMC,MAAM,yDACZH,GAAU,IAIdC,SAASR,EAAOL,OAAO,GAAGhD,UAAY,IACtC8D,IAAMC,MAAM,0CACZH,GAAU,GAGd5B,EAAeoC,SAAQ,SAACC,GACG,IAAnBA,EAAMV,YACNC,GAAU,EACVE,IAAMC,MAAM,uCAEQ,IAApBM,EAAMZ,aACNG,GAAU,EACVE,IAAMC,MAAM,uCAEpB,IACA3B,EAAcgC,SAAQ,SAACC,GACI,IAAnBA,EAAMV,YACNC,GAAU,EACVE,IAAMC,MAAM,mCAEQ,MAApBM,EAAMZ,aACNG,GAAU,EACVE,IAAMC,MAAM,mCAEpB,IACOH,CACX,CA4CsBU,CAAYtC,GAAgBI,GAAeiB,EAAQgK,GAE7DzJ,GACAvC,EACIqM,YAAQ,CACJ5N,GAAIoN,EAAQpN,GACZmE,KAAMZ,EAAOb,QACbmC,MAAOtB,EAAOR,SACd+B,YAAavB,EAAOT,eACpB5C,SAAUqD,EAAOL,OAAO,GAAGhD,SAC3B8E,MAAOuI,EAAShK,EAAOL,OAAO,GAAGgB,MAAQ,KACzCa,aAAcA,GACdjD,SAAUA,EACV8C,cAAe1C,GACf0B,cAAeA,EACftE,UAAWA,EACXmO,sBAAuBA,EACvB3N,KAAMA,EACNsB,KAAMA,EACNC,MAAOA,EACPF,OAAQA,EACRuD,WAAYA,EACZmJ,QAAST,EAAQS,QACjB5I,YAAaA,KAK7B,IAGEE,GAAU9F,GAAOkE,OAAOL,OAAOkC,OAAS,EAExCH,GAAc,WAChBhE,GAAQ,GACR5B,GAAOgG,WACX,EACMC,GAAaC,uBACf,SAACC,GACG,IAAIC,EAAiB,YAAOzD,IAC5BwD,EAAc9B,IAAG,iDAAC,WAAOgC,GAAY,iFAC7BxE,EAAO,CAAEgD,MAAOwB,EAAcxF,SAAU,GAC5CuF,EAAiB,sBAAOA,GAAiB,CAAEvE,IAAM,2CACpD,mDAHgB,IAIjB7B,GAAOiB,cAAc,SAAUmF,GAC/BxD,GAAkBwD,EACtB,GAEA,CAACpG,GAAOiB,cAAe0B,KAS3B,GAAkF2D,YAAY,CAC1FC,OAAQ,uBACRC,OAAQP,KAFJQ,GAAY,GAAZA,aAAcC,GAAa,GAAbA,cAAeC,GAAY,GAAZA,aAAcC,GAAY,GAAZA,aAAcC,GAAY,GAAZA,aAmDjE,OAZA4H,qBAAU,WACN3L,GAAkBiL,EAAQlL,gBAC1BK,GAAiB6K,EAAQ9K,eACzBP,EAAYqL,EAAQtL,UACpBwL,GAAgBF,EAAQrI,cACxB9C,GAAkBmL,EAAQlK,OAC9B,GAAG,CAACkK,IAEJU,qBAAU,WACNtK,QAAQC,IAAI,gBAAiBnB,GACjC,GAAG,CAACA,KAGA,mCACI,eAAC6D,EAAA,EAAM,CACHnF,KAAMA,EACNoF,QAASnB,GACT,kBAAgB,oBAChBlF,UAAU,wBACVsG,SAAS,KACTC,oBAAqB/F,GACrBgG,aAAW,EACX,mBAAiB,kCAAiC,UAElD,cAACC,EAAA,EAAW,CAACxG,GAAG,6BAA6BD,UAAU,YAAW,sBAGlE,cAAC0G,EAAA,EAAO,IACR,cAACC,EAAA,EAAI,CAACC,WAAS,WACX,eAACC,EAAA,EAAa,WACV,cAACC,EAAA,EAAa,UACV,cAACC,EAAA,EAAM,CACHhH,KAAK,SACLiH,GAAI,CAAEC,GAAI,EAAGC,GAAI,EAAGC,QAAS,CAAEC,GAAI,WAAYC,GAAI,aACnDC,QAAqB,cAAZvF,EAA2B,YAAc,WAClD/B,UAAU,UACVuH,KAAK,QACLC,QAAS,WACLxF,EAAY,aAChB,EAAE,8BAKV,cAAC8E,EAAA,EAAa,UACV,cAACC,EAAA,EAAM,CACH/G,UAAU,UACVuH,KAAK,QACLxH,KAAK,SACLuH,QAAqB,YAAZvF,EAAyB,YAAc,WAChDiF,GAAI,CAAEC,GAAI,EAAGC,GAAI,EAAGC,QAAS,CAAEC,GAAI,WAAYC,GAAI,aACnDG,QAAS,WACLxF,EAAY,WAChB,EAAE,iCAQlB,eAACyF,EAAA,EAAa,WACV,uBAAMC,aAAa,MAAMnE,SAAUjE,GAAOqI,aAAa,UACnD,eAAChB,EAAA,EAAI,CAACC,WAAS,EAACgB,GAAI,EAAE,UAClB,cAACjB,EAAA,EAAI,CAACkB,GAAI,EAAGT,GAAI,EAAGC,GAAI,EAAE,SACtB,cAACvH,EAAA,EAAS,CACNE,UAAU,iBACVC,GAAG,UACHmE,KAAK,UACLrD,MAAM,WACN+G,WAAS,EACT5H,MAAOZ,GAAOkE,OAAOb,QACrBvC,SAAUd,GAAOyI,aACjB7D,MAAO5E,GAAO0I,QAAQrF,SAAWsF,QAAQ3I,GAAO4I,OAAOvF,SACvDwF,WAAY7I,GAAO0I,QAAQrF,SAAWrD,GAAO4I,OAAOvF,QACpD+E,aAAa,aACbJ,QAAQ,eAGhB,cAACX,EAAA,EAAI,CAACkB,GAAI,GAAIT,GAAI,EAAGC,GAAI,IACzB,cAACV,EAAA,EAAI,CAACkB,GAAI,EAAGT,GAAI,EAAGC,GAAI,EAAE,SACtB,cAACvH,EAAA,EAAS,CACNE,UAAU,iBACVC,GAAG,WACHmE,KAAK,WACLrD,MAAM,YACN+G,WAAS,EACT5H,MAAOZ,GAAOkE,OAAOR,SACrB5C,SAAUd,GAAOyI,aACjB7D,MAAO5E,GAAO0I,QAAQhF,UAAYiF,QAAQ3I,GAAO4I,OAAOlF,UACxDmF,WAAY7I,GAAO0I,QAAQhF,UAAY1D,GAAO4I,OAAOlF,SACrD0E,aAAa,aACbJ,QAAQ,eAGhB,cAACX,EAAA,EAAI,CAACkB,GAAI,GAAIT,GAAI,GAAIC,GAAI,GAAIO,GAAI,EAAE,SAChC,cAAC9H,EAAA,EAAS,CACNE,UAAU,iBACVC,GAAG,yBACHmI,QAAM,EACNN,WAAS,EACTR,QAAQ,SACRpH,MAAO8E,GACP5E,SA3RL,SAACiI,GACxBkF,GAAgBlF,EAAM/H,OAAOJ,MACjC,EAyR6D,SAE5BiN,GAAkBxJ,KAAI,SAAC2E,EAAQ9I,GAAK,OACjC,cAAC+I,EAAA,EAAQ,CAAarI,MAAOoI,EAAOpI,MAAM,SACrCoI,EAAOvH,OADGvB,EAEJ,QAIvB,cAACmH,EAAA,EAAI,CAACkB,GAAI,GAAIT,GAAI,GAAIC,GAAI,GAAIO,GAAI,EAAE,SAChC,cAAC9H,EAAA,EAAS,CACNE,UAAU,iBACVwI,WAAS,EACTC,KAAM,EACNxI,GAAG,iBACHmE,KAAK,iBACLrD,MAAM,kBACN+G,WAAS,EACT5H,MAAOZ,GAAOkE,OAAOT,eACrB3C,SAAUd,GAAOyI,aACjB7D,MAAO5E,GAAO0I,QAAQjF,gBAAkBkF,QAAQ3I,GAAO4I,OAAOnF,gBAC9DoF,WAAY7I,GAAO0I,QAAQjF,gBAAkBzD,GAAO4I,OAAOnF,eAC3D2E,aAAa,aACbJ,QAAQ,eAGhB,cAACX,EAAA,EAAI,CAACkB,GAAI,GAAID,GAAI,EAAE,SAChB,cAACb,EAAA,EAAM,CACH/G,UAAU,cACVsH,QAAQ,YACRN,GAAI,CAAE0B,MAAO,SACblB,QAAS,WACLpF,GAAkB,GAAD,mBACVD,IAAc,CACjB,CACI2B,UAAW,GACXF,WAAY,MAGxB,EAAE,kCAOY,GAAzBzB,GAAekD,QACZ,mCACI,cAACsB,EAAA,EAAI,CAACC,WAAS,EAAC+B,QAAS,EAAGf,GAAI,EAAE,SAC7BzF,GAAewB,KAAI,SAACxC,EAAM3B,GAAK,OAC5B,qCACI,cAACmH,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,EAAE,SACb,cAAC/H,EAAA,EAAS,CACNE,UAAU,iBACVC,GAAG,aACHmE,KAAK,aACLrD,MAAM,gBACNb,MAAOiB,EAAK2C,UACZ1D,SAAU,SAACC,IAnM7B,SAACH,EAAOV,GAClC,IAAIgF,EAAQwJ,gBAAgB7L,IAC5BqC,EAAMhF,GAAOsE,UAAY5D,EACzBkC,GAAkBoC,EACtB,CAgMoDqE,CAAsBxI,EAAEC,OAAOJ,MAAOV,EAC1C,EACA8H,QAAQ,WACRQ,WAAS,MAIjB,cAACnB,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,EAAE,SACb,cAAC/H,EAAA,EAAS,CACNE,UAAU,iBACVC,GAAG,cACHmE,KAAK,cACLrD,MAAM,iBACNb,MAAOiB,EAAKyC,WACZxD,SAAU,SAACC,IA7M5B,SAACH,EAAOV,GACnC,IAAIgF,EAAQwJ,gBAAgB7L,IAC5BqC,EAAMhF,GAAOoE,WAAa1D,EAC1BkC,GAAkBoC,EACtB,CA0MoDsE,CAAuBzI,EAAEC,OAAOJ,MAAOV,EAC3C,EACA8H,QAAQ,WACRQ,WAAS,MAGjB,cAACnB,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,EAAGD,GAAI,EAAE,SACpB,cAACmB,EAAA,EAAU,CACPC,MAAM,QACNC,KAAK,MACL1B,KAAK,QACLC,QAAS,YAnN/B,SAAChI,GACvB,IAAIgF,EAAQwJ,gBAAgBzL,IAC5BiC,EAAM0E,OAAO1J,EAAO,GACpB4C,GAAkBoC,EACtB,CAgNoD2E,CAAkB3J,EACtB,EAAE,SAEF,cAAC,IAAI,CAAC4J,KAAMC,IAAWC,MAAO,GAAIC,OAAQ,WAGnD,QAMQ,IAA1BtH,GAAeoD,QACZ,cAACsB,EAAA,EAAI,CACDK,GAAI,CAAEwC,WAAY,UAAWC,aAAc,MAAOC,cAAe,OAAQC,WAAY,QACrFf,MAAI,EACJvB,GAAI,GACJO,GAAI,EAAE,SAEN,qBAAK5H,UAAW4J,YAAK,oBAAqB,OAAO,SAC7C,8CACI5J,UAAW4J,YAAK,WAAY,CACxB3D,aAAcA,GACdE,aAAcA,GACdD,aAAcA,MAEdH,MAAc,cAElB,qCAAWC,OAEX,eAACW,EAAA,EAAI,CAACC,WAAS,EAAC/F,UAAU,SAAQ,UAC9B,cAACgJ,EAAA,EAAG,CACAC,UAAU,SACVC,UAAU,MACVC,IAAI,cACJC,IAAKC,EACLlD,GAAI,CAAEuC,OAAQ,MAGlB,cAACM,EAAA,EAAG,CAACjC,GAAI,EAAGkC,UAAU,SAAS9C,GAAI,CAAEE,GAAI,CAAEE,GAAI,IAAM,SACjD,eAACxH,EAAA,EAAU,CAAC0H,QAAQ,WAAWN,GAAI,CAAEgC,MAAO,OAAQc,UAAW,UAAW,mCAEtE,cAACK,EAAA,EAAI,CAACC,UAAU,SAAQ,oBAAc,wBASlE,cAACC,EAAA,EAAI,CAACC,gBAAc,EAACtK,UAAW4J,YAAK,CAAEW,KAAMnF,KAAY4B,GAAI,CAAEY,GAAI,GAAI,SACnE,cAAC4C,EAAA,EAAe,UACXlL,GAAOkE,OAAOL,QACX7D,GAAOkE,OAAOL,OAAOQ,KAAI,SAAC8G,EAAMjL,GAAK,OACjC,eAACkL,EAAA,EAAQ,CAAuBX,UAAWY,IAAOC,IAAK5K,UAAU,WAAU,UACvE,cAAC6K,EAAA,EAAY,UACT,cAAC,IAAI,CAACzB,KAAM0B,IAAUxB,MAAO,GAAIC,OAAQ,OAG7C,cAACwB,EAAA,EAAY,CACT/K,UAAU,QACVgL,QAASP,EAAKtG,MAAMC,KAAOqG,EAAKtG,MAAMC,KAAO,KAMpC,cAAZrC,GACG,cAAC,EAAgB,CAACzC,OAAQA,GAAQC,UAAWD,GAAOkE,OAAOL,OAAQ3D,MAAOA,IAG9E,cAACuJ,EAAA,EAAU,CACPC,MAAM,QACNC,KAAK,MACL1B,KAAK,QACLC,QAAS,kBAvT5B,SAAChI,GACtB,IAAM0L,EAAQ,YAAO5L,GAAOkE,OAAOL,QACnC+H,EAAShC,OAAO1J,EAAO,GACvB0C,GAAkBgJ,GAClB5L,GAAOiB,cAAc,SAAU2K,EACnC,CAkT2DC,CAAiBV,EAAKtG,MAAa,EAAC,SAEnD,cAAC,IAAI,CAACiF,KAAMC,IAAWC,MAAO,GAAIC,OAAQ,SAvBnCkB,EAAKtG,MAAMC,KAyBf,WAM/B,eAACuC,EAAA,EAAI,CAACC,WAAS,YACX,cAACD,EAAA,EAAI,CAACkB,GAAI,GAAID,GAAI,EAAGwD,GAAI,EAAE,SACvB,cAACrE,EAAA,EAAM,CACHO,QAAQ,YACRtH,UAAU,cACVgH,GAAI,CAAE0B,MAAO,SACblB,QAAS,WACLhF,GAAiB,GAAD,mBACTD,IAAa,CAChB,CACIuB,UAAW,GACXF,WAAY,QAGxB,EAAE,yBAKgB,IAAZ,OAAbrB,SAAa,IAAbA,QAAa,EAAbA,GAAe8C,SACZ,mCACI,cAACsB,EAAA,EAAI,CAACC,WAAS,EAAC+B,QAAS,EAAGf,GAAI,EAAE,SAChB,OAAbrF,SAAa,IAAbA,QAAa,EAAbA,GAAeoB,KAAI,SAACxC,EAAM3B,GAAK,OAC5B,qCACI,cAACmH,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,EAAE,SACb,cAAC/H,EAAA,EAAS,CACNG,GAAG,aACHmE,KAAK,aACLrD,MAAM,YACNb,MAAOiB,EAAK2C,UACZ1D,SAAU,SAACC,IAlUzB,SAACH,EAAOV,GACtC,IAAIgF,EAAQwJ,gBAAgBzL,IAC5BiC,EAAMhF,GAAOsE,UAAY5D,EACzBsC,GAAiBgC,EACrB,CA+ToD6G,CAA0BhL,EAAEC,OAAOJ,MAAOV,EAC9C,EACA8H,QAAQ,WACRQ,WAAS,MAIjB,cAACnB,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,EAAGD,GAAI,EAAE,SACpB,uBACI7H,KAAK,OACLE,GAAG,SACHmE,KAAK,SACLyB,OAAO,eACPzF,SAAU,SAACiI,IA3UxB,SAACnI,EAAOV,GACvC,IAAIgF,EAAQwJ,gBAAgBzL,IAC5BiC,EAAMhF,GAAOoE,WAAa1D,EAC1BsC,GAAiBgC,EACrB,CAwUoD8G,CAA2BjD,EAAMkD,cAAcC,MAAM,GAAIhM,EAC7D,MAGR,cAACmH,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,EAAGD,GAAI,EAAE,SACpB,cAACmB,EAAA,EAAU,CACPC,MAAM,QACNC,KAAK,MACL1B,KAAK,QACLC,QAAS,YA/U3B,SAAChI,GAC3B,IAAIgF,EAAQwJ,gBAAgBzL,IAC5BiC,EAAM0E,OAAO1J,EAAO,GACpBgD,GAAiBgC,EACrB,CA4UoDiH,CAAsBjM,EAC1B,EAAE,SAEF,cAAC,IAAI,CAAC4J,KAAMC,IAAWC,MAAO,GAAIC,OAAQ,WAGnD,cAO3B,cAAC7C,EAAA,EAAO,IACR,cAACC,EAAA,EAAI,CAACC,WAAS,WACX,eAACC,EAAA,EAAa,WACV,cAACC,EAAA,EAAa,UACV,cAACC,EAAA,EAAM,CACHhH,KAAK,SACLuH,QAAQ,YACRN,GAAI,CAAEC,GAAI,EAAGC,GAAI,EAAGC,QAAS,CAAEC,GAAI,WAAYC,GAAI,aACnDG,QAAS,WACLlI,GAAOqI,cACX,EACA3H,UAAU,UACVuH,KAAK,QACLmE,kBAAgB,sBAKxB,cAAC5E,EAAA,EAAa,UACV,cAACC,EAAA,EAAM,CACH/G,UAAU,UACVuH,KAAK,QACLxH,KAAK,SACLuH,QAAQ,YACRN,GAAI,CAAEC,GAAI,EAAGC,GAAI,EAAGC,QAAS,CAAEC,GAAI,WAAYC,GAAI,aACnDG,QAAStC,GACT8D,MAAM,QACN0C,kBAAgB,iCAUhD,C,4CCrlBMlL,GAAaC,sBAAW,SAACC,EAAOC,GAAG,OAAK,cAACC,EAAA,EAAK,aAACC,UAAU,KAAKF,IAAKA,GAASD,GAAS,IAC5E,SAASuN,GAAqB,GAAoE,IAAlEhN,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QAASG,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAAOF,EAAM,EAANA,OAAQrB,EAAI,EAAJA,KAAMmO,EAAO,EAAPA,QAASvJ,EAAU,EAAVA,WACxF8H,EAAQC,cACd,EAA4B5K,oBAAS,GAAM,mBAA5BQ,GAAF,KAAW,MAClBd,EAAWC,cACXyD,EAAc,WAChBhE,GAAQ,GACRoB,GAAU,EACd,EACMZ,EAAOC,aAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKH,IAAI,IAE7CyM,EAAiB,iDAAG,gHAoBQ,OAnB9B7L,GAAU,GACVmB,QAAQC,IAAI,UAAWwK,GACnBE,EAAmBpK,SAASkK,EAAQG,SAASC,gBAAgB,GAAGF,kBAChEG,EAAQL,EAAQM,UAAUnJ,OAC1BP,EAAQyJ,EAAQL,EAAQpJ,MAC5BrB,QAAQC,IAAI,mBAAoB0K,GAChC3K,QAAQC,IAAI,QAASoB,GACjB2J,EAAU3J,EAAQ,IAAOsJ,EAC7B3K,QAAQC,IAAI,SAAU+K,GAEtBhL,QAAQC,IAAI,WACRgL,EAASC,KAAOC,MAAMC,WAAWJ,EAAOK,YAC5CrL,QAAQC,IAAI,SAAUgL,GACtBjL,QAAQC,IAAI,YACRqL,EAAeC,KAAWC,MACX,6CACbC,EAAW,IAAIP,KAAOQ,UAAUC,aAAaC,OAAOC,UACpDC,EAASL,EAASM,YAClBC,EAAQ,IAAId,KAAOe,SAASX,EAAcY,GAAOJ,GACvD9L,QAAQC,IAAI,SAAU6L,GAAQ,UACNE,EAAMG,SALX,6CAKkClB,GAAO,gCAAEmB,OAAO,KAAH,GAA9D1O,EAAI,OACRsC,QAAQC,IAAI,OAAQvC,GAEpBK,EACIsO,YAAqB,CACjB7P,GAAIiO,EAAQjO,GACZ0E,WAAYA,EACZtD,KAAMA,EACNC,MAAOA,EACPF,OAAQA,EACRrB,KAAMA,EACN+N,QAASpM,EAAKyD,QACdD,YAAaA,KAGrB5C,GAAU,GAAO,4CACpB,kBArCsB,mCAsCvB,OACI,mCACI,eAAC8D,EAAA,EAAM,CACHnF,KAAMA,EACNsF,oBAAqB/F,GACrBgG,aAAW,EACXH,QAASnB,EACT,kBAAgB,4BAChB,mBAAiB,kCAAiC,UAElD,cAACuB,EAAA,EAAW,CAACxG,GAAG,4BAA2B,oCAE3C,cAACwH,EAAA,EAAa,UACV,cAACsI,GAAA,EAAiB,CAAC9P,GAAG,kCAAiC,SACnD,cAACL,EAAA,EAAU,CAAC0H,QAAQ,QAAQyC,UAAU,OAAM,0EAKpD,cAAClD,EAAA,EAAa,CAACG,GAAI,CAAEoE,GAAI,KAAM,SAI3B,qCACI,cAACrE,EAAA,EAAM,CACHC,GAAI,CAAEgC,MAAOyD,EAAMI,QAAQ3I,MAAM8L,KAAMpD,YAAaH,EAAMI,QAAQ3I,MAAM8L,MACxExI,QAAStC,EACT8D,MAAM,YAAW,gBAIrB,cAACjC,EAAA,EAAM,CACHO,QAAQ,YACRC,KAAK,QACLC,QAAS,WACL2G,GACJ,EAAE,0BAW9B,CC9GA,IAAM3N,GAAaC,sBAAW,SAACC,EAAOC,GAAG,OAAK,cAACC,EAAA,EAAK,aAACC,UAAU,KAAKF,IAAKA,GAASD,GAAS,IAC5E,SAASuP,GAAgB,GAAuF,IAArF5C,EAAO,EAAPA,QAAS1I,EAAU,EAAVA,WAAY5E,EAAI,EAAJA,KAAMqB,EAAM,EAANA,OAAQC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAA0BL,GAAb,EAANqM,OAAiB,EAAThL,UAAe,EAAJrB,MAAMC,EAAO,EAAPA,QACzGuL,EAAQC,cACRlL,EAAWC,cACXyD,EAAc,WAChBhE,GAAQ,EACZ,EACMQ,EAAOC,aAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKH,IAAI,IAEnD,OACI,mCACI,eAAC0E,EAAA,EAAM,CACHnF,KAAMA,EACNsF,oBAAqB/F,GACrBgG,aAAW,EACXH,QAASnB,EACT,kBAAgB,4BAChB,mBAAiB,kCAAiC,UAElD,cAACuB,EAAA,EAAW,CAACxG,GAAG,4BAA4BD,UAAU,gBAAe,gCAErE,cAACyH,EAAA,EAAa,UACV,cAACsI,GAAA,EAAiB,CAAC9P,GAAG,kCAAiC,SACnD,cAACL,EAAA,EAAU,CAAC0H,QAAQ,QAAQyC,UAAU,OAAO/J,UAAU,aAAY,6DAK3E,eAAC6G,EAAA,EAAa,CAACG,GAAI,CAAEoE,GAAI,KAAM,UAC3B,cAACrE,EAAA,EAAM,CACHC,GAAI,CAAEgC,MAAOyD,EAAMI,QAAQ3I,MAAM8L,KAAMpD,YAAaH,EAAMI,QAAQ3I,MAAM8L,MACxExI,QAAStC,EACT8D,MAAM,YACNhJ,UAAU,aAAauH,KAAK,QAAO,gBAIvC,cAACR,EAAA,EAAM,CACHO,QAAQ,YACRtH,UAAU,aAAauH,KAAK,QAE5BC,QAAS,WACLhG,EACI0O,YAAU,CACNjQ,GAAIoN,EAAQpN,GACZ0E,WAAYA,EACZ5E,KAAMA,EACNsB,KAAMA,EACNC,MAAOA,EACPF,OAAQA,EACR0M,QAASpM,EAAKyD,QACdD,YAAaA,IAGzB,EAAE,wBAQ1B,CCrDe,SAASiL,GAAc,GAA6B,IAA3BlP,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QAASgN,EAAO,EAAPA,QAC7CzB,EAAQC,cAER0D,EAAS,CACX,CACIhM,KAAM,QACNlE,MAAc,OAAPgO,QAAO,IAAPA,OAAO,EAAPA,EAAS9J,MAEpB,CACIA,KAAM,UACNlE,MAAc,OAAPgO,QAAO,IAAPA,OAAO,EAAPA,EAASkC,QAEpB,CACIhM,KAAM,eACNlE,MAAc,OAAPgO,QAAO,IAAPA,OAAO,EAAPA,EAASnJ,aAEpB,CACIX,KAAM,SACNlE,MAAc,OAAPgO,QAAO,IAAPA,OAAO,EAAPA,EAASpJ,OAEpB,CACIV,KAAM,aACNlE,MAAc,OAAPgO,QAAO,IAAPA,OAAO,EAAPA,EAASnM,UAEpB,CACIqC,KAAM,SACNlE,MAAc,OAAPgO,QAAO,IAAPA,OAAO,EAAPA,EAASmC,MAAMjM,MAE1B,CACIA,KAAM,aACNlE,MAAO,SAGf,EAA4B4B,mBAAS,SAAQ,mBAAtCwO,EAAM,KAOPpL,GAPkB,KAOJ,WAChBhE,GAAQ,EACZ,GAEMqP,EAAwBC,iBAAO,MAUrC,OATAzC,qBAAU,WACN,GAAI9M,EAAM,CACN,IAAiBwP,EAAuBF,EAAhCG,QACmB,OAAvBD,IACkB,OAAlBA,QAAkB,IAAlBA,KAAoBE,QAE5B,CACJ,GAAG,CAAC1P,IAGA,8BACI,eAACmF,EAAA,EAAM,CACHnF,KAAMA,EACNoF,QAASnB,EACToL,OAAQA,EACR,kBAAgB,sBAChB,mBAAiB,4BAA2B,UAE5C,cAAC7J,EAAA,EAAW,CAACxG,GAAG,sBAAqB,yBACrC,cAACwH,EAAA,EAAa,CAACmJ,SAAqB,UAAXN,EAAmB,SACxC,cAAC3J,EAAA,EAAI,CAACC,WAAS,EAAC+B,QAAS,EAAE,SACvB,cAAChC,EAAA,EAAI,CAAC,qBAAgBgC,QAASkI,IAAa7J,GAAI,CAAE8J,OAAQ,QAAS,SAC/D,cAACnK,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,GAAG,SACd,eAAClB,EAAA,EAAI,CAACC,WAAS,EAACmK,eAAe,SAASpI,QAASkI,IAAa7J,GAAI,CAAE8C,UAAW,UAAW,UACtF,cAACnD,EAAA,EAAI,CAACiC,MAAI,EAACvB,GAAI,EAAGrH,UAAU,aAAY,SACpC,qBAAKiK,IAAY,OAAPiE,QAAO,IAAPA,OAAO,EAAPA,EAASjJ,MAAO+E,IAAI,kBAAkBhK,UAAU,gBAG9D,cAAC2G,EAAA,EAAI,CAACiC,MAAI,EAACxB,GAAI,EAAG4J,GAAI,GAAG,SACrB,cAACrK,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,GAAG,SACd,cAAClB,EAAA,EAAI,CAACC,WAAS,EAACmK,eAAe,OAAM,SACjC,cAACpK,EAAA,EAAI,CAACiC,MAAI,EAACxB,GAAI,GAAI4J,GAAI,GAAG,SACrBZ,EAAOzM,KAAI,SAAC2E,GAAM,OACf,eAAC3B,EAAA,EAAI,CAACC,WAAS,EAAC+B,QAAS,EAAE,UACvB,cAAChC,EAAA,EAAI,CAACiC,MAAI,EAACxB,GAAI,EAAGS,GAAI,GAAG,SACrB,cAACjI,EAAA,EAAU,CACPgI,GAAI,EACJ5H,UAAU,UACVgJ,MAA8B,SAAvByD,EAAMI,QAAQC,KAAkB,QAAU,QACjDxF,QAAQ,KAAI,SAEXgB,EAAOlE,SAIhB,cAACuC,EAAA,EAAI,CAACiC,MAAI,EAACxB,GAAI,EAAGS,GAAI,GAAIb,GAAI,CAAEnH,UAAW,OAAQiK,UAAW,QAAS,SACnE,cAAClK,EAAA,EAAU,CACPgI,GAAI,EACJ5H,UAAU,UACVgJ,MAA8B,SAAvByD,EAAMI,QAAQC,KAAkB,QAAU,UACjDxF,QAAQ,OAAM,SAEbgB,EAAOpI,YAGb,uBAW/C,cAAC2G,EAAA,EAAa,CAACG,GAAI,CAAEoE,GAAI,IAAK6F,GAAI,KAAM,SACpC,cAAClK,EAAA,EAAM,CAACC,GAAI,CAAEgC,MAAOyD,EAAMI,QAAQ3I,MAAM8L,MAAQxI,QAAStC,EAAa8D,MAAM,YAAW,yBAO5G,CC5HA,IAoNekI,GApNC,SAAH,GAA4D,IAAtDhD,EAAO,EAAPA,QAASvJ,EAAU,EAAVA,WAAYvD,EAAM,EAANA,OAAQC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAAOvB,EAAI,EAAJA,KAEzD,GADiB0B,cACWK,oBAAS,IAAM,mBAApCwL,EAAM,KAAEhL,EAAS,KACxB,EAA8CR,oBAAS,GAAM,mBAAtDqP,EAAe,KAAEC,EAAkB,KAC1C,EAAsCtP,oBAAS,GAAM,mBAA9CuP,EAAW,KAAEC,EAAc,KAClC,EAA0CxP,oBAAS,GAAM,mBAAlDyP,EAAa,KAAEC,EAAgB,KACtC,EAA4C1P,oBAAS,GAAM,mBAApD2P,EAAc,KAAEC,EAAiB,KACxC,EAA0B5P,mBAAS,IAAG,mBAA/BqC,EAAK,KAAEwN,EAAQ,KACtB,EAA8B7P,mBAAS,CACnC7B,GAAI,KACJ6N,QAAS,KACTnL,QAAS,GACTI,eAAgB,GAChBC,SAAU,EACVjB,SAAU,aACViD,aAAc,OACd7C,eAAgB,GAChBI,cAAe,GACfY,OAAQ,KACV,mBAXKkK,EAAO,KAAEuE,EAAU,KAsB1B,OATA7D,qBAAU,WACN,IAAM1I,EAAS6I,EAAQjJ,MAAMZ,MAAM,KAAKgB,OACxCsM,EAAS,CACL,CACIxN,MAAO,CAAEC,KAAM8J,EAAQjJ,MAAMZ,MAAM,KAAKgB,EAAS,IACjDlF,SAAU+N,EAAQM,UAAUnJ,SAGxC,GAAG,CAAC6I,IAEA,qCACI,cAAC+B,GAAe,CACZ5C,QAASA,EACT1I,WAAYA,EACZ5E,KAAMA,EACNqB,OAAQA,EACRC,KAAMA,EACNC,MAAOA,EACPgM,OAAQA,EACRhL,UAAWA,EACXrB,KAAMsQ,EACNrQ,QAASsQ,IAEb,cAACpE,GAAa,CACVC,QAASA,EACT1I,WAAYA,EACZ5E,KAAMA,EACNqB,OAAQA,EACRC,KAAMA,EACNC,MAAOA,EACPgM,OAAQA,EACRhL,UAAWA,EACXrB,KAAMoQ,EACNnQ,QAASoQ,IAEb,cAACrD,GAAoB,CACjBC,QAASA,EACTvJ,WAAYA,EACZ5E,KAAMA,EACNqB,OAAQA,EACRC,KAAMA,EACNC,MAAOA,EACPgM,OAAQA,EACRhL,UAAWA,EACXrB,KAAMkQ,EACNjQ,QAASkQ,IAEb,cAACjB,GAAa,CAAClP,KAAMwQ,EAAgBvQ,QAASwQ,EAAmBxD,QAASA,IAC1E,eAAC,GAAQ,CACLjC,SAAS,EACTjM,UAAU,cACV+L,WAAS,EACT/E,GAAI,CACA6K,SAAU,WACV,UAAW,CACPC,UAAW,yBACXC,WAAY,wBAElB,UAEF,cAACC,EAAA,EAAS,CAAChL,GAAI,CAAEuC,OAAQ,KAAOpF,MAAO+J,EAAQjJ,QAC/C,cAACiI,EAAA,EAAW,CAAClG,GAAI,CAAEiL,EAAG,GAAI,SACtB,eAACtL,EAAA,EAAI,CAACC,WAAS,EAAC+B,QAAS,EAAE,UACvB,cAAChC,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,EAAE,SACb,cAACjI,EAAA,EAAU,CAAC0H,QAAQ,YAAYtH,UAAU,cACzCgH,GAAI,CAAEkL,eAAgB,OAAQC,cAAe,cAAe,SACxDjE,EAAQ9J,SAIjB,cAACuC,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,GAAID,IAAK,IAAI,SACxB,cAAChI,EAAA,EAAU,CACXI,UAAU,cACNsH,QAAQ,QACRN,GAAI,CACAoL,SAAU,SACV7I,OAAQ,GACR4I,cAAe,cACjB,SAEDjE,EAAQnJ,gBAIjB,eAAC4B,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,EAAE,UACb,cAAClB,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,GAAG,SACd,eAACjI,EAAA,EAAU,CAAC0H,QAAQ,KAAKtH,UAAU,cAAa,UAC3CkO,EAAQpJ,MAAK,IAAGoJ,EAAQlJ,kBAGjC,cAAC2B,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,GAAG,SACd,eAACjI,EAAA,EAAU,CAAC0H,QAAQ,KAAKtH,UAAU,cAAa,UAAEkO,EAAQM,UAAUnJ,OAAM,iBAGlF,cAACsB,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,EAAE,SACb,cAACd,EAAA,EAAM,CAEPO,QAAQ,YACRC,KAAK,QACDP,GAAI,CACArH,YAAa,OACb+I,MAAO,QACP,SAAU,CACNqD,UAAW,QAEf/C,MAAO,UACPQ,WAAY,WAIhBhC,QAAS,WACLkK,GAAkB,EACtB,EAAE,uBAKV,eAAC/K,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,GAAG,UACd,eAACwK,GAAA,EAAK,CAACxR,UAAU,MAAMkQ,eAAe,MAAMuB,WAAW,SAAQ,UACvC,WAAnBpE,EAAQkC,QACL,qCACI,cAACrJ,EAAA,EAAM,CACP/G,UAAU,cACNsH,QAAQ,YACR0B,MAAM,UACNhC,GAAI,CAAErH,YAAa,OACnB6H,QAAS,WACL8J,GAAe,GACfM,EAAW,CACP3R,GAAIiO,EAAQjO,GACZ6N,QAASI,EAAQmC,MAAMpQ,GACvB0C,QAASuL,EAAQ9J,KACjBrB,eAAgBmL,EAAQnJ,YACxB/B,SAAUkL,EAAQpJ,MAClB/C,SAAUmM,EAAQnM,SAClBiD,aAAckJ,EAAQlJ,aACtB7C,eAAgB+L,EAAQqE,YACxBhQ,cAAe2L,EAAQsE,aACvBrP,OAAQgB,GAEhB,EAAE,kBAIN,cAAC4C,EAAA,EAAM,CACP/G,UAAU,cACNsH,QAAQ,YACR0B,MAAM,UACNhC,GAAI,CAAErH,YAAa,OACnB6H,QAAS,WACLgK,GAAiB,GACjBI,EAAW,CACP3R,GAAIiO,EAAQjO,GACZ0C,QAASuL,EAAQ9J,KACjBrB,eAAgBmL,EAAQnJ,YACxB/B,SAAUkL,EAAQpJ,MAClB/C,SAAUmM,EAAQnM,SAClBiD,aAAckJ,EAAQlJ,aACtB7C,eAAgB+L,EAAQqE,YACxBpP,OAAQgB,GAEhB,EAAE,wBAOM,SAAlB+J,EAAQkC,QAAuC,YAAlBlC,EAAQkC,SACnC,cAACrJ,EAAA,EAAM,CACP/G,UAAU,cACNsH,QAAQ,YACR0B,MAAM,UACNhC,GAAI,CAAErH,YAAa,OACnB6H,QAAS,WACL4J,GAAmB,EACvB,EAAE,wBAMd,cAACiB,GAAA,EAAK,CAACxR,UAAU,MAAMkQ,eAAe,MAAMuB,WAAW,wBAOnF,E,WC/MMxR,GAAY,CACd,CACIZ,MAAO,MACPa,MAAO,aAEX,CACIb,MAAO,aACPa,MAAO,eAEX,CACIb,MAAO,WACPa,MAAO,qBAEX,CACIb,MAAO,UACPa,MAAO,wBAEX,CACIb,MAAO,QACPa,MAAO,cAEX,CACIb,MAAO,WACPa,MAAO,kBA4MA0R,UAxMO,WAClB,IAAMhG,EAAQC,cACRgG,EAAWC,cACXC,EAAWC,cACXrR,EAAWC,cAEXC,EAAOC,aAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKH,IAAI,IACnD,EAAwBI,mBAAS,OAAM,mBAAhC/B,EAAI,KAAEsC,EAAO,KACpB,EAA4BP,mBAAS,IAAG,mBAAjCV,EAAM,KAAE0R,EAAS,KACxB,EAAwBhR,mBAAS,GAAE,mBAA5BT,EAAI,KAAE0R,EAAO,KACpB,EAA0BjR,mBAAS,IAAG,mBAA/BR,EAAK,KAAE0R,EAAQ,KACtB,EAAoClR,oBAAS,GAAM,mBAA5CmR,EAAU,KAAEC,EAAa,KAChC,EAA4BpR,oBAAS,GAAK,mBAA3BQ,GAAF,KAAW,MACxB,EAAgCR,mBAAS,MAAK,mBAA7BqR,GAAF,KAAa,MAKtBjO,EAAc,WAChBiO,EAAY,MACZ7Q,GAAU,EACd,EAQAyL,qBAAU,WACNvM,EACI4R,YAAU,CACNzO,WAAYiO,EAAShR,MAAMT,KAAKyD,WAChCxD,OAAQA,EACRC,KAAMA,EACNC,MAAOA,EACPvB,KAAMA,EACN+N,QAASpM,EAAKyD,QACdD,YAAaA,IAGzB,GAAG,CAAC9D,EAAQC,EAAMC,EAAOvB,IAEzB,IAAMsT,EAAU1R,aAAY,SAACC,GAAK,OAAKA,EAAM0R,WAAWD,OAAO,IAE/D,OACI,qCACI,cAACrS,EAAM,CACHC,KAAMgS,EACN/R,QAASgS,EACT/R,KAAMyR,EAAShR,MAAMT,KACrBC,OAAQA,EACRC,KAAMA,EACNC,MAAOA,EACPC,QAASxB,IAEb,cAAC8L,EAAA,EAAQ,CACL7L,UAAU,eACVuM,MACI,cAAC3M,EAAA,EAAU,CACP0H,QAAQ,KACRyC,UAAU,KACV/J,UAAU,cACVgH,GAAI,CAAEnH,UAAW,OAAQ0T,WAAY,IAAKvK,MAA+B,SAAvByD,EAAMI,QAAQC,KAAkB,OAAS,OAC1F0G,WAAY,CAAEnM,GAAI,QAASD,GAAI,UAAY,wBAKpDiF,UACI,cAACtF,EAAA,EAAM,CACH/G,UAAU,aACVgH,GAAI,CAAE0B,MAAO,SACbpB,QAAQ,YACRC,KAAK,QACLC,QAAS,WACLkL,EAAS,cACb,EAAE,kBAKVzG,SAAS,IAEb,cAACJ,EAAA,EAAQ,CACL7L,UAAU,qBACVuM,MACI,eAAC5F,EAAA,EAAI,CAACC,WAAS,EAAC+B,QAAS,EAAE,UACvB,cAAChC,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,EAAGR,GAAI,EAAE,SACpB,cAACzH,EAAA,EAAU,CAACI,UAAU,cAAcsH,QAAQ,KAAKyC,UAAU,KAAK/C,GAAI,CAAEwM,WAAY,CAAEnM,GAAI,OAAQD,GAAI,SAAW,8BAInH,cAACT,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,EAAGR,GAAI,EAAE,SACpB,cAACvH,EAAA,EAAS,CACNE,UAAU,0BACVC,GAAG,yBACHmI,QAAM,EACNN,WAAS,EACT5H,MAAOH,EACPK,SA9ET,SAACiI,GAChBhG,EAAQgG,EAAM/H,OAAOJ,OACrB8S,EAAS,IACTF,EAAU,IACVC,EAAQ,EACZ,EA0E4BzL,QAAQ,WAAU,SAEjBxG,GAAU6C,KAAI,SAAC2E,EAAQ9I,GAAK,OACzB,cAAC+I,EAAA,EAAQ,CAAcrI,MAAOoI,EAAOpI,MAAM,SACtCoI,EAAOvH,OADIvB,EAEL,QAIvB,cAACmH,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,EAAGR,GAAI,EAAGyC,UAAU,QAAO,SACtC,cAAC/C,EAAA,EAAM,CACH/G,UAAU,aACVgH,GAAI,CAAEwM,WAAY,CAAEnM,GAAI,QAASD,GAAI,UACrCE,QAAQ,YACRC,KAAK,QACLC,QAAS,WACL0L,GAAc,EAClB,EAAE,0BAOlBjH,SAAS,EAAM,SAEf,cAACtF,EAAA,EAAI,CAACC,WAAS,WACTyM,GAAWA,EAAQI,MAAQJ,EAAQI,KAAKhL,MAAQ4K,EAAQI,KAAKhL,KAAKpD,QAAU,EAC1E,mCACCgO,EAAQI,KAAKhL,KAAKpD,QAAU,EAC7B,qCACK,IACD,cAACsB,EAAA,EAAI,CAACC,WAAS,EAAC+B,QAASkI,IAAajJ,GAAI,EAAGZ,GAAI,CAAEwM,WAAY,CAAEnM,GAAI,OAAQD,GAAI,SAAW,SACvFiM,EAAQI,KAAKhL,MACV4K,EAAQI,KAAKhL,KAAK9E,KAAI,SAAC+P,EAAKlU,GACxB,OACI,cAACmH,EAAA,EAAI,CAAaiC,MAAI,EAACf,GAAI,GAAImJ,GAAI,EAAG5J,GAAI,EAAGC,GAAI,EAAE,SAC/C,cAAC,GAAO,CACJrH,UAAU,cACVkO,QAASwF,EACT/O,WAAYiO,EAAShR,MAAMT,KAAKyD,WAChCxD,OAAQA,EACRC,KAAMA,EACNC,MAAOA,EACPvB,KAAMA,KARHP,EAYnB,MAER,cAACmH,EAAA,EAAI,CAACiC,MAAI,EAACf,GAAI,GAAIb,GAAI,CAAEiL,EAAG,GAAI,SAC5B,cAACtL,EAAA,EAAI,CAACC,WAAS,EAACmK,eAAe,SAASpI,QAASkI,IAAY,SACzD,cAAClK,EAAA,EAAI,CAACiC,MAAI,WACN,cAAC+K,EAAA,EAAU,CACPtS,KAAMA,EACN2H,MAAM,UACN4K,iBAAe,EACfC,gBAAc,EACdC,MAAOT,GAAWA,EAAQU,MAC1B3T,SAAU,SAACiI,EAAO2L,GACdjB,EAAQiB,EACZ,aASpB,cAACrN,EAAA,EAAI,CAACiC,MAAI,WACV,cAAChJ,EAAA,EAAU,CAACI,UAAU,aAAaP,MAAO,CAAM0H,QAAS,sBAAuBoM,WAAY,OAAQ,mCAMpG,mCACI,cAAC5M,EAAA,EAAI,CAACiC,MAAI,EAAClJ,QAAS,OAAQqR,eAAe,SAAS/J,GAAI,CAACsC,MAAM,OAAQ2K,EAAE,GAAG,SACxE,8BACI,cAACC,GAAA,EAAgB,CACbC,eAAa,EACb5M,KAAK,OACL9H,MACI,CACI,gBAYhD,C,mCCrOeuP,IAPX,CACIoF,eAAgB,6CAChBnF,MAAO,6C","file":"static/js/33.ae1bad39.chunk.js","sourcesContent":["import { Typography, TextField } from '@mui/material';\r\nconst QuantitySelector = ({ formik, fileArray, index }) => {\r\n    const handleChange = (value) => {\r\n        fileArray[index].quantity = value;\r\n        formik.setFieldValue('images', fileArray);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: 'flex', marginRight: '10px' }}>\r\n                <Typography style={{ marginTop: '12px', marginRight: '5px' }}>Quantity : </Typography>\r\n\r\n                <TextField\r\n                    type=\"number\"\r\n                    className=\"quantityField\"\r\n                    id=\"outlined-select-currency-native\"\r\n                    value={fileArray[index].quantity}\r\n                    onChange={(e) => {\r\n                        handleChange(e.target.value);\r\n                    }}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuantitySelector;\r\n","export default __webpack_public_path__ + \"static/media/image-upload.54137b05.svg\";","import { forwardRef, useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    TextField,\r\n    Divider,\r\n    Box,\r\n    Link,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    IconButton,\r\n    MenuItem,\r\n    CircularProgress\r\n} from '@mui/material';\r\n\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Icon } from '@iconify/react';\r\nimport { addNft } from 'redux/nftManagement/actions';\r\nimport { fData } from 'utils/formatNumber';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport QuantitySelector from './quantitySelector';\r\nimport fileFill from '@iconify-icons/eva/file-fill';\r\nimport closeFill from '@iconify-icons/eva/close-fill';\r\nimport UploadImage from 'assets/images/icons/image-upload.svg';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport clsx from 'clsx';\r\nimport { DataArraySharp } from '@mui/icons-material';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nconst typeArray = [\r\n    {\r\n        value: 'USDT',\r\n        label: 'USDT'\r\n    }\r\n];\r\n\r\nexport default function AddNft({ open, setOpen, data, search, page, limit, nftType }) {\r\n    const dispatch = useDispatch();\r\n    const user = useSelector((state) => state.auth.user);\r\n    const [mintType, setMintType] = useState('directMint');\r\n    const [uploadedImages, setUploadedImages] = useState([]);\r\n    const [fieldDataArray, setFieldDataArray] = useState([]);\r\n    const [type, setType] = useState('USDT');\r\n    const [loader, setLoader] = useState(false);\r\n    const [fileDataArray, setFileDataArray] = useState([]);\r\n    const handleType = (event) => {\r\n        setType(event.target.value);\r\n    };\r\n\r\n    const handleError = (fieldDataArray, fileDataArray, values) => {\r\n        let isValid = true;\r\n        if (parseInt(values.images[0].quantity) < 1) {\r\n            toast.error('NFT Quantity must be greater than zero');\r\n            isValid = false;\r\n        }\r\n        if (values.images[0].image.name.split('.').pop() == 'jpg' || values.images[0].image.name.split('.').pop() == 'png') {\r\n        } else {\r\n            toast.error('Upload the files with these extensions: jpg, png, gif');\r\n            isValid = false;\r\n        }\r\n\r\n        fieldDataArray.forEach((array) => {\r\n            if (array.fieldName == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata name fields are mandatory`);\r\n            }\r\n            if (array.fieldValue == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata value fields are mandatory`);\r\n            }\r\n        });\r\n\r\n        fileDataArray.forEach((array) => {\r\n            if (array.fieldName == '') {\r\n                isValid = false;\r\n                toast.error(`File name fields are mandatory`);\r\n            }\r\n            if (array.fieldValue == null) {\r\n                isValid = false;\r\n                toast.error(`File value fields are mandatory`);\r\n            }\r\n        });\r\n\r\n        return isValid;\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        nftName: Yup.string()\r\n            .required('NFT Name is required!')\r\n            .max(42, 'NFT Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT name'),\r\n        nftDescription: Yup.string()\r\n            .required('NFT Description is required!')\r\n            .max(1000, 'Invalid NFT description can not exceed 1000 characters'),\r\n            // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT description'),\r\n        nftPrice: Yup.number()\r\n            .min(0.000001, 'Price should not less than zero')\r\n            .required('NFT Price is required')\r\n            .typeError('Invalid Price'),\r\n        images: Yup.mixed()\r\n    });\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            nftName: '',\r\n            nftDescription: '',\r\n            nftPrice: 0,\r\n            images: []\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            console.log('fileDataArray', fileDataArray);\r\n            let fileArray = fileDataArray.map((data) => {\r\n                console.log('data', data);\r\n                return data.fieldValue;\r\n            });\r\n            let fileNameArray = fileDataArray.map((data) => {\r\n                console.log('data', data);\r\n                return data.fieldName;\r\n            });\r\n\r\n            console.log('fileArray', fileArray);\r\n            console.log('fileNameArray', fileNameArray);\r\n            let isValid = handleError(fieldDataArray, fileDataArray, values);\r\n            if (isValid) {\r\n                setLoader(true);\r\n                dispatch(\r\n                    addNft({\r\n                        categoryId: data.CategoryId,\r\n                        mintType: mintType,\r\n                        metaDataArray: fieldDataArray,\r\n                        fileNameArray: fileNameArray,\r\n                        fileArray: fileArray,\r\n                        name: values.nftName,\r\n                        price: values.nftPrice,\r\n                        description: values.nftDescription,\r\n                        currencyType: type,\r\n                        quantity: values.images[0].quantity,\r\n                        asset: values.images[0].image,\r\n                        type: nftType,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        categoryId: data.CategoryId,\r\n                        handleClose: handleClose,\r\n                        brandId: user.BrandId\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n\r\n    const hasFile = formik.values.images.length > 0;\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n        setMintType('directMint');\r\n        setType('USDT');\r\n        setUploadedImages([]);\r\n        setFieldDataArray([]);\r\n        setLoader(false);\r\n        setFileDataArray([]);\r\n    };\r\n    const handleDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            let newUploadedImages = [...uploadedImages];\r\n            acceptedFiles.map(async (acceptedFile) => {\r\n                let data = { image: acceptedFile, quantity: 1 };\r\n                newUploadedImages = [...newUploadedImages, data];\r\n            });\r\n            formik.setFieldValue('images', newUploadedImages);\r\n            setUploadedImages(newUploadedImages);\r\n        },\r\n\r\n        [formik.setFieldValue, uploadedImages]\r\n    );\r\n    const handleRemoveFile = (file, index) => {\r\n        const newFiles = [...formik.values.images];\r\n        newFiles.splice(index, 1);\r\n        setUploadedImages(newFiles);\r\n        formik.setFieldValue('images', newFiles);\r\n    };\r\n\r\n    const { getRootProps, getInputProps, isDragActive, isDragReject, isDragAccept } = useDropzone({\r\n        accept: '.jpeg,.png,.jpg,.gif',\r\n        onDrop: handleDrop\r\n    });\r\n\r\n    const handleFieldNameChange = (value, index) => {\r\n        let array = [...fieldDataArray];\r\n        array[index].fieldName = value;\r\n        setFieldDataArray(array);\r\n    };\r\n    const handleFieldValueChange = (value, index) => {\r\n        let array = [...fieldDataArray];\r\n        array[index].fieldValue = value;\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleRemoveField = (index) => {\r\n        let array = [...fieldDataArray];\r\n        array.splice(index, 1);\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleFileFieldNameChange = (value, index) => {\r\n        let array = [...fileDataArray];\r\n        array[index].fieldName = value;\r\n        setFileDataArray(array);\r\n    };\r\n    const handleFileFieldValueChange = (value, index) => {\r\n        let array = [...fileDataArray];\r\n        array[index].fieldValue = value;\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    const handleFileRemoveField = (index) => {\r\n        let array = [...fileDataArray];\r\n        array.splice(index, 1);\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog Nftdialog \"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\" className=\"adminname\">\r\n                    Add NFT\r\n                </DialogTitle>\r\n                <Divider />\r\n                <Grid container>\r\n                    <DialogActions>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                type=\"submit\"\r\n                               \r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                variant={mintType == 'directMint' ? 'contained' : 'outlined'}\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                               \r\n                                onClick={() => {\r\n                                    setMintType('directMint');\r\n                                }}\r\n                            >\r\n                                Direct minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant={mintType == 'lazyMint' ? 'contained' : 'outlined'}\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                               \r\n                               \r\n                                onClick={() => {\r\n                                    setMintType('lazyMint');\r\n                                }}\r\n                            >\r\n                                Lazy minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </DialogActions>\r\n                </Grid>\r\n               \r\n             \r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid container mt={1}>\r\n                            <Grid xs={4} md={5} lg={5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftName\"\r\n                                    name=\"nftName\"\r\n                                    label=\"NFT Name\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftName && Boolean(formik.errors.nftName)}\r\n                                    helperText={formik.touched.nftName && formik.errors.nftName}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} md={2} lg={2}></Grid>\r\n                            <Grid xs={4} md={5} lg={5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftPrice\"\r\n                                    name=\"nftPrice\"\r\n                                    label=\"NFT Price\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftPrice}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftPrice && Boolean(formik.errors.nftPrice)}\r\n                                    helperText={formik.touched.nftPrice && formik.errors.nftPrice}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid xs={12} md={12} lg={12} mt={2}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    variant=\"filled\"\r\n                                    id=\"outlined-select-budget\"\r\n                                    select\r\n                                    fullWidth\r\n                                    value={type}\r\n                                    onChange={handleType}\r\n                                >\r\n                                    {typeArray.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Grid>\r\n                            <Grid xs={12} mt={1}>\r\n                                <TextField\r\n                                    multiline\r\n                                    rows={2}\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftDescription\"\r\n                                    name=\"nftDescription\"\r\n                                    label=\"NFT Description\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftDescription}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftDescription && Boolean(formik.errors.nftDescription)}\r\n                                    helperText={formik.touched.nftDescription && formik.errors.nftDescription}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} mt={2}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'right' }}\r\n                                    onClick={() => {\r\n                                        setFieldDataArray([\r\n                                            ...fieldDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: ''\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add more fields\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {fieldDataArray.length != 0 && (\r\n                            <>\r\n                                <Grid container spacing={4}>\r\n                                    {fieldDataArray.map((data, index) => (\r\n                                        <>\r\n                                            <Grid item xs={5}> \r\n                                                <TextField\r\n                                                    id=\"field_name\"\r\n                                                    className=\"textfieldStyle\"\r\n                                                    name=\"field_name\"\r\n                                                    label=\"Metadata Name\"\r\n                                                    value={data.fieldName}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldNameChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    className=\"textfieldStyle\"\r\n                                                    id=\"field_value\"\r\n                                                    name=\"field_value\"\r\n                                                    label=\"Metadata Value\"\r\n                                                    value={data.fieldValue}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldValueChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2}>\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        handleRemoveField(index);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                            </Grid>\r\n                                        </>\r\n                                    ))}\r\n                                </Grid>\r\n                            </>\r\n                        )}\r\n\r\n                        {uploadedImages.length !== 1 && (\r\n                            <Grid\r\n                                sx={{ background: '#c5cbe9', borderRadius: '5px', paddingBottom: '2rem', paddingTop: '2rem' }}\r\n                                item\r\n                                lg={12}\r\n                                mt={3}\r\n                            >\r\n                                <div className={clsx('dropZoneContainer', 'xyz')}>\r\n                                    <div\r\n                                        className={clsx('dropZone', {\r\n                                            isDragActive: isDragActive,\r\n                                            isDragAccept: isDragAccept,\r\n                                            isDragReject: isDragReject\r\n                                        })}\r\n                                        {...getRootProps()}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n\r\n                                        <Grid container direction=\"column\">\r\n                                            <Box\r\n                                                textAlign=\"center\"\r\n                                                component=\"img\"\r\n                                                alt=\"Select File\"\r\n                                                src={UploadImage}\r\n                                                sx={{ height: 60 }}\r\n                                            />\r\n\r\n                                            <Box mt={4} textAlign=\"center\" sx={{ ml: { md: 0 } }}>\r\n                                                <Typography variant=\"subtitle\" sx={{ color: 'grey', textAlign: 'center' }}>\r\n                                                    Drop your image or&nbsp;\r\n                                                    <Link underline=\"always\">browse</Link>.&nbsp;\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </div>\r\n                            </Grid>\r\n                        )}\r\n\r\n                        <Grid item lg={12} mt={3}>\r\n                            <List disablePadding className={clsx({ list: hasFile })} sx={{ mt: 3 }}>\r\n                                <AnimatePresence>\r\n                                    {formik.values.images &&\r\n                                        formik.values.images.map((file, index) => (\r\n                                            <ListItem  key={file.image.name} component={motion.div} className=\"listItem\">\r\n                                                <ListItemIcon>\r\n                                                    <Icon icon={fileFill} width={32} height={32} />\r\n                                                </ListItemIcon>\r\n                                                <ListItemText \r\n                                                    primary={ \r\n                                                        \r\n                                                        file.image.name ? file.image.name : ''}\r\n                                                   \r\n                                                    primaryTypographyProps={{\r\n                                                        variant: 'h6',\r\n                                                       \r\n                                                    }}\r\n                                                />\r\n                                                {mintType == 'directMint' && (\r\n                                                    <QuantitySelector formik={formik} \r\n                                                    fileArray={formik.values.images} index={index} />\r\n                                                )}\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => handleRemoveFile(file.image, index)}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                            </ListItem>\r\n                                        ))}\r\n                                </AnimatePresence>\r\n                            </List>\r\n                        </Grid>\r\n                    </form>\r\n\r\n                    <Grid container>\r\n                        <Grid xs={12} mt={2} pr={3}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                className=\"fieldbutton\"\r\n                                sx={{ float: 'right' }}\r\n                                onClick={() => {\r\n                                    setFileDataArray([\r\n                                        ...fileDataArray,\r\n                                        {\r\n                                            fieldName: '',\r\n                                            fieldValue: null\r\n                                        }\r\n                                    ]);\r\n                                }}\r\n                            >\r\n                                Add Files\r\n                            </Button>\r\n                        </Grid>\r\n                        {fileDataArray.length != 0 && (\r\n                            <>\r\n                                <Grid container spacing={2} mt={2}>\r\n                                    {fileDataArray.map((data, index) => (\r\n                                        <>\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    id=\"field_name\"\r\n                                                    name=\"field_name\"\r\n                                                    label=\"File Name\"\r\n                                                    value={data.fieldName}\r\n                                                    onChange={(e) => {\r\n                                                        handleFileFieldNameChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item mt={3} xs={5}>\r\n                                                <input\r\n                                              \r\n                                                    type=\"file\"\r\n                                                    id=\"avatar\"\r\n                                                    name=\"avatar\"\r\n                                                    accept=\"image/*,.pdf\"\r\n                                                    onChange={(event) => {\r\n                                                        handleFileFieldValueChange(event.currentTarget.files[0], index);\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2}>\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        handleFileRemoveField(index);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                            </Grid>\r\n                                        </>\r\n                                    ))}\r\n                                </Grid>\r\n                            </>\r\n                        )}\r\n                    </Grid>\r\n                </DialogContent>\r\n                <Divider />\r\n                <Grid container>\r\n                    <DialogActions>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={() => {\r\n                                    formik.handleSubmit();\r\n                                }}\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                disableElevation\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </AnimateButton>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={handleClose}\r\n                                color=\"error\"\r\n                                disableElevation\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </DialogActions>\r\n                </Grid>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.mode === 'dark' ? theme.palette.background.default\r\n                     : \r\n                    theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow\r\n                            ? shadow ||\r\n                              (theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' :\r\n                               '0 2px 14px 0 rgb(32 40 45 / 8%)')\r\n                            : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} \r\n                    action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","import { forwardRef, useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    TextField,\r\n    Divider,\r\n    Box,\r\n    Link,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    ListItemSecondaryAction,\r\n    IconButton,\r\n    MenuItem\r\n} from '@mui/material';\r\n\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Icon } from '@iconify/react';\r\nimport { editNft } from 'redux/nftManagement/actions';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport fileFill from '@iconify-icons/eva/file-fill';\r\nimport closeFill from '@iconify-icons/eva/close-fill';\r\nimport QuantitySelector from './quantitySelector';\r\nimport UploadImage from 'assets/images/icons/image-upload.svg';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport clsx from 'clsx';\r\nimport { userStory } from 'store/kanban';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nconst currencyTypeArray = [\r\n    {\r\n        value: 'USDT',\r\n        label: 'USDT'\r\n    }\r\n];\r\n\r\nexport default function EditNftDialog({ nftInfo, categoryId, type, search, page, limit, loader, setLoader, open, setOpen }) {\r\n    const dispatch = useDispatch();\r\n    const [mintType, setMintType] = useState('directMint');\r\n    const [currencyType, setCurrencyType] = useState('USDT');\r\n    const [fieldDataArray, setFieldDataArray] = useState([]);\r\n    const [fileDataArray, setFileDataArray] = useState([]);\r\n    const [uploadedImages, setUploadedImages] = useState([]);\r\n    const user = useSelector((state) => state.auth.user);\r\n    const handleCurrencyType = (event) => {\r\n        setCurrencyType(event.target.value);\r\n    };\r\n\r\n    const handleError = (fieldDataArray, fileDataArray, values, isFile) => {\r\n        let isValid = true;\r\n        if (isFile) {\r\n            if (values.images[0].image.name.split('.').pop() == 'jpg' || values.images[0].image.name.split('.').pop() == 'png') {\r\n            } else {\r\n                toast.error('Upload the files with these extensions: jpg, png, gif');\r\n                isValid = false;\r\n            }\r\n        }\r\n\r\n        if (parseInt(values.images[0].quantity) < 1) {\r\n            toast.error('NFT Quantity must be greater than zero');\r\n            isValid = false;\r\n        }\r\n\r\n        fieldDataArray.forEach((array) => {\r\n            if (array.fieldName == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata name fields are mandatory`);\r\n            }\r\n            if (array.fieldValue == '') {\r\n                isValid = false;\r\n                toast.error(`Metadata value fields are mandatory`);\r\n            }\r\n        });\r\n        fileDataArray.forEach((array) => {\r\n            if (array.fieldName == '') {\r\n                isValid = false;\r\n                toast.error(`File name fields are mandatory`);\r\n            }\r\n            if (array.fieldValue == null) {\r\n                isValid = false;\r\n                toast.error(`File value fields are mandatory`);\r\n            }\r\n        });\r\n        return isValid;\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        nftName: Yup.string()\r\n            .required('NFT Name is required!')\r\n            .max(42, 'NFT Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT name'),\r\n        nftDescription: Yup.string()\r\n            .required('NFT Description is required!')\r\n            .max(1000, 'Invalid NFT description can not exceed 1000 characters'),\r\n        // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid NFT description'),\r\n        nftPrice: Yup.number()\r\n            .min(0.000001, 'Price should not less than zero')\r\n            .required('NFT Price is required')\r\n            .typeError('Invalid Price'),\r\n        images: Yup.mixed()\r\n    });\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: nftInfo,\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            let file = values.images[0].image;\r\n            let isFile = file instanceof File;\r\n            console.log('fileDataArray', fileDataArray);\r\n\r\n            let perviousUploadedItems = fileDataArray.filter((data) => {\r\n                if (typeof data.fieldValue === 'string') return data;\r\n            });\r\n            console.log('perviousUploadedItems', perviousUploadedItems);\r\n\r\n            let newUploadedItems = fileDataArray.filter((data) => {\r\n                if (typeof data.fieldValue !== 'string') return data;\r\n            });\r\n\r\n            let fileArray = newUploadedItems.map((data) => {\r\n                return data.fieldValue;\r\n            });\r\n            let fileNameArray = newUploadedItems.map((data) => {\r\n                return data.fieldName;\r\n            });\r\n\r\n            console.log('fileArray', fileArray);\r\n            console.log('fileNameArray', fileNameArray);\r\n            let isValid = handleError(fieldDataArray, fileDataArray, values, isFile);\r\n\r\n            if (isValid) {\r\n                dispatch(\r\n                    editNft({\r\n                        id: nftInfo.id,\r\n                        name: values.nftName,\r\n                        price: values.nftPrice,\r\n                        description: values.nftDescription,\r\n                        quantity: values.images[0].quantity,\r\n                        asset: isFile ? values.images[0].image : null,\r\n                        currencyType: currencyType,\r\n                        mintType: mintType,\r\n                        metaDataArray: fieldDataArray,\r\n                        fileNameArray: fileNameArray,\r\n                        fileArray: fileArray,\r\n                        perviousUploadedItems: perviousUploadedItems,\r\n                        type: type,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n                        categoryId: categoryId,\r\n                        brandId: nftInfo.brandId,\r\n                        handleClose: handleClose\r\n                        // brandId: user.BrandId\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n\r\n    const hasFile = formik.values.images.length > 0;\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n    const handleDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            let newUploadedImages = [...uploadedImages];\r\n            acceptedFiles.map(async (acceptedFile) => {\r\n                let data = { image: acceptedFile, quantity: 1 };\r\n                newUploadedImages = [...newUploadedImages, data];\r\n            });\r\n            formik.setFieldValue('images', newUploadedImages);\r\n            setUploadedImages(newUploadedImages);\r\n        },\r\n\r\n        [formik.setFieldValue, uploadedImages]\r\n    );\r\n    const handleRemoveFile = (index) => {\r\n        const newFiles = [...formik.values.images];\r\n        newFiles.splice(index, 1);\r\n        setUploadedImages(newFiles);\r\n        formik.setFieldValue('images', newFiles);\r\n    };\r\n\r\n    const { getRootProps, getInputProps, isDragActive, isDragReject, isDragAccept } = useDropzone({\r\n        accept: '.jpeg,.png,.jpg,.gif',\r\n        onDrop: handleDrop\r\n    });\r\n\r\n    const handleFieldNameChange = (value, index) => {\r\n        let array = structuredClone(fieldDataArray);\r\n        array[index].fieldName = value;\r\n        setFieldDataArray(array);\r\n    };\r\n    const handleFieldValueChange = (value, index) => {\r\n        let array = structuredClone(fieldDataArray);\r\n        array[index].fieldValue = value;\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleRemoveField = (index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array.splice(index, 1);\r\n        setFieldDataArray(array);\r\n    };\r\n\r\n    const handleFileFieldNameChange = (value, index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array[index].fieldName = value;\r\n        setFileDataArray(array);\r\n    };\r\n    const handleFileFieldValueChange = (value, index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array[index].fieldValue = value;\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    const handleFileRemoveField = (index) => {\r\n        let array = structuredClone(fileDataArray);\r\n        array.splice(index, 1);\r\n        setFileDataArray(array);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setFieldDataArray(nftInfo.fieldDataArray);\r\n        setFileDataArray(nftInfo.fileDataArray);\r\n        setMintType(nftInfo.mintType);\r\n        setCurrencyType(nftInfo.currencyType);\r\n        setUploadedImages(nftInfo.images);\r\n    }, [nftInfo]);\r\n\r\n    useEffect(() => {\r\n        console.log('fileDataArray', fileDataArray);\r\n    }, [fileDataArray]);\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog Nftdialog\"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1 \" className=\"adminname\">\r\n                    Edit NFT\r\n                </DialogTitle>\r\n                <Divider />\r\n                <Grid container>\r\n                    <DialogActions>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                variant={mintType == 'directMint' ? 'contained' : 'outlined'}\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setMintType('directMint');\r\n                                }}\r\n                            >\r\n                                Direct minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant={mintType == 'lazyMint' ? 'contained' : 'outlined'}\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={() => {\r\n                                    setMintType('lazyMint');\r\n                                }}\r\n                            >\r\n                                Lazy minting\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </DialogActions>\r\n                </Grid>\r\n\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid container mt={1}>\r\n                            <Grid xs={4} md={5} lg={5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftName\"\r\n                                    name=\"nftName\"\r\n                                    label=\"NFT Name\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftName}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftName && Boolean(formik.errors.nftName)}\r\n                                    helperText={formik.touched.nftName && formik.errors.nftName}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} md={2} lg={2}></Grid>\r\n                            <Grid xs={4} md={5} lg={5}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"nftPrice\"\r\n                                    name=\"nftPrice\"\r\n                                    label=\"NFT Price\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftPrice}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftPrice && Boolean(formik.errors.nftPrice)}\r\n                                    helperText={formik.touched.nftPrice && formik.errors.nftPrice}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} md={12} lg={12} mt={2}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    id=\"outlined-select-budget\"\r\n                                    select\r\n                                    fullWidth\r\n                                    variant=\"filled\"\r\n                                    value={currencyType}\r\n                                    onChange={handleCurrencyType}\r\n                                >\r\n                                    {currencyTypeArray.map((option, index) => (\r\n                                        <MenuItem key={index} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Grid>\r\n                            <Grid xs={12} md={12} lg={12} mt={2}>\r\n                                <TextField\r\n                                    className=\"textfieldStyle\"\r\n                                    multiline\r\n                                    rows={2}\r\n                                    id=\"nftDescription\"\r\n                                    name=\"nftDescription\"\r\n                                    label=\"NFT Description\"\r\n                                    fullWidth\r\n                                    value={formik.values.nftDescription}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.nftDescription && Boolean(formik.errors.nftDescription)}\r\n                                    helperText={formik.touched.nftDescription && formik.errors.nftDescription}\r\n                                    autoComplete=\"given-name\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid xs={12} mt={2}>\r\n                                <Button\r\n                                    className=\"fieldbutton\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ float: 'right' }}\r\n                                    onClick={() => {\r\n                                        setFieldDataArray([\r\n                                            ...fieldDataArray,\r\n                                            {\r\n                                                fieldName: '',\r\n                                                fieldValue: ''\r\n                                            }\r\n                                        ]);\r\n                                    }}\r\n                                >\r\n                                    Add more fields\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {fieldDataArray.length != 0 && (\r\n                            <>\r\n                                <Grid container spacing={4} mt={1}>\r\n                                    {fieldDataArray.map((data, index) => (\r\n                                        <>\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    className=\"textfieldStyle\"\r\n                                                    id=\"field_name\"\r\n                                                    name=\"field_name\"\r\n                                                    label=\"Metadata Name\"\r\n                                                    value={data.fieldName}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldNameChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    className=\"textfieldStyle\"\r\n                                                    id=\"field_value\"\r\n                                                    name=\"field_value\"\r\n                                                    label=\"Metadata Value\"\r\n                                                    value={data.fieldValue}\r\n                                                    onChange={(e) => {\r\n                                                        handleFieldValueChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2}>\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        handleRemoveField(index);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                            </Grid>\r\n                                        </>\r\n                                    ))}\r\n                                </Grid>\r\n                            </>\r\n                        )}\r\n\r\n                        {uploadedImages.length !== 1 && (\r\n                            <Grid\r\n                                sx={{ background: '#c5cbe9', borderRadius: '5px', paddingBottom: '2rem', paddingTop: '2rem' }}\r\n                                item\r\n                                lg={12}\r\n                                mt={3}\r\n                            >\r\n                                <div className={clsx('dropZoneContainer', 'xyz')}>\r\n                                    <div\r\n                                        className={clsx('dropZone', {\r\n                                            isDragActive: isDragActive,\r\n                                            isDragAccept: isDragAccept,\r\n                                            isDragReject: isDragReject\r\n                                        })}\r\n                                        {...getRootProps()}\r\n                                    >\r\n                                        <input {...getInputProps()} />\r\n\r\n                                        <Grid container direction=\"column\">\r\n                                            <Box\r\n                                                textAlign=\"center\"\r\n                                                component=\"img\"\r\n                                                alt=\"Select File\"\r\n                                                src={UploadImage}\r\n                                                sx={{ height: 60 }}\r\n                                            />\r\n\r\n                                            <Box mt={4} textAlign=\"center\" sx={{ ml: { md: 0 } }}>\r\n                                                <Typography variant=\"subtitle\" sx={{ color: 'grey', textAlign: 'center' }}>\r\n                                                    Drop your image or&nbsp;\r\n                                                    <Link underline=\"always\">browse</Link>.&nbsp;\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </div>\r\n                            </Grid>\r\n                        )}\r\n\r\n                        <List disablePadding className={clsx({ list: hasFile })} sx={{ mt: 3 }}>\r\n                            <AnimatePresence>\r\n                                {formik.values.images &&\r\n                                    formik.values.images.map((file, index) => (\r\n                                        <ListItem key={file.image.name} component={motion.div} className=\"listItem\">\r\n                                            <ListItemIcon>\r\n                                                <Icon icon={fileFill} width={32} height={32} />\r\n                                            </ListItemIcon>\r\n\r\n                                            <ListItemText\r\n                                                className=\"encap\"\r\n                                                primary={file.image.name ? file.image.name : ''}\r\n                                                // secondary={fData(file.image.size) ? fData(file.image.size) : ''}\r\n                                                // primaryTypographyProps={{\r\n                                                //     variant: 'body2'\r\n                                                // }}\r\n                                            />\r\n                                            {mintType == 'directMint' && (\r\n                                                <QuantitySelector formik={formik} fileArray={formik.values.images} index={index} />\r\n                                            )}\r\n\r\n                                            <IconButton\r\n                                                color=\"error\"\r\n                                                edge=\"end\"\r\n                                                size=\"small\"\r\n                                                onClick={() => handleRemoveFile(file.image, index)}\r\n                                            >\r\n                                                <Icon icon={closeFill} width={28} height={28} />\r\n                                            </IconButton>\r\n                                        </ListItem>\r\n                                    ))}\r\n                            </AnimatePresence>\r\n                        </List>\r\n                    </form>\r\n\r\n                    <Grid container>\r\n                        <Grid xs={12} mt={2} pr={3}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                className=\"fieldbutton\"\r\n                                sx={{ float: 'right' }}\r\n                                onClick={() => {\r\n                                    setFileDataArray([\r\n                                        ...fileDataArray,\r\n                                        {\r\n                                            fieldName: '',\r\n                                            fieldValue: null\r\n                                        }\r\n                                    ]);\r\n                                }}\r\n                            >\r\n                                Add Files\r\n                            </Button>\r\n                        </Grid>\r\n                        {fileDataArray?.length != 0 && (\r\n                            <>\r\n                                <Grid container spacing={2} mt={1}>\r\n                                    {fileDataArray?.map((data, index) => (\r\n                                        <>\r\n                                            <Grid item xs={5}>\r\n                                                <TextField\r\n                                                    id=\"field_name\"\r\n                                                    name=\"field_name\"\r\n                                                    label=\"File Name\"\r\n                                                    value={data.fieldName}\r\n                                                    onChange={(e) => {\r\n                                                        handleFileFieldNameChange(e.target.value, index);\r\n                                                    }}\r\n                                                    variant=\"standard\"\r\n                                                    fullWidth\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={5} mt={3}>\r\n                                                <input\r\n                                                    type=\"file\"\r\n                                                    id=\"avatar\"\r\n                                                    name=\"avatar\"\r\n                                                    accept=\"image/*,.pdf\"\r\n                                                    onChange={(event) => {\r\n                                                        handleFileFieldValueChange(event.currentTarget.files[0], index);\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={2} mt={2}>\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    edge=\"end\"\r\n                                                    size=\"small\"\r\n                                                    onClick={() => {\r\n                                                        handleFileRemoveField(index);\r\n                                                    }}\r\n                                                >\r\n                                                    <Icon icon={closeFill} width={28} height={28} />\r\n                                                </IconButton>\r\n                                            </Grid>\r\n                                        </>\r\n                                    ))}\r\n                                </Grid>\r\n                            </>\r\n                        )}\r\n                    </Grid>\r\n                </DialogContent>\r\n                <Divider />\r\n                <Grid container>\r\n                    <DialogActions>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={() => {\r\n                                    formik.handleSubmit();\r\n                                }}\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                disableElevation\r\n                            >\r\n                                Edit\r\n                            </Button>\r\n                        </AnimateButton>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                className=\"buttons\"\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                sx={{ my: 1, ml: 1, padding: { md: '6px 50px', lg: '6px 50px' } }}\r\n                                onClick={handleClose}\r\n                                color=\"error\"\r\n                                disableElevation\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </DialogActions>\r\n                </Grid>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Slide,\r\n    DialogContentText,\r\n    Typography,\r\n    CircularProgress\r\n} from '@mui/material';\r\nimport { requestNftForMinting } from 'redux/nftManagement/actions';\r\nimport Erc20 from '../../../../../contractAbi/Erc20.json';\r\nimport { ethers } from 'ethers';\r\nimport BLOCKCHAIN from '../../../../../constants';\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function RequestForMintDialog({ open, setOpen, page, limit, search, type, nftData, categoryId }) {\r\n    const theme = useTheme();\r\n    const [loader, setLoader] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setLoader(false);\r\n    };\r\n    const user = useSelector((state) => state.auth.user);\r\n\r\n    const handleMintRequest = async () => {\r\n        setLoader(true);\r\n        console.log('nftData', nftData);\r\n        let profitPercentage = parseInt(nftData.Category.BrandCategories[0].profitPercentage);\r\n        let quant = nftData.NFTTokens.length;\r\n        let price = quant * nftData.price;\r\n        console.log('profitPercentage', profitPercentage);\r\n        console.log('price', price);\r\n        let amount = (price / 100) * profitPercentage;\r\n        console.log('amount', amount);\r\n\r\n        console.log('im here');\r\n        let prices = ethers.utils.parseEther(amount.toString());\r\n        console.log('prices', prices);\r\n        console.log('im here2');\r\n        let erc20Address = BLOCKCHAIN.ERC20;\r\n        let ownerAddress = '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651';\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n        console.log('signer', signer);\r\n        let data = await (await token.transfer(ownerAddress, prices)).wait();\r\n        console.log('data', data);\r\n\r\n        dispatch(\r\n            requestNftForMinting({\r\n                id: nftData.id,\r\n                categoryId: categoryId,\r\n                page: page,\r\n                limit: limit,\r\n                search: search,\r\n                type: type,\r\n                brandId: user.BrandId,\r\n                handleClose: handleClose\r\n            })\r\n        );\r\n        setLoader(false);\r\n    };\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Request Admin for mint</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to request Admin to mint this NFT?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    {/* {loader ?\r\n               < CircularProgress/>\r\n               : */}\r\n                    <>\r\n                        <Button\r\n                            sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                            onClick={handleClose}\r\n                            color=\"secondary\"\r\n                        >\r\n                            No\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                            onClick={() => {\r\n                                handleMintRequest();\r\n                            }}\r\n                        >\r\n                            Yes\r\n                        </Button>\r\n                    </>\r\n\r\n                    {/* } */}\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteNft } from 'redux/nftManagement/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteNFTDialog({ nftInfo, categoryId, type, search, page, limit, loader, setLoader, open, setOpen }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const user = useSelector((state) => state.auth.user);\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\" className=\"statusHeading\">Delete Brand Admin</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\" className=\"statustypo\">\r\n                            Are you sure you want to delete this Admin?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                        className='buttonSize' size='large'\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        className='buttonSize' size='large'\r\n                     \r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteNft({\r\n                                    id: nftInfo.id,\r\n                                    categoryId: categoryId,\r\n                                    type: type,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    brandId: user.BrandId,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState, useRef, useEffect } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, Typography } from '@mui/material';\r\nimport { Card, Container, CardMedia, TextField, MenuItem, Chip, Divider } from '@mui/material';\r\nimport React from 'react';\r\n// project imports\r\n\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\n// ===============================|| UI DIALOG - SCROLLABLE ||=============================== //\r\n\r\nexport default function DetailsDialog({ open, setOpen, nftData }) {\r\n    const theme = useTheme();\r\n\r\n    const status = [\r\n        {\r\n            name: 'Name:',\r\n            value: nftData?.name\r\n        },\r\n        {\r\n            name: 'Status:',\r\n            value: nftData?.status\r\n        },\r\n        {\r\n            name: 'Description:',\r\n            value: nftData?.description\r\n        },\r\n        {\r\n            name: 'Price:',\r\n            value: nftData?.price\r\n        },\r\n        {\r\n            name: 'Mint Type:',\r\n            value: nftData?.mintType\r\n        },\r\n        {\r\n            name: 'Brand:',\r\n            value: nftData?.Brand.name\r\n        },\r\n        {\r\n            name: 'Token URL:',\r\n            value: 'Null'\r\n        }\r\n    ];\r\n    const [scroll, setScroll] = useState('paper');\r\n\r\n    const handleClickOpen = (scrollType) => () => {\r\n        setOpen(true);\r\n        setScroll(scrollType);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const descriptionElementRef = useRef(null);\r\n    useEffect(() => {\r\n        if (open) {\r\n            const { current: descriptionElement } = descriptionElementRef;\r\n            if (descriptionElement !== null) {\r\n                descriptionElement?.focus();\r\n            }\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                scroll={scroll}\r\n                aria-labelledby=\"scroll-dialog-title\"\r\n                aria-describedby=\"scroll-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"scroll-dialog-title\">NFT Details</DialogTitle>\r\n                <DialogContent dividers={scroll === 'paper'}>\r\n                    <Grid container spacing={3}>\r\n                        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n                            <Grid item xs={12}>\r\n                                <Grid container justifyContent=\"center\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n                                    <Grid item lg={6} className=\"NFTdetails\">\r\n                                        <img src={nftData?.asset} alt=\"Statement Image\" className=\"imageSize\" />\r\n                                    </Grid>\r\n\r\n                                    <Grid item md={6} sm={12}>\r\n                                        <Grid item xs={12}>\r\n                                            <Grid container justifyContent=\"left\">\r\n                                                <Grid item md={12} sm={12}>\r\n                                                    {status.map((option) => (\r\n                                                        <Grid container spacing={2}>\r\n                                                            <Grid item md={6} xs={12}>\r\n                                                                <Typography\r\n                                                                    mt={1}\r\n                                                                    className=\"nftHead\"\r\n                                                                    color={theme.palette.mode === 'dark' ? 'white' : 'black'}\r\n                                                                    variant=\"h3\"\r\n                                                                >\r\n                                                                    {option.name}\r\n                                                                </Typography>\r\n                                                            </Grid>\r\n\r\n                                                            <Grid item md={6} xs={12} sx={{ marginTop: '12px', textAlign: 'left' }}>\r\n                                                                <Typography\r\n                                                                    mt={1}\r\n                                                                    className=\"nftText\"\r\n                                                                    color={theme.palette.mode === 'dark' ? 'white' : '#767676'}\r\n                                                                    variant=\"body\"\r\n                                                                >\r\n                                                                    {option.value}\r\n                                                                </Typography>\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                    ))}\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5, pt: 2.5 }}>\r\n                    <Button sx={{ color: theme.palette.error.dark }} onClick={handleClose} color=\"secondary\">\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Button, CardContent, CardMedia, Grid, Stack, Typography } from '@mui/material';\r\nimport MainCard from './mainCard';\r\nimport EditNftDialog from './editNftDialog';\r\nimport RequestForMintDialog from './requestForMintDialog';\r\nimport DeleteNFTDialog from './deleteNftDialog';\r\nimport DetailsDialog from './details';\r\nimport { useEffect } from 'react';\r\nconst NftCard = ({ nftData, categoryId, search, page, limit, type }) => {\r\n    const dispatch = useDispatch();\r\n    const [loader, setLoader] = useState(false);\r\n    const [openRequestMint, setOpenRequestMint] = useState(false);\r\n    const [editNftOpen, setEditNftOpen] = useState(false);\r\n    const [deleteNftOpen, setDeleteNftOpen] = useState(false);\r\n    const [DetailsNftOpen, setDetailsNftOpen] = useState(false);\r\n    const [image, setImage] = useState([]);\r\n    const [nftInfo, setNftInfo] = useState({\r\n        id: null,\r\n        brandId: null,\r\n        nftName: '',\r\n        nftDescription: '',\r\n        nftPrice: 0,\r\n        mintType: 'directMint',\r\n        currencyType: 'USDT',\r\n        fieldDataArray: [],\r\n        fileDataArray: [],\r\n        images: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        const length = nftData.asset.split('/').length;\r\n        setImage([\r\n            {\r\n                image: { name: nftData.asset.split('/')[length - 1] },\r\n                quantity: nftData.NFTTokens.length\r\n            }\r\n        ]);\r\n    }, [nftData]);\r\n    return (\r\n        <>\r\n            <DeleteNFTDialog\r\n                nftInfo={nftInfo}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={deleteNftOpen}\r\n                setOpen={setDeleteNftOpen}\r\n            />\r\n            <EditNftDialog\r\n                nftInfo={nftInfo}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={editNftOpen}\r\n                setOpen={setEditNftOpen}\r\n            />\r\n            <RequestForMintDialog\r\n                nftData={nftData}\r\n                categoryId={categoryId}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={openRequestMint}\r\n                setOpen={setOpenRequestMint}\r\n            />\r\n            <DetailsDialog open={DetailsNftOpen} setOpen={setDetailsNftOpen} nftData={nftData} />\r\n            <MainCard\r\n                content={false}\r\n                className='tableShadow'\r\n                boxShadow\r\n                sx={{\r\n                    position: 'relative',\r\n                    '&:hover': {\r\n                        transform: 'scale3d(1.02, 1.02, 1)',\r\n                        transition: 'all .4s ease-in-out'\r\n                    }\r\n                }}\r\n            >\r\n                <CardMedia sx={{ height: 220 }} image={nftData.asset} />\r\n                <CardContent sx={{ p: 2 }}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={9}>\r\n                            <Typography variant=\"subtitle1\" className='fontstyling'\r\n                             sx={{ textDecoration: 'none', textTransform: 'capitalize' }}>\r\n                                {nftData.name}\r\n                            </Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} mt={-1.5}>\r\n                            <Typography\r\n                            className='fontstyling'\r\n                                variant=\"body1\"\r\n                                sx={{\r\n                                    overflow: 'hidden',\r\n                                    height: 30,\r\n                                    textTransform: 'capitalize'\r\n                                }}\r\n                            >\r\n                                {nftData.description}\r\n                            </Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6}>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\" className='fontstyling'>\r\n                                    {nftData.price} {nftData.currencyType}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\" className='fontstyling'>{nftData.NFTTokens.length} Items</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                          \r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                                sx={{\r\n                                    marginRight: '10px',\r\n                                    float: 'right',\r\n                                    ':hover': {\r\n                                        boxShadow: 'none'\r\n                                    },\r\n                                    color: '#2F5AFF',\r\n                                    background: '#B9DDFF',\r\n                                    \r\n                                }}\r\n                                \r\n                                onClick={() => {\r\n                                    setDetailsNftOpen(true);\r\n                                }}\r\n                            >\r\n                                Details\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\">\r\n                                {nftData.status !== 'MINTED' && (\r\n                                    <>\r\n                                        <Button\r\n                                        className='fontstyling'\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            sx={{ marginRight: '5px' }}\r\n                                            onClick={() => {\r\n                                                setEditNftOpen(true);\r\n                                                setNftInfo({\r\n                                                    id: nftData.id,\r\n                                                    brandId: nftData.Brand.id,\r\n                                                    nftName: nftData.name,\r\n                                                    nftDescription: nftData.description,\r\n                                                    nftPrice: nftData.price,\r\n                                                    mintType: nftData.mintType,\r\n                                                    currencyType: nftData.currencyType,\r\n                                                    fieldDataArray: nftData.NFTMetaData,\r\n                                                    fileDataArray: nftData.NFTMetaFiles,\r\n                                                    images: image\r\n                                                });\r\n                                            }}\r\n                                        >\r\n                                            Edit\r\n                                        </Button>\r\n                                        <Button\r\n                                        className='fontstyling'\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            sx={{ marginRight: '5px' }}\r\n                                            onClick={() => {\r\n                                                setDeleteNftOpen(true);\r\n                                                setNftInfo({\r\n                                                    id: nftData.id,\r\n                                                    nftName: nftData.name,\r\n                                                    nftDescription: nftData.description,\r\n                                                    nftPrice: nftData.price,\r\n                                                    mintType: nftData.mintType,\r\n                                                    currencyType: nftData.currencyType,\r\n                                                    fieldDataArray: nftData.NFTMetaData,\r\n                                                    images: image\r\n                                                });\r\n                                            }}\r\n                                        >\r\n                                            Delete\r\n                                        </Button>\r\n                                    </>\r\n                                )}\r\n\r\n                                {(nftData.status == 'DRAFT' || nftData.status == 'REJECTED') && (\r\n                                    <Button\r\n                                    className='fontstyling'\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        sx={{ marginRight: '5px' }}\r\n                                        onClick={() => {\r\n                                            setOpenRequestMint(true);\r\n                                        }}\r\n                                    >\r\n                                        Request\r\n                                    </Button>\r\n                                )}\r\n                            </Stack>\r\n                            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\"></Stack>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NftCard;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Grid, Typography, Pagination, Menu, MenuItem, TextField, Box } from '@mui/material';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AddNft from './component/addNft';\r\nimport { getAllNft } from '../../../../redux/nftManagement/actions';\r\nimport NftCard from './component/nftcard';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nconst typeArray = [\r\n    {\r\n        value: 'all',\r\n        label: \"All NFT'S\"\r\n    },\r\n    {\r\n        value: 'directMint',\r\n        label: 'Minted NFTS'\r\n    },\r\n    {\r\n        value: 'lazyMint',\r\n        label: \"Lazy Minted NFT'S\"\r\n    },\r\n    {\r\n        value: 'waiting',\r\n        label: 'Waiting For approval'\r\n    },\r\n    {\r\n        value: 'draft',\r\n        label: 'Draft NFTS'\r\n    },\r\n    {\r\n        value: 'rejected',\r\n        label: 'Rejected NFTS'\r\n    }\r\n];\r\n\r\nconst NftManagement = () => {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n\r\n    const user = useSelector((state) => state.auth.user);\r\n    const [type, setType] = useState('all');\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(12);\r\n    const [addNftOpen, setAddNftOpen] = useState(false);\r\n    const [loader, setLoader] = useState(true);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n        setLoader(false);\r\n    };\r\n    const handleType = (event) => {\r\n        setType(event.target.value);\r\n        setLimit(12);\r\n        setSearch('');\r\n        setPage(1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllNft({\r\n                categoryId: location.state.data.CategoryId,\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                type: type,\r\n                brandId: user.BrandId,\r\n                handleClose: handleClose\r\n            })\r\n        );\r\n    }, [search, page, limit, type]);\r\n\r\n    const nftList = useSelector((state) => state.nftReducer.nftList);\r\n    \r\n    return (\r\n        <>\r\n            <AddNft\r\n                open={addNftOpen}\r\n                setOpen={setAddNftOpen}\r\n                data={location.state.data}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                nftType={type}\r\n            />\r\n            <MainCard\r\n                className=\"Adminheading\"\r\n                title={\r\n                    <Typography\r\n                        variant=\"h1\"\r\n                        component=\"h2\"\r\n                        className=\"headingcard\"\r\n                        sx={{ marginTop: '10px', fontWeight: 600, color:  theme.palette.mode === 'dark' ? '#fff' : '#000' ,\r\n                         marginLeft: { lg: '-20px', md: '-20px' } }}\r\n                    >\r\n                        Categories\r\n                    </Typography>\r\n                }\r\n                secondary={\r\n                    <Button\r\n                        className=\"buttonSize\"\r\n                        sx={{ float: 'right' }}\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            navigate('/categories');\r\n                        }}\r\n                    >\r\n                        Back\r\n                    </Button>\r\n                }\r\n                content={false}\r\n            ></MainCard>\r\n            <MainCard\r\n                className=\"yellow tableShadow\"\r\n                title={\r\n                    <Grid container spacing={4}>\r\n                        <Grid item xs={6} lg={8}>\r\n                            <Typography className=\"mainheading\" variant=\"h1\" component=\"h2\" sx={{ marginLeft: { lg: '48px', md: '48px' } }}>\r\n                                NFT Management\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3} lg={2}>\r\n                            <TextField\r\n                                className=\"selectField selectstyle\"\r\n                                id=\"outlined-select-budget\"\r\n                                select\r\n                                fullWidth\r\n                                value={type}\r\n                                onChange={handleType}\r\n                                variant=\"standard\"\r\n                            >\r\n                                {typeArray.map((option, index) => (\r\n                                    <MenuItem  key={index} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={3} lg={2} textAlign=\"start\">\r\n                            <Button\r\n                                className=\"buttonSize\"\r\n                                sx={{ marginLeft: { lg: '-16px', md: '-16px' } }}\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddNftOpen(true);\r\n                                }}\r\n                            >\r\n                                Add NFT\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                <Grid container>\r\n                    {(nftList && nftList.nfts && nftList.nfts.rows && nftList.nfts.rows.length >= 0) ? (\r\n                        <>\r\n                       { nftList.nfts.rows.length >= 0?(\r\n                        <>\r\n                            {' '}\r\n                            <Grid container spacing={gridSpacing} mt={2} sx={{ marginLeft: { lg: '48px', md: '48px' } }}>\r\n                                {nftList.nfts.rows &&\r\n                                    nftList.nfts.rows.map((nft, index) => {\r\n                                        return (\r\n                                            <Grid key={index} item xs={12} sm={6} md={4} lg={3}>\r\n                                                <NftCard\r\n                                                    className=\"tableShadow\"\r\n                                                    nftData={nft}\r\n                                                    categoryId={location.state.data.CategoryId}\r\n                                                    search={search}\r\n                                                    page={page}\r\n                                                    limit={limit}\r\n                                                    type={type}\r\n                                                />\r\n                                            </Grid>\r\n                                        );\r\n                                    })}\r\n                            </Grid>\r\n                            <Grid item xs={12} sx={{ p: 3 }}>\r\n                                <Grid container justifyContent=\"center\" spacing={gridSpacing}>\r\n                                    <Grid item>\r\n                                        <Pagination\r\n                                            page={page}\r\n                                            color=\"primary\"\r\n                                            showFirstButton\r\n                                            showLastButton\r\n                                            count={nftList && nftList.pages}\r\n                                            onChange={(event, newPage) => {\r\n                                                setPage(newPage);\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            </>\r\n                       )\r\n                       :\r\n                       (\r\n                        <Grid item>\r\n                        <Typography className=\"statustypo\" style={{     padding: '20px 20px 20px 70px', fontWeight: '500' }}>\r\n                         No Data Available</Typography>\r\n                    </Grid>\r\n                       )}\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <Grid item display={\"flex\"} justifyContent=\"center\" sx={{width:\"100%\", m:5}}>\r\n                                <div>\r\n                                    <CircularProgress\r\n                                        disableShrink\r\n                                        size=\"5rem\"\r\n                                        style={\r\n                                            {\r\n                                                // transitionDelay: '1000ms'\r\n                                            }\r\n                                        }\r\n                                    />\r\n                                </div>\r\n                            </Grid>\r\n                        </>\r\n                    )}\r\n                </Grid>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NftManagement;\r\n","const BLOCKCHAIN = \r\n    {\r\n        WALLET_ADDRESS: '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651',\r\n        ERC20: '0x943b645e4dEE17D102745f5b1B40B775f06C0366'\r\n    }\r\n    \r\n\r\n\r\nexport default BLOCKCHAIN\r\n"],"sourceRoot":""}