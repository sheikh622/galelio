{"version":3,"sources":["views/pages/superAdmin/brands/component/deleteBrandDialog.js","views/pages/superAdmin/brands/component/brandTable.js","views/pages/superAdmin/brands/component/addUpdateBrand.js","views/pages/superAdmin/brands/index.js","ui-component/extended/Avatar.js","shared/Card/HeadingCard.js","shared/component/FileInput.js","../node_modules/@mui/icons-material/AddOutlined.js"],"names":["Transition","forwardRef","props","ref","Slide","direction","DeleteBrandDialog","open","setOpen","brandId","page","limit","search","theme","useTheme","dispatch","useDispatch","handleClose","Dialog","TransitionComponent","keepMounted","onClose","DialogTitle","id","DialogContent","DialogContentText","Typography","variant","component","DialogActions","sx","pr","Button","color","palette","error","dark","borderColor","onClick","size","deleteBrand","BrandTable","brandsList","setAddUpdateOpen","setBrandData","navigate","useNavigate","useState","deleteOpen","setDeleteOpen","setBrandId","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","undefined","brands","map","row","index","justifyContent","alignItems","Grid","container","spacing","item","Avatar","alt","src","image","name","padding","location","description","moment","createdAt","format","updatedAt","Stack","Tooltip","placement","title","IconButton","state","brandData","fontSize","orange","main","background","light","AddUpdateBrandDialog","isUpdate","setIsUpdate","useEffect","validationSchema","Yup","default","required","max","matches","when","is","then","otherwise","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","isValid","split","pop","toast","errorHandler","addBrand","updateBrand","resetForm","className","maxWidth","Divider","autoComplete","handleSubmit","xs","pt","InputLabel","htmlFor","TextField","value","onChange","handleChange","touched","Boolean","errors","helperText","fullWidth","FileInput","accept","fieldName","placeHolder","AnimateButton","type","my","ml","disableElevation","Brands","useSelector","brand","setSearch","setPage","setLimit","addUpdateOpen","anchorEl","setAnchorEl","handleCloseMenu","getAllBrands","HeadingCard","MainCard","gridSpacing","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","e","target","textAlign","content","count","p","Pagination","showFirstButton","showLastButton","pages","event","newPage","grey","endIcon","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","md","style","fontWeight","outline","others","colorSX","paper","bgcolor","outlineSX","border","sizeSX","width","height","role","setValue","options","marginBottom","primary","select","option","label","fileRef1","useRef","current","click","hidden","setFieldValue","files","length","mt","substring","toFixed","marginTop","_interopRequireDefault","require","Object","defineProperty","exports","_createSvgIcon","_jsxRuntime","_default","jsx","d"],"mappings":"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","file":"static/js/7.4c012541.chunk.js","sourcesContent":["import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteBrand } from '../../../../../redux/brand/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteBrandDialog({ open, setOpen, brandId, page, limit, search }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Delete Brand</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to delete this Brand?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteBrand({\r\n                                    id: brandId,\r\n                                    handleClose: handleClose,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n    IconButton,\r\n    Stack,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Tooltip,\r\n    Grid,\r\n    Typography\r\n} from '@mui/material';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport AddOutlinedIcon from '@mui/icons-material/AddOutlined';\r\nimport DeleteBrandDialog from './deleteBrandDialog';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\nimport moment from 'moment';\r\n\r\nconst BrandTable = ({ brandsList, page, limit, search, setAddUpdateOpen, setBrandData }) => {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const [brandId, setBrandId] = useState();\r\n    return (\r\n        <TableContainer>\r\n            <DeleteBrandDialog open={deleteOpen} setOpen={setDeleteOpen} brandId={brandId} page={page} limit={limit} search={search} />\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\">Name</TableCell>\r\n                        <TableCell align=\"center\">Location</TableCell>\r\n                        <TableCell align=\"center\">Description</TableCell>\r\n                        <TableCell align=\"center\">Created At</TableCell>\r\n                        <TableCell align=\"center\">Updated At</TableCell>\r\n                        <TableCell align=\"center\">Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {brandsList.brands != undefined &&\r\n                        brandsList.brands.map((row, index) => (\r\n                            <TableRow>\r\n                                <TableCell align=\"center\" justifyContent=\"center\" alignItems=\"center\">\r\n                                    <Grid container spacing={2} justifyContent=\"center\" alignItems=\"center\">\r\n                                        <Grid item>\r\n                                            <Avatar alt=\"Brand Image\" src={row.image} />\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography variant=\"subtitle1\" component=\"div\">\r\n                                                {row.name}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                    {row.location}\r\n                                </TableCell>\r\n                                <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                    {row.description}\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">{moment(row.createdAt).format('DD-MMM-YYYY')}</TableCell>\r\n                                <TableCell align=\"center\">{moment(row.updatedAt).format('DD-MMM-YYYY')}</TableCell>\r\n                                <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                    <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                        <Tooltip placement=\"top\" title=\"Add Brand Categories\">\r\n                                            <IconButton\r\n                                                color=\"primary\"\r\n                                                aria-label=\"detail\"\r\n                                                size=\"medium\"\r\n                                                onClick={() => {\r\n                                                    navigate('/brands/category', {\r\n                                                        state: {\r\n                                                            brandData: row\r\n                                                        }\r\n                                                    });\r\n                                                }}\r\n                                            >\r\n                                                <AddOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                        <Tooltip placement=\"top\" title=\"Add Brand Admin\">\r\n                                            <IconButton\r\n                                                color=\"primary\"\r\n                                                aria-label=\"detail\"\r\n                                                size=\"medium\"\r\n                                                onClick={() => {\r\n                                                    navigate('/brands/admin', {\r\n                                                        state: {\r\n                                                            brandData: row\r\n                                                        }\r\n                                                    });\r\n                                                }}\r\n                                            >\r\n                                                <AddOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n\r\n                                        <Tooltip placement=\"top\" title=\"Edit\">\r\n                                            <IconButton\r\n                                                color=\"primary\"\r\n                                                aria-label=\"Edit\"\r\n                                                size=\"large\"\r\n                                                onClick={() => {\r\n                                                    setAddUpdateOpen(true);\r\n                                                    setBrandData({\r\n                                                        id: row.id,\r\n                                                        name: row.name,\r\n                                                        description: row.description,\r\n                                                        location: row.location,\r\n                                                        image: null\r\n                                                    });\r\n                                                }}\r\n                                            >\r\n                                                <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                        <Tooltip placement=\"top\" title=\"Delete\">\r\n                                            <IconButton\r\n                                                color=\"primary\"\r\n                                                sx={{\r\n                                                    color: theme.palette.orange.dark,\r\n                                                    borderColor: theme.palette.orange.main,\r\n                                                    '&:hover ': { background: theme.palette.orange.light }\r\n                                                }}\r\n                                                size=\"large\"\r\n                                                onClick={() => {\r\n                                                    setDeleteOpen(true);\r\n                                                    setBrandId(row.id);\r\n                                                }}\r\n                                            >\r\n                                                <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </Stack>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default BrandTable;\r\n","import { forwardRef, useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Grid, Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, Divider, InputLabel } from '@mui/material';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { addBrand, updateBrand } from '../../../../../redux/brand/actions';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport FileInput from '../../../../../shared/component/FileInput';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nexport default function AddUpdateBrandDialog({ brandData, page, limit, search, open, setOpen }) {\r\n    const dispatch = useDispatch();\r\n    const [isUpdate, setIsUpdate] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (brandData.id == null) {\r\n            setIsUpdate(false);\r\n        } else {\r\n            setIsUpdate(true);\r\n        }\r\n    }, [brandData]);\r\n\r\n    const validationSchema = Yup.object({\r\n        isUpdate: Yup.boolean().default(isUpdate),\r\n        name: Yup.string()\r\n            .required('Brand Name is required!')\r\n            .max(42, 'Brand Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Brand name'),\r\n        location: Yup.string()\r\n            .required('Location is required!')\r\n            .max(42, 'Location can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Location'),\r\n        description: Yup.string()\r\n            .required('Brand is required!')\r\n            .max(42, 'Brand can not exceed 200 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Description'),\r\n        image: Yup.mixed().when(['isUpdate'], {\r\n            is: true,\r\n            then: Yup.mixed(),\r\n            otherwise: Yup.mixed().required('Image is required')\r\n        })\r\n    });\r\n    const errorHandler = (values) => {\r\n        if (values.image) {\r\n            if (\r\n                values.image.name.split('.').pop() == 'jpg' ||\r\n                values.image.name.split('.').pop() == 'png' ||\r\n                values.image.name.split('.').pop() == 'jpeg '\r\n            ) {\r\n                return true;\r\n            } else {\r\n                toast.error('Upload the files with these extensions: jpg, png, jpeg');\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: brandData,\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            const isValid = errorHandler(values);\r\n            if (isValid) {\r\n                if (brandData.id == null) {\r\n                    dispatch(\r\n                        addBrand({\r\n                            name: values.name,\r\n                            description: values.description,\r\n                            location: values.location,\r\n                            image: values.image,\r\n                            page: page,\r\n                            limit: limit,\r\n                            search: search,\r\n                            handleClose: handleClose\r\n                        })\r\n                    );\r\n                } else {\r\n                    dispatch(\r\n                        updateBrand({\r\n                            brandId: brandData.id,\r\n                            name: values.name,\r\n                            description: values.description,\r\n                            location: values.location,\r\n                            image: values.image,\r\n                            page: page,\r\n                            limit: limit,\r\n                            search: search,\r\n                            handleClose: handleClose\r\n                        })\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    });\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                className=\"brandDialog\"\r\n                maxWidth=\"md\"\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">{brandData.id == null ? 'Add Brand' : 'Update Brand'}</DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <Grid container>\r\n                            <Grid item xs={6} pt={4} pr={4}>\r\n                                <InputLabel htmlFor=\"outlined-adornment-password-login\">Name</InputLabel>\r\n                                <TextField\r\n                                    id=\"name\"\r\n                                    name=\"name\"\r\n                                    value={formik.values.name}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.name && Boolean(formik.errors.name)}\r\n                                    helperText={formik.touched.name && formik.errors.name}\r\n                                    fullWidth\r\n                                    autoComplete=\"given-name\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6} pt={4}>\r\n                                <InputLabel htmlFor=\"outlined-adornment-password-login\">Location</InputLabel>\r\n                                <TextField\r\n                                    id=\"location\"\r\n                                    name=\"location\"\r\n                                    value={formik.values.location}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.location && Boolean(formik.errors.location)}\r\n                                    helperText={formik.touched.location && formik.errors.location}\r\n                                    fullWidth\r\n                                    autoComplete=\"given-name\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} pt={2}>\r\n                                <InputLabel htmlFor=\"outlined-adornment-password-login\">Description</InputLabel>\r\n                                <TextField\r\n                                    id=\"description\"\r\n                                    name=\"description\"\r\n                                    value={formik.values.description}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.description && Boolean(formik.errors.description)}\r\n                                    helperText={formik.touched.description && formik.errors.description}\r\n                                    fullWidth\r\n                                    autoComplete=\"given-name\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} pt={2}>\r\n                                <FileInput formik={formik} accept=\"image/*\" fieldName=\"image\" placeHolder=\"Add Brand Image\" />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n                <Divider />\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1 }}\r\n                            onClick={() => {\r\n                                formik.handleSubmit();\r\n                            }}\r\n                            size=\"large\"\r\n                            disableElevation\r\n                        >\r\n                            {brandData.id == null ? 'Add' : 'Update'}\r\n                        </Button>\r\n                    </AnimateButton>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ my: 3, ml: 1, color: '#fff' }}\r\n                            onClick={handleClose}\r\n                            color=\"secondary\"\r\n                            size=\"large\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </AnimateButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport BrandTable from './component/brandTable';\r\nimport { Button, Typography, Grid, MenuItem, Menu, Pagination, OutlinedInput, InputAdornment, Divider } from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { getAllBrands } from '../../../../redux/brand/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport AddUpdateBrandDialog from './component/addUpdateBrand';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport HeadingCard from 'shared/Card/HeadingCard';\r\nconst Brands = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const brandsList = useSelector((state) => state.brand.brandsList);\r\n\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [brandData, setBrandData] = useState({\r\n        id: null,\r\n        name: '',\r\n        description: '',\r\n        image: null,\r\n        location: ''\r\n    });\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllBrands({\r\n                search: search,\r\n                page: page,\r\n                limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n    return (\r\n        <>\r\n            <AddUpdateBrandDialog\r\n                brandData={brandData}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n                open={addUpdateOpen}\r\n                setOpen={setAddUpdateOpen}\r\n            />\r\n\r\n            <HeadingCard title=\"Brand Management\" />\r\n            <MainCard\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={6}>\r\n                            <OutlinedInput\r\n                                id=\"input-search-list-style1\"\r\n                                placeholder=\"Search\"\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"start\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                                size=\"small\"\r\n                                onChange={(e) => {\r\n                                    setSearch(e.target.value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6} textAlign=\"end\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddUpdateOpen(true);\r\n                                    setBrandData({ id: null, name: '', description: '', location: '', image: null });\r\n                                }}\r\n                            >\r\n                                Add Brand\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n                {brandsList.brands != undefined && brandsList.count > 0 ? (\r\n                    <>\r\n                        <BrandTable\r\n                            brandsList={brandsList && brandsList}\r\n                            page={page}\r\n                            limit={limit}\r\n                            search={search}\r\n                            setAddUpdateOpen={setAddUpdateOpen}\r\n                            setBrandData={setBrandData}\r\n                        />\r\n\r\n                        <Grid item xs={12} sx={{ p: 3 }}>\r\n                            <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                                <Grid item>\r\n                                    <Pagination\r\n                                        color=\"primary\"\r\n                                        showFirstButton\r\n                                        showLastButton\r\n                                        page={page}\r\n                                        count={brandsList && brandsList.pages}\r\n                                        onChange={(event, newPage) => {\r\n                                            setPage(newPage);\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        size=\"large\"\r\n                                        sx={{ color: theme.palette.grey[900] }}\r\n                                        color=\"secondary\"\r\n                                        endIcon={<ExpandMoreRoundedIcon />}\r\n                                        onClick={handleClick}\r\n                                    >\r\n                                        {limit} Rows\r\n                                    </Button>\r\n                                    <Menu\r\n                                        id=\"menu-user-list-style1\"\r\n                                        anchorEl={anchorEl}\r\n                                        keepMounted\r\n                                        open={Boolean(anchorEl)}\r\n                                        onClose={handleCloseMenu}\r\n                                        variant=\"selectedMenu\"\r\n                                        anchorOrigin={{\r\n                                            vertical: 'top',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                        transformOrigin={{\r\n                                            vertical: 'bottom',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                    >\r\n                                        <MenuItem\r\n                                            value={10}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleCloseMenu();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            10 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={25}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleCloseMenu();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            25 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={50}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleCloseMenu();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            50 Rows{' '}\r\n                                        </MenuItem>\r\n                                    </Menu>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Grid item md={12}>\r\n                            <Divider />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography style={{ padding: '20px', fontWeight: '800' }}> No Data Available</Typography>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Brands;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { forwardRef } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// constant\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                marginBottom: theme.spacing(gridSpacing),\r\n\r\n                borderColor: theme.palette.primary[200] + 75,\r\n                background: theme.palette.background.default\r\n            }}\r\n        >\r\n            <Box sx={{ padding: '13px 20px 22px 20px' }}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                    <Grid item>\r\n                        <Typography variant=\"h3\" sx={{ fontWeight: 500, color: '#000' }}>\r\n                            {title}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {value !== undefined && (\r\n                        <Grid item>\r\n                            {/* {options && (role == 'teacher' || role == 'super_admin') && ( */}\r\n                            <TextField\r\n                                id=\"standard-select-currency\"\r\n                                select\r\n                                value={value}\r\n                                onChange={(e) => setValue(e.target.value)}\r\n                                sx={{ width: '110px', height: '40px' }}\r\n                            >\r\n                                {options.map((option) => (\r\n                                    <MenuItem key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                            {/* )} */}\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        </Card>\r\n    );\r\n});\r\n\r\nexport default HeadingCard;\r\n","import PropTypes from 'prop-types';\r\nimport { useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Fragment } from 'react';\r\nimport { Grid, Typography, IconButton, Tooltip, RadioGroup, FormControlLabel, Radio } from '@mui/material';\r\n\r\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined';\r\nimport AddCircleOutlinedIcon from '@mui/icons-material/AddCircleOutlined';\r\n\r\n// Props needed for component formik ,correctOption, setCorrectOption , optionValue , formikFieldName , PlaceHOLDER\r\nconst FileInput = ({ formik, fieldName, placeHolder, accept }) => {\r\n    const dispatch = useDispatch();\r\n    const fileRef1 = useRef();\r\n\r\n    return (\r\n        <>\r\n            <Grid item className=\"displayFlex\">\r\n                <Fragment>\r\n                    <Tooltip placement=\"top\" title={accept == 'image/*' ? 'Add Image' : 'Add Audio'}>\r\n                        <IconButton color=\"primary\" aria-label=\"delete\" size=\"large\" onClick={() => fileRef1.current.click()}>\r\n                            <AddCircleOutlinedIcon sx={{ fontSize: '3.0rem' }} />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <input\r\n                        hidden\r\n                        ref={fileRef1}\r\n                        fullWidth\r\n                        type=\"file\"\r\n                        className=\"chooseFileInput\"\r\n                        accept={accept}\r\n                        onChange={(event) => {\r\n                            formik.setFieldValue(fieldName, event.currentTarget.files[0]);\r\n                        }}\r\n                        error={formik.touched[`${fieldName}`] && Boolean(formik.errors[`${fieldName}`])}\r\n                        helperText={formik.touched[`${fieldName}`] && formik.errors[`${fieldName}`]}\r\n                    />\r\n\r\n                    <Grid className=\"displayFlex\">\r\n                        {formik?.values[`${fieldName}`]?.name?.length < 40 ? (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {formik.values[`${fieldName}`]?.name}\r\n                            </Typography>\r\n                        ) : (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {formik.values[`${fieldName}`]?.name?.substring(0, 40)}\r\n                            </Typography>\r\n                        )}\r\n                        {formik?.values[`${fieldName}`] && (\r\n                            <Typography mt={3.5} variant=\"h5\" ml={2}>\r\n                                {'(' + (formik.values[`${fieldName}`]?.size / 1000000).toFixed(2) + '  mb)'}\r\n                            </Typography>\r\n                        )}\r\n\r\n                        {formik.values[`${fieldName}`] ? (\r\n                            <Tooltip placement=\"top\" title={accept == 'image/*' ? 'Clear Image' : 'Clear Audio'}>\r\n                                <IconButton\r\n                                    style={{ marginTop: '2px' }}\r\n                                    color=\"primary\"\r\n                                    aria-label=\"delete\"\r\n                                    size=\"large\"\r\n                                    onClick={() => {\r\n                                        formik.setFieldValue(fieldName, null);\r\n                                        fileRef1.current.value = null;\r\n                                    }}\r\n                                >\r\n                                    <CloseOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        ) : (\r\n                            <Typography mt={3.5} variant=\"h5\">\r\n                                {placeHolder}\r\n                            </Typography>\r\n                        )}\r\n                    </Grid>\r\n                </Fragment>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n                <p className={'fileError'}>\r\n                    {formik.touched[`${fieldName}`] && Boolean(formik.errors[`${fieldName}`]) ? formik.errors[`${fieldName}`] : ''}\r\n                </p>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FileInput;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'AddOutlined');\nexports.default = _default;"],"sourceRoot":""}