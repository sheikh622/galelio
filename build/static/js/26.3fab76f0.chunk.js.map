{"version":3,"sources":["views/pages/user/productDetails/component/properties.js","views/pages/user/productDetails/component/productView.js","views/pages/user/productDetails/component/similarProducts.js","views/pages/landing/ProductDetails/Activity.js","views/pages/user/productDetails/index.js","ui-component/extended/Avatar.js","shared/Card/HeadingCard.js","ui-component/cards/SubCard.js","views/pages/user/commonComponent/nftCard.js"],"names":["Properties","nft","theme","useTheme","Grid","spacing","gridSpacing","sx","margin","item","xs","lg","md","container","mb","Typography","variant","mt","component","textAlign","sm","textTransform","NFTMetaData","length","responsive","superLargeDesktop","breakpoint","max","min","items","desktop","tablet","mobile","autoPlay","autoPlaySpeed","customTransition","transitionDuration","infinite","map","justifyContent","width","SubCard","className","background","palette","mode","fieldName","fieldValue","PropertiesView","dispatch","useDispatch","useState","resell","setResell","bought","setBought","redeem","setRedeem","loader","setLoader","navigate","useNavigate","user","useSelector","state","auth","console","log","React","open","setOpen","rprice","ResellDialog","handleClose","style","Button","float","size","onClick","mintType","handleResellNft","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","label","fullWidth","onChange","e","target","value","DialogActions","buyNftResolve","redeemNftResolve","resellNftResolve","handleBuyNft","erc20Address","BLOCKCHAIN","ERC20","tokenId","parseInt","NFTTokens","contractAddress","Category","BrandCategories","price","ethers","utils","parseEther","toString","provider","providers","Web3Provider","window","ethereum","signer","getSigner","address","getAddress","marketplace","Contract","MarketplaceAddress","MarketplaceAbi","abi","token","Erc20","allowance","approvalAmount","approvePrice","approve","wait","purchaseItem","then","data","buyNft","nftId","id","nftToken","buyerAddress","from","catch","error","toast","message","signers","signerAddress","signature","nfts","NFTAbi","prices","tokenPrice","voucher","uri","tokenUri","mintedNFT","events","args","changeTokenId","resellItem","resellNft","success","makeItem","handleRedeemNft","redeemNft","addDeliveryNft","status","TokenId","WalletAddress","NftId","UserId","buyerNft","nftReducer","nftBuyer","useEffect","getNftBuyer","walletAddress","NFTTokenId","height","src","asset","alt","display","Box","ml","alignItems","Avatar","Brand","image","objectFit","zeroMinWidth","textDecoration","align","fontWeight","name","color","fontSize","marginTop","description","NFTMetaFiles","Accordion","AccordionSummary","expandIcon","AccordionDetails","href","founded","transactionHash","paddingLeft","currencyType","isSold","JSON","stringify","Alert","severity","CircularProgress","SimilarProducts","similarProductNfts","marketplaceReducer","search","page","limit","click","setClick","getAllSimilarProducts","categoryId","CategoryId","rows","scrollTo","top","left","behavior","zIndex","Activity","MainCard","title","FormControl","InputLabel","Select","labelId","MenuItem","content","Divider","TableContainer","Table","TableHead","TableRow","TableCell","to","days","TableBody","ProductDetails","location","useLocation","marketplaceNfts","outline","others","colorSX","paper","bgcolor","outlineSX","border","borderColor","sizeSX","HeadingCard","forwardRef","role","setValue","options","padding","marginLeft","undefined","select","option","ref","children","contentClass","darkTitle","secondary","contentSX","dark","light","primary","boxShadow","p","action","opacity","defaultProps","NftCard","maxWidth","borderRadius"],"mappings":"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","file":"static/js/26.3fab76f0.chunk.js","sourcesContent":["// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Container, Grid, Typography } from '@mui/material';\r\n\r\n// project imports\r\n\r\nimport SubCard from 'ui-component/cards/SubCard';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\nimport Carousel from 'react-multi-carousel';\r\nimport 'react-multi-carousel/lib/styles.css';\r\n\r\n// =============================|| LANDING - FEATURE PAGE ||============================= //\r\n\r\nconst Properties = ({ nft }) => {\r\n    const theme = useTheme();\r\n    const responsive = {\r\n        superLargeDesktop: {\r\n            // the naming can be any, depends on you.\r\n            breakpoint: { max: 4000, min: 3000 },\r\n            items: 5\r\n        },\r\n        desktop: {\r\n            breakpoint: { max: 3000, min: 1024 },\r\n            items: 5\r\n        },\r\n        tablet: {\r\n            breakpoint: { max: 1024, min: 464 },\r\n            items: 2\r\n        },\r\n        mobile: {\r\n            breakpoint: { max: 464, min: 0 },\r\n            items: 1\r\n        }\r\n    };\r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12} lg={12} md={12}>\r\n                <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                    <Grid item xs={12}>\r\n                        <Typography\r\n                            variant=\"h2\"\r\n                            mt={4}\r\n                            component=\"div\"\r\n                            sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' },\r\n                             textTransform: 'capitalize' }}\r\n                        >\r\n                            Properties\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                {nft.NFTMetaData?.length > 0 ? (\r\n                    <>\r\n                        <Carousel\r\n                            responsive={responsive}\r\n                            autoPlay={true}\r\n                            autoPlaySpeed={2800}\r\n                            customTransition=\"all .5\"\r\n                            transitionDuration={500}\r\n                            infinite={true}\r\n                        >\r\n                            {nft.NFTMetaData.map((item) => (\r\n                                <>\r\n                                    <Grid container justifyContent=\"left\" spacing={gridSpacing}\r\n                                     sx={{ textAlign: 'center', width: '500%' }}>\r\n                                        <Grid item md={2} sm={6}>\r\n                                            <SubCard\r\n                                                className=\"property\"\r\n                                                sx={{ background: theme.palette.mode === 'dark' ? '#181C1F' : '#fff' }}\r\n                                            >\r\n                                                <Grid container justifyContent=\"center\" spacing={2}>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography className=\"pbackground\" variant=\"body\">\r\n                                                            {item.fieldName}\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography variant=\"h3\">{item.fieldValue} </Typography>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </SubCard>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </>\r\n                            ))}\r\n                        </Carousel>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Grid sx={{ width: '100%', margin: '3%' }}>\r\n                            <h3 sx={{ textAlign: 'center' }}>No properties found.</h3>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Properties;\r\n","// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { CardMedia, Grid, Typography, Button, Alert, AlertTitle, Stack, Box } from '@mui/material';\r\nimport React, { useEffect } from 'react';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\nimport { ethers } from 'ethers';\r\nimport NFTAbi from '../../../../../contractAbi/NFT.json';\r\nimport MarketplaceAbi from '../../../../../contractAbi/Marketplace.json';\r\nimport MarketplaceAddress from '../../../../../contractAbi/Marketplace-address.json';\r\nimport Erc20 from '../../../../../contractAbi/Erc20.json';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { buyNft, resellNft, redeemNft, getNftBuyer, addDeliveryNft, changeTokenId } from 'redux/nftManagement/actions';\r\n// import ResellDialog from \"./resellDialog\"\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Grid2 from '@mui/material/Unstable_Grid2/Grid2';\r\nimport BLOCKCHAIN from '../../../../../constants';\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport Accordion from '@mui/material/Accordion';\r\nimport AccordionSummary from '@mui/material/AccordionSummary';\r\nimport AccordionDetails from '@mui/material/AccordionDetails';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\n// =============================|| LANDING - FEATURE PAGE ||============================= //\r\n\r\nconst PropertiesView = ({ nft }) => {\r\n    const dispatch = useDispatch();\r\n    const [resell, setResell] = useState(false);\r\n    const [bought, setBought] = useState(false);\r\n    const [redeem, setRedeem] = useState(false);\r\n    const [loader, setLoader] = useState(false);\r\n    const navigate = useNavigate();\r\n    const user = useSelector((state) => state.auth.user);\r\n\r\n    const theme = useTheme();\r\n    console.log('nft from product view', nft);\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    let rprice = 0;\r\n    const ResellDialog = () => {\r\n        const handleClickOpen = () => {\r\n            setOpen(true);\r\n        };\r\n\r\n        const handleClose = () => {\r\n            setOpen(false);\r\n        };\r\n\r\n        return (\r\n            <Grid style={{ width: '100%' }}>\r\n                <Button\r\n                    sx={{ float: { md: 'right' } }}\r\n                    className=\"buy\"\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    onClick={() => {\r\n                        if (nft.mintType == 'directMint') {\r\n                            setOpen(true);\r\n                        } else if (nft.mintType == 'lazyMint') {\r\n                            handleResellNft();\r\n                        }\r\n                    }}\r\n                >\r\n                    Resell\r\n                </Button>\r\n                <Dialog open={open} onClose={handleClose}>\r\n                    <DialogTitle>NFT Resell Price</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>Please enter the price for the NFT</DialogContentText>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Price \"\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                            // value={rprice}\r\n                            onChange={(e) => {\r\n                                rprice = e.target.value;\r\n                            }}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose}>Cancel</Button>\r\n                        <Button\r\n                            onClick={() => {\r\n                                handleResellNft();\r\n                            }}\r\n                        >\r\n                            Resell\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                <Grid></Grid>\r\n            </Grid>\r\n        );\r\n    };\r\n\r\n    const buyNftResolve = () => {\r\n        setBought(true);\r\n        setLoader(false);\r\n    };\r\n\r\n    const redeemNftResolve = () => {\r\n        setRedeem(true);\r\n        setLoader(false);\r\n    };\r\n\r\n    const resellNftResolve = () => {\r\n        setResell(true);\r\n        setLoader(false);\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleBuyNft = async () => {\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else if (nft.mintType == 'directMint') {\r\n            setLoader(true);\r\n            console.log('Im in by now direct mint');\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n            let price = ethers.utils.parseEther(nft.price.toString());\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const address = signer.getAddress();\r\n\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n            const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n            // await (await token.approve(MarketplaceAddress.address, price)).wait();\r\n\r\n            // -------------\r\n            let approvalAmount = await token.allowance(address, MarketplaceAddress.address);\r\n            console.log('Approval Amount: ', approvalAmount.toString());\r\n            let approvePrice = ethers.utils.parseEther('10000');\r\n            if (approvalAmount.toString() < nft.price.toString()) {\r\n                await (await token.approve(MarketplaceAddress.address, approvePrice)).wait();\r\n            }\r\n            // ---------------\r\n\r\n            await (await marketplace.purchaseItem(tokenId, contractAddress, price))\r\n                .wait()\r\n                .then((data) => {\r\n                    dispatch(\r\n                        buyNft({\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress,\r\n                            buyNftResolve: buyNftResolve\r\n                        })\r\n                    );\r\n\r\n                    console.log('NFT buy success', data);\r\n                })\r\n                .catch((error) => {\r\n                    // console.log('error', error.message);\r\n                    toast.error(error.message);\r\n                });\r\n            setBought(true);\r\n        } else if (nft.mintType == 'lazyMint') {\r\n            setLoader(true);\r\n            console.log('Im in buy now lazy mint');\r\n            setLoader(true);\r\n            console.log('im in buy now lazy mint else if');\r\n            let signers = nft.signerAddress;\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let signature = nft.NFTTokens[0].signature;\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n            // let contractAddress = \"0x6e9550E5fee2bE7BdB208214e9cE2B47131a5Ca0\";\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const address = signer.getAddress();\r\n            const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n            console.log(nfts);\r\n            console.log(signers);\r\n            console.log(contractAddress);\r\n            console.log(signature);\r\n            let prices = ethers.utils.parseEther(nft.tokenPrice);\r\n\r\n            let voucher = {\r\n                uri: nft.tokenUri,\r\n                price: prices,\r\n                token: erc20Address\r\n            };\r\n\r\n            console.log('Marketplace: ', MarketplaceAddress.address);\r\n            let validatorAddress = '0x6f3b51bd5b67f3e5bca2fb32796215a796b79651';\r\n            const token = new ethers.Contract(erc20Address, Erc20, signer);\r\n\r\n            let approvalAmount = await token.allowance(address, contractAddress);\r\n            console.log('Approval Amount: ', approvalAmount.toString());\r\n            let approvePrice = ethers.utils.parseEther('10000');\r\n            if (approvalAmount.toString() < nft.price.toString()) {\r\n                await (await token.approve(contractAddress, approvePrice)).wait();\r\n            }\r\n            // await (await token.approve(contractAddress, prices)).wait();\r\n\r\n            //\r\n            try {\r\n                let mintedNFT = await (await nfts.buyNft(voucher, signature, MarketplaceAddress.address)).wait();\r\n                const id = parseInt(mintedNFT.events[0].args[2]);\r\n                console.log('Data: ', mintedNFT, id);\r\n\r\n                dispatch(\r\n                    changeTokenId({\r\n                        id: nft.NFTTokens[0].id,\r\n                        tokenId: id.toString()\r\n                    })\r\n                );\r\n\r\n                dispatch(\r\n                    buyNft({\r\n                        nftId: nft.id,\r\n                        nftToken: nft.NFTTokens[0].id,\r\n                        buyerAddress: mintedNFT.from,\r\n                        contractAddress: contractAddress\r\n                    })\r\n                );\r\n            } catch (error) {\r\n                toast.error(error.message);\r\n            }\r\n            setBought(true);\r\n            setLoader(false);\r\n        }\r\n    };\r\n\r\n    const handleResellNft = async () => {\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else if (nft.mintType == 'directMint') {\r\n            console.log('im in directmint resell');\r\n            setLoader(true);\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n\r\n            rprice = ethers.utils.parseEther(rprice.toString());\r\n            console.log('erc20Address', erc20Address);\r\n            console.log('tokenId', tokenId);\r\n            console.log('contractAddress', contractAddress);\r\n\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            console.log('signer', signer);\r\n            console.log('MarketplaceAbi.abi', MarketplaceAbi.abi);\r\n            const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n            console.log(marketplace);\r\n            console.log(tokenId);\r\n            console.log(contractAddress);\r\n            await (await nfts.approve(MarketplaceAddress.address, tokenId)).wait();\r\n            await (await marketplace.resellItem(tokenId, contractAddress, rprice))\r\n                .wait()\r\n                .then((data) => {\r\n                    dispatch(\r\n                        resellNft({\r\n                            rprice: rprice,\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress,\r\n                            resellNftResolve: resellNftResolve\r\n                        })\r\n                    );\r\n                    toast.success('NFT is Resold');\r\n                })\r\n                .catch((error) => {\r\n                    toast.error(error.message);\r\n                });\r\n        } else if (nft.mintType == 'lazyMint') {\r\n            console.log('im in lazymint resell');\r\n\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n\r\n            rprice = ethers.utils.parseEther(rprice.toString());\r\n            console.log('erc20Address', erc20Address);\r\n            console.log('tokenId', tokenId);\r\n            console.log('contractAddress', contractAddress);\r\n\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            console.log('signer', signer);\r\n            console.log('MarketplaceAbi.abi', MarketplaceAbi.abi);\r\n            const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n            console.log(marketplace);\r\n            console.log(tokenId);\r\n            console.log(contractAddress);\r\n            // await (await nfts.approve(MarketplaceAddress.address, tokenId)).wait();\r\n            await (await marketplace.makeItem(erc20Address, tokenId, contractAddress, nft.price))\r\n                .wait()\r\n                .then((data) => {\r\n                    dispatch(\r\n                        resellNft({\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress\r\n                        })\r\n                    );\r\n\r\n                    toast.success('NFT is Resold');\r\n                })\r\n                .catch((error) => {\r\n                    toast.error(error.message);\r\n                });\r\n            setResell(true);\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleRedeemNft = async () => {\r\n        console.log('handleRedeemNft', handleRedeemNft);\r\n\r\n        if (user == null) {\r\n            navigate('/login');\r\n        } else if (nft.mintType == 'directMint') {\r\n            console.log('im in directmint redeem');\r\n            setLoader(true);\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n\r\n            await (await marketplace.redeemNft(tokenId, contractAddress))\r\n                .wait()\r\n                .then((data) => {\r\n                    dispatch(\r\n                        redeemNft({\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress\r\n                        })\r\n                    );\r\n                    dispatch(\r\n                        addDeliveryNft({\r\n                            status: 'Pending',\r\n                            TokenId: nft.NFTTokens[0].id,\r\n                            WalletAddress: data.from,\r\n                            NftId: nft.id,\r\n                            UserId: user.id,\r\n                            redeemNftResolve: redeemNftResolve\r\n                        })\r\n                    );\r\n\r\n                    toast.success('NFT Redeem successfully');\r\n                })\r\n                .catch((error) => {\r\n                    toast.error(error.message);\r\n                });\r\n        } else if (nft.mintType == 'lazyMint') {\r\n            console.log('im in redeem lazymint');\r\n            setLoader(true);\r\n            let erc20Address = BLOCKCHAIN.ERC20;\r\n            let tokenId = parseInt(nft.NFTTokens[0].tokenId);\r\n            let contractAddress = nft.Category.BrandCategories[0].contractAddress;\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n\r\n            await (await marketplace.redeem(erc20Address, tokenId, contractAddress, nft.price))\r\n                .wait()\r\n                .then((data) => {\r\n                    dispatch(\r\n                        redeemNft({\r\n                            nftId: nft.id,\r\n                            nftToken: nft.NFTTokens[0].id,\r\n                            buyerAddress: data.from,\r\n                            contractAddress: contractAddress\r\n                        })\r\n                    );\r\n                    dispatch(\r\n                        addDeliveryNft({\r\n                            status: 'Pending',\r\n                            TokenId: nft.NFTTokens[0].id,\r\n                            WalletAddress: data.from,\r\n                            NftId: nft.id,\r\n                            UserId: user.id,\r\n                            redeemNftResolve: redeemNftResolve\r\n                        })\r\n                    );\r\n\r\n                    toast.success('NFT Redeem successfully');\r\n                })\r\n                .catch((error) => {\r\n                    toast.error(error.message);\r\n                });\r\n        }\r\n    };\r\n\r\n    const buyerNft = useSelector((state) => state.nftReducer.nftBuyer);\r\n    useEffect(() => {\r\n        console.log('useffect ran');\r\n        if (user) {\r\n            dispatch(\r\n                getNftBuyer({\r\n                    walletAddress: user?.walletAddress,\r\n                    NFTTokenId: nft.NFTTokens[0].id,\r\n                    NftId: nft.id\r\n                })\r\n            );\r\n        }\r\n    }, [useSelector, dispatch, resell, bought, redeem]);\r\n    console.log('buyerNft', buyerNft);\r\n\r\n    useEffect(() => {\r\n        console.log('nft to watch', nft);\r\n    }, []);\r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12}>\r\n                <Grid container justifyContent=\"center\" spacing={gridSpacing} sx={{ textAlign: 'center' }}>\r\n                    <Grid item md={4} lg={4} className=\"Productdetails\" sx={{ height: 'auto' }}>\r\n                        <SubCard className=\"tableShadow\">\r\n                            <img src={nft?.asset} alt=\"Statement Image\" className=\"ProductimageSize\" />\r\n                        </SubCard>{' '}\r\n                    </Grid>\r\n\r\n                    <Grid item md={1} lg={1} sm={12} sx={{ display: { xs: 'none', sm: 'none', md: 'block', lg: 'block' } }}>\r\n                        {' '}\r\n                        <Box className=\"line\">h</Box>{' '}\r\n                    </Grid>\r\n                    <Grid item md={6} sm={12}>\r\n                        <Grid item xs={12}>\r\n                            <Grid container>\r\n                                <Grid item md={12} sm={12}>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid mt={2} ml={1} item md={12} xs={12}>\r\n                                            <Grid container spacing={2} alignItems=\"center\">\r\n                                                <Grid item md={2}>\r\n                                                    <Avatar\r\n                                                        alt=\"User 1\"\r\n                                                        src={nft?.Brand?.image}\r\n                                                        sx={{ width: 80, height: 80, objectFit: 'fill' }}\r\n                                                    />\r\n                                                </Grid>\r\n\r\n                                                <Grid\r\n                                                    item\r\n                                                    md={9}\r\n                                                    xs\r\n                                                    zeroMinWidth\r\n                                                    // component={RouterLink}\r\n                                                    sx={{ textDecoration: 'none' }}\r\n                                                    // to=\"/companyPage\"\r\n                                                >\r\n                                                    <Typography align=\"left\" fontWeight={900} variant=\"h2\" className=\"brand\">\r\n                                                        {nft?.Brand?.name}\r\n                                                    </Typography>\r\n                                                    <Typography align=\"left\" variant=\"h3\" className=\"creator\">\r\n                                                        Creator\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n\r\n                                        <Grid item mt={1} xs={12}>\r\n                                            <Typography\r\n                                                className=\"Lux\"\r\n                                                color={theme.palette.mode === 'dark' ? 'white' : 'black'}\r\n                                                variant=\"h3\"\r\n                                            >\r\n                                                <span>{nft?.name}</span>\r\n                                                {nft?.NFTTokens?.length > 1 && (\r\n                                                    <div style={{ fontSize: '60%', marginTop: '3%', color: 'green' }}>\r\n                                                        {nft?.NFTTokens?.length} items left\r\n                                                    </div>\r\n                                                )}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <Typography className=\"productdescription\" variant=\"h3\">\r\n                                                {nft?.description}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        {nft?.NFTMetaFiles?.length > 0 && <h2>Proof of Authenticity</h2>}\r\n\r\n                                        {nft?.NFTMetaFiles.map((data) => (\r\n                                            <>\r\n                                                <Accordion>\r\n                                                    <AccordionSummary\r\n                                                        expandIcon={<ExpandMoreIcon />}\r\n                                                        aria-controls=\"panel1a-content\"\r\n                                                        id=\"panel1a-header\"\r\n                                                    >\r\n                                                        <Typography>{data.fieldName}</Typography>\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        <a target=\"_blank\" href={data.fieldValue}>\r\n                                                            {data.fieldValue}\r\n                                                        </a>\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n                                            </>\r\n                                        ))}\r\n\r\n                                        {buyerNft?.founded && (\r\n                                            <div style={{ marginTop: '5%' }}>\r\n                                                {(nft?.transactionHash !== '' || nft?.transactionHash) && (\r\n                                                    <>\r\n                                                        <Accordion>\r\n                                                            <AccordionSummary\r\n                                                                expandIcon={<ExpandMoreIcon />}\r\n                                                                aria-controls=\"panel1a-content\"\r\n                                                                id=\"panel1a-header\"\r\n                                                            >\r\n                                                                <Typography>Transaction hash</Typography>\r\n                                                            </AccordionSummary>\r\n                                                            <AccordionDetails>\r\n                                                                <a target=\"_blank\" href={nft?.transactionHash}>\r\n                                                                    {nft?.transactionHash}\r\n                                                                </a>\r\n                                                            </AccordionDetails>\r\n                                                        </Accordion>\r\n                                                    </>\r\n                                                )}\r\n                                                <Accordion>\r\n                                                    <AccordionSummary\r\n                                                        expandIcon={<ExpandMoreIcon />}\r\n                                                        aria-controls=\"panel2a-content\"\r\n                                                        id=\"panel2a-header\"\r\n                                                    >\r\n                                                        <Typography>Contract address</Typography>\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        <Typography>{nft?.Category?.BrandCategories[0].contractAddress}</Typography>\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n                                            </div>\r\n                                        )}\r\n\r\n                                        <Grid item mt={1} mb={2} xs={12}>\r\n                                            <Grid container>\r\n                                                <Grid item md={4} xs={12} sm={12}>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography\r\n                                                            color={theme.palette.mode === 'dark' ? 'white' : '#404040'}\r\n                                                            sx={{ paddingLeft: { md: '16px' }, textAlign: 'left' }}\r\n                                                            className=\"price\"\r\n                                                            variant=\"h3\"\r\n                                                        >\r\n                                                            Price\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Typography\r\n                                                            color={theme.palette.mode === 'dark' ? 'white' : '#262626'}\r\n                                                            sx={{ paddingLeft: { md: '15px' }, textAlign: 'left' }}\r\n                                                            className=\"ETH\"\r\n                                                            variant=\"h3\"\r\n                                                        >\r\n                                                            {nft.price} {nft.currencyType}\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <>\r\n                                                    {(bought == true || nft?.isSold == true) && JSON.stringify(buyerNft) === '{}' ? (\r\n                                                        <>\r\n                                                            <Grid item md={8} xs={12} sm={12} textAlign=\"center\">\r\n                                                                <Alert severity=\"error\">\r\n                                                                    <b>This item is sold already!</b>\r\n                                                                </Alert>\r\n                                                            </Grid>\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <>\r\n                                                            {buyerNft?.founded ? (\r\n                                                                <>\r\n                                                                    <>\r\n                                                                        <Grid sx={{ mt: 4 }} item md={12} xs={12} sm={12} textAlign=\"right\">\r\n                                                                            {buyerNft?.status == 'Redeem' || redeem ? (\r\n                                                                                <>\r\n                                                                                    <Alert severity=\"success\">\r\n                                                                                        <b>This item is Redeemed</b>\r\n                                                                                    </Alert>\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    {buyerNft?.status !== 'Resell' && redeem !== true && (\r\n                                                                                        <>\r\n                                                                                            <Button\r\n                                                                                                sx={{ float: { md: 'right' } }}\r\n                                                                                                className=\"buy\"\r\n                                                                                                variant=\"contained\"\r\n                                                                                                size=\"large\"\r\n                                                                                                onClick={() => {\r\n                                                                                                    handleRedeemNft();\r\n                                                                                                }}\r\n                                                                                            >\r\n                                                                                                {loader ? (\r\n                                                                                                    <CircularProgress\r\n                                                                                                        sx={{ color: 'white' }}\r\n                                                                                                    />\r\n                                                                                                ) : (\r\n                                                                                                    <span> Redeem</span>\r\n                                                                                                )}\r\n                                                                                            </Button>\r\n                                                                                        </>\r\n                                                                                    )}\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                        </Grid>\r\n                                                                        <Grid sx={{ mt: 3 }} item md={12} xs={12} sm={12} textAlign=\"right\">\r\n                                                                            {buyerNft?.status == 'Resell' || resell == true ? (\r\n                                                                                <>\r\n                                                                                    <Alert severity=\"info\">\r\n                                                                                        <b>This item is resold.</b>\r\n                                                                                    </Alert>\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    {buyerNft?.status !== 'Redeem' && redeem == false && (\r\n                                                                                        <>\r\n                                                                                            {loader ? (\r\n                                                                                                <CircularProgress sx={{ color: 'white' }} />\r\n                                                                                            ) : (\r\n                                                                                                <ResellDialog />\r\n                                                                                            )}\r\n                                                                                        </>\r\n                                                                                    )}\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                        </Grid>\r\n                                                                    </>\r\n                                                                </>\r\n                                                            ) : (\r\n                                                                <>\r\n                                                                    {(bought || redeem || resell) !== true && (\r\n                                                                        <Grid item md={8} xs={12} sm={12} textAlign=\"center\">\r\n                                                                            <Button\r\n                                                                                sx={{ float: { md: 'right' } }}\r\n                                                                                className=\"buy\"\r\n                                                                                variant=\"contained\"\r\n                                                                                size=\"large\"\r\n                                                                                onClick={() => {\r\n                                                                                    handleBuyNft();\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                {loader ? (\r\n                                                                                    <CircularProgress sx={{ color: 'white' }} />\r\n                                                                                ) : (\r\n                                                                                    <span>Buy Now</span>\r\n                                                                                )}\r\n                                                                            </Button>\r\n                                                                        </Grid>\r\n                                                                    )}\r\n                                                                </>\r\n                                                            )}\r\n                                                        </>\r\n                                                    )}\r\n                                                </>\r\n                                            </Grid>\r\n                                            {/* \r\n                                            <Button onClick={()=>{\r\n                                                setBought(true)\r\n                                            }}>Set Bought True</Button>\r\n                                            <Button onClick={()=>{\r\n                                                setBought(false)\r\n                                            }}>Set Bought False</Button> */}\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item md={1} sm={12}></Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default PropertiesView;\r\n","// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Container, Card, Grid, Typography, CardActionArea, CardContent, Divider, Button } from '@mui/material';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport {getAllSimilarProducts} from '../../../../../redux/marketplace/actions'\r\nimport NftCard from '../../commonComponent/nftCard';\r\nconst SimilarProducts = ({nft}) => {\r\n    const theme = useTheme();\r\n    const itemData = [\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Cars',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Shoes',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1522770179533-24471fcdba45',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Real Estate',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Goods',\r\n            creator: 'Creator'\r\n        },\r\n        {\r\n            img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',\r\n            heading: 'Zennie',\r\n            title: 'Luxury Watches',\r\n            creator: 'Creator'\r\n        },\r\n \r\n    ];\r\n\r\n    const dispatch = useDispatch();\r\n    const similarProductNfts = useSelector((state) => state.marketplaceReducer.similarProductNfts);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(12);\r\n    const [click, setClick] = useState(false);\r\n    useEffect(() => {\r\n        console.log('useeffect from similar products ran');\r\n        dispatch(\r\n            getAllSimilarProducts({\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                categoryId: nft.CategoryId,\r\n                nftId:nft.id\r\n            })\r\n        );\r\n        setClick(false)\r\n    }, [click, search, page, limit]);\r\n\r\n    console.log(\"nftnftnftnftnftnftnft\",nft)\r\n    console.log(\"similarProductNfts\",similarProductNfts?.nfts?.rows)\r\n    return (\r\n        <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n            <Grid item xs={12} lg={12} md={12}>\r\n                <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                    <Grid item xs={12}>\r\n                        <Typography\r\n                            variant=\"h2\"\r\n                            mt={4}\r\n                            component=\"div\"\r\n                            sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' }, textTransform: 'capitalize' }}\r\n                        >\r\n                            Similar Products\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <button onClick={()=>{\r\n                 window.scrollTo({\r\n                    top: 0,\r\n                    left: 0,\r\n                    behavior: \"smooth\"\r\n                  });\r\n            }}>\r\n                click me\r\n            </button>\r\n\r\n            <Grid item xs={12}>\r\n                <Grid container justifyContent=\"center\" spacing={gridSpacing} sx={{  textAlign: 'center' }}>\r\n             \r\n                    {similarProductNfts?.nfts?.rows.map((data) => (\r\n                        <div  style={{width:\"100%\"}} onClick={()=>{\r\n                          \r\n                            window.scrollTo({\r\n                                top: 0,\r\n                                left: 0,\r\n                                behavior: \"smooth\"\r\n                              });\r\n                              setClick(true)\r\n                           }} >\r\n                       <NftCard data={data}sx={{zIndex:\"999\"}}/>\r\n                      </div>\r\n                    ))}\r\n                    \r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SimilarProducts;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport AutorenewIcon from '@mui/icons-material/Autorenew';\r\nimport {\r\n    Button,\r\n    Typography,\r\n    Grid,\r\n    Select,\r\n    InputLabel,\r\n    FormControl,\r\n    MenuItem,\r\n    Menu,\r\n    Pagination,\r\n    OutlinedInput,\r\n    InputAdornment,\r\n    Divider\r\n} from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { IconButton, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip } from '@mui/material';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport HeadingCard from 'shared/Card/HeadingCard';\r\nconst Activity = () => {\r\n    const theme = useTheme();\r\n    const itemData = [\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Vlad556 ',\r\n            to: 'Vlad556 ',\r\n            days: '9 Days ago '\r\n        },\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Vlad556 ',\r\n            to: 'Vlad556 ',\r\n            days: '9 Days ago '\r\n        },\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Vlad556 ',\r\n            to: 'Vlad556 ',\r\n            days: '9 Days ago '\r\n        },\r\n        {\r\n            title: 'List',\r\n            price: '0.006 ETH',\r\n            from: 'Vlad556 ',\r\n            to: 'Vlad556 ',\r\n            days: '9 Days ago '\r\n        }\r\n    ];\r\n    const [search, setSearch] = useState('');\r\n\r\n    return (\r\n        <>\r\n            <Grid container-fluid spacing={gridSpacing} sx={{ margin: '15px' }}>\r\n                <Grid item xs={12} lg={12} md={12}>\r\n                    <Grid container spacing={2} sx={{ mb: 2 }}>\r\n                        <Grid item xs={12}>\r\n                            <Typography\r\n                                variant=\"h2\"\r\n                                mt={4}\r\n                                component=\"div\"\r\n                                sx={{ textAlign: { xs: 'center', md: 'left', sm: 'center' }, \r\n                                textTransform: 'capitalize' }}\r\n                            >\r\n                                Activity\r\n                                <AutorenewIcon />\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <Grid item md={12} sm={12}>\r\n                        <MainCard\r\n                            sx={{ background: theme.palette.mode === 'dark' ? '#181C1F' : '#fff' }}\r\n                            title={\r\n                                <Grid container spacing={gridSpacing}>\r\n                                    <Grid item xs={12}>\r\n                                        <FormControl fullWidth>\r\n                                            <InputLabel id=\"age-select\">Filter</InputLabel>\r\n                                            <Select\r\n                                                fullWidth\r\n                                                labelId=\"age-select\"\r\n                                                id=\"age\"\r\n                                                name=\"age\"\r\n                                                // defaultValue={formik.values.age}\r\n                                                // onChange={formik.handleChange}\r\n                                                label=\"Age\"\r\n                                            >\r\n                                                <MenuItem value=\"\">\r\n                                                    <em>Filter</em>\r\n                                                </MenuItem>\r\n                                                <MenuItem value={10}>Ten</MenuItem>\r\n                                                <MenuItem value={20}>Twenty</MenuItem>\r\n                                                <MenuItem value={30}>Thirty</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            }\r\n                            content={false}\r\n                        >\r\n                            <Divider />\r\n                            <TableContainer>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">Event </TableCell>\r\n                                            <TableCell align=\"center\">Price </TableCell>\r\n                                            <TableCell align=\"center\">From</TableCell>\r\n                                            <TableCell align=\"center\">To </TableCell>\r\n                                            <TableCell align=\"center\">Date</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    {itemData.map((item) => (\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell align=\"center\">{item.title}</TableCell>\r\n                                                <TableCell align=\"center\">{item.price}</TableCell>\r\n                                                <TableCell sx={{ color: '#2194FF' }} align=\"center\">\r\n                                                    {item.from}\r\n                                                </TableCell>\r\n                                                <TableCell sx={{ color: '#2194FF' }} align=\"center\">\r\n                                                    {item.to}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"center\">{item.days}</TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    ))}\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </MainCard>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Activity;\r\n","import { useLocation } from 'react-router-dom';\r\nimport { useTheme } from '@emotion/react';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Grid } from '@mui/material';\r\nimport Properties from './component/properties';\r\nimport PropertiesView from './component/productView';\r\nimport { getAllMarketplaceNftsByCategory } from 'redux/marketplace/actions';\r\nimport SimilarProducts from '../../user/productDetails/component/similarProducts';\r\nimport Activity from '../../landing/ProductDetails/Activity';\r\nconst ProductDetails = () => {\r\n    const theme = useTheme();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n    const marketplaceNfts = useSelector((state) => state.marketplaceReducer.marketplaceNfts);\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    // useEffect(() => {\r\n    //     dispatch(\r\n    //         getAllMarketplaceNftsByCategory({\r\n    //             search: search,\r\n    //             page: page,\r\n    //             limit: limit,\r\n    //             categoryId: location?.state.nft?.Category?.id\r\n    //         })\r\n    //     );\r\n    // }, [search, page, limit]);\r\n    return (\r\n        <>\r\n            <Grid\r\n                container-fluid\r\n                md={12}\r\n                lg={11}\r\n                sx={{\r\n                    display: { xs: 'block', sm: 'block', md: 'flex', lg: 'flex' },\r\n                    background: 'tranparent',\r\n                    color: theme.palette.mode === 'dark' ? 'white' : '#404040'\r\n                }}\r\n            >\r\n                <Grid item md={12} xs={12} lg={11}>\r\n                    <Grid container-fluid>\r\n                       \r\n                        <Grid item md={12} xs={12}>\r\n                            <PropertiesView nft={location.state.nft} />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <Properties nft={location.state.nft} />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <Activity  />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <SimilarProducts nft={location.state.nft}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProductDetails;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { forwardRef } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// constant\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n    \r\n            <Box sx={{ padding: '13px 20px 22px 20px' }}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                    <Grid item>\r\n                        <Typography variant=\"h1\" component=\"h2\" className='headingcard' \r\n                        sx={{ marginTop:'10px' ,  \r\n                        fontWeight: 600, color: '#000' , marginLeft:{lg:'-20px', md:'-20px'} , \r\n                        background: theme.palette.mode === 'dark' ? 'black' : '#f3f3f3',\r\n                        color: theme.palette.mode === 'dark' ? 'white' : '#404040', }}>\r\n                            {title}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {value !== undefined && (\r\n                        <Grid item>\r\n                            {/* {options && (role == 'teacher' || role == 'super_admin') && ( */}\r\n                            <TextField\r\n                                id=\"standard-select-currency\"\r\n                                select\r\n                                value={value}\r\n                                onChange={(e) => setValue(e.target.value)}\r\n                                sx={{ width: '110px', height: '40px' }}\r\n                            >\r\n                                {options.map((option) => (\r\n                                    <MenuItem key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                            {/* )} */}\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n       \r\n    );\r\n});\r\n\r\nexport default HeadingCard;\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// ==============================|| CUSTOM SUB CARD ||============================== //\r\n\r\nconst SubCard = forwardRef(({ children, content, contentClass, darkTitle, secondary, sx = {}, contentSX = {}, title, ...others }, ref) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            ref={ref}\r\n            sx={{\r\n                border: '1px solid',\r\n                borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light,\r\n                ':hover': {\r\n                    boxShadow: theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' : '0 2px 14px 0 rgb(32 40 45 / 8%)'\r\n                },\r\n                ...sx\r\n            }}\r\n            {...others}\r\n        >\r\n            {/* card header and action */}\r\n            {!darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h5\">{title}</Typography>} action={secondary} />}\r\n            {darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h4\">{title}</Typography>} action={secondary} />}\r\n\r\n            {/* content & header divider */}\r\n            {title && (\r\n                <Divider\r\n                    sx={{\r\n                        opacity: 1,\r\n                        borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.primary.light\r\n                    }}\r\n                />\r\n            )}\r\n\r\n            {/* card content */}\r\n            {content && (\r\n                <CardContent sx={{ p: 2.5, ...contentSX }} className={contentClass || ''}>\r\n                    {children}\r\n                </CardContent>\r\n            )}\r\n            {!content && children}\r\n        </Card>\r\n    );\r\n});\r\n\r\nSubCard.propTypes = {\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    sx: PropTypes.object,\r\n    contentSX: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nSubCard.defaultProps = {\r\n    content: true\r\n};\r\n\r\nexport default SubCard;\r\n","import { useTheme } from '@mui/material/styles';\r\nimport { Card, Grid, CardActionArea, CardContent, Divider } from '@mui/material';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst NftCard = ({ data }) => {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n\r\n    return (\r\n        <Grid\r\n            item\r\n            md={2}\r\n            sm={6}\r\n            onClick={() => {\r\n                navigate('/productDetails', {\r\n                    state: {\r\n                        nft: data\r\n                    }\r\n                });\r\n            }}\r\n            sx={{ color: theme.palette.mode === 'dark' ? 'white' : 'black', textDecoration: 'none' }}\r\n        >\r\n            <Card\r\n                sx={{\r\n                    color: theme.palette.mode === 'dark' ? 'white' : '#404040',\r\n                    background: theme.palette.mode === 'dark' ? '#181C1F' : 'white',\r\n                    maxWidth: 365,\r\n                    width: '105%',\r\n                    boxShadow: '1px 2px 6px #d3d3d3',\r\n                    borderRadius: '7px'\r\n                }}\r\n            >\r\n                <CardActionArea>\r\n                    <CardMedia component=\"img\" height=\"200\" image={data.asset} />\r\n                    <CardContent sx={{ padding: '6%' }}>\r\n                        <Grid container>\r\n                            <Grid item xs={8} sx={{ textAlign: 'left' }}>\r\n                                <span style={{ fontWeight: '550', fontSize: '100%' }}>  {data.name} </span>\r\n                                <div className=\"overflow\" style={{ marginTop: '5%', color: '#656565' }}>\r\n                                {data.Brand.name}\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={4} sx={{ background: '' }}>\r\n                                <span sx={{ fontWeight: '40 !important ', fontSize: '110%', float: 'right', color: '#878787' }}>\r\n                                    Creator\r\n                                </span>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Divider sx={{ mt: 2, mb: 2 }} />\r\n                        <Grid>\r\n                            <Grid item md={12} xs={12} className=\"overflow\" sx={{ marginTop: { xs: '10px', md: '0' } }}>\r\n                                <span sx={{ float: 'left' }}>Current Price :</span>\r\n                                <span sx={{ marginLeft: '2%' }}>\r\n                                    <b>{data.currencyType + ' ' + data.price}</b>\r\n                                </span>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default NftCard;\r\n"],"sourceRoot":""}