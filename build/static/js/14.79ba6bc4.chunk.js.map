{"version":3,"sources":["views/pages/superAdmin/nftManagement/component/mainCard.js","views/pages/superAdmin/nftManagement/component/mintNftDialog.js","views/pages/superAdmin/nftManagement/component/rejectNftDialog.js","views/pages/superAdmin/nftManagement/component/nftCard.js","views/pages/superAdmin/nftManagement/index.js"],"names":["headerSX","mr","MainCard","forwardRef","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","Card","borderColor","palette","mode","background","default","primary","CardHeader","action","Typography","variant","Divider","CardContent","className","auth","Buffer","from","projectId","toString","client","create","host","port","protocol","headers","authorization","Transition","props","Slide","direction","MintNftDialog","open","setOpen","page","limit","search","loader","setLoader","nftData","type","dispatch","useDispatch","walletAddress","useSelector","state","handleClose","directMintThenList","result","nftTokens","NFTTokens","contractAddress","Category","BrandCategories","console","log","nftId","id","categoryId","CategoryId","brandId","BrandId","price","ethers","utils","parseEther","erc20Address","BLOCKCHAIN","ERC20","tokenIdArray","provider","providers","Web3Provider","window","ethereum","signer","getSigner","getAddress","address","nft","Contract","NFTAbi","abi","tokenUri","path","map","uriArray","length","mint","MarketplaceAddress","catch","error","toast","message","wait","mintedNFT","transactionHash","parseInt","events","args","marketplaceAddr","MarketplaceAbi","makeItem","push","tokenId","nftDataArray","mintNft","signerAddress","bulkMint","counter","myNftTokenIdArray","i","makeItemBulk","data","index","handleDirectMint","image","asset","name","description","projectName","mintedDate","Date","valueOf","categoryName","brandName","Brand","metaData","NFTMetaData","add","JSON","stringify","handleLazyMint","prices","uri","token","domain","version","verifyingContract","chainId","types","LazyNFTVoucher","voucher","_signTypedData","signature","verifyAddr","verifyTypedData","tokenPrice","lazyMintNft","Dialog","TransitionComponent","keepMounted","DialogTitle","DialogContent","component","DialogActions","pr","Button","size","Oval","ariaLabel","height","width","strokeWidth","strokeWidthSecondary","color","secondaryColor","dark","onClick","undefined","mintType","RejectNftDialog","onClose","DialogContentText","rejectNft","NftCard","useState","openMint","setOpenMint","rejectMintOpen","setRejectMintOpen","position","transform","transition","CardMedia","p","Grid","container","spacing","item","xs","textDecoration","mt","overflow","currencyType","Stack","justifyContent","alignItems","status","marginRight","typeArray","value","label","NftManagement","navigate","useNavigate","location","useLocation","nftList","nftReducer","nftListSuperAdmin","setType","setSearch","setPage","setLimit","anchorEl","setAnchorEl","useEffect","getAllNftSuperAdmin","brandData","style","marginBottom","gridSpacing","fontWeight","TextField","select","fullWidth","onChange","event","target","option","MenuItem","textAlign","nfts","rows","mb","pl","sm","md","lg","Pagination","showFirstButton","showLastButton","count","pages","newPage","grey","endIcon","currentTarget","Menu","Boolean","anchorOrigin","vertical","horizontal","transformOrigin","e","padding"],"mappings":"geAIMA,EAAW,CACb,0BAA2B,CAAEC,GAAI,IA0EtBC,EAvEEC,sBACb,WAeIC,GACE,IAAD,IAdGC,cAAM,OAAO,EACbC,EAAS,EAATA,UACAC,EAAQ,EAARA,SAAS,EAAD,EACRC,eAAO,OAAO,MACdC,oBAAY,MAAG,GAAE,MACjBC,iBAAS,MAAG,CAAC,EAAC,EACdC,EAAS,EAATA,UACAC,EAAS,EAATA,UACAC,EAAM,EAANA,OAAO,EAAD,EACNC,UAAE,MAAG,CAAC,EAAC,EACPC,EAAK,EAALA,MACGC,EAAM,iBAIPC,EAAQC,cAEd,OACI,eAACC,EAAA,EAAI,yBACDf,IAAKA,GACDY,GAAM,IACVF,GAAE,aACET,OAAQA,EAAS,YAAc,OAC/Be,YAAoC,SAAvBH,EAAMI,QAAQC,KAAkBL,EAAMI,QAAQE,WAAWC,QAAUP,EAAMI,QAAQI,QAAQ,KAAO,GAC7G,SAAU,CACNnB,UAAWA,EACLO,IACwB,SAAvBI,EAAMI,QAAQC,KAAkB,qCAAuC,mCACxE,YAEPR,GACL,WAGAH,GAAaI,GAAS,cAACW,EAAA,EAAU,CAACZ,GAAId,EAAUe,MAAOA,EAAOY,OAAQf,IACvED,GAAaI,GACV,cAACW,EAAA,EAAU,CAACZ,GAAId,EAAUe,MAAO,cAACa,EAAA,EAAU,CAACC,QAAQ,KAAI,SAAEd,IAAqBY,OAAQf,IAI3FG,GAAS,cAACe,EAAA,EAAO,IAGjBtB,GACG,cAACuB,EAAA,EAAW,CAACjB,GAAIJ,EAAWsB,UAAWvB,EAAa,SAC/CF,KAGPC,GAAWD,KAGzB,I,6IC7CE0B,EAAO,SAAWC,SAAOC,KAAKC,gEAAiCC,SAAS,UAExEC,EAASC,iBAAO,CAClBC,KAAM,iBACNC,KAAM,KACNC,SAAU,QACVC,QAAS,CACLC,cAAeX,KAIjBY,EAAa1C,sBAAW,SAAC2C,EAAO1C,GAAG,OAAK,cAAC2C,EAAA,EAAK,aAACC,UAAU,KAAK5C,IAAKA,GAAS0C,GAAS,IAE5E,SAASG,EAAc,GAA2E,IAAzEC,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QAASC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAAOC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAS,EAATA,UAAWC,EAAO,EAAPA,QAASC,EAAI,EAAJA,KAC9FzC,EAAQC,cACRyC,EAAWC,cACXC,EAAgBC,aAAY,SAACC,GAAK,OAAKA,EAAM9B,KAAK4B,aAAa,IAC/DG,EAAc,WAChBb,GAAQ,GACRK,GAAU,EACd,EAEMS,EAAkB,iDAAG,WAAOC,GAAM,iIAaG,OAZnCC,EAAYV,EAAQW,UACpBC,EAAkBZ,EAAQa,SAASC,gBAAgB,GAAGF,gBAC1DG,QAAQC,IAAIJ,GACRK,EAAQjB,EAAQkB,GAChBC,EAAanB,EAAQoB,WACrBC,EAAUrB,EAAQsB,QAClBC,EAAQC,IAAOC,MAAMC,WAAW1B,EAAQuB,MAAM3C,YAC9C+C,EAAeC,IAAWC,MAC1BC,EAAe,GAAG,EAAD,OAGXC,EAAW,IAAIP,IAAOQ,UAAUC,aAAaC,OAAOC,UACpDC,EAASL,EAASM,YAAY,EAAD,QACbD,EAAOE,aAAa,KAAD,GAEkC,OAFrEC,EAAO,OACPC,EAAM,IAAIhB,IAAOiB,SAAS7B,EAAiB8B,EAAOC,IAAKP,GACvDQ,EAAQ,sDAAkDnC,EAAOoC,MAAI,UACpDnC,EAAUoC,KAAI,WACjC,OAAOF,CACX,IAAG,KAAD,GAFY,GAIS,IAJjBG,EAAQ,QAIDC,OAAW,kCAEVR,EAAIS,KAAKL,EAAUM,EAAmBX,SAASY,OAAM,SAACC,GACxDC,IAAMD,MAAM,GAAD,OAAIA,EAAME,SACzB,IAAE,gCACJC,OAAO,KAAH,GAK6F,OAT/FC,EAAS,OAMbC,EAAe,yCAAqCD,EAAUC,iBACxDvC,EAAKwC,SAASF,EAAUG,OAAO,GAAGC,KAAK,IAEvCC,EAAkB,IAAIrC,IAAOiB,SAASS,EAAmBX,QAASuB,EAAenB,IAAKP,GAAQ,EAAD,QAEzFyB,EAAgBE,SAASpC,EAAcT,EAAIN,EAAiBW,GAAO4B,OAAM,SAACC,GAC5EC,IAAMD,MAAMA,EAAME,QACtB,IAAE,gCACJC,OAAO,KAAH,GAENzB,EAAakC,KAAK,CACd9C,GAAIR,EAAU,GAAGQ,GACjB+C,QAAS/C,KAETgD,EAAe,IACNF,KAAK,CACd/C,MAAOA,EACP2B,SAAUA,IAGd1C,EACIiE,YAAQ,CACJD,aAAcA,EACdpC,aAAcA,EACd2B,gBAAiBA,EACjBW,cAAe7B,EACflB,QAASA,EACTF,WAAYA,EACZlB,KAAMA,EACNJ,OAAQA,EACRF,KAAMA,EACNC,MAAOA,EACPW,YAAaA,KAEnB,6BACKwC,EAASC,OAAS,GAAC,kCAEhBR,EAAI6B,SAAStB,EAAUG,EAAmBX,SAASY,OAAM,SAACC,GAC5DC,IAAMD,MAAM,6BAChB,IAAE,gCACJG,OAAO,KAAH,GAMN,IAVIC,EAAS,OAMbC,EAAe,yCAAqCD,EAAUC,iBAE1Da,EAAU,EACVC,EAAoB,GACfC,EAAI,EAAGA,EAAIzB,EAASC,OAAQwB,IACjCD,EAAkBP,KAAKR,EAAUG,OAAOW,GAASV,KAAK,GAAGhF,YACzD0F,GAAoB,EAE2E,OAA7FT,EAAkB,IAAIrC,IAAOiB,SAASS,EAAmBX,QAASuB,EAAenB,IAAKP,GAAQ,EAAD,QAGzFyB,EAAgBY,aAAa9C,EAAc4C,EAAmB3D,EAAiBW,GAAO4B,OAAM,SAACC,GAC/FC,IAAMD,MAAMA,EAAME,QACtB,IAAE,gCACJC,OAAO,KAAH,GAEN7C,EAAUoC,KAAI,SAAC4B,EAAMC,GACjB7C,EAAakC,KAAK,CACd9C,GAAIwD,EAAKxD,GACT+C,QAASM,EAAkBI,IAEnC,KAEIT,EAAe,IACNF,KAAK,CACd/C,MAAOA,EACP2B,SAAUA,IAGd1C,EACIiE,YAAQ,CACJD,aAAcA,EACdpC,aAAcA,EACd2B,gBAAiBA,EACjBW,cAAe7B,EACflB,QAASA,EACTF,WAAYA,EACZlB,KAAMA,EACNJ,OAAQA,EACRF,KAAMA,EACNC,MAAOA,EACPW,YAAaA,KAEnB,0DAGNR,GAAU,GAAO,0DAExB,gBAtHuB,sCAwHlB6E,EAAgB,iDAAG,gHAUrB,GATIC,EAAQ7E,EAAQ8E,MAChBvD,EAAQvB,EAAQuB,MAChBwD,EAAO/E,EAAQ+E,KACfC,EAAchF,EAAQgF,YACtBC,EAAc,UACdC,GAAa,IAAIC,MAAOC,UACxBC,EAAerF,EAAQa,SAASkE,KAChCO,EAAYtF,EAAQuF,MAAMR,KAC1BS,EAAWxF,EAAQyF,YAElBZ,GAAUtD,GAAUwD,GAASC,EAAW,8EAEpBnG,EAAO6G,IACxBC,KAAKC,UAAU,CAAEX,cAAaK,YAAWD,eAAcR,QAAOE,OAAMC,cAAazD,QAAO2D,aAAYM,cACtG,KAAD,GAFK/E,EAAM,OAGZD,EAAmBC,GAAQ,mDAE3BV,GAAU,GAAO,2DAExB,kBApBqB,mCAsBhB8F,EAAc,iDAAG,gJAkB6B,OAhB5CxE,EAAUrB,EAAQsB,QAClBH,EAAanB,EAAQoB,WACrBH,EAAQjB,EAAQkB,GAChB2D,EAAQ7E,EAAQ8E,MAChBgB,EAAS9F,EAAQuB,MACjBA,EAAQC,IAAOC,MAAMC,WAAWoE,EAAOlH,YACvCmG,EAAO/E,EAAQ+E,KACfC,EAAchF,EAAQgF,YACR,UACdE,GAAa,IAAIC,MAAOC,UACxBC,EAAerF,EAAQa,SAASkE,KAChCO,EAAYtF,EAAQuF,MAAMR,KAC1BS,EAAWxF,EAAQyF,YACnB7E,EAAkBZ,EAAQa,SAASC,gBAAgB,GAAGF,gBAEtDF,EAAYV,EAAQW,UACxBI,QAAQC,IAAI,kBAAmBJ,GAAiB,UAC3B/B,EAAO6G,IACxBC,KAAKC,UAAU,CAAEX,YAVH,UAUgBK,YAAWD,eAAcR,QAAOE,OAAMC,cAAazD,QAAO2D,aAAYM,cACtG,KAAD,GA6BkC,OA/B7B/E,EAAM,OAGNsF,EAAG,sDAAkDtF,EAAOoC,MAE9DmD,EAAQpE,IAAWC,MAKA,UACG,IAEpBoE,EAAS,CACXlB,KAJmB,UAKnBmB,QAJsB,IAKtBC,kBAAmBvF,EACnBwF,QAAS,GAGPC,EAAQ,CACVC,eAAgB,CACZ,CAAEvB,KAAM,MAAO9E,KAAM,UACrB,CAAE8E,KAAM,QAAS9E,KAAM,WACvB,CAAE8E,KAAM,QAAS9E,KAAM,aAIzBsG,EAAU,CAAER,MAAKxE,QAAOyE,SAC9BjF,QAAQC,IAAI,YAAauF,GACnBxE,EAAW,IAAIP,IAAOQ,UAAUC,aAAaC,OAAOC,UACpDC,EAASL,EAASM,YAAY,EAAD,QACXD,EAAOoE,eAAeP,EAAQI,EAAOE,GAAS,KAAD,GAA/DE,EAAS,OACTC,EAAalF,IAAOC,MAAMkF,gBAAgBV,EAAQI,EAAOE,EAASE,GACxE1F,QAAQC,IAAI,cAAe0F,GACR,6CAEN,IAAIlF,IAAOiB,SAAS7B,EAAiB8B,EAAOC,IAAKP,GACvC,6CASvBrB,QAAQC,IAAI,SAAUiF,GACtBlF,QAAQC,IAAI,QAASqF,GACrBtF,QAAQC,IAAI,UAAWuF,GACvBxF,QAAQC,IAAI,YAAayF,GACzB1F,QAAQC,IAAI,aAAc0F,GAC1B3F,QAAQC,IAAI,gBAAiBZ,GACzB8D,EAAe,CACf,CACIjD,MAAOA,EACP2B,SAAUmD,EACVa,WAAYd,EAAOlH,WACnBwF,cAvBW,+CA2BftC,EAAepB,EAAUoC,KAAI,SAAC4B,GAC9B,MAAO,CACHxD,GAAIwD,EAAKxD,GACTuF,UAAWA,EACX9E,aAAcqE,EAEtB,IAEA9F,EACI2G,YAAY,CACR3C,aAAcA,EACdpC,aAAcA,EACdT,QAASA,EACTF,WAAYA,EACZlB,KAAMA,EACNJ,OAAQA,EACRF,KAAMA,EACNC,MAAOA,EACPW,YAAaA,KAEnB,4CACL,kBAtGmB,mCAwGpB,OACI,mCACI,eAACuG,EAAA,EAAM,CACHvI,UAAU,mBACVkB,KAAMA,EACNsH,oBAAqB3H,EACrB4H,aAAW,EAEX,kBAAgB,4BAChB,mBAAiB,kCAAiC,UAElD,cAACC,EAAA,EAAW,CAAC/F,GAAG,4BAA2B,uBAC3C,cAACgG,EAAA,EAAa,UACV,cAAC/I,EAAA,EAAU,CAACC,QAAQ,QAAQ+I,UAAU,OAAM,uDAKhD,cAACC,EAAA,EAAa,CAAC/J,GAAI,CAAEgK,GAAI,KAAM,SAC1BvH,EACG,cAACwH,EAAA,EAAM,CAAClJ,QAAQ,YAAYmJ,KAAK,QAAO,SACpC,cAACC,KAAI,CACDC,UAAU,oBACVC,OAAQ,GACRC,MAAO,GACPC,YAAa,EACbC,qBAAsB,EACtBC,MAAM,OACNC,eAAe,YAIvB,qCACI,cAACT,EAAA,EAAM,CACHjK,GAAI,CAAEyK,MAAOtK,EAAMI,QAAQwF,MAAM4E,KAAMrK,YAAaH,EAAMI,QAAQwF,MAAM4E,MACxEC,QAAS1H,EACTuH,MAAM,YAAW,gBAKrB,eAACR,EAAA,EAAM,CACHlJ,QAAQ,YACRmJ,KAAK,QACLU,QAAS,WACAnI,SACoBoI,GAAjB9H,GACAV,GAAQ,GACR2D,IAAMD,MAAM,qBAEY,cAApBpD,EAAQmI,SACRvD,IAC2B,YAApB5E,EAAQmI,UACftC,IAIhB,EAAE,UAED,IAAG,kBASpC,C,aC5VMzG,EAAa1C,sBAAW,SAAC2C,EAAO1C,GAAG,OAAK,cAAC2C,EAAA,EAAK,aAACC,UAAU,KAAK5C,IAAKA,GAAS0C,GAAS,IAC5E,SAAS+I,EAAgB,GAA2E,IAAzE3I,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QAASC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAAOC,EAAM,EAANA,OAA2BG,GAAb,EAANF,OAAiB,EAATC,UAAkB,EAAPC,SAASC,EAAI,EAAJA,KAChGzC,EAAQC,cACRyC,EAAWC,cACXI,EAAc,WAChBb,GAAQ,EACZ,EAEA,OACI,mCACI,eAACoH,EAAA,EAAM,CACHrH,KAAMA,EACNsH,oBAAqB3H,EACrB4H,aAAW,EACXqB,QAAS9H,EACT,kBAAgB,4BAChB,mBAAiB,kCAAiC,UAElD,cAAC0G,EAAA,EAAW,CAAC/F,GAAG,4BAA2B,wBAE3C,cAACgG,EAAA,EAAa,UACV,cAACoB,EAAA,EAAiB,CAACpH,GAAG,kCAAiC,SACnD,cAAC/C,EAAA,EAAU,CAACC,QAAQ,QAAQ+I,UAAU,OAAM,2DAKpD,eAACC,EAAA,EAAa,CAAC/J,GAAI,CAAEgK,GAAI,KAAM,UAC3B,cAACC,EAAA,EAAM,CACHjK,GAAI,CAAEyK,MAAOtK,EAAMI,QAAQwF,MAAM4E,KAC7BrK,YAAaH,EAAMI,QAAQwF,MAAM4E,MACrCC,QAAS1H,EACTuH,MAAM,YAAW,gBAIrB,cAACR,EAAA,EAAM,CACHlJ,QAAQ,YACRmJ,KAAK,QACLU,QAAS,WACL/H,EACIqI,YAAU,CACNrH,GAAIlB,EAAQkB,GACZC,WAAYnB,EAAQoB,WACpBC,QAASrB,EAAQsB,QACjBrB,KAAMA,EACNN,KAAMA,EACNC,MAAOA,EACPC,OAAQA,EACRU,YAAaA,IAGzB,EAAE,wBAQ1B,CC3DA,IAkHeiI,GAlHC,SAAH,GAAgD,IAA1CxI,EAAO,EAAPA,QAASH,EAAM,EAANA,OAAQF,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAAOK,EAAI,EAAJA,KAG7Cc,QAAQC,IAAI,UAAWhB,GACvB,MAA4ByI,oBAAS,GAAM,mBAApC3I,EAAM,KAAEC,EAAS,KACxB,EAAgC0I,oBAAS,GAAM,mBAAxCC,EAAQ,KAAEC,EAAW,KAC5B,EAA4CF,oBAAS,GAAM,mBAApDG,EAAc,KAAEC,EAAiB,KACxC,OACI,qCACI,cAACT,EAAe,CACZpI,QAASA,EACTC,KAAMA,EACNJ,OAAQA,EACRF,KAAMA,EACNC,MAAOA,EACPE,OAAQA,EACRC,UAAWA,EACXN,KAAMmJ,EACNlJ,QAASmJ,IAEb,cAACrJ,EAAa,CACVQ,QAASA,EACTC,KAAMA,EACNJ,OAAQA,EACRF,KAAMA,EACNC,MAAOA,EACPE,OAAQA,EACRC,UAAWA,EACXN,KAAMiJ,EACNhJ,QAASiJ,IAEb,eAAC,EAAQ,CACL5L,SAAS,EACTF,WAAS,EACTQ,GAAI,CACAyL,SAAU,WACV,UAAW,CACPC,UAAW,yBACXC,WAAY,wBAElB,UAEF,cAACC,EAAA,EAAS,CAAC5L,GAAI,CAAEqK,OAAQ,KAAO7C,MAAO7E,EAAQ8E,QAC/C,cAACxG,EAAA,EAAW,CAACjB,GAAI,CAAE6L,EAAG,GAAI,SACtB,eAACC,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAE,UACvB,cAACF,EAAA,EAAI,CAACG,MAAI,EAACC,GAAI,EAAE,SACb,cAACpL,EAAA,EAAU,CAACC,QAAQ,YAAYf,GAAI,CAAEmM,eAAgB,QAAS,SAC1DxJ,EAAQ+E,SAGjB,cAACoE,EAAA,EAAI,CAACG,MAAI,EAACC,GAAI,EAAE,SACb,cAACpL,EAAA,EAAU,CAACC,QAAQ,QAAQf,GAAI,CAAEmM,eAAgB,QAAS,SAClC,YAApBxJ,EAAQmI,SAAyB,YAAc,WAGxD,cAACgB,EAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIE,IAAK,IAAI,SACxB,cAACtL,EAAA,EAAU,CACPC,QAAQ,QACRf,GAAI,CACAqM,SAAU,SACVhC,OAAQ,IACV,SAED1H,EAAQgF,gBAIjB,eAACmE,EAAA,EAAI,CAACG,MAAI,EAACC,GAAI,EAAE,UACb,cAACJ,EAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAG,SACd,eAACpL,EAAA,EAAU,CAACC,QAAQ,KAAI,UACnB4B,EAAQuB,MAAK,IAAGvB,EAAQ2J,kBAGjC,cAACR,EAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAG,SACd,eAACpL,EAAA,EAAU,CAACC,QAAQ,KAAI,UAAE4B,EAAQW,UAAUqC,OAAM,iBAG1D,cAACmG,EAAA,EAAI,CAACG,MAAI,EAACC,GAAI,EAAE,SACb,eAACK,EAAA,EAAK,CAACrK,UAAU,MAAMsK,eAAe,MAAMC,WAAW,SAAQ,UACxC,aAAlB9J,EAAQ+J,QACL,cAACzC,EAAA,EAAM,CACHlJ,QAAQ,YACR0J,MAAM,UACNzK,GAAI,CAAE2M,YAAa,OACnB/B,QAAS,WACLY,GAAkB,EACtB,EAAE,oBAMU,aAAlB7I,EAAQ+J,QACN,cAACzC,EAAA,EAAM,CACHlJ,QAAQ,YACR0J,MAAM,UACNzK,GAAI,CAAE2M,YAAa,OACnB/B,QAAS,WACLU,GAAY,EAChB,EAAE,iCAa1C,EC5GMsB,GAAY,CACd,CACIC,MAAO,MACPC,MAAO,aAEX,CACID,MAAO,aACPC,MAAO,eAEX,CACID,MAAO,WACPC,MAAO,qBAEX,CACID,MAAO,UACPC,MAAO,wBAEX,CACID,MAAO,WACPC,MAAO,kBA8LAC,UA1LO,WAClB,IAAM5M,EAAQC,cACR4M,EAAWC,cACXC,EAAWC,cACXtK,EAAWC,cACXsK,EAAUpK,aAAY,SAACC,GAAK,OAAKA,EAAMoK,WAAWC,iBAAiB,IACzE,EAAwBlC,mBAAS,OAAM,mBAAhCxI,EAAI,KAAE2K,EAAO,KACpB,EAA4BnC,mBAAS,IAAG,mBAAjC5I,EAAM,KAAEgL,EAAS,KACxB,EAAwBpC,mBAAS,GAAE,mBAA5B9I,EAAI,KAAEmL,EAAO,KACpB,EAA0BrC,mBAAS,IAAG,mBAA/B7I,EAAK,KAAEmL,EAAQ,KACtB,EAAgCtC,mBAAS,MAAK,mBAAvCuC,EAAQ,KAAEC,EAAW,KAKtB1K,EAAc,WAChB0K,EAAY,KAChB,EAqBA,OAbAC,qBAAU,WAAO,IAAD,QACZhL,EACIiL,YAAoB,CAChB9J,QAAiB,OAARkJ,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUjK,aAAK,OAAW,QAAX,EAAf,EAAiB8K,iBAAS,WAAlB,EAAR,EAA4B9J,QACrCH,WAAoB,OAARoJ,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUjK,aAAK,OAAW,QAAX,EAAf,EAAiB8K,iBAAS,WAAlB,EAAR,EAA4BhK,WACxCvB,OAAQA,EACRF,KAAMA,EACNC,MAAOA,EACPK,KAAMA,IAGlB,GAAG,CAAC,CAAEJ,EAAQF,EAAMC,EAAOK,IAGvB,qCACI,cAACxD,EAAA,EAAQ,CACL8B,UAAU,SACV8M,MAAO,CAAEC,aAAc,QACvBhO,MACI,eAAC6L,EAAA,EAAI,CAACC,WAAS,EAACC,QAASkC,IAAY,UACjC,cAACpC,EAAA,EAAI,CAACG,MAAI,EAACC,GAAI,EAAE,SACb,cAACpL,EAAA,EAAU,CAACC,QAAQ,KAAKf,GAAI,CAAEmO,WAAY,IAAK1D,MAAO,aAAc,8BAIzE,cAACqB,EAAA,EAAI,CAACG,MAAI,EAACC,GAAI,EAAE,SACb,cAACkC,EAAA,EAAS,CACNlN,UAAU,cACV2C,GAAG,yBACHwK,QAAM,EACNC,WAAS,EACTxB,MAAM,cACND,MAAOjK,EACP2L,SAxCT,SAACC,GAChBjB,EAAQiB,EAAMC,OAAO5B,OACrBa,EAAS,IACTF,EAAU,IACVC,EAAQ,EACZ,EAmCiD,SAEpBb,GAAUnH,KAAI,SAACiJ,EAAQpH,GAAK,OACzB,cAACqH,EAAA,EAAQ,CAAa9B,MAAO6B,EAAO7B,MAAM,SACrC6B,EAAO5B,OADGxF,EAEJ,QAIvB,cAACwE,EAAA,EAAI,CAACG,MAAI,EAACC,GAAI,EAAG8B,MAAO,CAAEY,UAAW,OAAQ,SAC1C,cAAC3E,EAAA,EAAM,CACHlJ,QAAQ,YACRmJ,KAAK,QACLU,QAAS,WACLoC,EAAS,UACb,EAAE,uBAOlBtN,SAAS,IAEb,cAACoM,EAAA,EAAI,CAACC,WAAS,WACVqB,GAAWA,EAAQyB,MAAQzB,EAAQyB,KAAKC,MAAQ1B,EAAQyB,KAAKC,KAAKnJ,OAAS,EACxE,qCACK,IACD,cAACmG,EAAA,EAAI,CAACC,WAAS,EAACC,QAASkC,IAAaa,GAAI,EAAGC,GAAI,EAAE,SAC9C5B,EAAQyB,KAAKC,MACV1B,EAAQyB,KAAKC,KAAKrJ,KAAI,SAACN,EAAKmC,GACxB,OACI,cAACwE,EAAA,EAAI,CAAaG,MAAI,EAACC,GAAI,GAAI+C,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAE,SAC/C,cAAC,GAAO,CAACxM,QAASwC,EAAK3C,OAAQA,EAAQF,KAAMA,EAAMC,MAAOA,EAAOK,KAAMA,KADhE0E,EAInB,MAER,cAACwE,EAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIlM,GAAI,CAAE6L,EAAG,GAAI,SAC5B,eAACC,EAAA,EAAI,CAACC,WAAS,EAACS,eAAe,gBAAgBR,QAASkC,IAAY,UAChE,cAACpC,EAAA,EAAI,CAACG,MAAI,WACN,cAACmD,EAAA,EAAU,CACP9M,KAAMA,EACNmI,MAAM,UACN4E,iBAAe,EACfC,gBAAc,EACdC,MAAOnC,GAAWA,EAAQoC,MAC1BjB,SAAU,SAACC,EAAOiB,GACdhC,EAAQgC,EACZ,MAGR,eAAC3D,EAAA,EAAI,CAACG,MAAI,YACN,eAAChC,EAAA,EAAM,CACHC,KAAK,QACLlK,GAAI,CAAEyK,MAAOtK,EAAMI,QAAQmP,KAAK,MAChCjF,MAAM,YACNkF,QAAS,cAAC,IAAqB,IAC/B/E,QAzGhB,SAAC4D,GACjBZ,EAAYY,EAAMoB,cACtB,EAuGyD,UAEpBrN,EAAK,WAEV,eAACsN,EAAA,EAAI,CACDhM,GAAG,wBACH8J,SAAUA,EACVhE,aAAW,EACXvH,KAAM0N,QAAQnC,GACd3C,QAAS9H,EACTnC,QAAQ,eACRgP,aAAc,CACVC,SAAU,MACVC,WAAY,SAEhBC,gBAAiB,CACbF,SAAU,SACVC,WAAY,SACd,UAEF,eAACtB,EAAA,EAAQ,CACL9B,MAAO,GACPjC,QAAS,SAACuF,GACNzC,EAASyC,EAAE1B,OAAO5B,OAClBY,EAAQ,GACRvK,GACJ,EAAE,UAED,IAAG,aAGR,eAACyL,EAAA,EAAQ,CACL9B,MAAO,GACPjC,QAAS,SAACuF,GACNzC,EAASyC,EAAE1B,OAAO5B,OAClBY,EAAQ,GACRvK,GACJ,EAAE,UAED,IAAG,aAGR,eAACyL,EAAA,EAAQ,CACL9B,MAAO,GACPjC,QAAS,SAACuF,GACNzC,EAASyC,EAAE1B,OAAO5B,OAClBY,EAAQ,GACRvK,GACJ,EAAE,UAED,IAAG,UACI,qBAQhC,mCACI,cAAC4I,EAAA,EAAI,CAACG,MAAI,WACN,cAACnL,EAAA,EAAU,CAACkN,MAAO,CAAEoC,QAAS,QAAS,wCAOnE,C","file":"static/js/14.79ba6bc4.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.mode === 'dark' ? theme.palette.background.default : theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow\r\n                            ? shadow ||\r\n                              (theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' : '0 2px 14px 0 rgb(32 40 45 / 8%)')\r\n                            : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { ethers } from 'ethers';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, Typography } from '@mui/material';\r\n// import { Oval } from 'react-loader-spinner';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { mintNft, lazyMintNft } from 'redux/nftManagement/actions';\r\nimport NFTAbi from '../../../../../contractAbi/NFT.json';\r\nimport { create } from 'ipfs-http-client';\r\nimport { Buffer } from 'buffer';\r\nimport MarketplaceAbi from '../../../../../contractAbi/Marketplace.json';\r\nimport MarketplaceAddress from '../../../../../contractAbi/Marketplace-address.json';\r\nimport  BLOCKCHAIN  from '../../../../../constants';\r\nconst projectId = '2GGvNmnqRYjnz7iJU9Kn6Nnw97C';\r\nconst projectSecret = 'a09de1e8b20292cd87460290de554003';\r\nconst auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');\r\n\r\nconst client = create({\r\n    host: 'ipfs.infura.io',\r\n    port: 5001,\r\n    protocol: 'https',\r\n    headers: {\r\n        authorization: auth\r\n    }\r\n});\r\n\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nexport default function MintNftDialog({ open, setOpen, page, limit, search, loader, setLoader, nftData, type }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const walletAddress = useSelector((state) => state.auth.walletAddress);\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setLoader(false);\r\n    };\r\n\r\n    const directMintThenList = async (result) => {\r\n        let nftTokens = nftData.NFTTokens;\r\n        let contractAddress = nftData.Category.BrandCategories[0].contractAddress;\r\n        console.log(contractAddress)\r\n        let nftId = nftData.id;\r\n        let categoryId = nftData.CategoryId;\r\n        let brandId = nftData.BrandId;\r\n        let price = ethers.utils.parseEther(nftData.price.toString());\r\n        let erc20Address = BLOCKCHAIN.ERC20\r\n        let tokenIdArray = [];\r\n        let transactionHash;\r\n        try {\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const address = await signer.getAddress();\r\n            const nft = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n            const tokenUri = `https://galileoprotocol.infura-ipfs.io/ipfs/${result.path}`;\r\n            const uriArray = await nftTokens.map(() => {\r\n                return tokenUri;\r\n            });\r\n\r\n            if (uriArray.length == 1) {\r\n                let mintedNFT = await (\r\n                    await nft.mint(tokenUri, MarketplaceAddress.address).catch((error) => {\r\n                        toast.error(`${error.message}`);\r\n                    })\r\n                ).wait();\r\n\r\n                transactionHash = `https://goerli.etherscan.io/tx/${mintedNFT.transactionHash}`;\r\n                const id = parseInt(mintedNFT.events[0].args[2]);\r\n\r\n                const marketplaceAddr = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n                await (\r\n                    await marketplaceAddr.makeItem(erc20Address, id, contractAddress, price).catch((error) => {\r\n                        toast.error(error.message);\r\n                    })\r\n                ).wait();\r\n\r\n                tokenIdArray.push({\r\n                    id: nftTokens[0].id,\r\n                    tokenId: id\r\n                });\r\n                let nftDataArray = [];\r\n                nftDataArray.push({\r\n                    nftId: nftId,\r\n                    tokenUri: tokenUri\r\n                });\r\n\r\n                dispatch(\r\n                    mintNft({\r\n                        nftDataArray: nftDataArray,\r\n                        tokenIdArray: tokenIdArray,\r\n                        transactionHash: transactionHash,\r\n                        signerAddress: address,\r\n                        brandId: brandId,\r\n                        categoryId: categoryId,\r\n                        type: type,\r\n                        search: search,\r\n                        page: page,\r\n                        limit: limit,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            } else if (uriArray.length > 1) {\r\n                let mintedNFT = await (\r\n                    await nft.bulkMint(uriArray, MarketplaceAddress.address).catch((error) => {\r\n                        toast.error('NFT minting  unsuccessfull');\r\n                    })\r\n                ).wait();\r\n\r\n                transactionHash = `https://goerli.etherscan.io/tx/${mintedNFT.transactionHash}`;\r\n\r\n                let counter = 0;\r\n                let myNftTokenIdArray = [];\r\n                for (let i = 0; i < uriArray.length; i++) {\r\n                    myNftTokenIdArray.push(mintedNFT.events[counter].args[2].toString());\r\n                    counter = counter + 2;\r\n                }\r\n                const marketplaceAddr = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, signer);\r\n\r\n                await (\r\n                    await marketplaceAddr.makeItemBulk(erc20Address, myNftTokenIdArray, contractAddress, price).catch((error) => {\r\n                        toast.error(error.message);\r\n                    })\r\n                ).wait();\r\n\r\n                nftTokens.map((data, index) => {\r\n                    tokenIdArray.push({\r\n                        id: data.id,\r\n                        tokenId: myNftTokenIdArray[index]\r\n                    });\r\n                });\r\n\r\n                let nftDataArray = [];\r\n                nftDataArray.push({\r\n                    nftId: nftId,\r\n                    tokenUri: tokenUri\r\n                });\r\n\r\n                dispatch(\r\n                    mintNft({\r\n                        nftDataArray: nftDataArray,\r\n                        tokenIdArray: tokenIdArray,\r\n                        transactionHash: transactionHash,\r\n                        signerAddress: address,\r\n                        brandId: brandId,\r\n                        categoryId: categoryId,\r\n                        type: type,\r\n                        search: search,\r\n                        page: page,\r\n                        limit: limit,\r\n                        handleClose: handleClose\r\n                    })\r\n                );\r\n            }\r\n        } catch (error) {\r\n            setLoader(false);\r\n        }\r\n    };\r\n\r\n    const handleDirectMint = async () => {\r\n        let image = nftData.asset;\r\n        let price = nftData.price;\r\n        let name = nftData.name;\r\n        let description = nftData.description;\r\n        let projectName = 'Galelio';\r\n        let mintedDate = new Date().valueOf();\r\n        let categoryName = nftData.Category.name;\r\n        let brandName = nftData.Brand.name;\r\n        let metaData = nftData.NFTMetaData;\r\n        // setLoader(true);\r\n        if (!image || !price || !name || !description) return;\r\n        try {\r\n            const result = await client.add(\r\n                JSON.stringify({ projectName, brandName, categoryName, image, name, description, price, mintedDate, metaData })\r\n            );\r\n            directMintThenList(result);\r\n        } catch (error) {\r\n            setLoader(false);\r\n        }\r\n    };\r\n\r\n    const handleLazyMint = async () => {\r\n        // setLoader(true);\r\n        let brandId = nftData.BrandId;\r\n        let categoryId = nftData.CategoryId;\r\n        let nftId = nftData.id;\r\n        let image = nftData.asset;\r\n        let prices = nftData.price;\r\n        let price = ethers.utils.parseEther(prices.toString());\r\n        let name = nftData.name;\r\n        let description = nftData.description;\r\n        let projectName = 'Galelio';\r\n        let mintedDate = new Date().valueOf();\r\n        let categoryName = nftData.Category.name;\r\n        let brandName = nftData.Brand.name;\r\n        let metaData = nftData.NFTMetaData;\r\n        let contractAddress = nftData.Category.BrandCategories[0].contractAddress;\r\n        // let contractAddress = \"0x6e9550E5fee2bE7BdB208214e9cE2B47131a5Ca0\"\r\n        let nftTokens = nftData.NFTTokens;\r\n        console.log('contractAddress', contractAddress);\r\n        const result = await client.add(\r\n            JSON.stringify({ projectName, brandName, categoryName, image, name, description, price, mintedDate, metaData })\r\n        );\r\n        const uri = `https://galileoprotocol.infura-ipfs.io/ipfs/${result.path}`;\r\n\r\n        let token = BLOCKCHAIN.ERC20\r\n        // const SIGNING_DOMAIN = 'Voucher';\r\n        // const SIGNATURE_VERSION = '4';\r\n        // const chainId = 5;\r\n\r\n        const SIGNING_DOMAIN = 'Voucher';\r\n        const SIGNATURE_VERSION = '4';\r\n\r\n        const domain = {\r\n            name: SIGNING_DOMAIN,\r\n            version: SIGNATURE_VERSION,\r\n            verifyingContract: contractAddress,\r\n            chainId: 5\r\n        };\r\n\r\n        const types = {\r\n            LazyNFTVoucher: [\r\n                { name: 'uri', type: 'string' },\r\n                { name: 'price', type: 'uint256' },\r\n                { name: 'token', type: 'address' }\r\n            ]\r\n        };\r\n        //const prices = ethers.utils.parseEther(price.toString());\r\n        const voucher = { uri, price, token };\r\n        console.log(\"Voucher: \", voucher)\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const signature = await signer._signTypedData(domain, types, voucher);\r\n        const verifyAddr = ethers.utils.verifyTypedData(domain, types, voucher, signature);\r\n        console.log(\"signature: \", verifyAddr)\r\n        const signerAddr = '0x6f3B51bd5B67F3e5bca2fb32796215A796B79651';\r\n\r\n        const nfts = new ethers.Contract(contractAddress, NFTAbi.abi, signer);\r\n        let validatorAddress = \"0x6f3b51bd5b67f3e5bca2fb32796215a796b79651\"\r\n\r\n        // await await nfts.lazyMint(\r\n        //     validatorAddress,\r\n        //     voucher,\r\n        //     signature,\r\n        //     MarketplaceAddress.address\r\n        // );\r\n\r\n        console.log('domain', domain);\r\n        console.log('types', types);\r\n        console.log('voucher', voucher);\r\n        console.log('signature', signature);\r\n        console.log('verifyAddr', verifyAddr);\r\n        console.log('walletAddress', walletAddress);\r\n        let nftDataArray = [\r\n            {\r\n                nftId: nftId,\r\n                tokenUri: uri,\r\n                tokenPrice: prices.toString(),\r\n                signerAddress: signerAddr // save wallet address\r\n            }\r\n        ];\r\n\r\n        let tokenIdArray = nftTokens.map((data) => {\r\n            return {\r\n                id: data.id,\r\n                signature: signature,\r\n                erc20Address: token\r\n            };\r\n        });\r\n\r\n        dispatch(\r\n            lazyMintNft({\r\n                nftDataArray: nftDataArray,\r\n                tokenIdArray: tokenIdArray,\r\n                brandId: brandId,\r\n                categoryId: categoryId,\r\n                type: type,\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                handleClose: handleClose\r\n            })\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                className=\"responsiveDialog\"\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\"> Mint NFT</DialogTitle>\r\n                <DialogContent>\r\n                    <Typography variant=\"body2\" component=\"span\">\r\n                        Are you sure you want to mint this NFT?\r\n                    </Typography>\r\n                </DialogContent>\r\n\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    {loader ? (\r\n                        <Button variant=\"contained\" size=\"small\">\r\n                            <Oval\r\n                                ariaLabel=\"loading-indicator\"\r\n                                height={20}\r\n                                width={20}\r\n                                strokeWidth={5}\r\n                                strokeWidthSecondary={1}\r\n                                color=\"blue\"\r\n                                secondaryColor=\"white\"\r\n                            />\r\n                        </Button>\r\n                    ) : (\r\n                        <>\r\n                            <Button\r\n                                sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                                onClick={handleClose}\r\n                                color=\"secondary\"\r\n                            >\r\n                                No\r\n                            </Button>\r\n\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"small\"\r\n                                onClick={() => {\r\n                                    if (!loader) {\r\n                                        if (walletAddress == undefined) {\r\n                                            setOpen(false);\r\n                                            toast.error('Connect Metamask');\r\n                                        } else {\r\n                                            if (nftData.mintType == 'directMint') {\r\n                                                handleDirectMint();\r\n                                            } else if (nftData.mintType == 'lazyMint') {\r\n                                                handleLazyMint();\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }}\r\n                            >\r\n                                {' '}\r\n                                Yes\r\n                            </Button>\r\n                        </>\r\n                    )}\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { rejectNft } from 'redux/nftManagement/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function RejectNftDialog({ open, setOpen, page, limit, search, loader, setLoader, nftData, type }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Reject NFT</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to reject this NFT?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark,\r\n                            borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                rejectNft({\r\n                                    id: nftData.id,\r\n                                    categoryId: nftData.CategoryId,\r\n                                    brandId: nftData.BrandId,\r\n                                    type: type,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search,\r\n                                    handleClose: handleClose\r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { Button, CardContent, CardMedia, Grid, Stack, Typography, Tooltip } from '@mui/material';\r\nimport MainCard from './mainCard';\r\nimport MintNftDialog from './mintNftDialog';\r\nimport RejectNftDialog from './rejectNftDialog';\r\n\r\nconst NftCard = ({ nftData, search, page, limit, type }) => {\r\n\r\n\r\n    console.log(\"nftData\", nftData)\r\n    const [loader, setLoader] = useState(false);\r\n    const [openMint, setOpenMint] = useState(false);\r\n    const [rejectMintOpen, setRejectMintOpen] = useState(false);\r\n    return (\r\n        <>\r\n            <RejectNftDialog\r\n                nftData={nftData}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={rejectMintOpen}\r\n                setOpen={setRejectMintOpen}\r\n            />\r\n            <MintNftDialog\r\n                nftData={nftData}\r\n                type={type}\r\n                search={search}\r\n                page={page}\r\n                limit={limit}\r\n                loader={loader}\r\n                setLoader={setLoader}\r\n                open={openMint}\r\n                setOpen={setOpenMint}\r\n            />\r\n            <MainCard\r\n                content={false}\r\n                boxShadow\r\n                sx={{\r\n                    position: 'relative',\r\n                    '&:hover': {\r\n                        transform: 'scale3d(1.02, 1.02, 1)',\r\n                        transition: 'all .4s ease-in-out'\r\n                    }\r\n                }}\r\n            >\r\n                <CardMedia sx={{ height: 220 }} image={nftData.asset} />\r\n                <CardContent sx={{ p: 2 }}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={8}>\r\n                            <Typography variant=\"subtitle1\" sx={{ textDecoration: 'none' }}>\r\n                                {nftData.name}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <Typography variant=\"body1\" sx={{ textDecoration: 'none' }}>\r\n                                {nftData.mintType == 'lazyMint' ? 'Lazy Mint' : 'Mint'}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12} mt={-1.5}>\r\n                            <Typography\r\n                                variant=\"body1\"\r\n                                sx={{\r\n                                    overflow: 'hidden',\r\n                                    height: 30\r\n                                }}\r\n                            >\r\n                                {nftData.description}\r\n                            </Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6}>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\">\r\n                                    {nftData.price} {nftData.currencyType}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h6\">{nftData.NFTTokens.length} Items</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\">\r\n                                {nftData.status == 'REQUESTED' && (\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        sx={{ marginRight: '5px' }}\r\n                                        onClick={() => {\r\n                                            setRejectMintOpen(true);\r\n                                        }}\r\n                                    >\r\n                                        Reject\r\n                                    </Button>\r\n                                )}\r\n\r\n                                {(nftData.status == 'REQUESTED') && (\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        sx={{ marginRight: '5px' }}\r\n                                        onClick={() => {\r\n                                            setOpenMint(true);\r\n                                        }}\r\n                                    >\r\n                                        Mint\r\n                                    </Button>\r\n                                )}\r\n                              \r\n                            </Stack>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NftCard;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Grid, Typography, Pagination, Menu, MenuItem, TextField } from '@mui/material';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { getAllNftSuperAdmin } from '../../../../redux/nftManagement/actions';\r\nimport NftCard from './component/nftCard';\r\nconst typeArray = [\r\n    {\r\n        value: 'all',\r\n        label: \"All NFT'S\"\r\n    },\r\n    {\r\n        value: 'directMint',\r\n        label: 'Minted NFTS'\r\n    },\r\n    {\r\n        value: 'lazyMint',\r\n        label: \"Lazy Minted NFT'S\"\r\n    },\r\n    {\r\n        value: 'waiting',\r\n        label: 'Waiting For approval'\r\n    },\r\n    {\r\n        value: 'rejected',\r\n        label: 'Rejected NFTS'\r\n    }\r\n];\r\n\r\nconst NftManagement = () => {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n    const nftList = useSelector((state) => state.nftReducer.nftListSuperAdmin);\r\n    const [type, setType] = useState('all');\r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(12);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const handleType = (event) => {\r\n        setType(event.target.value);\r\n        setLimit(12);\r\n        setSearch('');\r\n        setPage(1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            getAllNftSuperAdmin({\r\n                brandId: location?.state?.brandData?.BrandId,\r\n                categoryId: location?.state?.brandData?.CategoryId,\r\n                search: search,\r\n                page: page,\r\n                limit: limit,\r\n                type: type\r\n            })\r\n        );\r\n    }, [, search, page, limit, type]);\r\n\r\n    return (\r\n        <>\r\n            <MainCard\r\n                className=\"yellow\"\r\n                style={{ marginBottom: '15px' }}\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={3}>\r\n                            <Typography variant=\"h3\" sx={{ fontWeight: 500, color: 'cadetblue' }}>\r\n                                NFT Management\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <TextField\r\n                                className=\"selectField\"\r\n                                id=\"outlined-select-budget\"\r\n                                select\r\n                                fullWidth\r\n                                label=\"Select Type\"\r\n                                value={type}\r\n                                onChange={handleType}\r\n                            >\r\n                                {typeArray.map((option, index) => (\r\n                                    <MenuItem key={index} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={6} style={{ textAlign: 'end' }}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"small\"\r\n                                onClick={() => {\r\n                                    navigate('/brands');\r\n                                }}\r\n                            >\r\n                                back\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            ></MainCard>\r\n            <Grid container>\r\n                {nftList && nftList.nfts && nftList.nfts.rows && nftList.nfts.rows.length > 0 ? (\r\n                    <>\r\n                        {' '}\r\n                        <Grid container spacing={gridSpacing} mb={4} pl={2}>\r\n                            {nftList.nfts.rows &&\r\n                                nftList.nfts.rows.map((nft, index) => {\r\n                                    return (\r\n                                        <Grid key={index} item xs={12} sm={6} md={4} lg={3}>\r\n                                            <NftCard nftData={nft} search={search} page={page} limit={limit} type={type} />\r\n                                        </Grid>\r\n                                    );\r\n                                })}\r\n                        </Grid>\r\n                        <Grid item xs={12} sx={{ p: 3 }}>\r\n                            <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                                <Grid item>\r\n                                    <Pagination\r\n                                        page={page}\r\n                                        color=\"primary\"\r\n                                        showFirstButton\r\n                                        showLastButton\r\n                                        count={nftList && nftList.pages}\r\n                                        onChange={(event, newPage) => {\r\n                                            setPage(newPage);\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        size=\"large\"\r\n                                        sx={{ color: theme.palette.grey[900] }}\r\n                                        color=\"secondary\"\r\n                                        endIcon={<ExpandMoreRoundedIcon />}\r\n                                        onClick={handleClick}\r\n                                    >\r\n                                        {limit} Rows\r\n                                    </Button>\r\n                                    <Menu\r\n                                        id=\"menu-user-list-style1\"\r\n                                        anchorEl={anchorEl}\r\n                                        keepMounted\r\n                                        open={Boolean(anchorEl)}\r\n                                        onClose={handleClose}\r\n                                        variant=\"selectedMenu\"\r\n                                        anchorOrigin={{\r\n                                            vertical: 'top',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                        transformOrigin={{\r\n                                            vertical: 'bottom',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                    >\r\n                                        <MenuItem\r\n                                            value={12}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleClose();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            12 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={24}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleClose();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            24 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={36}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleClose();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            36 Rows{' '}\r\n                                        </MenuItem>\r\n                                    </Menu>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Grid item>\r\n                            <Typography style={{ padding: '20px' }}> No Data Available</Typography>\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NftManagement;\r\n"],"sourceRoot":""}