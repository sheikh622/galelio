{"version":3,"sources":["views/pages/superAdmin/brands/component/deleteBrandDialog.js","views/pages/superAdmin/brands/component/brandTable.js","views/pages/superAdmin/brands/component/addUpdateBrand.js","shared/Card/HeadingCard.js","views/pages/superAdmin/brands/index.js"],"names":["Transition","forwardRef","props","ref","Slide","direction","DeleteBrandDialog","deleteOpen","setDeleteOpen","brandId","page","limit","search","theme","useTheme","dispatch","useDispatch","handleClose","Dialog","open","TransitionComponent","keepMounted","onClose","DialogTitle","id","DialogContent","DialogContentText","Typography","variant","component","DialogActions","sx","pr","Button","color","palette","error","dark","borderColor","onClick","size","deleteBrand","BrandTable","setBrandName","setOpen","setAddUpdateOpen","setBrandId","useNavigate","useState","brandsList","useSelector","state","brand","console","log","brands","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","undefined","map","row","index","padding","name","Stack","justifyContent","alignItems","Tooltip","placement","title","IconButton","fontSize","orange","main","background","light","AddUpdateBrandDialog","addUpdateOpen","brandName","validationSchema","Yup","required","max","matches","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","addBrand","updateBrand","resetForm","className","Divider","autoComplete","handleSubmit","TextField","marginTop","label","value","onChange","handleChange","touched","Boolean","errors","helperText","fullWidth","HeadingCard","role","setValue","options","Card","marginBottom","spacing","gridSpacing","primary","default","Box","Grid","container","item","fontWeight","select","e","target","width","height","option","MenuItem","Brands","pages","setSearch","setPage","setLimit","anchorEl","setAnchorEl","handleCloseMenu","useEffect","getAllBrands","MainCard","xs","OutlinedInput","placeholder","startAdornment","InputAdornment","position","stroke","textAlign","content","count","p","Pagination","showFirstButton","showLastButton","totalPages","event","newPage","grey","endIcon","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","md","style"],"mappings":"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","file":"static/js/8.d76353bc.chunk.js","sourcesContent":["import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\r\nimport { deleteBrand } from '../../../../../redux/brand/actions';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nexport default function DeleteBrandDialog({ deleteOpen, setDeleteOpen, brandId, page, limit, search }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        setDeleteOpen(false);\r\n        \r\n    };\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={deleteOpen}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">Delete Brand</DialogTitle>\r\n                \r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\r\n                        <Typography variant=\"body2\" component=\"span\">\r\n                            Are you sure you want to delete this Brand?\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={handleClose}\r\n                        color=\"secondary\"\r\n                    >\r\n                        No\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"large\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                deleteBrand({\r\n                                    id: brandId,\r\n                                    handleClose: handleClose,\r\n                                    page: page,\r\n                                    limit: limit,\r\n                                    search: search\r\n                                   \r\n                                })\r\n                            );\r\n                        }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { IconButton, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip } from '@mui/material';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport DeleteBrandDialog from './deleteBrandDialog';\r\nimport VisibilityOutlinedIcon from '@mui/icons-material/VisibilityOutlined';\r\nimport moment from 'moment';\r\nimport { useNavigate } from 'react-router-dom';\r\nconst BrandTable = ({ page, limit, search, setOpen, setBrandName, setAddUpdateOpen, brandId, setBrandId }) => {\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const [deleteOpen, setDeleteOpen] = useState(false);\r\n    const brandsList = useSelector((state) => state.brand.brandsList);\r\n    console.log(brandsList.brands, \"========================table==================>\");\r\n    return (\r\n        <TableContainer>\r\n            <DeleteBrandDialog\r\n                deleteOpen={deleteOpen}\r\n                setDeleteOpen={setDeleteOpen}\r\n                brandId={brandId}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n            />\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n\r\n                        <TableCell align=\"center\">Brand Name</TableCell>\r\n                        <TableCell align=\"center\">Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n\r\n                    {brandsList.brands != undefined &&\r\n                        brandsList.brands.map((row, index) => (\r\n                            <TableRow>\r\n\r\n                                <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                    {row.name}\r\n                                </TableCell>\r\n\r\n                                <TableCell align=\"center\" sx={{ padding: '0px' }}>\r\n                                    <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                                        <Tooltip placement=\"top\" title=\"Edit\">\r\n                                            <IconButton\r\n                                                color=\"primary\"\r\n                                                aria-label=\"Edit\"\r\n                                                size=\"large\"\r\n                                                onClick={() => {\r\n                                                    setBrandName(row.name);\r\n                                                    setBrandId(row.id);\r\n                                                    setAddUpdateOpen(true);\r\n                                                }}\r\n                                            >\r\n                                                <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                        <Tooltip placement=\"top\" title=\"Delete\">\r\n                                            <IconButton\r\n                                                color=\"primary\"\r\n                                                sx={{\r\n                                                    color: theme.palette.orange.dark,\r\n                                                    borderColor: theme.palette.orange.main,\r\n                                                    '&:hover ': { background: theme.palette.orange.light }\r\n                                                }}\r\n                                                size=\"large\"\r\n                                                onClick={() => {\r\n                                                    setDeleteOpen(true);\r\n                                                    setBrandId(row.id);\r\n                                                }}\r\n                                            >\r\n                                                <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </Stack>\r\n                                </TableCell>\r\n\r\n\r\n                            </TableRow>\r\n                        ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default BrandTable;\r\n","import { forwardRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, Divider } from '@mui/material';\r\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\r\nimport { addBrand, updateBrand } from '../../../../../redux/brand/actions';\r\n\r\nexport default function AddUpdateBrandDialog({ addUpdateOpen, setAddUpdateOpen, page, limit, search, brandName, setBrandName, brandId }) {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string()\r\n            .required('Brand Name is required!')\r\n            .max(42, 'Brand Name can not exceed 42 characters')\r\n            .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Brand name')\r\n    });\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            name: brandName\r\n        },\r\n        validationSchema,\r\n        onSubmit: (values) => {\r\n            if (brandName == '') {\r\n                dispatch(\r\n                    addBrand({\r\n                        name: values.name,\r\n                        search: search,\r\n                        page: page,\r\n                        limit: limit,\r\n                        handleClose: handleClose,\r\n                        setBrandName: setBrandName\r\n                    })\r\n                );\r\n            } else {\r\n                dispatch(\r\n                    updateBrand({\r\n                        brandId: brandId,\r\n                        name: values.name,\r\n                        page: page,\r\n                        limit: limit,\r\n                        search: search,\r\n\r\n                        handleClose: handleClose,\r\n                        setBrandName: setBrandName\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    });\r\n    const handleClose = () => {\r\n        setAddUpdateOpen(false);\r\n        setBrandName('');\r\n        formik.resetForm();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                className=\"responsiveDialog\"\r\n                open={addUpdateOpen}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                // onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title1\"\r\n                aria-describedby=\"alert-dialog-slide-description1\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title1\">{brandName == '' ? 'Add Brand' : 'Update Brand'}</DialogTitle>\r\n                <Divider />\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\r\n                        <TextField\r\n                            sx={{ marginTop: '25px' }}\r\n                            id=\"name\"\r\n                            name=\"name\"\r\n                            label=\"Enter Brand Name\"\r\n                            value={formik.values.name}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.name && Boolean(formik.errors.name)}\r\n                            helperText={formik.touched.name && formik.errors.name}\r\n                            fullWidth\r\n                            autoComplete=\"given-name\"\r\n                        />\r\n                    </form>\r\n                </DialogContent>\r\n                <Divider />\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button\r\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\r\n                        onClick={() => {\r\n                            handleClose();\r\n                        }}\r\n                        color=\"secondary\"\r\n                    >\r\n                        <FormattedMessage id=\"cancel\" />\r\n                    </Button>\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            formik.handleSubmit();\r\n                        }}\r\n                    >\r\n                        {brandName == '' ?\r\n                            'Add'\r\n                            : 'Update'}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n","import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nimport { forwardRef } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// constant\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                marginBottom: theme.spacing(gridSpacing),\r\n\r\n                borderColor: theme.palette.primary[200] + 75,\r\n                background: theme.palette.background.default\r\n            }}\r\n        >\r\n            <Box sx={{ padding: '13px 20px 22px 20px' }}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                    <Grid item>\r\n                        <Typography variant=\"h3\" sx={{ fontWeight: 500, color: '#000' }}>\r\n                            {title}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {value !== undefined && (\r\n                        <Grid item>\r\n                            {/* {options && (role == 'teacher' || role == 'super_admin') && ( */}\r\n                            <TextField\r\n                                id=\"standard-select-currency\"\r\n                                select\r\n                                value={value}\r\n                                onChange={(e) => setValue(e.target.value)}\r\n                                sx={{ width: '110px', height: '40px' }}\r\n                            >\r\n                                {options.map((option) => (\r\n                                    <MenuItem key={option.value} value={option.value}>\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                            {/* )} */}\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        </Card>\r\n    );\r\n});\r\n\r\nexport default HeadingCard;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport BrandTable from './component/brandTable';\r\nimport { Button, Typography, Grid, MenuItem, Menu, Pagination, OutlinedInput, InputAdornment, Divider  } from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { getAllBrands } from '../../../../redux/brand/actions';\r\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\r\nimport AddUpdateBrandDialog from './component/addUpdateBrand';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport HeadingCard from 'shared/Card/HeadingCard';\r\nconst Brands = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const [open, setOpen] = useState(false);\r\n    const brandsList = useSelector((state) => state.brand.brandsList);\r\n    console.log(brandsList.pages,\"===============brandsList.pages===========================>\");\r\n   \r\n    \r\n    const [search, setSearch] = useState('');\r\n    const [page, setPage] = useState(1);\r\n    const [limit, setLimit] = useState(10);\r\n    const [brandId, setBrandId] = useState();\r\n    const [brandName, setBrandName] = useState('');\r\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(\"run\")\r\n        dispatch(\r\n            getAllBrands({\r\n                search: search,\r\n                page: page,\r\n                limit: limit\r\n            })\r\n        );\r\n    }, [search, page, limit]);\r\n    return (\r\n        <>\r\n            <AddUpdateBrandDialog\r\n                brandId={brandId}\r\n                setBrandId={setBrandId}\r\n                brandName={brandName}\r\n                setBrandName={setBrandName}\r\n                page={page}\r\n                limit={limit}\r\n                search={search}\r\n                addUpdateOpen={addUpdateOpen}\r\n                setAddUpdateOpen={setAddUpdateOpen}\r\n            />\r\n            <HeadingCard title=\"Brand Management\" />\r\n            <MainCard\r\n                title={\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={6}>\r\n                            <OutlinedInput\r\n                                id=\"input-search-list-style1\"\r\n                                placeholder=\"Search\"\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"start\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                                size=\"small\"\r\n                                onChange={(e) => {\r\n                                    setSearch(e.target.value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6} textAlign=\"end\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    setAddUpdateOpen(true);\r\n\r\n                                    setBrandName('');\r\n                                }}\r\n                            >\r\n                                Add Brand\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={false}\r\n            >\r\n            {brandsList.brands != undefined && brandsList.count > 0 ? (\r\n                    <>\r\n                        <BrandTable\r\n                            brandsList={brandsList}\r\n                            page={page}\r\n                            limit={limit}\r\n                            search={search}\r\n                            setOpen={setOpen}\r\n                            brandId={brandId}\r\n                            setBrandId={setBrandId}\r\n                            setBrandName={setBrandName}\r\n                            setAddUpdateOpen={setAddUpdateOpen}\r\n                        />\r\n                        <Grid item xs={12} sx={{ p: 3 }}>\r\n                            <Grid container justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                                <Grid item>\r\n                                    <Pagination\r\n                                        color=\"primary\"\r\n                                        showFirstButton\r\n                                        showLastButton\r\n                                        page={page}\r\n                                        count={brandsList.totalPages}\r\n                                        onChange={(event, newPage) => {\r\n                                            setPage(newPage);\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button\r\n                                        size=\"large\"\r\n                                        sx={{ color: theme.palette.grey[900] }}\r\n                                        color=\"secondary\"\r\n                                        endIcon={<ExpandMoreRoundedIcon />}\r\n                                        onClick={handleClick}\r\n                                    >\r\n                                        {limit} Rows\r\n                                    </Button>\r\n                                    <Menu\r\n                                        id=\"menu-user-list-style1\"\r\n                                        anchorEl={anchorEl}\r\n                                        keepMounted\r\n                                        open={Boolean(anchorEl)}\r\n                                        onClose={handleCloseMenu}\r\n                                        variant=\"selectedMenu\"\r\n                                        anchorOrigin={{\r\n                                            vertical: 'top',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                        transformOrigin={{\r\n                                            vertical: 'bottom',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                    >\r\n                                        <MenuItem\r\n                                            value={10}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleCloseMenu();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            10 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={25}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleCloseMenu();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            25 Rows\r\n                                        </MenuItem>\r\n                                        <MenuItem\r\n                                            value={50}\r\n                                            onClick={(e) => {\r\n                                                setLimit(e.target.value);\r\n                                                setPage(1);\r\n                                                handleCloseMenu();\r\n                                            }}\r\n                                        >\r\n                                            {' '}\r\n                                            50 Rows{' '}\r\n                                        </MenuItem>\r\n                                    </Menu>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </>\r\n                    ) : (\r\n                        <>\r\n                            <Grid item md={12}>\r\n                                <Divider />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography style={{ padding: '20px', fontWeight: '800' }}> No Data Available</Typography>\r\n                            </Grid>\r\n                        </>\r\n                    )}\r\n            </MainCard>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Brands;\r\n"],"sourceRoot":""}